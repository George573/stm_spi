
stm_spi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005514  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08005714  08005714  00015714  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005790  08005790  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08005790  08005790  00015790  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005798  08005798  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005798  08005798  00015798  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800579c  0800579c  0001579c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080057a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002c4  20000068  08005808  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000032c  08005808  0002032c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020096  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000cdac  00000000  00000000  000200d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001f68  00000000  00000000  0002ce85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a58  00000000  00000000  0002edf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000007ea  00000000  00000000  0002f848  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002dcb1  00000000  00000000  00030032  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d2ac  00000000  00000000  0005dce3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00111d02  00000000  00000000  0006af8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003148  00000000  00000000  0017cc94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  0017fddc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000068 	.word	0x20000068
 800021c:	00000000 	.word	0x00000000
 8000220:	080056fc 	.word	0x080056fc

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000006c 	.word	0x2000006c
 800023c:	080056fc 	.word	0x080056fc

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002f4:	f000 b970 	b.w	80005d8 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9e08      	ldr	r6, [sp, #32]
 8000316:	460d      	mov	r5, r1
 8000318:	4604      	mov	r4, r0
 800031a:	460f      	mov	r7, r1
 800031c:	2b00      	cmp	r3, #0
 800031e:	d14a      	bne.n	80003b6 <__udivmoddi4+0xa6>
 8000320:	428a      	cmp	r2, r1
 8000322:	4694      	mov	ip, r2
 8000324:	d965      	bls.n	80003f2 <__udivmoddi4+0xe2>
 8000326:	fab2 f382 	clz	r3, r2
 800032a:	b143      	cbz	r3, 800033e <__udivmoddi4+0x2e>
 800032c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000330:	f1c3 0220 	rsb	r2, r3, #32
 8000334:	409f      	lsls	r7, r3
 8000336:	fa20 f202 	lsr.w	r2, r0, r2
 800033a:	4317      	orrs	r7, r2
 800033c:	409c      	lsls	r4, r3
 800033e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000342:	fa1f f58c 	uxth.w	r5, ip
 8000346:	fbb7 f1fe 	udiv	r1, r7, lr
 800034a:	0c22      	lsrs	r2, r4, #16
 800034c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000350:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000354:	fb01 f005 	mul.w	r0, r1, r5
 8000358:	4290      	cmp	r0, r2
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x62>
 800035c:	eb1c 0202 	adds.w	r2, ip, r2
 8000360:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000364:	f080 811c 	bcs.w	80005a0 <__udivmoddi4+0x290>
 8000368:	4290      	cmp	r0, r2
 800036a:	f240 8119 	bls.w	80005a0 <__udivmoddi4+0x290>
 800036e:	3902      	subs	r1, #2
 8000370:	4462      	add	r2, ip
 8000372:	1a12      	subs	r2, r2, r0
 8000374:	b2a4      	uxth	r4, r4
 8000376:	fbb2 f0fe 	udiv	r0, r2, lr
 800037a:	fb0e 2210 	mls	r2, lr, r0, r2
 800037e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000382:	fb00 f505 	mul.w	r5, r0, r5
 8000386:	42a5      	cmp	r5, r4
 8000388:	d90a      	bls.n	80003a0 <__udivmoddi4+0x90>
 800038a:	eb1c 0404 	adds.w	r4, ip, r4
 800038e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000392:	f080 8107 	bcs.w	80005a4 <__udivmoddi4+0x294>
 8000396:	42a5      	cmp	r5, r4
 8000398:	f240 8104 	bls.w	80005a4 <__udivmoddi4+0x294>
 800039c:	4464      	add	r4, ip
 800039e:	3802      	subs	r0, #2
 80003a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003a4:	1b64      	subs	r4, r4, r5
 80003a6:	2100      	movs	r1, #0
 80003a8:	b11e      	cbz	r6, 80003b2 <__udivmoddi4+0xa2>
 80003aa:	40dc      	lsrs	r4, r3
 80003ac:	2300      	movs	r3, #0
 80003ae:	e9c6 4300 	strd	r4, r3, [r6]
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0xbc>
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	f000 80ed 	beq.w	800059a <__udivmoddi4+0x28a>
 80003c0:	2100      	movs	r1, #0
 80003c2:	e9c6 0500 	strd	r0, r5, [r6]
 80003c6:	4608      	mov	r0, r1
 80003c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003cc:	fab3 f183 	clz	r1, r3
 80003d0:	2900      	cmp	r1, #0
 80003d2:	d149      	bne.n	8000468 <__udivmoddi4+0x158>
 80003d4:	42ab      	cmp	r3, r5
 80003d6:	d302      	bcc.n	80003de <__udivmoddi4+0xce>
 80003d8:	4282      	cmp	r2, r0
 80003da:	f200 80f8 	bhi.w	80005ce <__udivmoddi4+0x2be>
 80003de:	1a84      	subs	r4, r0, r2
 80003e0:	eb65 0203 	sbc.w	r2, r5, r3
 80003e4:	2001      	movs	r0, #1
 80003e6:	4617      	mov	r7, r2
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d0e2      	beq.n	80003b2 <__udivmoddi4+0xa2>
 80003ec:	e9c6 4700 	strd	r4, r7, [r6]
 80003f0:	e7df      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003f2:	b902      	cbnz	r2, 80003f6 <__udivmoddi4+0xe6>
 80003f4:	deff      	udf	#255	; 0xff
 80003f6:	fab2 f382 	clz	r3, r2
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	f040 8090 	bne.w	8000520 <__udivmoddi4+0x210>
 8000400:	1a8a      	subs	r2, r1, r2
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2101      	movs	r1, #1
 800040c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000410:	fb07 2015 	mls	r0, r7, r5, r2
 8000414:	0c22      	lsrs	r2, r4, #16
 8000416:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800041a:	fb0e f005 	mul.w	r0, lr, r5
 800041e:	4290      	cmp	r0, r2
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x124>
 8000422:	eb1c 0202 	adds.w	r2, ip, r2
 8000426:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x122>
 800042c:	4290      	cmp	r0, r2
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2b8>
 8000432:	4645      	mov	r5, r8
 8000434:	1a12      	subs	r2, r2, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb2 f0f7 	udiv	r0, r2, r7
 800043c:	fb07 2210 	mls	r2, r7, r0, r2
 8000440:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x14e>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x14c>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2c2>
 800045c:	4610      	mov	r0, r2
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000466:	e79f      	b.n	80003a8 <__udivmoddi4+0x98>
 8000468:	f1c1 0720 	rsb	r7, r1, #32
 800046c:	408b      	lsls	r3, r1
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa05 f401 	lsl.w	r4, r5, r1
 800047a:	fa20 f307 	lsr.w	r3, r0, r7
 800047e:	40fd      	lsrs	r5, r7
 8000480:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000484:	4323      	orrs	r3, r4
 8000486:	fbb5 f8f9 	udiv	r8, r5, r9
 800048a:	fa1f fe8c 	uxth.w	lr, ip
 800048e:	fb09 5518 	mls	r5, r9, r8, r5
 8000492:	0c1c      	lsrs	r4, r3, #16
 8000494:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000498:	fb08 f50e 	mul.w	r5, r8, lr
 800049c:	42a5      	cmp	r5, r4
 800049e:	fa02 f201 	lsl.w	r2, r2, r1
 80004a2:	fa00 f001 	lsl.w	r0, r0, r1
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b0>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2b4>
 80004b4:	42a5      	cmp	r5, r4
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2b4>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4464      	add	r4, ip
 80004c0:	1b64      	subs	r4, r4, r5
 80004c2:	b29d      	uxth	r5, r3
 80004c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004c8:	fb09 4413 	mls	r4, r9, r3, r4
 80004cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004d4:	45a6      	cmp	lr, r4
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1da>
 80004d8:	eb1c 0404 	adds.w	r4, ip, r4
 80004dc:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2ac>
 80004e2:	45a6      	cmp	lr, r4
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2ac>
 80004e6:	3b02      	subs	r3, #2
 80004e8:	4464      	add	r4, ip
 80004ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ee:	fba3 9502 	umull	r9, r5, r3, r2
 80004f2:	eba4 040e 	sub.w	r4, r4, lr
 80004f6:	42ac      	cmp	r4, r5
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46ae      	mov	lr, r5
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x29c>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x298>
 8000500:	b156      	cbz	r6, 8000518 <__udivmoddi4+0x208>
 8000502:	ebb0 0208 	subs.w	r2, r0, r8
 8000506:	eb64 040e 	sbc.w	r4, r4, lr
 800050a:	fa04 f707 	lsl.w	r7, r4, r7
 800050e:	40ca      	lsrs	r2, r1
 8000510:	40cc      	lsrs	r4, r1
 8000512:	4317      	orrs	r7, r2
 8000514:	e9c6 7400 	strd	r7, r4, [r6]
 8000518:	4618      	mov	r0, r3
 800051a:	2100      	movs	r1, #0
 800051c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000520:	f1c3 0120 	rsb	r1, r3, #32
 8000524:	fa02 fc03 	lsl.w	ip, r2, r3
 8000528:	fa20 f201 	lsr.w	r2, r0, r1
 800052c:	fa25 f101 	lsr.w	r1, r5, r1
 8000530:	409d      	lsls	r5, r3
 8000532:	432a      	orrs	r2, r5
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000540:	fb07 1510 	mls	r5, r7, r0, r1
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800054a:	fb00 f50e 	mul.w	r5, r0, lr
 800054e:	428d      	cmp	r5, r1
 8000550:	fa04 f403 	lsl.w	r4, r4, r3
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x258>
 8000556:	eb1c 0101 	adds.w	r1, ip, r1
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000560:	428d      	cmp	r5, r1
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000564:	3802      	subs	r0, #2
 8000566:	4461      	add	r1, ip
 8000568:	1b49      	subs	r1, r1, r5
 800056a:	b292      	uxth	r2, r2
 800056c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000570:	fb07 1115 	mls	r1, r7, r5, r1
 8000574:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000578:	fb05 f10e 	mul.w	r1, r5, lr
 800057c:	4291      	cmp	r1, r2
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x282>
 8000580:	eb1c 0202 	adds.w	r2, ip, r2
 8000584:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 800058a:	4291      	cmp	r1, r2
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800058e:	3d02      	subs	r5, #2
 8000590:	4462      	add	r2, ip
 8000592:	1a52      	subs	r2, r2, r1
 8000594:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0xfc>
 800059a:	4631      	mov	r1, r6
 800059c:	4630      	mov	r0, r6
 800059e:	e708      	b.n	80003b2 <__udivmoddi4+0xa2>
 80005a0:	4639      	mov	r1, r7
 80005a2:	e6e6      	b.n	8000372 <__udivmoddi4+0x62>
 80005a4:	4610      	mov	r0, r2
 80005a6:	e6fb      	b.n	80003a0 <__udivmoddi4+0x90>
 80005a8:	4548      	cmp	r0, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f0>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005b4:	3b01      	subs	r3, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f0>
 80005b8:	4645      	mov	r5, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x282>
 80005bc:	462b      	mov	r3, r5
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1da>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x258>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b0>
 80005c8:	3d02      	subs	r5, #2
 80005ca:	4462      	add	r2, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x124>
 80005ce:	4608      	mov	r0, r1
 80005d0:	e70a      	b.n	80003e8 <__udivmoddi4+0xd8>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x14e>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b084      	sub	sp, #16
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	60f8      	str	r0, [r7, #12]
 80005e4:	60b9      	str	r1, [r7, #8]
 80005e6:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)ptr, len, 100);
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	b29a      	uxth	r2, r3
 80005ec:	2364      	movs	r3, #100	; 0x64
 80005ee:	68b9      	ldr	r1, [r7, #8]
 80005f0:	4803      	ldr	r0, [pc, #12]	; (8000600 <_write+0x24>)
 80005f2:	f003 f89e 	bl	8003732 <HAL_UART_Transmit>
	return len;
 80005f6:	687b      	ldr	r3, [r7, #4]
}
 80005f8:	4618      	mov	r0, r3
 80005fa:	3710      	adds	r7, #16
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	2000014c 	.word	0x2000014c

08000604 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b082      	sub	sp, #8
 8000608:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800060a:	f000 fbd0 	bl	8000dae <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800060e:	f000 f821 	bl	8000654 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000612:	f000 f923 	bl	800085c <MX_GPIO_Init>
  MX_SPI2_Init();
 8000616:	f000 f879 	bl	800070c <MX_SPI2_Init>
  MX_SPI5_Init();
 800061a:	f000 f8b5 	bl	8000788 <MX_SPI5_Init>
  MX_USART1_UART_Init();
 800061e:	f000 f8ed 	bl	80007fc <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  uint16_t data = 123;
 8000622:	237b      	movs	r3, #123	; 0x7b
 8000624:	80fb      	strh	r3, [r7, #6]
//	  my_spi_set_reg(HYSTERESIS, 21u & (uint16_t)HYSTERESIS_MASK);
//	  data = my_spi_read_reg(HYSTERESIS);
//	  if (data == WRONG_ADRESS || data == WRONG_VAL)
//		  pintf("ERROR\r\n");
//	  printf("%d\r\n", data);
	  HAL_SPI_Transmit_IT(&hspi5, (uint8_t*) &data, 2);
 8000626:	1dbb      	adds	r3, r7, #6
 8000628:	2202      	movs	r2, #2
 800062a:	4619      	mov	r1, r3
 800062c:	4806      	ldr	r0, [pc, #24]	; (8000648 <main+0x44>)
 800062e:	f002 f8d3 	bl	80027d8 <HAL_SPI_Transmit_IT>
	  HAL_SPI_Receive_IT(&hspi2, (uint8_t*) &sdata, 2);
 8000632:	1d3b      	adds	r3, r7, #4
 8000634:	2202      	movs	r2, #2
 8000636:	4619      	mov	r1, r3
 8000638:	4804      	ldr	r0, [pc, #16]	; (800064c <main+0x48>)
 800063a:	f002 f95b 	bl	80028f4 <HAL_SPI_Receive_IT>
	  printf("Pook");
 800063e:	4804      	ldr	r0, [pc, #16]	; (8000650 <main+0x4c>)
 8000640:	f004 f98c 	bl	800495c <iprintf>
	  HAL_SPI_Transmit_IT(&hspi5, (uint8_t*) &data, 2);
 8000644:	e7ef      	b.n	8000626 <main+0x22>
 8000646:	bf00      	nop
 8000648:	200000e8 	.word	0x200000e8
 800064c:	20000084 	.word	0x20000084
 8000650:	08005714 	.word	0x08005714

08000654 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b094      	sub	sp, #80	; 0x50
 8000658:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800065a:	f107 031c 	add.w	r3, r7, #28
 800065e:	2234      	movs	r2, #52	; 0x34
 8000660:	2100      	movs	r1, #0
 8000662:	4618      	mov	r0, r3
 8000664:	f004 fac0 	bl	8004be8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000668:	f107 0308 	add.w	r3, r7, #8
 800066c:	2200      	movs	r2, #0
 800066e:	601a      	str	r2, [r3, #0]
 8000670:	605a      	str	r2, [r3, #4]
 8000672:	609a      	str	r2, [r3, #8]
 8000674:	60da      	str	r2, [r3, #12]
 8000676:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000678:	4b22      	ldr	r3, [pc, #136]	; (8000704 <SystemClock_Config+0xb0>)
 800067a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800067c:	4a21      	ldr	r2, [pc, #132]	; (8000704 <SystemClock_Config+0xb0>)
 800067e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000682:	6413      	str	r3, [r2, #64]	; 0x40
 8000684:	4b1f      	ldr	r3, [pc, #124]	; (8000704 <SystemClock_Config+0xb0>)
 8000686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000688:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800068c:	607b      	str	r3, [r7, #4]
 800068e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000690:	4b1d      	ldr	r3, [pc, #116]	; (8000708 <SystemClock_Config+0xb4>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000698:	4a1b      	ldr	r2, [pc, #108]	; (8000708 <SystemClock_Config+0xb4>)
 800069a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800069e:	6013      	str	r3, [r2, #0]
 80006a0:	4b19      	ldr	r3, [pc, #100]	; (8000708 <SystemClock_Config+0xb4>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006a8:	603b      	str	r3, [r7, #0]
 80006aa:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006ac:	2302      	movs	r3, #2
 80006ae:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006b0:	2301      	movs	r3, #1
 80006b2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006b4:	2310      	movs	r3, #16
 80006b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006b8:	2300      	movs	r3, #0
 80006ba:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006bc:	f107 031c 	add.w	r3, r7, #28
 80006c0:	4618      	mov	r0, r3
 80006c2:	f000 ff21 	bl	8001508 <HAL_RCC_OscConfig>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 80006cc:	f000 f8f6 	bl	80008bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d0:	230f      	movs	r3, #15
 80006d2:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006d4:	2300      	movs	r3, #0
 80006d6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006d8:	2300      	movs	r3, #0
 80006da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006dc:	2300      	movs	r3, #0
 80006de:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006e0:	2300      	movs	r3, #0
 80006e2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006e4:	f107 0308 	add.w	r3, r7, #8
 80006e8:	2100      	movs	r1, #0
 80006ea:	4618      	mov	r0, r3
 80006ec:	f001 f9ba 	bl	8001a64 <HAL_RCC_ClockConfig>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80006f6:	f000 f8e1 	bl	80008bc <Error_Handler>
  }
}
 80006fa:	bf00      	nop
 80006fc:	3750      	adds	r7, #80	; 0x50
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	40023800 	.word	0x40023800
 8000708:	40007000 	.word	0x40007000

0800070c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000710:	4b1b      	ldr	r3, [pc, #108]	; (8000780 <MX_SPI2_Init+0x74>)
 8000712:	4a1c      	ldr	r2, [pc, #112]	; (8000784 <MX_SPI2_Init+0x78>)
 8000714:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000716:	4b1a      	ldr	r3, [pc, #104]	; (8000780 <MX_SPI2_Init+0x74>)
 8000718:	f44f 7282 	mov.w	r2, #260	; 0x104
 800071c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800071e:	4b18      	ldr	r3, [pc, #96]	; (8000780 <MX_SPI2_Init+0x74>)
 8000720:	2200      	movs	r2, #0
 8000722:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8000724:	4b16      	ldr	r3, [pc, #88]	; (8000780 <MX_SPI2_Init+0x74>)
 8000726:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 800072a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800072c:	4b14      	ldr	r3, [pc, #80]	; (8000780 <MX_SPI2_Init+0x74>)
 800072e:	2200      	movs	r2, #0
 8000730:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000732:	4b13      	ldr	r3, [pc, #76]	; (8000780 <MX_SPI2_Init+0x74>)
 8000734:	2200      	movs	r2, #0
 8000736:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000738:	4b11      	ldr	r3, [pc, #68]	; (8000780 <MX_SPI2_Init+0x74>)
 800073a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800073e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000740:	4b0f      	ldr	r3, [pc, #60]	; (8000780 <MX_SPI2_Init+0x74>)
 8000742:	2200      	movs	r2, #0
 8000744:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000746:	4b0e      	ldr	r3, [pc, #56]	; (8000780 <MX_SPI2_Init+0x74>)
 8000748:	2200      	movs	r2, #0
 800074a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800074c:	4b0c      	ldr	r3, [pc, #48]	; (8000780 <MX_SPI2_Init+0x74>)
 800074e:	2200      	movs	r2, #0
 8000750:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000752:	4b0b      	ldr	r3, [pc, #44]	; (8000780 <MX_SPI2_Init+0x74>)
 8000754:	2200      	movs	r2, #0
 8000756:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000758:	4b09      	ldr	r3, [pc, #36]	; (8000780 <MX_SPI2_Init+0x74>)
 800075a:	2207      	movs	r2, #7
 800075c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800075e:	4b08      	ldr	r3, [pc, #32]	; (8000780 <MX_SPI2_Init+0x74>)
 8000760:	2200      	movs	r2, #0
 8000762:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000764:	4b06      	ldr	r3, [pc, #24]	; (8000780 <MX_SPI2_Init+0x74>)
 8000766:	2208      	movs	r2, #8
 8000768:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800076a:	4805      	ldr	r0, [pc, #20]	; (8000780 <MX_SPI2_Init+0x74>)
 800076c:	f001 ff88 	bl	8002680 <HAL_SPI_Init>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000776:	f000 f8a1 	bl	80008bc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800077a:	bf00      	nop
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	20000084 	.word	0x20000084
 8000784:	40003800 	.word	0x40003800

08000788 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 800078c:	4b19      	ldr	r3, [pc, #100]	; (80007f4 <MX_SPI5_Init+0x6c>)
 800078e:	4a1a      	ldr	r2, [pc, #104]	; (80007f8 <MX_SPI5_Init+0x70>)
 8000790:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_SLAVE;
 8000792:	4b18      	ldr	r3, [pc, #96]	; (80007f4 <MX_SPI5_Init+0x6c>)
 8000794:	2200      	movs	r2, #0
 8000796:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8000798:	4b16      	ldr	r3, [pc, #88]	; (80007f4 <MX_SPI5_Init+0x6c>)
 800079a:	2200      	movs	r2, #0
 800079c:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_16BIT;
 800079e:	4b15      	ldr	r3, [pc, #84]	; (80007f4 <MX_SPI5_Init+0x6c>)
 80007a0:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 80007a4:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007a6:	4b13      	ldr	r3, [pc, #76]	; (80007f4 <MX_SPI5_Init+0x6c>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007ac:	4b11      	ldr	r3, [pc, #68]	; (80007f4 <MX_SPI5_Init+0x6c>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 80007b2:	4b10      	ldr	r3, [pc, #64]	; (80007f4 <MX_SPI5_Init+0x6c>)
 80007b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007b8:	619a      	str	r2, [r3, #24]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007ba:	4b0e      	ldr	r3, [pc, #56]	; (80007f4 <MX_SPI5_Init+0x6c>)
 80007bc:	2200      	movs	r2, #0
 80007be:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 80007c0:	4b0c      	ldr	r3, [pc, #48]	; (80007f4 <MX_SPI5_Init+0x6c>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007c6:	4b0b      	ldr	r3, [pc, #44]	; (80007f4 <MX_SPI5_Init+0x6c>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 7;
 80007cc:	4b09      	ldr	r3, [pc, #36]	; (80007f4 <MX_SPI5_Init+0x6c>)
 80007ce:	2207      	movs	r2, #7
 80007d0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi5.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80007d2:	4b08      	ldr	r3, [pc, #32]	; (80007f4 <MX_SPI5_Init+0x6c>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80007d8:	4b06      	ldr	r3, [pc, #24]	; (80007f4 <MX_SPI5_Init+0x6c>)
 80007da:	2200      	movs	r2, #0
 80007dc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 80007de:	4805      	ldr	r0, [pc, #20]	; (80007f4 <MX_SPI5_Init+0x6c>)
 80007e0:	f001 ff4e 	bl	8002680 <HAL_SPI_Init>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <MX_SPI5_Init+0x66>
  {
    Error_Handler();
 80007ea:	f000 f867 	bl	80008bc <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 80007ee:	bf00      	nop
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	200000e8 	.word	0x200000e8
 80007f8:	40015000 	.word	0x40015000

080007fc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000800:	4b14      	ldr	r3, [pc, #80]	; (8000854 <MX_USART1_UART_Init+0x58>)
 8000802:	4a15      	ldr	r2, [pc, #84]	; (8000858 <MX_USART1_UART_Init+0x5c>)
 8000804:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000806:	4b13      	ldr	r3, [pc, #76]	; (8000854 <MX_USART1_UART_Init+0x58>)
 8000808:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800080c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800080e:	4b11      	ldr	r3, [pc, #68]	; (8000854 <MX_USART1_UART_Init+0x58>)
 8000810:	2200      	movs	r2, #0
 8000812:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000814:	4b0f      	ldr	r3, [pc, #60]	; (8000854 <MX_USART1_UART_Init+0x58>)
 8000816:	2200      	movs	r2, #0
 8000818:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800081a:	4b0e      	ldr	r3, [pc, #56]	; (8000854 <MX_USART1_UART_Init+0x58>)
 800081c:	2200      	movs	r2, #0
 800081e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000820:	4b0c      	ldr	r3, [pc, #48]	; (8000854 <MX_USART1_UART_Init+0x58>)
 8000822:	220c      	movs	r2, #12
 8000824:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000826:	4b0b      	ldr	r3, [pc, #44]	; (8000854 <MX_USART1_UART_Init+0x58>)
 8000828:	2200      	movs	r2, #0
 800082a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800082c:	4b09      	ldr	r3, [pc, #36]	; (8000854 <MX_USART1_UART_Init+0x58>)
 800082e:	2200      	movs	r2, #0
 8000830:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000832:	4b08      	ldr	r3, [pc, #32]	; (8000854 <MX_USART1_UART_Init+0x58>)
 8000834:	2200      	movs	r2, #0
 8000836:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000838:	4b06      	ldr	r3, [pc, #24]	; (8000854 <MX_USART1_UART_Init+0x58>)
 800083a:	2200      	movs	r2, #0
 800083c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800083e:	4805      	ldr	r0, [pc, #20]	; (8000854 <MX_USART1_UART_Init+0x58>)
 8000840:	f002 ff29 	bl	8003696 <HAL_UART_Init>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800084a:	f000 f837 	bl	80008bc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800084e:	bf00      	nop
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	2000014c 	.word	0x2000014c
 8000858:	40011000 	.word	0x40011000

0800085c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800085c:	b480      	push	{r7}
 800085e:	b085      	sub	sp, #20
 8000860:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000862:	4b15      	ldr	r3, [pc, #84]	; (80008b8 <MX_GPIO_Init+0x5c>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	4a14      	ldr	r2, [pc, #80]	; (80008b8 <MX_GPIO_Init+0x5c>)
 8000868:	f043 0302 	orr.w	r3, r3, #2
 800086c:	6313      	str	r3, [r2, #48]	; 0x30
 800086e:	4b12      	ldr	r3, [pc, #72]	; (80008b8 <MX_GPIO_Init+0x5c>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000872:	f003 0302 	and.w	r3, r3, #2
 8000876:	60fb      	str	r3, [r7, #12]
 8000878:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800087a:	4b0f      	ldr	r3, [pc, #60]	; (80008b8 <MX_GPIO_Init+0x5c>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087e:	4a0e      	ldr	r2, [pc, #56]	; (80008b8 <MX_GPIO_Init+0x5c>)
 8000880:	f043 0301 	orr.w	r3, r3, #1
 8000884:	6313      	str	r3, [r2, #48]	; 0x30
 8000886:	4b0c      	ldr	r3, [pc, #48]	; (80008b8 <MX_GPIO_Init+0x5c>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088a:	f003 0301 	and.w	r3, r3, #1
 800088e:	60bb      	str	r3, [r7, #8]
 8000890:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000892:	4b09      	ldr	r3, [pc, #36]	; (80008b8 <MX_GPIO_Init+0x5c>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000896:	4a08      	ldr	r2, [pc, #32]	; (80008b8 <MX_GPIO_Init+0x5c>)
 8000898:	f043 0320 	orr.w	r3, r3, #32
 800089c:	6313      	str	r3, [r2, #48]	; 0x30
 800089e:	4b06      	ldr	r3, [pc, #24]	; (80008b8 <MX_GPIO_Init+0x5c>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	f003 0320 	and.w	r3, r3, #32
 80008a6:	607b      	str	r3, [r7, #4]
 80008a8:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008aa:	bf00      	nop
 80008ac:	3714      	adds	r7, #20
 80008ae:	46bd      	mov	sp, r7
 80008b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b4:	4770      	bx	lr
 80008b6:	bf00      	nop
 80008b8:	40023800 	.word	0x40023800

080008bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008c0:	b672      	cpsid	i
}
 80008c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008c4:	e7fe      	b.n	80008c4 <Error_Handler+0x8>
	...

080008c8 <HAL_SPI_TxCpltCallback>:

SPI_HandleTypeDef* master_spi;
SPI_HandleTypeDef* slave_spi;

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b082      	sub	sp, #8
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
	if (hspi->Instance == master_spi->Instance) {
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	681a      	ldr	r2, [r3, #0]
 80008d4:	4b07      	ldr	r3, [pc, #28]	; (80008f4 <HAL_SPI_TxCpltCallback+0x2c>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	429a      	cmp	r2, r3
 80008dc:	d103      	bne.n	80008e6 <HAL_SPI_TxCpltCallback+0x1e>
		printf("Master T callback\r\n");
 80008de:	4806      	ldr	r0, [pc, #24]	; (80008f8 <HAL_SPI_TxCpltCallback+0x30>)
 80008e0:	f004 f8a2 	bl	8004a28 <puts>
	} else {
		printf("Slave T callback\r\n");
	}
}
 80008e4:	e002      	b.n	80008ec <HAL_SPI_TxCpltCallback+0x24>
		printf("Slave T callback\r\n");
 80008e6:	4805      	ldr	r0, [pc, #20]	; (80008fc <HAL_SPI_TxCpltCallback+0x34>)
 80008e8:	f004 f89e 	bl	8004a28 <puts>
}
 80008ec:	bf00      	nop
 80008ee:	3708      	adds	r7, #8
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	200001d4 	.word	0x200001d4
 80008f8:	0800571c 	.word	0x0800571c
 80008fc:	08005730 	.word	0x08005730

08000900 <HAL_SPI_ErrorCallback>:

void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
	if (hspi->Instance == master_spi->Instance) {
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	681a      	ldr	r2, [r3, #0]
 800090c:	4b07      	ldr	r3, [pc, #28]	; (800092c <HAL_SPI_ErrorCallback+0x2c>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	429a      	cmp	r2, r3
 8000914:	d103      	bne.n	800091e <HAL_SPI_ErrorCallback+0x1e>
			printf("Master T callback\r\n");
 8000916:	4806      	ldr	r0, [pc, #24]	; (8000930 <HAL_SPI_ErrorCallback+0x30>)
 8000918:	f004 f886 	bl	8004a28 <puts>
	} else {
			printf("Slave T callback\r\n");
	}
}
 800091c:	e002      	b.n	8000924 <HAL_SPI_ErrorCallback+0x24>
			printf("Slave T callback\r\n");
 800091e:	4805      	ldr	r0, [pc, #20]	; (8000934 <HAL_SPI_ErrorCallback+0x34>)
 8000920:	f004 f882 	bl	8004a28 <puts>
}
 8000924:	bf00      	nop
 8000926:	3708      	adds	r7, #8
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	200001d4 	.word	0x200001d4
 8000930:	0800571c 	.word	0x0800571c
 8000934:	08005730 	.word	0x08005730

08000938 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000938:	b480      	push	{r7}
 800093a:	b083      	sub	sp, #12
 800093c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800093e:	4b0f      	ldr	r3, [pc, #60]	; (800097c <HAL_MspInit+0x44>)
 8000940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000942:	4a0e      	ldr	r2, [pc, #56]	; (800097c <HAL_MspInit+0x44>)
 8000944:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000948:	6413      	str	r3, [r2, #64]	; 0x40
 800094a:	4b0c      	ldr	r3, [pc, #48]	; (800097c <HAL_MspInit+0x44>)
 800094c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800094e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000952:	607b      	str	r3, [r7, #4]
 8000954:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000956:	4b09      	ldr	r3, [pc, #36]	; (800097c <HAL_MspInit+0x44>)
 8000958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800095a:	4a08      	ldr	r2, [pc, #32]	; (800097c <HAL_MspInit+0x44>)
 800095c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000960:	6453      	str	r3, [r2, #68]	; 0x44
 8000962:	4b06      	ldr	r3, [pc, #24]	; (800097c <HAL_MspInit+0x44>)
 8000964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000966:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800096a:	603b      	str	r3, [r7, #0]
 800096c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800096e:	bf00      	nop
 8000970:	370c      	adds	r7, #12
 8000972:	46bd      	mov	sp, r7
 8000974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000978:	4770      	bx	lr
 800097a:	bf00      	nop
 800097c:	40023800 	.word	0x40023800

08000980 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b08c      	sub	sp, #48	; 0x30
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000988:	f107 031c 	add.w	r3, r7, #28
 800098c:	2200      	movs	r2, #0
 800098e:	601a      	str	r2, [r3, #0]
 8000990:	605a      	str	r2, [r3, #4]
 8000992:	609a      	str	r2, [r3, #8]
 8000994:	60da      	str	r2, [r3, #12]
 8000996:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	4a45      	ldr	r2, [pc, #276]	; (8000ab4 <HAL_SPI_MspInit+0x134>)
 800099e:	4293      	cmp	r3, r2
 80009a0:	d14e      	bne.n	8000a40 <HAL_SPI_MspInit+0xc0>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80009a2:	4b45      	ldr	r3, [pc, #276]	; (8000ab8 <HAL_SPI_MspInit+0x138>)
 80009a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009a6:	4a44      	ldr	r2, [pc, #272]	; (8000ab8 <HAL_SPI_MspInit+0x138>)
 80009a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009ac:	6413      	str	r3, [r2, #64]	; 0x40
 80009ae:	4b42      	ldr	r3, [pc, #264]	; (8000ab8 <HAL_SPI_MspInit+0x138>)
 80009b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009b6:	61bb      	str	r3, [r7, #24]
 80009b8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ba:	4b3f      	ldr	r3, [pc, #252]	; (8000ab8 <HAL_SPI_MspInit+0x138>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009be:	4a3e      	ldr	r2, [pc, #248]	; (8000ab8 <HAL_SPI_MspInit+0x138>)
 80009c0:	f043 0301 	orr.w	r3, r3, #1
 80009c4:	6313      	str	r3, [r2, #48]	; 0x30
 80009c6:	4b3c      	ldr	r3, [pc, #240]	; (8000ab8 <HAL_SPI_MspInit+0x138>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ca:	f003 0301 	and.w	r3, r3, #1
 80009ce:	617b      	str	r3, [r7, #20]
 80009d0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009d2:	4b39      	ldr	r3, [pc, #228]	; (8000ab8 <HAL_SPI_MspInit+0x138>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d6:	4a38      	ldr	r2, [pc, #224]	; (8000ab8 <HAL_SPI_MspInit+0x138>)
 80009d8:	f043 0302 	orr.w	r3, r3, #2
 80009dc:	6313      	str	r3, [r2, #48]	; 0x30
 80009de:	4b36      	ldr	r3, [pc, #216]	; (8000ab8 <HAL_SPI_MspInit+0x138>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e2:	f003 0302 	and.w	r3, r3, #2
 80009e6:	613b      	str	r3, [r7, #16]
 80009e8:	693b      	ldr	r3, [r7, #16]
    /**SPI2 GPIO Configuration
    PA12     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80009ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f0:	2302      	movs	r3, #2
 80009f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f4:	2300      	movs	r3, #0
 80009f6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009f8:	2303      	movs	r3, #3
 80009fa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009fc:	2305      	movs	r3, #5
 80009fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a00:	f107 031c 	add.w	r3, r7, #28
 8000a04:	4619      	mov	r1, r3
 8000a06:	482d      	ldr	r0, [pc, #180]	; (8000abc <HAL_SPI_MspInit+0x13c>)
 8000a08:	f000 fbd2 	bl	80011b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000a0c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000a10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a12:	2302      	movs	r3, #2
 8000a14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a16:	2300      	movs	r3, #0
 8000a18:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a1a:	2303      	movs	r3, #3
 8000a1c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a1e:	2305      	movs	r3, #5
 8000a20:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a22:	f107 031c 	add.w	r3, r7, #28
 8000a26:	4619      	mov	r1, r3
 8000a28:	4825      	ldr	r0, [pc, #148]	; (8000ac0 <HAL_SPI_MspInit+0x140>)
 8000a2a:	f000 fbc1 	bl	80011b0 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8000a2e:	2200      	movs	r2, #0
 8000a30:	2100      	movs	r1, #0
 8000a32:	2024      	movs	r0, #36	; 0x24
 8000a34:	f000 faf3 	bl	800101e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8000a38:	2024      	movs	r0, #36	; 0x24
 8000a3a:	f000 fb0c 	bl	8001056 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8000a3e:	e035      	b.n	8000aac <HAL_SPI_MspInit+0x12c>
  else if(hspi->Instance==SPI5)
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	4a1f      	ldr	r2, [pc, #124]	; (8000ac4 <HAL_SPI_MspInit+0x144>)
 8000a46:	4293      	cmp	r3, r2
 8000a48:	d130      	bne.n	8000aac <HAL_SPI_MspInit+0x12c>
    __HAL_RCC_SPI5_CLK_ENABLE();
 8000a4a:	4b1b      	ldr	r3, [pc, #108]	; (8000ab8 <HAL_SPI_MspInit+0x138>)
 8000a4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a4e:	4a1a      	ldr	r2, [pc, #104]	; (8000ab8 <HAL_SPI_MspInit+0x138>)
 8000a50:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000a54:	6453      	str	r3, [r2, #68]	; 0x44
 8000a56:	4b18      	ldr	r3, [pc, #96]	; (8000ab8 <HAL_SPI_MspInit+0x138>)
 8000a58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a5e:	60fb      	str	r3, [r7, #12]
 8000a60:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a62:	4b15      	ldr	r3, [pc, #84]	; (8000ab8 <HAL_SPI_MspInit+0x138>)
 8000a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a66:	4a14      	ldr	r2, [pc, #80]	; (8000ab8 <HAL_SPI_MspInit+0x138>)
 8000a68:	f043 0320 	orr.w	r3, r3, #32
 8000a6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a6e:	4b12      	ldr	r3, [pc, #72]	; (8000ab8 <HAL_SPI_MspInit+0x138>)
 8000a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a72:	f003 0320 	and.w	r3, r3, #32
 8000a76:	60bb      	str	r3, [r7, #8]
 8000a78:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_8;
 8000a7a:	f44f 7360 	mov.w	r3, #896	; 0x380
 8000a7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a80:	2302      	movs	r3, #2
 8000a82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a84:	2300      	movs	r3, #0
 8000a86:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a88:	2303      	movs	r3, #3
 8000a8a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8000a8c:	2305      	movs	r3, #5
 8000a8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000a90:	f107 031c 	add.w	r3, r7, #28
 8000a94:	4619      	mov	r1, r3
 8000a96:	480c      	ldr	r0, [pc, #48]	; (8000ac8 <HAL_SPI_MspInit+0x148>)
 8000a98:	f000 fb8a 	bl	80011b0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI5_IRQn, 0, 0);
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	2100      	movs	r1, #0
 8000aa0:	2055      	movs	r0, #85	; 0x55
 8000aa2:	f000 fabc 	bl	800101e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI5_IRQn);
 8000aa6:	2055      	movs	r0, #85	; 0x55
 8000aa8:	f000 fad5 	bl	8001056 <HAL_NVIC_EnableIRQ>
}
 8000aac:	bf00      	nop
 8000aae:	3730      	adds	r7, #48	; 0x30
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	40003800 	.word	0x40003800
 8000ab8:	40023800 	.word	0x40023800
 8000abc:	40020000 	.word	0x40020000
 8000ac0:	40020400 	.word	0x40020400
 8000ac4:	40015000 	.word	0x40015000
 8000ac8:	40021400 	.word	0x40021400

08000acc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b0ae      	sub	sp, #184	; 0xb8
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000ad8:	2200      	movs	r2, #0
 8000ada:	601a      	str	r2, [r3, #0]
 8000adc:	605a      	str	r2, [r3, #4]
 8000ade:	609a      	str	r2, [r3, #8]
 8000ae0:	60da      	str	r2, [r3, #12]
 8000ae2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ae4:	f107 0314 	add.w	r3, r7, #20
 8000ae8:	2290      	movs	r2, #144	; 0x90
 8000aea:	2100      	movs	r1, #0
 8000aec:	4618      	mov	r0, r3
 8000aee:	f004 f87b 	bl	8004be8 <memset>
  if(huart->Instance==USART1)
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	4a25      	ldr	r2, [pc, #148]	; (8000b8c <HAL_UART_MspInit+0xc0>)
 8000af8:	4293      	cmp	r3, r2
 8000afa:	d142      	bne.n	8000b82 <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000afc:	2340      	movs	r3, #64	; 0x40
 8000afe:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000b00:	2300      	movs	r3, #0
 8000b02:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b04:	f107 0314 	add.w	r3, r7, #20
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f001 f991 	bl	8001e30 <HAL_RCCEx_PeriphCLKConfig>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000b14:	f7ff fed2 	bl	80008bc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b18:	4b1d      	ldr	r3, [pc, #116]	; (8000b90 <HAL_UART_MspInit+0xc4>)
 8000b1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b1c:	4a1c      	ldr	r2, [pc, #112]	; (8000b90 <HAL_UART_MspInit+0xc4>)
 8000b1e:	f043 0310 	orr.w	r3, r3, #16
 8000b22:	6453      	str	r3, [r2, #68]	; 0x44
 8000b24:	4b1a      	ldr	r3, [pc, #104]	; (8000b90 <HAL_UART_MspInit+0xc4>)
 8000b26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b28:	f003 0310 	and.w	r3, r3, #16
 8000b2c:	613b      	str	r3, [r7, #16]
 8000b2e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b30:	4b17      	ldr	r3, [pc, #92]	; (8000b90 <HAL_UART_MspInit+0xc4>)
 8000b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b34:	4a16      	ldr	r2, [pc, #88]	; (8000b90 <HAL_UART_MspInit+0xc4>)
 8000b36:	f043 0302 	orr.w	r3, r3, #2
 8000b3a:	6313      	str	r3, [r2, #48]	; 0x30
 8000b3c:	4b14      	ldr	r3, [pc, #80]	; (8000b90 <HAL_UART_MspInit+0xc4>)
 8000b3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b40:	f003 0302 	and.w	r3, r3, #2
 8000b44:	60fb      	str	r3, [r7, #12]
 8000b46:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8000b48:	23c0      	movs	r3, #192	; 0xc0
 8000b4a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b4e:	2302      	movs	r3, #2
 8000b50:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b54:	2300      	movs	r3, #0
 8000b56:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b5a:	2303      	movs	r3, #3
 8000b5c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000b60:	2307      	movs	r3, #7
 8000b62:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b66:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	4809      	ldr	r0, [pc, #36]	; (8000b94 <HAL_UART_MspInit+0xc8>)
 8000b6e:	f000 fb1f 	bl	80011b0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000b72:	2200      	movs	r2, #0
 8000b74:	2100      	movs	r1, #0
 8000b76:	2025      	movs	r0, #37	; 0x25
 8000b78:	f000 fa51 	bl	800101e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000b7c:	2025      	movs	r0, #37	; 0x25
 8000b7e:	f000 fa6a 	bl	8001056 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000b82:	bf00      	nop
 8000b84:	37b8      	adds	r7, #184	; 0xb8
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	40011000 	.word	0x40011000
 8000b90:	40023800 	.word	0x40023800
 8000b94:	40020400 	.word	0x40020400

08000b98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b9c:	e7fe      	b.n	8000b9c <NMI_Handler+0x4>

08000b9e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b9e:	b480      	push	{r7}
 8000ba0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ba2:	e7fe      	b.n	8000ba2 <HardFault_Handler+0x4>

08000ba4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ba8:	e7fe      	b.n	8000ba8 <MemManage_Handler+0x4>

08000baa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000baa:	b480      	push	{r7}
 8000bac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bae:	e7fe      	b.n	8000bae <BusFault_Handler+0x4>

08000bb0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bb4:	e7fe      	b.n	8000bb4 <UsageFault_Handler+0x4>

08000bb6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bb6:	b480      	push	{r7}
 8000bb8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bba:	bf00      	nop
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc2:	4770      	bx	lr

08000bc4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bc8:	bf00      	nop
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd0:	4770      	bx	lr

08000bd2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bd2:	b480      	push	{r7}
 8000bd4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bd6:	bf00      	nop
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bde:	4770      	bx	lr

08000be0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000be4:	f000 f920 	bl	8000e28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000be8:	bf00      	nop
 8000bea:	bd80      	pop	{r7, pc}

08000bec <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8000bf0:	4802      	ldr	r0, [pc, #8]	; (8000bfc <SPI2_IRQHandler+0x10>)
 8000bf2:	f001 ffdf 	bl	8002bb4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8000bf6:	bf00      	nop
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	20000084 	.word	0x20000084

08000c00 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000c04:	4802      	ldr	r0, [pc, #8]	; (8000c10 <USART1_IRQHandler+0x10>)
 8000c06:	f002 fe17 	bl	8003838 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000c0a:	bf00      	nop
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	2000014c 	.word	0x2000014c

08000c14 <SPI5_IRQHandler>:

/**
  * @brief This function handles SPI5 global interrupt.
  */
void SPI5_IRQHandler(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI5_IRQn 0 */

  /* USER CODE END SPI5_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi5);
 8000c18:	4802      	ldr	r0, [pc, #8]	; (8000c24 <SPI5_IRQHandler+0x10>)
 8000c1a:	f001 ffcb 	bl	8002bb4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI5_IRQn 1 */

  /* USER CODE END SPI5_IRQn 1 */
}
 8000c1e:	bf00      	nop
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	200000e8 	.word	0x200000e8

08000c28 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b086      	sub	sp, #24
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	60f8      	str	r0, [r7, #12]
 8000c30:	60b9      	str	r1, [r7, #8]
 8000c32:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c34:	2300      	movs	r3, #0
 8000c36:	617b      	str	r3, [r7, #20]
 8000c38:	e00a      	b.n	8000c50 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c3a:	f3af 8000 	nop.w
 8000c3e:	4601      	mov	r1, r0
 8000c40:	68bb      	ldr	r3, [r7, #8]
 8000c42:	1c5a      	adds	r2, r3, #1
 8000c44:	60ba      	str	r2, [r7, #8]
 8000c46:	b2ca      	uxtb	r2, r1
 8000c48:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c4a:	697b      	ldr	r3, [r7, #20]
 8000c4c:	3301      	adds	r3, #1
 8000c4e:	617b      	str	r3, [r7, #20]
 8000c50:	697a      	ldr	r2, [r7, #20]
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	429a      	cmp	r2, r3
 8000c56:	dbf0      	blt.n	8000c3a <_read+0x12>
  }

  return len;
 8000c58:	687b      	ldr	r3, [r7, #4]
}
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	3718      	adds	r7, #24
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}

08000c62 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000c62:	b480      	push	{r7}
 8000c64:	b083      	sub	sp, #12
 8000c66:	af00      	add	r7, sp, #0
 8000c68:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000c6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000c6e:	4618      	mov	r0, r3
 8000c70:	370c      	adds	r7, #12
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr

08000c7a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c7a:	b480      	push	{r7}
 8000c7c:	b083      	sub	sp, #12
 8000c7e:	af00      	add	r7, sp, #0
 8000c80:	6078      	str	r0, [r7, #4]
 8000c82:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c8a:	605a      	str	r2, [r3, #4]
  return 0;
 8000c8c:	2300      	movs	r3, #0
}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	370c      	adds	r7, #12
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr

08000c9a <_isatty>:

int _isatty(int file)
{
 8000c9a:	b480      	push	{r7}
 8000c9c:	b083      	sub	sp, #12
 8000c9e:	af00      	add	r7, sp, #0
 8000ca0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000ca2:	2301      	movs	r3, #1
}
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	370c      	adds	r7, #12
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cae:	4770      	bx	lr

08000cb0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b085      	sub	sp, #20
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	60f8      	str	r0, [r7, #12]
 8000cb8:	60b9      	str	r1, [r7, #8]
 8000cba:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000cbc:	2300      	movs	r3, #0
}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	3714      	adds	r7, #20
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr
	...

08000ccc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b086      	sub	sp, #24
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cd4:	4a14      	ldr	r2, [pc, #80]	; (8000d28 <_sbrk+0x5c>)
 8000cd6:	4b15      	ldr	r3, [pc, #84]	; (8000d2c <_sbrk+0x60>)
 8000cd8:	1ad3      	subs	r3, r2, r3
 8000cda:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cdc:	697b      	ldr	r3, [r7, #20]
 8000cde:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ce0:	4b13      	ldr	r3, [pc, #76]	; (8000d30 <_sbrk+0x64>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d102      	bne.n	8000cee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ce8:	4b11      	ldr	r3, [pc, #68]	; (8000d30 <_sbrk+0x64>)
 8000cea:	4a12      	ldr	r2, [pc, #72]	; (8000d34 <_sbrk+0x68>)
 8000cec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cee:	4b10      	ldr	r3, [pc, #64]	; (8000d30 <_sbrk+0x64>)
 8000cf0:	681a      	ldr	r2, [r3, #0]
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	4413      	add	r3, r2
 8000cf6:	693a      	ldr	r2, [r7, #16]
 8000cf8:	429a      	cmp	r2, r3
 8000cfa:	d207      	bcs.n	8000d0c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cfc:	f003 ffc2 	bl	8004c84 <__errno>
 8000d00:	4603      	mov	r3, r0
 8000d02:	220c      	movs	r2, #12
 8000d04:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d0a:	e009      	b.n	8000d20 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d0c:	4b08      	ldr	r3, [pc, #32]	; (8000d30 <_sbrk+0x64>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d12:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <_sbrk+0x64>)
 8000d14:	681a      	ldr	r2, [r3, #0]
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	4413      	add	r3, r2
 8000d1a:	4a05      	ldr	r2, [pc, #20]	; (8000d30 <_sbrk+0x64>)
 8000d1c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d1e:	68fb      	ldr	r3, [r7, #12]
}
 8000d20:	4618      	mov	r0, r3
 8000d22:	3718      	adds	r7, #24
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	20080000 	.word	0x20080000
 8000d2c:	00000400 	.word	0x00000400
 8000d30:	200001d8 	.word	0x200001d8
 8000d34:	20000330 	.word	0x20000330

08000d38 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d3c:	4b06      	ldr	r3, [pc, #24]	; (8000d58 <SystemInit+0x20>)
 8000d3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d42:	4a05      	ldr	r2, [pc, #20]	; (8000d58 <SystemInit+0x20>)
 8000d44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d48:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d4c:	bf00      	nop
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop
 8000d58:	e000ed00 	.word	0xe000ed00

08000d5c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000d5c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d94 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d60:	480d      	ldr	r0, [pc, #52]	; (8000d98 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d62:	490e      	ldr	r1, [pc, #56]	; (8000d9c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d64:	4a0e      	ldr	r2, [pc, #56]	; (8000da0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d68:	e002      	b.n	8000d70 <LoopCopyDataInit>

08000d6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d6e:	3304      	adds	r3, #4

08000d70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d74:	d3f9      	bcc.n	8000d6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d76:	4a0b      	ldr	r2, [pc, #44]	; (8000da4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d78:	4c0b      	ldr	r4, [pc, #44]	; (8000da8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d7c:	e001      	b.n	8000d82 <LoopFillZerobss>

08000d7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d80:	3204      	adds	r2, #4

08000d82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d84:	d3fb      	bcc.n	8000d7e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000d86:	f7ff ffd7 	bl	8000d38 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d8a:	f003 ff81 	bl	8004c90 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d8e:	f7ff fc39 	bl	8000604 <main>
  bx  lr    
 8000d92:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d94:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000d98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d9c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000da0:	080057a0 	.word	0x080057a0
  ldr r2, =_sbss
 8000da4:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000da8:	2000032c 	.word	0x2000032c

08000dac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000dac:	e7fe      	b.n	8000dac <ADC_IRQHandler>

08000dae <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dae:	b580      	push	{r7, lr}
 8000db0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000db2:	2003      	movs	r0, #3
 8000db4:	f000 f928 	bl	8001008 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000db8:	200f      	movs	r0, #15
 8000dba:	f000 f805 	bl	8000dc8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000dbe:	f7ff fdbb 	bl	8000938 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dc2:	2300      	movs	r3, #0
}
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	bd80      	pop	{r7, pc}

08000dc8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000dd0:	4b12      	ldr	r3, [pc, #72]	; (8000e1c <HAL_InitTick+0x54>)
 8000dd2:	681a      	ldr	r2, [r3, #0]
 8000dd4:	4b12      	ldr	r3, [pc, #72]	; (8000e20 <HAL_InitTick+0x58>)
 8000dd6:	781b      	ldrb	r3, [r3, #0]
 8000dd8:	4619      	mov	r1, r3
 8000dda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dde:	fbb3 f3f1 	udiv	r3, r3, r1
 8000de2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000de6:	4618      	mov	r0, r3
 8000de8:	f000 f943 	bl	8001072 <HAL_SYSTICK_Config>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d001      	beq.n	8000df6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000df2:	2301      	movs	r3, #1
 8000df4:	e00e      	b.n	8000e14 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	2b0f      	cmp	r3, #15
 8000dfa:	d80a      	bhi.n	8000e12 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	6879      	ldr	r1, [r7, #4]
 8000e00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e04:	f000 f90b 	bl	800101e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e08:	4a06      	ldr	r2, [pc, #24]	; (8000e24 <HAL_InitTick+0x5c>)
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	e000      	b.n	8000e14 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e12:	2301      	movs	r3, #1
}
 8000e14:	4618      	mov	r0, r3
 8000e16:	3708      	adds	r7, #8
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	20000000 	.word	0x20000000
 8000e20:	20000008 	.word	0x20000008
 8000e24:	20000004 	.word	0x20000004

08000e28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e2c:	4b06      	ldr	r3, [pc, #24]	; (8000e48 <HAL_IncTick+0x20>)
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	461a      	mov	r2, r3
 8000e32:	4b06      	ldr	r3, [pc, #24]	; (8000e4c <HAL_IncTick+0x24>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	4413      	add	r3, r2
 8000e38:	4a04      	ldr	r2, [pc, #16]	; (8000e4c <HAL_IncTick+0x24>)
 8000e3a:	6013      	str	r3, [r2, #0]
}
 8000e3c:	bf00      	nop
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop
 8000e48:	20000008 	.word	0x20000008
 8000e4c:	200001dc 	.word	0x200001dc

08000e50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  return uwTick;
 8000e54:	4b03      	ldr	r3, [pc, #12]	; (8000e64 <HAL_GetTick+0x14>)
 8000e56:	681b      	ldr	r3, [r3, #0]
}
 8000e58:	4618      	mov	r0, r3
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop
 8000e64:	200001dc 	.word	0x200001dc

08000e68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b085      	sub	sp, #20
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	f003 0307 	and.w	r3, r3, #7
 8000e76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e78:	4b0b      	ldr	r3, [pc, #44]	; (8000ea8 <__NVIC_SetPriorityGrouping+0x40>)
 8000e7a:	68db      	ldr	r3, [r3, #12]
 8000e7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e7e:	68ba      	ldr	r2, [r7, #8]
 8000e80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e84:	4013      	ands	r3, r2
 8000e86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e8c:	68bb      	ldr	r3, [r7, #8]
 8000e8e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000e90:	4b06      	ldr	r3, [pc, #24]	; (8000eac <__NVIC_SetPriorityGrouping+0x44>)
 8000e92:	4313      	orrs	r3, r2
 8000e94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e96:	4a04      	ldr	r2, [pc, #16]	; (8000ea8 <__NVIC_SetPriorityGrouping+0x40>)
 8000e98:	68bb      	ldr	r3, [r7, #8]
 8000e9a:	60d3      	str	r3, [r2, #12]
}
 8000e9c:	bf00      	nop
 8000e9e:	3714      	adds	r7, #20
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea6:	4770      	bx	lr
 8000ea8:	e000ed00 	.word	0xe000ed00
 8000eac:	05fa0000 	.word	0x05fa0000

08000eb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000eb4:	4b04      	ldr	r3, [pc, #16]	; (8000ec8 <__NVIC_GetPriorityGrouping+0x18>)
 8000eb6:	68db      	ldr	r3, [r3, #12]
 8000eb8:	0a1b      	lsrs	r3, r3, #8
 8000eba:	f003 0307 	and.w	r3, r3, #7
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec6:	4770      	bx	lr
 8000ec8:	e000ed00 	.word	0xe000ed00

08000ecc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b083      	sub	sp, #12
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ed6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	db0b      	blt.n	8000ef6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ede:	79fb      	ldrb	r3, [r7, #7]
 8000ee0:	f003 021f 	and.w	r2, r3, #31
 8000ee4:	4907      	ldr	r1, [pc, #28]	; (8000f04 <__NVIC_EnableIRQ+0x38>)
 8000ee6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eea:	095b      	lsrs	r3, r3, #5
 8000eec:	2001      	movs	r0, #1
 8000eee:	fa00 f202 	lsl.w	r2, r0, r2
 8000ef2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ef6:	bf00      	nop
 8000ef8:	370c      	adds	r7, #12
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop
 8000f04:	e000e100 	.word	0xe000e100

08000f08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b083      	sub	sp, #12
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	4603      	mov	r3, r0
 8000f10:	6039      	str	r1, [r7, #0]
 8000f12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	db0a      	blt.n	8000f32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	b2da      	uxtb	r2, r3
 8000f20:	490c      	ldr	r1, [pc, #48]	; (8000f54 <__NVIC_SetPriority+0x4c>)
 8000f22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f26:	0112      	lsls	r2, r2, #4
 8000f28:	b2d2      	uxtb	r2, r2
 8000f2a:	440b      	add	r3, r1
 8000f2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f30:	e00a      	b.n	8000f48 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	b2da      	uxtb	r2, r3
 8000f36:	4908      	ldr	r1, [pc, #32]	; (8000f58 <__NVIC_SetPriority+0x50>)
 8000f38:	79fb      	ldrb	r3, [r7, #7]
 8000f3a:	f003 030f 	and.w	r3, r3, #15
 8000f3e:	3b04      	subs	r3, #4
 8000f40:	0112      	lsls	r2, r2, #4
 8000f42:	b2d2      	uxtb	r2, r2
 8000f44:	440b      	add	r3, r1
 8000f46:	761a      	strb	r2, [r3, #24]
}
 8000f48:	bf00      	nop
 8000f4a:	370c      	adds	r7, #12
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f52:	4770      	bx	lr
 8000f54:	e000e100 	.word	0xe000e100
 8000f58:	e000ed00 	.word	0xe000ed00

08000f5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b089      	sub	sp, #36	; 0x24
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	60f8      	str	r0, [r7, #12]
 8000f64:	60b9      	str	r1, [r7, #8]
 8000f66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	f003 0307 	and.w	r3, r3, #7
 8000f6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f70:	69fb      	ldr	r3, [r7, #28]
 8000f72:	f1c3 0307 	rsb	r3, r3, #7
 8000f76:	2b04      	cmp	r3, #4
 8000f78:	bf28      	it	cs
 8000f7a:	2304      	movcs	r3, #4
 8000f7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f7e:	69fb      	ldr	r3, [r7, #28]
 8000f80:	3304      	adds	r3, #4
 8000f82:	2b06      	cmp	r3, #6
 8000f84:	d902      	bls.n	8000f8c <NVIC_EncodePriority+0x30>
 8000f86:	69fb      	ldr	r3, [r7, #28]
 8000f88:	3b03      	subs	r3, #3
 8000f8a:	e000      	b.n	8000f8e <NVIC_EncodePriority+0x32>
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f90:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000f94:	69bb      	ldr	r3, [r7, #24]
 8000f96:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9a:	43da      	mvns	r2, r3
 8000f9c:	68bb      	ldr	r3, [r7, #8]
 8000f9e:	401a      	ands	r2, r3
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fa4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	fa01 f303 	lsl.w	r3, r1, r3
 8000fae:	43d9      	mvns	r1, r3
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fb4:	4313      	orrs	r3, r2
         );
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	3724      	adds	r7, #36	; 0x24
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr
	...

08000fc4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	3b01      	subs	r3, #1
 8000fd0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fd4:	d301      	bcc.n	8000fda <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	e00f      	b.n	8000ffa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fda:	4a0a      	ldr	r2, [pc, #40]	; (8001004 <SysTick_Config+0x40>)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	3b01      	subs	r3, #1
 8000fe0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fe2:	210f      	movs	r1, #15
 8000fe4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000fe8:	f7ff ff8e 	bl	8000f08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fec:	4b05      	ldr	r3, [pc, #20]	; (8001004 <SysTick_Config+0x40>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ff2:	4b04      	ldr	r3, [pc, #16]	; (8001004 <SysTick_Config+0x40>)
 8000ff4:	2207      	movs	r2, #7
 8000ff6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ff8:	2300      	movs	r3, #0
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	3708      	adds	r7, #8
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	e000e010 	.word	0xe000e010

08001008 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001010:	6878      	ldr	r0, [r7, #4]
 8001012:	f7ff ff29 	bl	8000e68 <__NVIC_SetPriorityGrouping>
}
 8001016:	bf00      	nop
 8001018:	3708      	adds	r7, #8
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}

0800101e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800101e:	b580      	push	{r7, lr}
 8001020:	b086      	sub	sp, #24
 8001022:	af00      	add	r7, sp, #0
 8001024:	4603      	mov	r3, r0
 8001026:	60b9      	str	r1, [r7, #8]
 8001028:	607a      	str	r2, [r7, #4]
 800102a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800102c:	2300      	movs	r3, #0
 800102e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001030:	f7ff ff3e 	bl	8000eb0 <__NVIC_GetPriorityGrouping>
 8001034:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001036:	687a      	ldr	r2, [r7, #4]
 8001038:	68b9      	ldr	r1, [r7, #8]
 800103a:	6978      	ldr	r0, [r7, #20]
 800103c:	f7ff ff8e 	bl	8000f5c <NVIC_EncodePriority>
 8001040:	4602      	mov	r2, r0
 8001042:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001046:	4611      	mov	r1, r2
 8001048:	4618      	mov	r0, r3
 800104a:	f7ff ff5d 	bl	8000f08 <__NVIC_SetPriority>
}
 800104e:	bf00      	nop
 8001050:	3718      	adds	r7, #24
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}

08001056 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001056:	b580      	push	{r7, lr}
 8001058:	b082      	sub	sp, #8
 800105a:	af00      	add	r7, sp, #0
 800105c:	4603      	mov	r3, r0
 800105e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001060:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001064:	4618      	mov	r0, r3
 8001066:	f7ff ff31 	bl	8000ecc <__NVIC_EnableIRQ>
}
 800106a:	bf00      	nop
 800106c:	3708      	adds	r7, #8
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}

08001072 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001072:	b580      	push	{r7, lr}
 8001074:	b082      	sub	sp, #8
 8001076:	af00      	add	r7, sp, #0
 8001078:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800107a:	6878      	ldr	r0, [r7, #4]
 800107c:	f7ff ffa2 	bl	8000fc4 <SysTick_Config>
 8001080:	4603      	mov	r3, r0
}
 8001082:	4618      	mov	r0, r3
 8001084:	3708      	adds	r7, #8
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}

0800108a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800108a:	b580      	push	{r7, lr}
 800108c:	b084      	sub	sp, #16
 800108e:	af00      	add	r7, sp, #0
 8001090:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001096:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001098:	f7ff feda 	bl	8000e50 <HAL_GetTick>
 800109c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80010a4:	b2db      	uxtb	r3, r3
 80010a6:	2b02      	cmp	r3, #2
 80010a8:	d008      	beq.n	80010bc <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	2280      	movs	r2, #128	; 0x80
 80010ae:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	2200      	movs	r2, #0
 80010b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80010b8:	2301      	movs	r3, #1
 80010ba:	e052      	b.n	8001162 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	681a      	ldr	r2, [r3, #0]
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f022 0216 	bic.w	r2, r2, #22
 80010ca:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	695a      	ldr	r2, [r3, #20]
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80010da:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d103      	bne.n	80010ec <HAL_DMA_Abort+0x62>
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d007      	beq.n	80010fc <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	681a      	ldr	r2, [r3, #0]
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f022 0208 	bic.w	r2, r2, #8
 80010fa:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	681a      	ldr	r2, [r3, #0]
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f022 0201 	bic.w	r2, r2, #1
 800110a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800110c:	e013      	b.n	8001136 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800110e:	f7ff fe9f 	bl	8000e50 <HAL_GetTick>
 8001112:	4602      	mov	r2, r0
 8001114:	68bb      	ldr	r3, [r7, #8]
 8001116:	1ad3      	subs	r3, r2, r3
 8001118:	2b05      	cmp	r3, #5
 800111a:	d90c      	bls.n	8001136 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	2220      	movs	r2, #32
 8001120:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	2203      	movs	r2, #3
 8001126:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	2200      	movs	r2, #0
 800112e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8001132:	2303      	movs	r3, #3
 8001134:	e015      	b.n	8001162 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f003 0301 	and.w	r3, r3, #1
 8001140:	2b00      	cmp	r3, #0
 8001142:	d1e4      	bne.n	800110e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001148:	223f      	movs	r2, #63	; 0x3f
 800114a:	409a      	lsls	r2, r3
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	2201      	movs	r2, #1
 8001154:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	2200      	movs	r2, #0
 800115c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8001160:	2300      	movs	r3, #0
}
 8001162:	4618      	mov	r0, r3
 8001164:	3710      	adds	r7, #16
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}

0800116a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800116a:	b480      	push	{r7}
 800116c:	b083      	sub	sp, #12
 800116e:	af00      	add	r7, sp, #0
 8001170:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001178:	b2db      	uxtb	r3, r3
 800117a:	2b02      	cmp	r3, #2
 800117c:	d004      	beq.n	8001188 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	2280      	movs	r2, #128	; 0x80
 8001182:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001184:	2301      	movs	r3, #1
 8001186:	e00c      	b.n	80011a2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	2205      	movs	r2, #5
 800118c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	681a      	ldr	r2, [r3, #0]
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f022 0201 	bic.w	r2, r2, #1
 800119e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80011a0:	2300      	movs	r3, #0
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	370c      	adds	r7, #12
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr
	...

080011b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b089      	sub	sp, #36	; 0x24
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
 80011b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80011ba:	2300      	movs	r3, #0
 80011bc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80011be:	2300      	movs	r3, #0
 80011c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80011c2:	2300      	movs	r3, #0
 80011c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80011c6:	2300      	movs	r3, #0
 80011c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80011ca:	2300      	movs	r3, #0
 80011cc:	61fb      	str	r3, [r7, #28]
 80011ce:	e175      	b.n	80014bc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80011d0:	2201      	movs	r2, #1
 80011d2:	69fb      	ldr	r3, [r7, #28]
 80011d4:	fa02 f303 	lsl.w	r3, r2, r3
 80011d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	697a      	ldr	r2, [r7, #20]
 80011e0:	4013      	ands	r3, r2
 80011e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80011e4:	693a      	ldr	r2, [r7, #16]
 80011e6:	697b      	ldr	r3, [r7, #20]
 80011e8:	429a      	cmp	r2, r3
 80011ea:	f040 8164 	bne.w	80014b6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	f003 0303 	and.w	r3, r3, #3
 80011f6:	2b01      	cmp	r3, #1
 80011f8:	d005      	beq.n	8001206 <HAL_GPIO_Init+0x56>
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	f003 0303 	and.w	r3, r3, #3
 8001202:	2b02      	cmp	r3, #2
 8001204:	d130      	bne.n	8001268 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	689b      	ldr	r3, [r3, #8]
 800120a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800120c:	69fb      	ldr	r3, [r7, #28]
 800120e:	005b      	lsls	r3, r3, #1
 8001210:	2203      	movs	r2, #3
 8001212:	fa02 f303 	lsl.w	r3, r2, r3
 8001216:	43db      	mvns	r3, r3
 8001218:	69ba      	ldr	r2, [r7, #24]
 800121a:	4013      	ands	r3, r2
 800121c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	68da      	ldr	r2, [r3, #12]
 8001222:	69fb      	ldr	r3, [r7, #28]
 8001224:	005b      	lsls	r3, r3, #1
 8001226:	fa02 f303 	lsl.w	r3, r2, r3
 800122a:	69ba      	ldr	r2, [r7, #24]
 800122c:	4313      	orrs	r3, r2
 800122e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	69ba      	ldr	r2, [r7, #24]
 8001234:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800123c:	2201      	movs	r2, #1
 800123e:	69fb      	ldr	r3, [r7, #28]
 8001240:	fa02 f303 	lsl.w	r3, r2, r3
 8001244:	43db      	mvns	r3, r3
 8001246:	69ba      	ldr	r2, [r7, #24]
 8001248:	4013      	ands	r3, r2
 800124a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	091b      	lsrs	r3, r3, #4
 8001252:	f003 0201 	and.w	r2, r3, #1
 8001256:	69fb      	ldr	r3, [r7, #28]
 8001258:	fa02 f303 	lsl.w	r3, r2, r3
 800125c:	69ba      	ldr	r2, [r7, #24]
 800125e:	4313      	orrs	r3, r2
 8001260:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	69ba      	ldr	r2, [r7, #24]
 8001266:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	f003 0303 	and.w	r3, r3, #3
 8001270:	2b03      	cmp	r3, #3
 8001272:	d017      	beq.n	80012a4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	68db      	ldr	r3, [r3, #12]
 8001278:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800127a:	69fb      	ldr	r3, [r7, #28]
 800127c:	005b      	lsls	r3, r3, #1
 800127e:	2203      	movs	r2, #3
 8001280:	fa02 f303 	lsl.w	r3, r2, r3
 8001284:	43db      	mvns	r3, r3
 8001286:	69ba      	ldr	r2, [r7, #24]
 8001288:	4013      	ands	r3, r2
 800128a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	689a      	ldr	r2, [r3, #8]
 8001290:	69fb      	ldr	r3, [r7, #28]
 8001292:	005b      	lsls	r3, r3, #1
 8001294:	fa02 f303 	lsl.w	r3, r2, r3
 8001298:	69ba      	ldr	r2, [r7, #24]
 800129a:	4313      	orrs	r3, r2
 800129c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	69ba      	ldr	r2, [r7, #24]
 80012a2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	f003 0303 	and.w	r3, r3, #3
 80012ac:	2b02      	cmp	r3, #2
 80012ae:	d123      	bne.n	80012f8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80012b0:	69fb      	ldr	r3, [r7, #28]
 80012b2:	08da      	lsrs	r2, r3, #3
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	3208      	adds	r2, #8
 80012b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80012be:	69fb      	ldr	r3, [r7, #28]
 80012c0:	f003 0307 	and.w	r3, r3, #7
 80012c4:	009b      	lsls	r3, r3, #2
 80012c6:	220f      	movs	r2, #15
 80012c8:	fa02 f303 	lsl.w	r3, r2, r3
 80012cc:	43db      	mvns	r3, r3
 80012ce:	69ba      	ldr	r2, [r7, #24]
 80012d0:	4013      	ands	r3, r2
 80012d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	691a      	ldr	r2, [r3, #16]
 80012d8:	69fb      	ldr	r3, [r7, #28]
 80012da:	f003 0307 	and.w	r3, r3, #7
 80012de:	009b      	lsls	r3, r3, #2
 80012e0:	fa02 f303 	lsl.w	r3, r2, r3
 80012e4:	69ba      	ldr	r2, [r7, #24]
 80012e6:	4313      	orrs	r3, r2
 80012e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80012ea:	69fb      	ldr	r3, [r7, #28]
 80012ec:	08da      	lsrs	r2, r3, #3
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	3208      	adds	r2, #8
 80012f2:	69b9      	ldr	r1, [r7, #24]
 80012f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80012fe:	69fb      	ldr	r3, [r7, #28]
 8001300:	005b      	lsls	r3, r3, #1
 8001302:	2203      	movs	r2, #3
 8001304:	fa02 f303 	lsl.w	r3, r2, r3
 8001308:	43db      	mvns	r3, r3
 800130a:	69ba      	ldr	r2, [r7, #24]
 800130c:	4013      	ands	r3, r2
 800130e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	f003 0203 	and.w	r2, r3, #3
 8001318:	69fb      	ldr	r3, [r7, #28]
 800131a:	005b      	lsls	r3, r3, #1
 800131c:	fa02 f303 	lsl.w	r3, r2, r3
 8001320:	69ba      	ldr	r2, [r7, #24]
 8001322:	4313      	orrs	r3, r2
 8001324:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	69ba      	ldr	r2, [r7, #24]
 800132a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001334:	2b00      	cmp	r3, #0
 8001336:	f000 80be 	beq.w	80014b6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800133a:	4b66      	ldr	r3, [pc, #408]	; (80014d4 <HAL_GPIO_Init+0x324>)
 800133c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800133e:	4a65      	ldr	r2, [pc, #404]	; (80014d4 <HAL_GPIO_Init+0x324>)
 8001340:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001344:	6453      	str	r3, [r2, #68]	; 0x44
 8001346:	4b63      	ldr	r3, [pc, #396]	; (80014d4 <HAL_GPIO_Init+0x324>)
 8001348:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800134a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800134e:	60fb      	str	r3, [r7, #12]
 8001350:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001352:	4a61      	ldr	r2, [pc, #388]	; (80014d8 <HAL_GPIO_Init+0x328>)
 8001354:	69fb      	ldr	r3, [r7, #28]
 8001356:	089b      	lsrs	r3, r3, #2
 8001358:	3302      	adds	r3, #2
 800135a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800135e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001360:	69fb      	ldr	r3, [r7, #28]
 8001362:	f003 0303 	and.w	r3, r3, #3
 8001366:	009b      	lsls	r3, r3, #2
 8001368:	220f      	movs	r2, #15
 800136a:	fa02 f303 	lsl.w	r3, r2, r3
 800136e:	43db      	mvns	r3, r3
 8001370:	69ba      	ldr	r2, [r7, #24]
 8001372:	4013      	ands	r3, r2
 8001374:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	4a58      	ldr	r2, [pc, #352]	; (80014dc <HAL_GPIO_Init+0x32c>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d037      	beq.n	80013ee <HAL_GPIO_Init+0x23e>
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	4a57      	ldr	r2, [pc, #348]	; (80014e0 <HAL_GPIO_Init+0x330>)
 8001382:	4293      	cmp	r3, r2
 8001384:	d031      	beq.n	80013ea <HAL_GPIO_Init+0x23a>
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	4a56      	ldr	r2, [pc, #344]	; (80014e4 <HAL_GPIO_Init+0x334>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d02b      	beq.n	80013e6 <HAL_GPIO_Init+0x236>
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	4a55      	ldr	r2, [pc, #340]	; (80014e8 <HAL_GPIO_Init+0x338>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d025      	beq.n	80013e2 <HAL_GPIO_Init+0x232>
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	4a54      	ldr	r2, [pc, #336]	; (80014ec <HAL_GPIO_Init+0x33c>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d01f      	beq.n	80013de <HAL_GPIO_Init+0x22e>
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	4a53      	ldr	r2, [pc, #332]	; (80014f0 <HAL_GPIO_Init+0x340>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d019      	beq.n	80013da <HAL_GPIO_Init+0x22a>
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	4a52      	ldr	r2, [pc, #328]	; (80014f4 <HAL_GPIO_Init+0x344>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d013      	beq.n	80013d6 <HAL_GPIO_Init+0x226>
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	4a51      	ldr	r2, [pc, #324]	; (80014f8 <HAL_GPIO_Init+0x348>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d00d      	beq.n	80013d2 <HAL_GPIO_Init+0x222>
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	4a50      	ldr	r2, [pc, #320]	; (80014fc <HAL_GPIO_Init+0x34c>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d007      	beq.n	80013ce <HAL_GPIO_Init+0x21e>
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	4a4f      	ldr	r2, [pc, #316]	; (8001500 <HAL_GPIO_Init+0x350>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d101      	bne.n	80013ca <HAL_GPIO_Init+0x21a>
 80013c6:	2309      	movs	r3, #9
 80013c8:	e012      	b.n	80013f0 <HAL_GPIO_Init+0x240>
 80013ca:	230a      	movs	r3, #10
 80013cc:	e010      	b.n	80013f0 <HAL_GPIO_Init+0x240>
 80013ce:	2308      	movs	r3, #8
 80013d0:	e00e      	b.n	80013f0 <HAL_GPIO_Init+0x240>
 80013d2:	2307      	movs	r3, #7
 80013d4:	e00c      	b.n	80013f0 <HAL_GPIO_Init+0x240>
 80013d6:	2306      	movs	r3, #6
 80013d8:	e00a      	b.n	80013f0 <HAL_GPIO_Init+0x240>
 80013da:	2305      	movs	r3, #5
 80013dc:	e008      	b.n	80013f0 <HAL_GPIO_Init+0x240>
 80013de:	2304      	movs	r3, #4
 80013e0:	e006      	b.n	80013f0 <HAL_GPIO_Init+0x240>
 80013e2:	2303      	movs	r3, #3
 80013e4:	e004      	b.n	80013f0 <HAL_GPIO_Init+0x240>
 80013e6:	2302      	movs	r3, #2
 80013e8:	e002      	b.n	80013f0 <HAL_GPIO_Init+0x240>
 80013ea:	2301      	movs	r3, #1
 80013ec:	e000      	b.n	80013f0 <HAL_GPIO_Init+0x240>
 80013ee:	2300      	movs	r3, #0
 80013f0:	69fa      	ldr	r2, [r7, #28]
 80013f2:	f002 0203 	and.w	r2, r2, #3
 80013f6:	0092      	lsls	r2, r2, #2
 80013f8:	4093      	lsls	r3, r2
 80013fa:	69ba      	ldr	r2, [r7, #24]
 80013fc:	4313      	orrs	r3, r2
 80013fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001400:	4935      	ldr	r1, [pc, #212]	; (80014d8 <HAL_GPIO_Init+0x328>)
 8001402:	69fb      	ldr	r3, [r7, #28]
 8001404:	089b      	lsrs	r3, r3, #2
 8001406:	3302      	adds	r3, #2
 8001408:	69ba      	ldr	r2, [r7, #24]
 800140a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800140e:	4b3d      	ldr	r3, [pc, #244]	; (8001504 <HAL_GPIO_Init+0x354>)
 8001410:	689b      	ldr	r3, [r3, #8]
 8001412:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001414:	693b      	ldr	r3, [r7, #16]
 8001416:	43db      	mvns	r3, r3
 8001418:	69ba      	ldr	r2, [r7, #24]
 800141a:	4013      	ands	r3, r2
 800141c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001426:	2b00      	cmp	r3, #0
 8001428:	d003      	beq.n	8001432 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800142a:	69ba      	ldr	r2, [r7, #24]
 800142c:	693b      	ldr	r3, [r7, #16]
 800142e:	4313      	orrs	r3, r2
 8001430:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001432:	4a34      	ldr	r2, [pc, #208]	; (8001504 <HAL_GPIO_Init+0x354>)
 8001434:	69bb      	ldr	r3, [r7, #24]
 8001436:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001438:	4b32      	ldr	r3, [pc, #200]	; (8001504 <HAL_GPIO_Init+0x354>)
 800143a:	68db      	ldr	r3, [r3, #12]
 800143c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800143e:	693b      	ldr	r3, [r7, #16]
 8001440:	43db      	mvns	r3, r3
 8001442:	69ba      	ldr	r2, [r7, #24]
 8001444:	4013      	ands	r3, r2
 8001446:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001450:	2b00      	cmp	r3, #0
 8001452:	d003      	beq.n	800145c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001454:	69ba      	ldr	r2, [r7, #24]
 8001456:	693b      	ldr	r3, [r7, #16]
 8001458:	4313      	orrs	r3, r2
 800145a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800145c:	4a29      	ldr	r2, [pc, #164]	; (8001504 <HAL_GPIO_Init+0x354>)
 800145e:	69bb      	ldr	r3, [r7, #24]
 8001460:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001462:	4b28      	ldr	r3, [pc, #160]	; (8001504 <HAL_GPIO_Init+0x354>)
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001468:	693b      	ldr	r3, [r7, #16]
 800146a:	43db      	mvns	r3, r3
 800146c:	69ba      	ldr	r2, [r7, #24]
 800146e:	4013      	ands	r3, r2
 8001470:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800147a:	2b00      	cmp	r3, #0
 800147c:	d003      	beq.n	8001486 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800147e:	69ba      	ldr	r2, [r7, #24]
 8001480:	693b      	ldr	r3, [r7, #16]
 8001482:	4313      	orrs	r3, r2
 8001484:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001486:	4a1f      	ldr	r2, [pc, #124]	; (8001504 <HAL_GPIO_Init+0x354>)
 8001488:	69bb      	ldr	r3, [r7, #24]
 800148a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800148c:	4b1d      	ldr	r3, [pc, #116]	; (8001504 <HAL_GPIO_Init+0x354>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001492:	693b      	ldr	r3, [r7, #16]
 8001494:	43db      	mvns	r3, r3
 8001496:	69ba      	ldr	r2, [r7, #24]
 8001498:	4013      	ands	r3, r2
 800149a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d003      	beq.n	80014b0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80014a8:	69ba      	ldr	r2, [r7, #24]
 80014aa:	693b      	ldr	r3, [r7, #16]
 80014ac:	4313      	orrs	r3, r2
 80014ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80014b0:	4a14      	ldr	r2, [pc, #80]	; (8001504 <HAL_GPIO_Init+0x354>)
 80014b2:	69bb      	ldr	r3, [r7, #24]
 80014b4:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80014b6:	69fb      	ldr	r3, [r7, #28]
 80014b8:	3301      	adds	r3, #1
 80014ba:	61fb      	str	r3, [r7, #28]
 80014bc:	69fb      	ldr	r3, [r7, #28]
 80014be:	2b0f      	cmp	r3, #15
 80014c0:	f67f ae86 	bls.w	80011d0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80014c4:	bf00      	nop
 80014c6:	bf00      	nop
 80014c8:	3724      	adds	r7, #36	; 0x24
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr
 80014d2:	bf00      	nop
 80014d4:	40023800 	.word	0x40023800
 80014d8:	40013800 	.word	0x40013800
 80014dc:	40020000 	.word	0x40020000
 80014e0:	40020400 	.word	0x40020400
 80014e4:	40020800 	.word	0x40020800
 80014e8:	40020c00 	.word	0x40020c00
 80014ec:	40021000 	.word	0x40021000
 80014f0:	40021400 	.word	0x40021400
 80014f4:	40021800 	.word	0x40021800
 80014f8:	40021c00 	.word	0x40021c00
 80014fc:	40022000 	.word	0x40022000
 8001500:	40022400 	.word	0x40022400
 8001504:	40013c00 	.word	0x40013c00

08001508 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b086      	sub	sp, #24
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001510:	2300      	movs	r3, #0
 8001512:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d101      	bne.n	800151e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800151a:	2301      	movs	r3, #1
 800151c:	e29b      	b.n	8001a56 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f003 0301 	and.w	r3, r3, #1
 8001526:	2b00      	cmp	r3, #0
 8001528:	f000 8087 	beq.w	800163a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800152c:	4b96      	ldr	r3, [pc, #600]	; (8001788 <HAL_RCC_OscConfig+0x280>)
 800152e:	689b      	ldr	r3, [r3, #8]
 8001530:	f003 030c 	and.w	r3, r3, #12
 8001534:	2b04      	cmp	r3, #4
 8001536:	d00c      	beq.n	8001552 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001538:	4b93      	ldr	r3, [pc, #588]	; (8001788 <HAL_RCC_OscConfig+0x280>)
 800153a:	689b      	ldr	r3, [r3, #8]
 800153c:	f003 030c 	and.w	r3, r3, #12
 8001540:	2b08      	cmp	r3, #8
 8001542:	d112      	bne.n	800156a <HAL_RCC_OscConfig+0x62>
 8001544:	4b90      	ldr	r3, [pc, #576]	; (8001788 <HAL_RCC_OscConfig+0x280>)
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800154c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001550:	d10b      	bne.n	800156a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001552:	4b8d      	ldr	r3, [pc, #564]	; (8001788 <HAL_RCC_OscConfig+0x280>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800155a:	2b00      	cmp	r3, #0
 800155c:	d06c      	beq.n	8001638 <HAL_RCC_OscConfig+0x130>
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d168      	bne.n	8001638 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001566:	2301      	movs	r3, #1
 8001568:	e275      	b.n	8001a56 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001572:	d106      	bne.n	8001582 <HAL_RCC_OscConfig+0x7a>
 8001574:	4b84      	ldr	r3, [pc, #528]	; (8001788 <HAL_RCC_OscConfig+0x280>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a83      	ldr	r2, [pc, #524]	; (8001788 <HAL_RCC_OscConfig+0x280>)
 800157a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800157e:	6013      	str	r3, [r2, #0]
 8001580:	e02e      	b.n	80015e0 <HAL_RCC_OscConfig+0xd8>
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d10c      	bne.n	80015a4 <HAL_RCC_OscConfig+0x9c>
 800158a:	4b7f      	ldr	r3, [pc, #508]	; (8001788 <HAL_RCC_OscConfig+0x280>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4a7e      	ldr	r2, [pc, #504]	; (8001788 <HAL_RCC_OscConfig+0x280>)
 8001590:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001594:	6013      	str	r3, [r2, #0]
 8001596:	4b7c      	ldr	r3, [pc, #496]	; (8001788 <HAL_RCC_OscConfig+0x280>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4a7b      	ldr	r2, [pc, #492]	; (8001788 <HAL_RCC_OscConfig+0x280>)
 800159c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015a0:	6013      	str	r3, [r2, #0]
 80015a2:	e01d      	b.n	80015e0 <HAL_RCC_OscConfig+0xd8>
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015ac:	d10c      	bne.n	80015c8 <HAL_RCC_OscConfig+0xc0>
 80015ae:	4b76      	ldr	r3, [pc, #472]	; (8001788 <HAL_RCC_OscConfig+0x280>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4a75      	ldr	r2, [pc, #468]	; (8001788 <HAL_RCC_OscConfig+0x280>)
 80015b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015b8:	6013      	str	r3, [r2, #0]
 80015ba:	4b73      	ldr	r3, [pc, #460]	; (8001788 <HAL_RCC_OscConfig+0x280>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4a72      	ldr	r2, [pc, #456]	; (8001788 <HAL_RCC_OscConfig+0x280>)
 80015c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015c4:	6013      	str	r3, [r2, #0]
 80015c6:	e00b      	b.n	80015e0 <HAL_RCC_OscConfig+0xd8>
 80015c8:	4b6f      	ldr	r3, [pc, #444]	; (8001788 <HAL_RCC_OscConfig+0x280>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a6e      	ldr	r2, [pc, #440]	; (8001788 <HAL_RCC_OscConfig+0x280>)
 80015ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015d2:	6013      	str	r3, [r2, #0]
 80015d4:	4b6c      	ldr	r3, [pc, #432]	; (8001788 <HAL_RCC_OscConfig+0x280>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a6b      	ldr	r2, [pc, #428]	; (8001788 <HAL_RCC_OscConfig+0x280>)
 80015da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d013      	beq.n	8001610 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015e8:	f7ff fc32 	bl	8000e50 <HAL_GetTick>
 80015ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015ee:	e008      	b.n	8001602 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015f0:	f7ff fc2e 	bl	8000e50 <HAL_GetTick>
 80015f4:	4602      	mov	r2, r0
 80015f6:	693b      	ldr	r3, [r7, #16]
 80015f8:	1ad3      	subs	r3, r2, r3
 80015fa:	2b64      	cmp	r3, #100	; 0x64
 80015fc:	d901      	bls.n	8001602 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80015fe:	2303      	movs	r3, #3
 8001600:	e229      	b.n	8001a56 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001602:	4b61      	ldr	r3, [pc, #388]	; (8001788 <HAL_RCC_OscConfig+0x280>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800160a:	2b00      	cmp	r3, #0
 800160c:	d0f0      	beq.n	80015f0 <HAL_RCC_OscConfig+0xe8>
 800160e:	e014      	b.n	800163a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001610:	f7ff fc1e 	bl	8000e50 <HAL_GetTick>
 8001614:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001616:	e008      	b.n	800162a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001618:	f7ff fc1a 	bl	8000e50 <HAL_GetTick>
 800161c:	4602      	mov	r2, r0
 800161e:	693b      	ldr	r3, [r7, #16]
 8001620:	1ad3      	subs	r3, r2, r3
 8001622:	2b64      	cmp	r3, #100	; 0x64
 8001624:	d901      	bls.n	800162a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001626:	2303      	movs	r3, #3
 8001628:	e215      	b.n	8001a56 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800162a:	4b57      	ldr	r3, [pc, #348]	; (8001788 <HAL_RCC_OscConfig+0x280>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001632:	2b00      	cmp	r3, #0
 8001634:	d1f0      	bne.n	8001618 <HAL_RCC_OscConfig+0x110>
 8001636:	e000      	b.n	800163a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001638:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f003 0302 	and.w	r3, r3, #2
 8001642:	2b00      	cmp	r3, #0
 8001644:	d069      	beq.n	800171a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001646:	4b50      	ldr	r3, [pc, #320]	; (8001788 <HAL_RCC_OscConfig+0x280>)
 8001648:	689b      	ldr	r3, [r3, #8]
 800164a:	f003 030c 	and.w	r3, r3, #12
 800164e:	2b00      	cmp	r3, #0
 8001650:	d00b      	beq.n	800166a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001652:	4b4d      	ldr	r3, [pc, #308]	; (8001788 <HAL_RCC_OscConfig+0x280>)
 8001654:	689b      	ldr	r3, [r3, #8]
 8001656:	f003 030c 	and.w	r3, r3, #12
 800165a:	2b08      	cmp	r3, #8
 800165c:	d11c      	bne.n	8001698 <HAL_RCC_OscConfig+0x190>
 800165e:	4b4a      	ldr	r3, [pc, #296]	; (8001788 <HAL_RCC_OscConfig+0x280>)
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001666:	2b00      	cmp	r3, #0
 8001668:	d116      	bne.n	8001698 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800166a:	4b47      	ldr	r3, [pc, #284]	; (8001788 <HAL_RCC_OscConfig+0x280>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f003 0302 	and.w	r3, r3, #2
 8001672:	2b00      	cmp	r3, #0
 8001674:	d005      	beq.n	8001682 <HAL_RCC_OscConfig+0x17a>
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	68db      	ldr	r3, [r3, #12]
 800167a:	2b01      	cmp	r3, #1
 800167c:	d001      	beq.n	8001682 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800167e:	2301      	movs	r3, #1
 8001680:	e1e9      	b.n	8001a56 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001682:	4b41      	ldr	r3, [pc, #260]	; (8001788 <HAL_RCC_OscConfig+0x280>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	691b      	ldr	r3, [r3, #16]
 800168e:	00db      	lsls	r3, r3, #3
 8001690:	493d      	ldr	r1, [pc, #244]	; (8001788 <HAL_RCC_OscConfig+0x280>)
 8001692:	4313      	orrs	r3, r2
 8001694:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001696:	e040      	b.n	800171a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	68db      	ldr	r3, [r3, #12]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d023      	beq.n	80016e8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016a0:	4b39      	ldr	r3, [pc, #228]	; (8001788 <HAL_RCC_OscConfig+0x280>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a38      	ldr	r2, [pc, #224]	; (8001788 <HAL_RCC_OscConfig+0x280>)
 80016a6:	f043 0301 	orr.w	r3, r3, #1
 80016aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016ac:	f7ff fbd0 	bl	8000e50 <HAL_GetTick>
 80016b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016b2:	e008      	b.n	80016c6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016b4:	f7ff fbcc 	bl	8000e50 <HAL_GetTick>
 80016b8:	4602      	mov	r2, r0
 80016ba:	693b      	ldr	r3, [r7, #16]
 80016bc:	1ad3      	subs	r3, r2, r3
 80016be:	2b02      	cmp	r3, #2
 80016c0:	d901      	bls.n	80016c6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80016c2:	2303      	movs	r3, #3
 80016c4:	e1c7      	b.n	8001a56 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016c6:	4b30      	ldr	r3, [pc, #192]	; (8001788 <HAL_RCC_OscConfig+0x280>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f003 0302 	and.w	r3, r3, #2
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d0f0      	beq.n	80016b4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016d2:	4b2d      	ldr	r3, [pc, #180]	; (8001788 <HAL_RCC_OscConfig+0x280>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	691b      	ldr	r3, [r3, #16]
 80016de:	00db      	lsls	r3, r3, #3
 80016e0:	4929      	ldr	r1, [pc, #164]	; (8001788 <HAL_RCC_OscConfig+0x280>)
 80016e2:	4313      	orrs	r3, r2
 80016e4:	600b      	str	r3, [r1, #0]
 80016e6:	e018      	b.n	800171a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016e8:	4b27      	ldr	r3, [pc, #156]	; (8001788 <HAL_RCC_OscConfig+0x280>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a26      	ldr	r2, [pc, #152]	; (8001788 <HAL_RCC_OscConfig+0x280>)
 80016ee:	f023 0301 	bic.w	r3, r3, #1
 80016f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016f4:	f7ff fbac 	bl	8000e50 <HAL_GetTick>
 80016f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016fa:	e008      	b.n	800170e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016fc:	f7ff fba8 	bl	8000e50 <HAL_GetTick>
 8001700:	4602      	mov	r2, r0
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	1ad3      	subs	r3, r2, r3
 8001706:	2b02      	cmp	r3, #2
 8001708:	d901      	bls.n	800170e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800170a:	2303      	movs	r3, #3
 800170c:	e1a3      	b.n	8001a56 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800170e:	4b1e      	ldr	r3, [pc, #120]	; (8001788 <HAL_RCC_OscConfig+0x280>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f003 0302 	and.w	r3, r3, #2
 8001716:	2b00      	cmp	r3, #0
 8001718:	d1f0      	bne.n	80016fc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f003 0308 	and.w	r3, r3, #8
 8001722:	2b00      	cmp	r3, #0
 8001724:	d038      	beq.n	8001798 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	695b      	ldr	r3, [r3, #20]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d019      	beq.n	8001762 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800172e:	4b16      	ldr	r3, [pc, #88]	; (8001788 <HAL_RCC_OscConfig+0x280>)
 8001730:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001732:	4a15      	ldr	r2, [pc, #84]	; (8001788 <HAL_RCC_OscConfig+0x280>)
 8001734:	f043 0301 	orr.w	r3, r3, #1
 8001738:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800173a:	f7ff fb89 	bl	8000e50 <HAL_GetTick>
 800173e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001740:	e008      	b.n	8001754 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001742:	f7ff fb85 	bl	8000e50 <HAL_GetTick>
 8001746:	4602      	mov	r2, r0
 8001748:	693b      	ldr	r3, [r7, #16]
 800174a:	1ad3      	subs	r3, r2, r3
 800174c:	2b02      	cmp	r3, #2
 800174e:	d901      	bls.n	8001754 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001750:	2303      	movs	r3, #3
 8001752:	e180      	b.n	8001a56 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001754:	4b0c      	ldr	r3, [pc, #48]	; (8001788 <HAL_RCC_OscConfig+0x280>)
 8001756:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001758:	f003 0302 	and.w	r3, r3, #2
 800175c:	2b00      	cmp	r3, #0
 800175e:	d0f0      	beq.n	8001742 <HAL_RCC_OscConfig+0x23a>
 8001760:	e01a      	b.n	8001798 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001762:	4b09      	ldr	r3, [pc, #36]	; (8001788 <HAL_RCC_OscConfig+0x280>)
 8001764:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001766:	4a08      	ldr	r2, [pc, #32]	; (8001788 <HAL_RCC_OscConfig+0x280>)
 8001768:	f023 0301 	bic.w	r3, r3, #1
 800176c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800176e:	f7ff fb6f 	bl	8000e50 <HAL_GetTick>
 8001772:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001774:	e00a      	b.n	800178c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001776:	f7ff fb6b 	bl	8000e50 <HAL_GetTick>
 800177a:	4602      	mov	r2, r0
 800177c:	693b      	ldr	r3, [r7, #16]
 800177e:	1ad3      	subs	r3, r2, r3
 8001780:	2b02      	cmp	r3, #2
 8001782:	d903      	bls.n	800178c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001784:	2303      	movs	r3, #3
 8001786:	e166      	b.n	8001a56 <HAL_RCC_OscConfig+0x54e>
 8001788:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800178c:	4b92      	ldr	r3, [pc, #584]	; (80019d8 <HAL_RCC_OscConfig+0x4d0>)
 800178e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001790:	f003 0302 	and.w	r3, r3, #2
 8001794:	2b00      	cmp	r3, #0
 8001796:	d1ee      	bne.n	8001776 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f003 0304 	and.w	r3, r3, #4
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	f000 80a4 	beq.w	80018ee <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017a6:	4b8c      	ldr	r3, [pc, #560]	; (80019d8 <HAL_RCC_OscConfig+0x4d0>)
 80017a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d10d      	bne.n	80017ce <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80017b2:	4b89      	ldr	r3, [pc, #548]	; (80019d8 <HAL_RCC_OscConfig+0x4d0>)
 80017b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b6:	4a88      	ldr	r2, [pc, #544]	; (80019d8 <HAL_RCC_OscConfig+0x4d0>)
 80017b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017bc:	6413      	str	r3, [r2, #64]	; 0x40
 80017be:	4b86      	ldr	r3, [pc, #536]	; (80019d8 <HAL_RCC_OscConfig+0x4d0>)
 80017c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017c6:	60bb      	str	r3, [r7, #8]
 80017c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017ca:	2301      	movs	r3, #1
 80017cc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017ce:	4b83      	ldr	r3, [pc, #524]	; (80019dc <HAL_RCC_OscConfig+0x4d4>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d118      	bne.n	800180c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80017da:	4b80      	ldr	r3, [pc, #512]	; (80019dc <HAL_RCC_OscConfig+0x4d4>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4a7f      	ldr	r2, [pc, #508]	; (80019dc <HAL_RCC_OscConfig+0x4d4>)
 80017e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017e6:	f7ff fb33 	bl	8000e50 <HAL_GetTick>
 80017ea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017ec:	e008      	b.n	8001800 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017ee:	f7ff fb2f 	bl	8000e50 <HAL_GetTick>
 80017f2:	4602      	mov	r2, r0
 80017f4:	693b      	ldr	r3, [r7, #16]
 80017f6:	1ad3      	subs	r3, r2, r3
 80017f8:	2b64      	cmp	r3, #100	; 0x64
 80017fa:	d901      	bls.n	8001800 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80017fc:	2303      	movs	r3, #3
 80017fe:	e12a      	b.n	8001a56 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001800:	4b76      	ldr	r3, [pc, #472]	; (80019dc <HAL_RCC_OscConfig+0x4d4>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001808:	2b00      	cmp	r3, #0
 800180a:	d0f0      	beq.n	80017ee <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	689b      	ldr	r3, [r3, #8]
 8001810:	2b01      	cmp	r3, #1
 8001812:	d106      	bne.n	8001822 <HAL_RCC_OscConfig+0x31a>
 8001814:	4b70      	ldr	r3, [pc, #448]	; (80019d8 <HAL_RCC_OscConfig+0x4d0>)
 8001816:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001818:	4a6f      	ldr	r2, [pc, #444]	; (80019d8 <HAL_RCC_OscConfig+0x4d0>)
 800181a:	f043 0301 	orr.w	r3, r3, #1
 800181e:	6713      	str	r3, [r2, #112]	; 0x70
 8001820:	e02d      	b.n	800187e <HAL_RCC_OscConfig+0x376>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	689b      	ldr	r3, [r3, #8]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d10c      	bne.n	8001844 <HAL_RCC_OscConfig+0x33c>
 800182a:	4b6b      	ldr	r3, [pc, #428]	; (80019d8 <HAL_RCC_OscConfig+0x4d0>)
 800182c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800182e:	4a6a      	ldr	r2, [pc, #424]	; (80019d8 <HAL_RCC_OscConfig+0x4d0>)
 8001830:	f023 0301 	bic.w	r3, r3, #1
 8001834:	6713      	str	r3, [r2, #112]	; 0x70
 8001836:	4b68      	ldr	r3, [pc, #416]	; (80019d8 <HAL_RCC_OscConfig+0x4d0>)
 8001838:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800183a:	4a67      	ldr	r2, [pc, #412]	; (80019d8 <HAL_RCC_OscConfig+0x4d0>)
 800183c:	f023 0304 	bic.w	r3, r3, #4
 8001840:	6713      	str	r3, [r2, #112]	; 0x70
 8001842:	e01c      	b.n	800187e <HAL_RCC_OscConfig+0x376>
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	689b      	ldr	r3, [r3, #8]
 8001848:	2b05      	cmp	r3, #5
 800184a:	d10c      	bne.n	8001866 <HAL_RCC_OscConfig+0x35e>
 800184c:	4b62      	ldr	r3, [pc, #392]	; (80019d8 <HAL_RCC_OscConfig+0x4d0>)
 800184e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001850:	4a61      	ldr	r2, [pc, #388]	; (80019d8 <HAL_RCC_OscConfig+0x4d0>)
 8001852:	f043 0304 	orr.w	r3, r3, #4
 8001856:	6713      	str	r3, [r2, #112]	; 0x70
 8001858:	4b5f      	ldr	r3, [pc, #380]	; (80019d8 <HAL_RCC_OscConfig+0x4d0>)
 800185a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800185c:	4a5e      	ldr	r2, [pc, #376]	; (80019d8 <HAL_RCC_OscConfig+0x4d0>)
 800185e:	f043 0301 	orr.w	r3, r3, #1
 8001862:	6713      	str	r3, [r2, #112]	; 0x70
 8001864:	e00b      	b.n	800187e <HAL_RCC_OscConfig+0x376>
 8001866:	4b5c      	ldr	r3, [pc, #368]	; (80019d8 <HAL_RCC_OscConfig+0x4d0>)
 8001868:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800186a:	4a5b      	ldr	r2, [pc, #364]	; (80019d8 <HAL_RCC_OscConfig+0x4d0>)
 800186c:	f023 0301 	bic.w	r3, r3, #1
 8001870:	6713      	str	r3, [r2, #112]	; 0x70
 8001872:	4b59      	ldr	r3, [pc, #356]	; (80019d8 <HAL_RCC_OscConfig+0x4d0>)
 8001874:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001876:	4a58      	ldr	r2, [pc, #352]	; (80019d8 <HAL_RCC_OscConfig+0x4d0>)
 8001878:	f023 0304 	bic.w	r3, r3, #4
 800187c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	689b      	ldr	r3, [r3, #8]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d015      	beq.n	80018b2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001886:	f7ff fae3 	bl	8000e50 <HAL_GetTick>
 800188a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800188c:	e00a      	b.n	80018a4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800188e:	f7ff fadf 	bl	8000e50 <HAL_GetTick>
 8001892:	4602      	mov	r2, r0
 8001894:	693b      	ldr	r3, [r7, #16]
 8001896:	1ad3      	subs	r3, r2, r3
 8001898:	f241 3288 	movw	r2, #5000	; 0x1388
 800189c:	4293      	cmp	r3, r2
 800189e:	d901      	bls.n	80018a4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80018a0:	2303      	movs	r3, #3
 80018a2:	e0d8      	b.n	8001a56 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018a4:	4b4c      	ldr	r3, [pc, #304]	; (80019d8 <HAL_RCC_OscConfig+0x4d0>)
 80018a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018a8:	f003 0302 	and.w	r3, r3, #2
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d0ee      	beq.n	800188e <HAL_RCC_OscConfig+0x386>
 80018b0:	e014      	b.n	80018dc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018b2:	f7ff facd 	bl	8000e50 <HAL_GetTick>
 80018b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018b8:	e00a      	b.n	80018d0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018ba:	f7ff fac9 	bl	8000e50 <HAL_GetTick>
 80018be:	4602      	mov	r2, r0
 80018c0:	693b      	ldr	r3, [r7, #16]
 80018c2:	1ad3      	subs	r3, r2, r3
 80018c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80018c8:	4293      	cmp	r3, r2
 80018ca:	d901      	bls.n	80018d0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80018cc:	2303      	movs	r3, #3
 80018ce:	e0c2      	b.n	8001a56 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018d0:	4b41      	ldr	r3, [pc, #260]	; (80019d8 <HAL_RCC_OscConfig+0x4d0>)
 80018d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018d4:	f003 0302 	and.w	r3, r3, #2
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d1ee      	bne.n	80018ba <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80018dc:	7dfb      	ldrb	r3, [r7, #23]
 80018de:	2b01      	cmp	r3, #1
 80018e0:	d105      	bne.n	80018ee <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018e2:	4b3d      	ldr	r3, [pc, #244]	; (80019d8 <HAL_RCC_OscConfig+0x4d0>)
 80018e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e6:	4a3c      	ldr	r2, [pc, #240]	; (80019d8 <HAL_RCC_OscConfig+0x4d0>)
 80018e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018ec:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	699b      	ldr	r3, [r3, #24]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	f000 80ae 	beq.w	8001a54 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018f8:	4b37      	ldr	r3, [pc, #220]	; (80019d8 <HAL_RCC_OscConfig+0x4d0>)
 80018fa:	689b      	ldr	r3, [r3, #8]
 80018fc:	f003 030c 	and.w	r3, r3, #12
 8001900:	2b08      	cmp	r3, #8
 8001902:	d06d      	beq.n	80019e0 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	699b      	ldr	r3, [r3, #24]
 8001908:	2b02      	cmp	r3, #2
 800190a:	d14b      	bne.n	80019a4 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800190c:	4b32      	ldr	r3, [pc, #200]	; (80019d8 <HAL_RCC_OscConfig+0x4d0>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a31      	ldr	r2, [pc, #196]	; (80019d8 <HAL_RCC_OscConfig+0x4d0>)
 8001912:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001916:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001918:	f7ff fa9a 	bl	8000e50 <HAL_GetTick>
 800191c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800191e:	e008      	b.n	8001932 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001920:	f7ff fa96 	bl	8000e50 <HAL_GetTick>
 8001924:	4602      	mov	r2, r0
 8001926:	693b      	ldr	r3, [r7, #16]
 8001928:	1ad3      	subs	r3, r2, r3
 800192a:	2b02      	cmp	r3, #2
 800192c:	d901      	bls.n	8001932 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800192e:	2303      	movs	r3, #3
 8001930:	e091      	b.n	8001a56 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001932:	4b29      	ldr	r3, [pc, #164]	; (80019d8 <HAL_RCC_OscConfig+0x4d0>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800193a:	2b00      	cmp	r3, #0
 800193c:	d1f0      	bne.n	8001920 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	69da      	ldr	r2, [r3, #28]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6a1b      	ldr	r3, [r3, #32]
 8001946:	431a      	orrs	r2, r3
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800194c:	019b      	lsls	r3, r3, #6
 800194e:	431a      	orrs	r2, r3
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001954:	085b      	lsrs	r3, r3, #1
 8001956:	3b01      	subs	r3, #1
 8001958:	041b      	lsls	r3, r3, #16
 800195a:	431a      	orrs	r2, r3
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001960:	061b      	lsls	r3, r3, #24
 8001962:	431a      	orrs	r2, r3
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001968:	071b      	lsls	r3, r3, #28
 800196a:	491b      	ldr	r1, [pc, #108]	; (80019d8 <HAL_RCC_OscConfig+0x4d0>)
 800196c:	4313      	orrs	r3, r2
 800196e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001970:	4b19      	ldr	r3, [pc, #100]	; (80019d8 <HAL_RCC_OscConfig+0x4d0>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a18      	ldr	r2, [pc, #96]	; (80019d8 <HAL_RCC_OscConfig+0x4d0>)
 8001976:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800197a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800197c:	f7ff fa68 	bl	8000e50 <HAL_GetTick>
 8001980:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001982:	e008      	b.n	8001996 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001984:	f7ff fa64 	bl	8000e50 <HAL_GetTick>
 8001988:	4602      	mov	r2, r0
 800198a:	693b      	ldr	r3, [r7, #16]
 800198c:	1ad3      	subs	r3, r2, r3
 800198e:	2b02      	cmp	r3, #2
 8001990:	d901      	bls.n	8001996 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001992:	2303      	movs	r3, #3
 8001994:	e05f      	b.n	8001a56 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001996:	4b10      	ldr	r3, [pc, #64]	; (80019d8 <HAL_RCC_OscConfig+0x4d0>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d0f0      	beq.n	8001984 <HAL_RCC_OscConfig+0x47c>
 80019a2:	e057      	b.n	8001a54 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019a4:	4b0c      	ldr	r3, [pc, #48]	; (80019d8 <HAL_RCC_OscConfig+0x4d0>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a0b      	ldr	r2, [pc, #44]	; (80019d8 <HAL_RCC_OscConfig+0x4d0>)
 80019aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80019ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019b0:	f7ff fa4e 	bl	8000e50 <HAL_GetTick>
 80019b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019b6:	e008      	b.n	80019ca <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019b8:	f7ff fa4a 	bl	8000e50 <HAL_GetTick>
 80019bc:	4602      	mov	r2, r0
 80019be:	693b      	ldr	r3, [r7, #16]
 80019c0:	1ad3      	subs	r3, r2, r3
 80019c2:	2b02      	cmp	r3, #2
 80019c4:	d901      	bls.n	80019ca <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80019c6:	2303      	movs	r3, #3
 80019c8:	e045      	b.n	8001a56 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019ca:	4b03      	ldr	r3, [pc, #12]	; (80019d8 <HAL_RCC_OscConfig+0x4d0>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d1f0      	bne.n	80019b8 <HAL_RCC_OscConfig+0x4b0>
 80019d6:	e03d      	b.n	8001a54 <HAL_RCC_OscConfig+0x54c>
 80019d8:	40023800 	.word	0x40023800
 80019dc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80019e0:	4b1f      	ldr	r3, [pc, #124]	; (8001a60 <HAL_RCC_OscConfig+0x558>)
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	699b      	ldr	r3, [r3, #24]
 80019ea:	2b01      	cmp	r3, #1
 80019ec:	d030      	beq.n	8001a50 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019f8:	429a      	cmp	r2, r3
 80019fa:	d129      	bne.n	8001a50 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a06:	429a      	cmp	r2, r3
 8001a08:	d122      	bne.n	8001a50 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a0a:	68fa      	ldr	r2, [r7, #12]
 8001a0c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001a10:	4013      	ands	r3, r2
 8001a12:	687a      	ldr	r2, [r7, #4]
 8001a14:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001a16:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d119      	bne.n	8001a50 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a26:	085b      	lsrs	r3, r3, #1
 8001a28:	3b01      	subs	r3, #1
 8001a2a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a2c:	429a      	cmp	r2, r3
 8001a2e:	d10f      	bne.n	8001a50 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a3a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	d107      	bne.n	8001a50 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	d001      	beq.n	8001a54 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8001a50:	2301      	movs	r3, #1
 8001a52:	e000      	b.n	8001a56 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8001a54:	2300      	movs	r3, #0
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	3718      	adds	r7, #24
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	40023800 	.word	0x40023800

08001a64 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b084      	sub	sp, #16
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
 8001a6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d101      	bne.n	8001a7c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	e0d0      	b.n	8001c1e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a7c:	4b6a      	ldr	r3, [pc, #424]	; (8001c28 <HAL_RCC_ClockConfig+0x1c4>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f003 030f 	and.w	r3, r3, #15
 8001a84:	683a      	ldr	r2, [r7, #0]
 8001a86:	429a      	cmp	r2, r3
 8001a88:	d910      	bls.n	8001aac <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a8a:	4b67      	ldr	r3, [pc, #412]	; (8001c28 <HAL_RCC_ClockConfig+0x1c4>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f023 020f 	bic.w	r2, r3, #15
 8001a92:	4965      	ldr	r1, [pc, #404]	; (8001c28 <HAL_RCC_ClockConfig+0x1c4>)
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	4313      	orrs	r3, r2
 8001a98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a9a:	4b63      	ldr	r3, [pc, #396]	; (8001c28 <HAL_RCC_ClockConfig+0x1c4>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f003 030f 	and.w	r3, r3, #15
 8001aa2:	683a      	ldr	r2, [r7, #0]
 8001aa4:	429a      	cmp	r2, r3
 8001aa6:	d001      	beq.n	8001aac <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	e0b8      	b.n	8001c1e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f003 0302 	and.w	r3, r3, #2
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d020      	beq.n	8001afa <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f003 0304 	and.w	r3, r3, #4
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d005      	beq.n	8001ad0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ac4:	4b59      	ldr	r3, [pc, #356]	; (8001c2c <HAL_RCC_ClockConfig+0x1c8>)
 8001ac6:	689b      	ldr	r3, [r3, #8]
 8001ac8:	4a58      	ldr	r2, [pc, #352]	; (8001c2c <HAL_RCC_ClockConfig+0x1c8>)
 8001aca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001ace:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f003 0308 	and.w	r3, r3, #8
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d005      	beq.n	8001ae8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001adc:	4b53      	ldr	r3, [pc, #332]	; (8001c2c <HAL_RCC_ClockConfig+0x1c8>)
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	4a52      	ldr	r2, [pc, #328]	; (8001c2c <HAL_RCC_ClockConfig+0x1c8>)
 8001ae2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001ae6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ae8:	4b50      	ldr	r3, [pc, #320]	; (8001c2c <HAL_RCC_ClockConfig+0x1c8>)
 8001aea:	689b      	ldr	r3, [r3, #8]
 8001aec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	494d      	ldr	r1, [pc, #308]	; (8001c2c <HAL_RCC_ClockConfig+0x1c8>)
 8001af6:	4313      	orrs	r3, r2
 8001af8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f003 0301 	and.w	r3, r3, #1
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d040      	beq.n	8001b88 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	2b01      	cmp	r3, #1
 8001b0c:	d107      	bne.n	8001b1e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b0e:	4b47      	ldr	r3, [pc, #284]	; (8001c2c <HAL_RCC_ClockConfig+0x1c8>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d115      	bne.n	8001b46 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e07f      	b.n	8001c1e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	2b02      	cmp	r3, #2
 8001b24:	d107      	bne.n	8001b36 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b26:	4b41      	ldr	r3, [pc, #260]	; (8001c2c <HAL_RCC_ClockConfig+0x1c8>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d109      	bne.n	8001b46 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	e073      	b.n	8001c1e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b36:	4b3d      	ldr	r3, [pc, #244]	; (8001c2c <HAL_RCC_ClockConfig+0x1c8>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f003 0302 	and.w	r3, r3, #2
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d101      	bne.n	8001b46 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
 8001b44:	e06b      	b.n	8001c1e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b46:	4b39      	ldr	r3, [pc, #228]	; (8001c2c <HAL_RCC_ClockConfig+0x1c8>)
 8001b48:	689b      	ldr	r3, [r3, #8]
 8001b4a:	f023 0203 	bic.w	r2, r3, #3
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	4936      	ldr	r1, [pc, #216]	; (8001c2c <HAL_RCC_ClockConfig+0x1c8>)
 8001b54:	4313      	orrs	r3, r2
 8001b56:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b58:	f7ff f97a 	bl	8000e50 <HAL_GetTick>
 8001b5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b5e:	e00a      	b.n	8001b76 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b60:	f7ff f976 	bl	8000e50 <HAL_GetTick>
 8001b64:	4602      	mov	r2, r0
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	1ad3      	subs	r3, r2, r3
 8001b6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d901      	bls.n	8001b76 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001b72:	2303      	movs	r3, #3
 8001b74:	e053      	b.n	8001c1e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b76:	4b2d      	ldr	r3, [pc, #180]	; (8001c2c <HAL_RCC_ClockConfig+0x1c8>)
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	f003 020c 	and.w	r2, r3, #12
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	009b      	lsls	r3, r3, #2
 8001b84:	429a      	cmp	r2, r3
 8001b86:	d1eb      	bne.n	8001b60 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b88:	4b27      	ldr	r3, [pc, #156]	; (8001c28 <HAL_RCC_ClockConfig+0x1c4>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f003 030f 	and.w	r3, r3, #15
 8001b90:	683a      	ldr	r2, [r7, #0]
 8001b92:	429a      	cmp	r2, r3
 8001b94:	d210      	bcs.n	8001bb8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b96:	4b24      	ldr	r3, [pc, #144]	; (8001c28 <HAL_RCC_ClockConfig+0x1c4>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f023 020f 	bic.w	r2, r3, #15
 8001b9e:	4922      	ldr	r1, [pc, #136]	; (8001c28 <HAL_RCC_ClockConfig+0x1c4>)
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ba6:	4b20      	ldr	r3, [pc, #128]	; (8001c28 <HAL_RCC_ClockConfig+0x1c4>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f003 030f 	and.w	r3, r3, #15
 8001bae:	683a      	ldr	r2, [r7, #0]
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	d001      	beq.n	8001bb8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	e032      	b.n	8001c1e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f003 0304 	and.w	r3, r3, #4
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d008      	beq.n	8001bd6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bc4:	4b19      	ldr	r3, [pc, #100]	; (8001c2c <HAL_RCC_ClockConfig+0x1c8>)
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	68db      	ldr	r3, [r3, #12]
 8001bd0:	4916      	ldr	r1, [pc, #88]	; (8001c2c <HAL_RCC_ClockConfig+0x1c8>)
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f003 0308 	and.w	r3, r3, #8
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d009      	beq.n	8001bf6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001be2:	4b12      	ldr	r3, [pc, #72]	; (8001c2c <HAL_RCC_ClockConfig+0x1c8>)
 8001be4:	689b      	ldr	r3, [r3, #8]
 8001be6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	691b      	ldr	r3, [r3, #16]
 8001bee:	00db      	lsls	r3, r3, #3
 8001bf0:	490e      	ldr	r1, [pc, #56]	; (8001c2c <HAL_RCC_ClockConfig+0x1c8>)
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001bf6:	f000 f821 	bl	8001c3c <HAL_RCC_GetSysClockFreq>
 8001bfa:	4602      	mov	r2, r0
 8001bfc:	4b0b      	ldr	r3, [pc, #44]	; (8001c2c <HAL_RCC_ClockConfig+0x1c8>)
 8001bfe:	689b      	ldr	r3, [r3, #8]
 8001c00:	091b      	lsrs	r3, r3, #4
 8001c02:	f003 030f 	and.w	r3, r3, #15
 8001c06:	490a      	ldr	r1, [pc, #40]	; (8001c30 <HAL_RCC_ClockConfig+0x1cc>)
 8001c08:	5ccb      	ldrb	r3, [r1, r3]
 8001c0a:	fa22 f303 	lsr.w	r3, r2, r3
 8001c0e:	4a09      	ldr	r2, [pc, #36]	; (8001c34 <HAL_RCC_ClockConfig+0x1d0>)
 8001c10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001c12:	4b09      	ldr	r3, [pc, #36]	; (8001c38 <HAL_RCC_ClockConfig+0x1d4>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4618      	mov	r0, r3
 8001c18:	f7ff f8d6 	bl	8000dc8 <HAL_InitTick>

  return HAL_OK;
 8001c1c:	2300      	movs	r3, #0
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	3710      	adds	r7, #16
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	40023c00 	.word	0x40023c00
 8001c2c:	40023800 	.word	0x40023800
 8001c30:	08005744 	.word	0x08005744
 8001c34:	20000000 	.word	0x20000000
 8001c38:	20000004 	.word	0x20000004

08001c3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c40:	b090      	sub	sp, #64	; 0x40
 8001c42:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001c44:	2300      	movs	r3, #0
 8001c46:	637b      	str	r3, [r7, #52]	; 0x34
 8001c48:	2300      	movs	r3, #0
 8001c4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8001c50:	2300      	movs	r3, #0
 8001c52:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c54:	4b59      	ldr	r3, [pc, #356]	; (8001dbc <HAL_RCC_GetSysClockFreq+0x180>)
 8001c56:	689b      	ldr	r3, [r3, #8]
 8001c58:	f003 030c 	and.w	r3, r3, #12
 8001c5c:	2b08      	cmp	r3, #8
 8001c5e:	d00d      	beq.n	8001c7c <HAL_RCC_GetSysClockFreq+0x40>
 8001c60:	2b08      	cmp	r3, #8
 8001c62:	f200 80a1 	bhi.w	8001da8 <HAL_RCC_GetSysClockFreq+0x16c>
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d002      	beq.n	8001c70 <HAL_RCC_GetSysClockFreq+0x34>
 8001c6a:	2b04      	cmp	r3, #4
 8001c6c:	d003      	beq.n	8001c76 <HAL_RCC_GetSysClockFreq+0x3a>
 8001c6e:	e09b      	b.n	8001da8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001c70:	4b53      	ldr	r3, [pc, #332]	; (8001dc0 <HAL_RCC_GetSysClockFreq+0x184>)
 8001c72:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001c74:	e09b      	b.n	8001dae <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001c76:	4b53      	ldr	r3, [pc, #332]	; (8001dc4 <HAL_RCC_GetSysClockFreq+0x188>)
 8001c78:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001c7a:	e098      	b.n	8001dae <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c7c:	4b4f      	ldr	r3, [pc, #316]	; (8001dbc <HAL_RCC_GetSysClockFreq+0x180>)
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c84:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001c86:	4b4d      	ldr	r3, [pc, #308]	; (8001dbc <HAL_RCC_GetSysClockFreq+0x180>)
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d028      	beq.n	8001ce4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c92:	4b4a      	ldr	r3, [pc, #296]	; (8001dbc <HAL_RCC_GetSysClockFreq+0x180>)
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	099b      	lsrs	r3, r3, #6
 8001c98:	2200      	movs	r2, #0
 8001c9a:	623b      	str	r3, [r7, #32]
 8001c9c:	627a      	str	r2, [r7, #36]	; 0x24
 8001c9e:	6a3b      	ldr	r3, [r7, #32]
 8001ca0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001ca4:	2100      	movs	r1, #0
 8001ca6:	4b47      	ldr	r3, [pc, #284]	; (8001dc4 <HAL_RCC_GetSysClockFreq+0x188>)
 8001ca8:	fb03 f201 	mul.w	r2, r3, r1
 8001cac:	2300      	movs	r3, #0
 8001cae:	fb00 f303 	mul.w	r3, r0, r3
 8001cb2:	4413      	add	r3, r2
 8001cb4:	4a43      	ldr	r2, [pc, #268]	; (8001dc4 <HAL_RCC_GetSysClockFreq+0x188>)
 8001cb6:	fba0 1202 	umull	r1, r2, r0, r2
 8001cba:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001cbc:	460a      	mov	r2, r1
 8001cbe:	62ba      	str	r2, [r7, #40]	; 0x28
 8001cc0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001cc2:	4413      	add	r3, r2
 8001cc4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001cc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cc8:	2200      	movs	r2, #0
 8001cca:	61bb      	str	r3, [r7, #24]
 8001ccc:	61fa      	str	r2, [r7, #28]
 8001cce:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001cd2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001cd6:	f7fe fb03 	bl	80002e0 <__aeabi_uldivmod>
 8001cda:	4602      	mov	r2, r0
 8001cdc:	460b      	mov	r3, r1
 8001cde:	4613      	mov	r3, r2
 8001ce0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001ce2:	e053      	b.n	8001d8c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ce4:	4b35      	ldr	r3, [pc, #212]	; (8001dbc <HAL_RCC_GetSysClockFreq+0x180>)
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	099b      	lsrs	r3, r3, #6
 8001cea:	2200      	movs	r2, #0
 8001cec:	613b      	str	r3, [r7, #16]
 8001cee:	617a      	str	r2, [r7, #20]
 8001cf0:	693b      	ldr	r3, [r7, #16]
 8001cf2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001cf6:	f04f 0b00 	mov.w	fp, #0
 8001cfa:	4652      	mov	r2, sl
 8001cfc:	465b      	mov	r3, fp
 8001cfe:	f04f 0000 	mov.w	r0, #0
 8001d02:	f04f 0100 	mov.w	r1, #0
 8001d06:	0159      	lsls	r1, r3, #5
 8001d08:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d0c:	0150      	lsls	r0, r2, #5
 8001d0e:	4602      	mov	r2, r0
 8001d10:	460b      	mov	r3, r1
 8001d12:	ebb2 080a 	subs.w	r8, r2, sl
 8001d16:	eb63 090b 	sbc.w	r9, r3, fp
 8001d1a:	f04f 0200 	mov.w	r2, #0
 8001d1e:	f04f 0300 	mov.w	r3, #0
 8001d22:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001d26:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001d2a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001d2e:	ebb2 0408 	subs.w	r4, r2, r8
 8001d32:	eb63 0509 	sbc.w	r5, r3, r9
 8001d36:	f04f 0200 	mov.w	r2, #0
 8001d3a:	f04f 0300 	mov.w	r3, #0
 8001d3e:	00eb      	lsls	r3, r5, #3
 8001d40:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001d44:	00e2      	lsls	r2, r4, #3
 8001d46:	4614      	mov	r4, r2
 8001d48:	461d      	mov	r5, r3
 8001d4a:	eb14 030a 	adds.w	r3, r4, sl
 8001d4e:	603b      	str	r3, [r7, #0]
 8001d50:	eb45 030b 	adc.w	r3, r5, fp
 8001d54:	607b      	str	r3, [r7, #4]
 8001d56:	f04f 0200 	mov.w	r2, #0
 8001d5a:	f04f 0300 	mov.w	r3, #0
 8001d5e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001d62:	4629      	mov	r1, r5
 8001d64:	028b      	lsls	r3, r1, #10
 8001d66:	4621      	mov	r1, r4
 8001d68:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001d6c:	4621      	mov	r1, r4
 8001d6e:	028a      	lsls	r2, r1, #10
 8001d70:	4610      	mov	r0, r2
 8001d72:	4619      	mov	r1, r3
 8001d74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d76:	2200      	movs	r2, #0
 8001d78:	60bb      	str	r3, [r7, #8]
 8001d7a:	60fa      	str	r2, [r7, #12]
 8001d7c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001d80:	f7fe faae 	bl	80002e0 <__aeabi_uldivmod>
 8001d84:	4602      	mov	r2, r0
 8001d86:	460b      	mov	r3, r1
 8001d88:	4613      	mov	r3, r2
 8001d8a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001d8c:	4b0b      	ldr	r3, [pc, #44]	; (8001dbc <HAL_RCC_GetSysClockFreq+0x180>)
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	0c1b      	lsrs	r3, r3, #16
 8001d92:	f003 0303 	and.w	r3, r3, #3
 8001d96:	3301      	adds	r3, #1
 8001d98:	005b      	lsls	r3, r3, #1
 8001d9a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8001d9c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001da0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001da4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001da6:	e002      	b.n	8001dae <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001da8:	4b05      	ldr	r3, [pc, #20]	; (8001dc0 <HAL_RCC_GetSysClockFreq+0x184>)
 8001daa:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001dac:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001dae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	3740      	adds	r7, #64	; 0x40
 8001db4:	46bd      	mov	sp, r7
 8001db6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001dba:	bf00      	nop
 8001dbc:	40023800 	.word	0x40023800
 8001dc0:	00f42400 	.word	0x00f42400
 8001dc4:	017d7840 	.word	0x017d7840

08001dc8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001dcc:	4b03      	ldr	r3, [pc, #12]	; (8001ddc <HAL_RCC_GetHCLKFreq+0x14>)
 8001dce:	681b      	ldr	r3, [r3, #0]
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr
 8001dda:	bf00      	nop
 8001ddc:	20000000 	.word	0x20000000

08001de0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001de4:	f7ff fff0 	bl	8001dc8 <HAL_RCC_GetHCLKFreq>
 8001de8:	4602      	mov	r2, r0
 8001dea:	4b05      	ldr	r3, [pc, #20]	; (8001e00 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001dec:	689b      	ldr	r3, [r3, #8]
 8001dee:	0a9b      	lsrs	r3, r3, #10
 8001df0:	f003 0307 	and.w	r3, r3, #7
 8001df4:	4903      	ldr	r1, [pc, #12]	; (8001e04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001df6:	5ccb      	ldrb	r3, [r1, r3]
 8001df8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	bd80      	pop	{r7, pc}
 8001e00:	40023800 	.word	0x40023800
 8001e04:	08005754 	.word	0x08005754

08001e08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001e0c:	f7ff ffdc 	bl	8001dc8 <HAL_RCC_GetHCLKFreq>
 8001e10:	4602      	mov	r2, r0
 8001e12:	4b05      	ldr	r3, [pc, #20]	; (8001e28 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e14:	689b      	ldr	r3, [r3, #8]
 8001e16:	0b5b      	lsrs	r3, r3, #13
 8001e18:	f003 0307 	and.w	r3, r3, #7
 8001e1c:	4903      	ldr	r1, [pc, #12]	; (8001e2c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e1e:	5ccb      	ldrb	r3, [r1, r3]
 8001e20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	bd80      	pop	{r7, pc}
 8001e28:	40023800 	.word	0x40023800
 8001e2c:	08005754 	.word	0x08005754

08001e30 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b088      	sub	sp, #32
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8001e40:	2300      	movs	r3, #0
 8001e42:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8001e44:	2300      	movs	r3, #0
 8001e46:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f003 0301 	and.w	r3, r3, #1
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d012      	beq.n	8001e7e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001e58:	4b69      	ldr	r3, [pc, #420]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e5a:	689b      	ldr	r3, [r3, #8]
 8001e5c:	4a68      	ldr	r2, [pc, #416]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e5e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001e62:	6093      	str	r3, [r2, #8]
 8001e64:	4b66      	ldr	r3, [pc, #408]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e66:	689a      	ldr	r2, [r3, #8]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e6c:	4964      	ldr	r1, [pc, #400]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d101      	bne.n	8001e7e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d017      	beq.n	8001eba <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001e8a:	4b5d      	ldr	r3, [pc, #372]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001e90:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e98:	4959      	ldr	r1, [pc, #356]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ea4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001ea8:	d101      	bne.n	8001eae <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d101      	bne.n	8001eba <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d017      	beq.n	8001ef6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001ec6:	4b4e      	ldr	r3, [pc, #312]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ec8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001ecc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed4:	494a      	ldr	r1, [pc, #296]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ee4:	d101      	bne.n	8001eea <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d101      	bne.n	8001ef6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d001      	beq.n	8001f06 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8001f02:	2301      	movs	r3, #1
 8001f04:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f003 0320 	and.w	r3, r3, #32
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	f000 808b 	beq.w	800202a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001f14:	4b3a      	ldr	r3, [pc, #232]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f18:	4a39      	ldr	r2, [pc, #228]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f1e:	6413      	str	r3, [r2, #64]	; 0x40
 8001f20:	4b37      	ldr	r3, [pc, #220]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f28:	60bb      	str	r3, [r7, #8]
 8001f2a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001f2c:	4b35      	ldr	r3, [pc, #212]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a34      	ldr	r2, [pc, #208]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001f32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f36:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f38:	f7fe ff8a 	bl	8000e50 <HAL_GetTick>
 8001f3c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001f3e:	e008      	b.n	8001f52 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f40:	f7fe ff86 	bl	8000e50 <HAL_GetTick>
 8001f44:	4602      	mov	r2, r0
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	1ad3      	subs	r3, r2, r3
 8001f4a:	2b64      	cmp	r3, #100	; 0x64
 8001f4c:	d901      	bls.n	8001f52 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8001f4e:	2303      	movs	r3, #3
 8001f50:	e38f      	b.n	8002672 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001f52:	4b2c      	ldr	r3, [pc, #176]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d0f0      	beq.n	8001f40 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001f5e:	4b28      	ldr	r3, [pc, #160]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f66:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d035      	beq.n	8001fda <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f76:	693a      	ldr	r2, [r7, #16]
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	d02e      	beq.n	8001fda <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001f7c:	4b20      	ldr	r3, [pc, #128]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f84:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001f86:	4b1e      	ldr	r3, [pc, #120]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f8a:	4a1d      	ldr	r2, [pc, #116]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f90:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001f92:	4b1b      	ldr	r3, [pc, #108]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f96:	4a1a      	ldr	r2, [pc, #104]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f9c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8001f9e:	4a18      	ldr	r2, [pc, #96]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001fa4:	4b16      	ldr	r3, [pc, #88]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fa8:	f003 0301 	and.w	r3, r3, #1
 8001fac:	2b01      	cmp	r3, #1
 8001fae:	d114      	bne.n	8001fda <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fb0:	f7fe ff4e 	bl	8000e50 <HAL_GetTick>
 8001fb4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fb6:	e00a      	b.n	8001fce <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fb8:	f7fe ff4a 	bl	8000e50 <HAL_GetTick>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	697b      	ldr	r3, [r7, #20]
 8001fc0:	1ad3      	subs	r3, r2, r3
 8001fc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d901      	bls.n	8001fce <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001fca:	2303      	movs	r3, #3
 8001fcc:	e351      	b.n	8002672 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fce:	4b0c      	ldr	r3, [pc, #48]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fd2:	f003 0302 	and.w	r3, r3, #2
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d0ee      	beq.n	8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fe2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001fe6:	d111      	bne.n	800200c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8001fe8:	4b05      	ldr	r3, [pc, #20]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001ff4:	4b04      	ldr	r3, [pc, #16]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001ff6:	400b      	ands	r3, r1
 8001ff8:	4901      	ldr	r1, [pc, #4]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	608b      	str	r3, [r1, #8]
 8001ffe:	e00b      	b.n	8002018 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002000:	40023800 	.word	0x40023800
 8002004:	40007000 	.word	0x40007000
 8002008:	0ffffcff 	.word	0x0ffffcff
 800200c:	4bac      	ldr	r3, [pc, #688]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800200e:	689b      	ldr	r3, [r3, #8]
 8002010:	4aab      	ldr	r2, [pc, #684]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002012:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002016:	6093      	str	r3, [r2, #8]
 8002018:	4ba9      	ldr	r3, [pc, #676]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800201a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002020:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002024:	49a6      	ldr	r1, [pc, #664]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002026:	4313      	orrs	r3, r2
 8002028:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f003 0310 	and.w	r3, r3, #16
 8002032:	2b00      	cmp	r3, #0
 8002034:	d010      	beq.n	8002058 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002036:	4ba2      	ldr	r3, [pc, #648]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002038:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800203c:	4aa0      	ldr	r2, [pc, #640]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800203e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002042:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002046:	4b9e      	ldr	r3, [pc, #632]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002048:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002050:	499b      	ldr	r1, [pc, #620]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002052:	4313      	orrs	r3, r2
 8002054:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002060:	2b00      	cmp	r3, #0
 8002062:	d00a      	beq.n	800207a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002064:	4b96      	ldr	r3, [pc, #600]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002066:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800206a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002072:	4993      	ldr	r1, [pc, #588]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002074:	4313      	orrs	r3, r2
 8002076:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002082:	2b00      	cmp	r3, #0
 8002084:	d00a      	beq.n	800209c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002086:	4b8e      	ldr	r3, [pc, #568]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002088:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800208c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002094:	498a      	ldr	r1, [pc, #552]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002096:	4313      	orrs	r3, r2
 8002098:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d00a      	beq.n	80020be <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80020a8:	4b85      	ldr	r3, [pc, #532]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020ae:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80020b6:	4982      	ldr	r1, [pc, #520]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020b8:	4313      	orrs	r3, r2
 80020ba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d00a      	beq.n	80020e0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80020ca:	4b7d      	ldr	r3, [pc, #500]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020d0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020d8:	4979      	ldr	r1, [pc, #484]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020da:	4313      	orrs	r3, r2
 80020dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d00a      	beq.n	8002102 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80020ec:	4b74      	ldr	r3, [pc, #464]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020f2:	f023 0203 	bic.w	r2, r3, #3
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020fa:	4971      	ldr	r1, [pc, #452]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020fc:	4313      	orrs	r3, r2
 80020fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800210a:	2b00      	cmp	r3, #0
 800210c:	d00a      	beq.n	8002124 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800210e:	4b6c      	ldr	r3, [pc, #432]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002110:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002114:	f023 020c 	bic.w	r2, r3, #12
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800211c:	4968      	ldr	r1, [pc, #416]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800211e:	4313      	orrs	r3, r2
 8002120:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800212c:	2b00      	cmp	r3, #0
 800212e:	d00a      	beq.n	8002146 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002130:	4b63      	ldr	r3, [pc, #396]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002132:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002136:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800213e:	4960      	ldr	r1, [pc, #384]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002140:	4313      	orrs	r3, r2
 8002142:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800214e:	2b00      	cmp	r3, #0
 8002150:	d00a      	beq.n	8002168 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002152:	4b5b      	ldr	r3, [pc, #364]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002154:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002158:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002160:	4957      	ldr	r1, [pc, #348]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002162:	4313      	orrs	r3, r2
 8002164:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002170:	2b00      	cmp	r3, #0
 8002172:	d00a      	beq.n	800218a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002174:	4b52      	ldr	r3, [pc, #328]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002176:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800217a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002182:	494f      	ldr	r1, [pc, #316]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002184:	4313      	orrs	r3, r2
 8002186:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002192:	2b00      	cmp	r3, #0
 8002194:	d00a      	beq.n	80021ac <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002196:	4b4a      	ldr	r3, [pc, #296]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002198:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800219c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021a4:	4946      	ldr	r1, [pc, #280]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021a6:	4313      	orrs	r3, r2
 80021a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d00a      	beq.n	80021ce <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80021b8:	4b41      	ldr	r3, [pc, #260]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021be:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021c6:	493e      	ldr	r1, [pc, #248]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021c8:	4313      	orrs	r3, r2
 80021ca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d00a      	beq.n	80021f0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80021da:	4b39      	ldr	r3, [pc, #228]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021e0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021e8:	4935      	ldr	r1, [pc, #212]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021ea:	4313      	orrs	r3, r2
 80021ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d00a      	beq.n	8002212 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80021fc:	4b30      	ldr	r3, [pc, #192]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002202:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800220a:	492d      	ldr	r1, [pc, #180]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800220c:	4313      	orrs	r3, r2
 800220e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800221a:	2b00      	cmp	r3, #0
 800221c:	d011      	beq.n	8002242 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800221e:	4b28      	ldr	r3, [pc, #160]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002220:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002224:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800222c:	4924      	ldr	r1, [pc, #144]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800222e:	4313      	orrs	r3, r2
 8002230:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002238:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800223c:	d101      	bne.n	8002242 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800223e:	2301      	movs	r3, #1
 8002240:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 0308 	and.w	r3, r3, #8
 800224a:	2b00      	cmp	r3, #0
 800224c:	d001      	beq.n	8002252 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800224e:	2301      	movs	r3, #1
 8002250:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800225a:	2b00      	cmp	r3, #0
 800225c:	d00a      	beq.n	8002274 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800225e:	4b18      	ldr	r3, [pc, #96]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002260:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002264:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800226c:	4914      	ldr	r1, [pc, #80]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800226e:	4313      	orrs	r3, r2
 8002270:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800227c:	2b00      	cmp	r3, #0
 800227e:	d00b      	beq.n	8002298 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002280:	4b0f      	ldr	r3, [pc, #60]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002282:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002286:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002290:	490b      	ldr	r1, [pc, #44]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002292:	4313      	orrs	r3, r2
 8002294:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d00f      	beq.n	80022c4 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80022a4:	4b06      	ldr	r3, [pc, #24]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022aa:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80022b4:	4902      	ldr	r1, [pc, #8]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022b6:	4313      	orrs	r3, r2
 80022b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80022bc:	e002      	b.n	80022c4 <HAL_RCCEx_PeriphCLKConfig+0x494>
 80022be:	bf00      	nop
 80022c0:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d00b      	beq.n	80022e8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80022d0:	4b8a      	ldr	r3, [pc, #552]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80022d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80022d6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022e0:	4986      	ldr	r1, [pc, #536]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80022e2:	4313      	orrs	r3, r2
 80022e4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d00b      	beq.n	800230c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80022f4:	4b81      	ldr	r3, [pc, #516]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80022f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80022fa:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002304:	497d      	ldr	r1, [pc, #500]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002306:	4313      	orrs	r3, r2
 8002308:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800230c:	69fb      	ldr	r3, [r7, #28]
 800230e:	2b01      	cmp	r3, #1
 8002310:	d006      	beq.n	8002320 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800231a:	2b00      	cmp	r3, #0
 800231c:	f000 80d6 	beq.w	80024cc <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002320:	4b76      	ldr	r3, [pc, #472]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a75      	ldr	r2, [pc, #468]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002326:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800232a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800232c:	f7fe fd90 	bl	8000e50 <HAL_GetTick>
 8002330:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002332:	e008      	b.n	8002346 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002334:	f7fe fd8c 	bl	8000e50 <HAL_GetTick>
 8002338:	4602      	mov	r2, r0
 800233a:	697b      	ldr	r3, [r7, #20]
 800233c:	1ad3      	subs	r3, r2, r3
 800233e:	2b64      	cmp	r3, #100	; 0x64
 8002340:	d901      	bls.n	8002346 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002342:	2303      	movs	r3, #3
 8002344:	e195      	b.n	8002672 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002346:	4b6d      	ldr	r3, [pc, #436]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800234e:	2b00      	cmp	r3, #0
 8002350:	d1f0      	bne.n	8002334 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f003 0301 	and.w	r3, r3, #1
 800235a:	2b00      	cmp	r3, #0
 800235c:	d021      	beq.n	80023a2 <HAL_RCCEx_PeriphCLKConfig+0x572>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002362:	2b00      	cmp	r3, #0
 8002364:	d11d      	bne.n	80023a2 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002366:	4b65      	ldr	r3, [pc, #404]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002368:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800236c:	0c1b      	lsrs	r3, r3, #16
 800236e:	f003 0303 	and.w	r3, r3, #3
 8002372:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002374:	4b61      	ldr	r3, [pc, #388]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002376:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800237a:	0e1b      	lsrs	r3, r3, #24
 800237c:	f003 030f 	and.w	r3, r3, #15
 8002380:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	019a      	lsls	r2, r3, #6
 8002388:	693b      	ldr	r3, [r7, #16]
 800238a:	041b      	lsls	r3, r3, #16
 800238c:	431a      	orrs	r2, r3
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	061b      	lsls	r3, r3, #24
 8002392:	431a      	orrs	r2, r3
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	689b      	ldr	r3, [r3, #8]
 8002398:	071b      	lsls	r3, r3, #28
 800239a:	4958      	ldr	r1, [pc, #352]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800239c:	4313      	orrs	r3, r2
 800239e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d004      	beq.n	80023b8 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80023b6:	d00a      	beq.n	80023ce <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d02e      	beq.n	8002422 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80023cc:	d129      	bne.n	8002422 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80023ce:	4b4b      	ldr	r3, [pc, #300]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80023d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80023d4:	0c1b      	lsrs	r3, r3, #16
 80023d6:	f003 0303 	and.w	r3, r3, #3
 80023da:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80023dc:	4b47      	ldr	r3, [pc, #284]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80023de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80023e2:	0f1b      	lsrs	r3, r3, #28
 80023e4:	f003 0307 	and.w	r3, r3, #7
 80023e8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	019a      	lsls	r2, r3, #6
 80023f0:	693b      	ldr	r3, [r7, #16]
 80023f2:	041b      	lsls	r3, r3, #16
 80023f4:	431a      	orrs	r2, r3
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	68db      	ldr	r3, [r3, #12]
 80023fa:	061b      	lsls	r3, r3, #24
 80023fc:	431a      	orrs	r2, r3
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	071b      	lsls	r3, r3, #28
 8002402:	493e      	ldr	r1, [pc, #248]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002404:	4313      	orrs	r3, r2
 8002406:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800240a:	4b3c      	ldr	r3, [pc, #240]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800240c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002410:	f023 021f 	bic.w	r2, r3, #31
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002418:	3b01      	subs	r3, #1
 800241a:	4938      	ldr	r1, [pc, #224]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800241c:	4313      	orrs	r3, r2
 800241e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800242a:	2b00      	cmp	r3, #0
 800242c:	d01d      	beq.n	800246a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800242e:	4b33      	ldr	r3, [pc, #204]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002430:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002434:	0e1b      	lsrs	r3, r3, #24
 8002436:	f003 030f 	and.w	r3, r3, #15
 800243a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800243c:	4b2f      	ldr	r3, [pc, #188]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800243e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002442:	0f1b      	lsrs	r3, r3, #28
 8002444:	f003 0307 	and.w	r3, r3, #7
 8002448:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	019a      	lsls	r2, r3, #6
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	691b      	ldr	r3, [r3, #16]
 8002454:	041b      	lsls	r3, r3, #16
 8002456:	431a      	orrs	r2, r3
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	061b      	lsls	r3, r3, #24
 800245c:	431a      	orrs	r2, r3
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	071b      	lsls	r3, r3, #28
 8002462:	4926      	ldr	r1, [pc, #152]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002464:	4313      	orrs	r3, r2
 8002466:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002472:	2b00      	cmp	r3, #0
 8002474:	d011      	beq.n	800249a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	019a      	lsls	r2, r3, #6
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	691b      	ldr	r3, [r3, #16]
 8002480:	041b      	lsls	r3, r3, #16
 8002482:	431a      	orrs	r2, r3
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	68db      	ldr	r3, [r3, #12]
 8002488:	061b      	lsls	r3, r3, #24
 800248a:	431a      	orrs	r2, r3
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	071b      	lsls	r3, r3, #28
 8002492:	491a      	ldr	r1, [pc, #104]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002494:	4313      	orrs	r3, r2
 8002496:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800249a:	4b18      	ldr	r3, [pc, #96]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a17      	ldr	r2, [pc, #92]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80024a0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80024a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024a6:	f7fe fcd3 	bl	8000e50 <HAL_GetTick>
 80024aa:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80024ac:	e008      	b.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80024ae:	f7fe fccf 	bl	8000e50 <HAL_GetTick>
 80024b2:	4602      	mov	r2, r0
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	1ad3      	subs	r3, r2, r3
 80024b8:	2b64      	cmp	r3, #100	; 0x64
 80024ba:	d901      	bls.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80024bc:	2303      	movs	r3, #3
 80024be:	e0d8      	b.n	8002672 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80024c0:	4b0e      	ldr	r3, [pc, #56]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d0f0      	beq.n	80024ae <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80024cc:	69bb      	ldr	r3, [r7, #24]
 80024ce:	2b01      	cmp	r3, #1
 80024d0:	f040 80ce 	bne.w	8002670 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80024d4:	4b09      	ldr	r3, [pc, #36]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a08      	ldr	r2, [pc, #32]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80024da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024de:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024e0:	f7fe fcb6 	bl	8000e50 <HAL_GetTick>
 80024e4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80024e6:	e00b      	b.n	8002500 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80024e8:	f7fe fcb2 	bl	8000e50 <HAL_GetTick>
 80024ec:	4602      	mov	r2, r0
 80024ee:	697b      	ldr	r3, [r7, #20]
 80024f0:	1ad3      	subs	r3, r2, r3
 80024f2:	2b64      	cmp	r3, #100	; 0x64
 80024f4:	d904      	bls.n	8002500 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80024f6:	2303      	movs	r3, #3
 80024f8:	e0bb      	b.n	8002672 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80024fa:	bf00      	nop
 80024fc:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002500:	4b5e      	ldr	r3, [pc, #376]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002508:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800250c:	d0ec      	beq.n	80024e8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002516:	2b00      	cmp	r3, #0
 8002518:	d003      	beq.n	8002522 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800251e:	2b00      	cmp	r3, #0
 8002520:	d009      	beq.n	8002536 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800252a:	2b00      	cmp	r3, #0
 800252c:	d02e      	beq.n	800258c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002532:	2b00      	cmp	r3, #0
 8002534:	d12a      	bne.n	800258c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002536:	4b51      	ldr	r3, [pc, #324]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002538:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800253c:	0c1b      	lsrs	r3, r3, #16
 800253e:	f003 0303 	and.w	r3, r3, #3
 8002542:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002544:	4b4d      	ldr	r3, [pc, #308]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002546:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800254a:	0f1b      	lsrs	r3, r3, #28
 800254c:	f003 0307 	and.w	r3, r3, #7
 8002550:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	695b      	ldr	r3, [r3, #20]
 8002556:	019a      	lsls	r2, r3, #6
 8002558:	693b      	ldr	r3, [r7, #16]
 800255a:	041b      	lsls	r3, r3, #16
 800255c:	431a      	orrs	r2, r3
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	699b      	ldr	r3, [r3, #24]
 8002562:	061b      	lsls	r3, r3, #24
 8002564:	431a      	orrs	r2, r3
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	071b      	lsls	r3, r3, #28
 800256a:	4944      	ldr	r1, [pc, #272]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800256c:	4313      	orrs	r3, r2
 800256e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002572:	4b42      	ldr	r3, [pc, #264]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002574:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002578:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002580:	3b01      	subs	r3, #1
 8002582:	021b      	lsls	r3, r3, #8
 8002584:	493d      	ldr	r1, [pc, #244]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002586:	4313      	orrs	r3, r2
 8002588:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002594:	2b00      	cmp	r3, #0
 8002596:	d022      	beq.n	80025de <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800259c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80025a0:	d11d      	bne.n	80025de <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80025a2:	4b36      	ldr	r3, [pc, #216]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80025a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025a8:	0e1b      	lsrs	r3, r3, #24
 80025aa:	f003 030f 	and.w	r3, r3, #15
 80025ae:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80025b0:	4b32      	ldr	r3, [pc, #200]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80025b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025b6:	0f1b      	lsrs	r3, r3, #28
 80025b8:	f003 0307 	and.w	r3, r3, #7
 80025bc:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	695b      	ldr	r3, [r3, #20]
 80025c2:	019a      	lsls	r2, r3, #6
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6a1b      	ldr	r3, [r3, #32]
 80025c8:	041b      	lsls	r3, r3, #16
 80025ca:	431a      	orrs	r2, r3
 80025cc:	693b      	ldr	r3, [r7, #16]
 80025ce:	061b      	lsls	r3, r3, #24
 80025d0:	431a      	orrs	r2, r3
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	071b      	lsls	r3, r3, #28
 80025d6:	4929      	ldr	r1, [pc, #164]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80025d8:	4313      	orrs	r3, r2
 80025da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f003 0308 	and.w	r3, r3, #8
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d028      	beq.n	800263c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80025ea:	4b24      	ldr	r3, [pc, #144]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80025ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025f0:	0e1b      	lsrs	r3, r3, #24
 80025f2:	f003 030f 	and.w	r3, r3, #15
 80025f6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80025f8:	4b20      	ldr	r3, [pc, #128]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80025fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025fe:	0c1b      	lsrs	r3, r3, #16
 8002600:	f003 0303 	and.w	r3, r3, #3
 8002604:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	695b      	ldr	r3, [r3, #20]
 800260a:	019a      	lsls	r2, r3, #6
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	041b      	lsls	r3, r3, #16
 8002610:	431a      	orrs	r2, r3
 8002612:	693b      	ldr	r3, [r7, #16]
 8002614:	061b      	lsls	r3, r3, #24
 8002616:	431a      	orrs	r2, r3
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	69db      	ldr	r3, [r3, #28]
 800261c:	071b      	lsls	r3, r3, #28
 800261e:	4917      	ldr	r1, [pc, #92]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002620:	4313      	orrs	r3, r2
 8002622:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002626:	4b15      	ldr	r3, [pc, #84]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002628:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800262c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002634:	4911      	ldr	r1, [pc, #68]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002636:	4313      	orrs	r3, r2
 8002638:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800263c:	4b0f      	ldr	r3, [pc, #60]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a0e      	ldr	r2, [pc, #56]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002642:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002646:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002648:	f7fe fc02 	bl	8000e50 <HAL_GetTick>
 800264c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800264e:	e008      	b.n	8002662 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002650:	f7fe fbfe 	bl	8000e50 <HAL_GetTick>
 8002654:	4602      	mov	r2, r0
 8002656:	697b      	ldr	r3, [r7, #20]
 8002658:	1ad3      	subs	r3, r2, r3
 800265a:	2b64      	cmp	r3, #100	; 0x64
 800265c:	d901      	bls.n	8002662 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800265e:	2303      	movs	r3, #3
 8002660:	e007      	b.n	8002672 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002662:	4b06      	ldr	r3, [pc, #24]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800266a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800266e:	d1ef      	bne.n	8002650 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8002670:	2300      	movs	r3, #0
}
 8002672:	4618      	mov	r0, r3
 8002674:	3720      	adds	r7, #32
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	40023800 	.word	0x40023800

08002680 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b084      	sub	sp, #16
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d101      	bne.n	8002692 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	e09d      	b.n	80027ce <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002696:	2b00      	cmp	r3, #0
 8002698:	d108      	bne.n	80026ac <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80026a2:	d009      	beq.n	80026b8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2200      	movs	r2, #0
 80026a8:	61da      	str	r2, [r3, #28]
 80026aa:	e005      	b.n	80026b8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2200      	movs	r2, #0
 80026b0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2200      	movs	r2, #0
 80026b6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2200      	movs	r2, #0
 80026bc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d106      	bne.n	80026d8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2200      	movs	r2, #0
 80026ce:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80026d2:	6878      	ldr	r0, [r7, #4]
 80026d4:	f7fe f954 	bl	8000980 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2202      	movs	r2, #2
 80026dc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	681a      	ldr	r2, [r3, #0]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80026ee:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	68db      	ldr	r3, [r3, #12]
 80026f4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80026f8:	d902      	bls.n	8002700 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80026fa:	2300      	movs	r3, #0
 80026fc:	60fb      	str	r3, [r7, #12]
 80026fe:	e002      	b.n	8002706 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002700:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002704:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	68db      	ldr	r3, [r3, #12]
 800270a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800270e:	d007      	beq.n	8002720 <HAL_SPI_Init+0xa0>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	68db      	ldr	r3, [r3, #12]
 8002714:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002718:	d002      	beq.n	8002720 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2200      	movs	r2, #0
 800271e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002730:	431a      	orrs	r2, r3
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	691b      	ldr	r3, [r3, #16]
 8002736:	f003 0302 	and.w	r3, r3, #2
 800273a:	431a      	orrs	r2, r3
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	695b      	ldr	r3, [r3, #20]
 8002740:	f003 0301 	and.w	r3, r3, #1
 8002744:	431a      	orrs	r2, r3
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	699b      	ldr	r3, [r3, #24]
 800274a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800274e:	431a      	orrs	r2, r3
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	69db      	ldr	r3, [r3, #28]
 8002754:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002758:	431a      	orrs	r2, r3
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6a1b      	ldr	r3, [r3, #32]
 800275e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002762:	ea42 0103 	orr.w	r1, r2, r3
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800276a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	430a      	orrs	r2, r1
 8002774:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	699b      	ldr	r3, [r3, #24]
 800277a:	0c1b      	lsrs	r3, r3, #16
 800277c:	f003 0204 	and.w	r2, r3, #4
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002784:	f003 0310 	and.w	r3, r3, #16
 8002788:	431a      	orrs	r2, r3
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800278e:	f003 0308 	and.w	r3, r3, #8
 8002792:	431a      	orrs	r2, r3
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	68db      	ldr	r3, [r3, #12]
 8002798:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800279c:	ea42 0103 	orr.w	r1, r2, r3
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	430a      	orrs	r2, r1
 80027ac:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	69da      	ldr	r2, [r3, #28]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80027bc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2200      	movs	r2, #0
 80027c2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2201      	movs	r2, #1
 80027c8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80027cc:	2300      	movs	r3, #0
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	3710      	adds	r7, #16
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}
	...

080027d8 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80027d8:	b480      	push	{r7}
 80027da:	b087      	sub	sp, #28
 80027dc:	af00      	add	r7, sp, #0
 80027de:	60f8      	str	r0, [r7, #12]
 80027e0:	60b9      	str	r1, [r7, #8]
 80027e2:	4613      	mov	r3, r2
 80027e4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80027e6:	2300      	movs	r3, #0
 80027e8:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80027f0:	2b01      	cmp	r3, #1
 80027f2:	d101      	bne.n	80027f8 <HAL_SPI_Transmit_IT+0x20>
 80027f4:	2302      	movs	r3, #2
 80027f6:	e072      	b.n	80028de <HAL_SPI_Transmit_IT+0x106>
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	2201      	movs	r2, #1
 80027fc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if ((pData == NULL) || (Size == 0U))
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d002      	beq.n	800280c <HAL_SPI_Transmit_IT+0x34>
 8002806:	88fb      	ldrh	r3, [r7, #6]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d102      	bne.n	8002812 <HAL_SPI_Transmit_IT+0x3a>
  {
    errorcode = HAL_ERROR;
 800280c:	2301      	movs	r3, #1
 800280e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002810:	e060      	b.n	80028d4 <HAL_SPI_Transmit_IT+0xfc>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002818:	b2db      	uxtb	r3, r3
 800281a:	2b01      	cmp	r3, #1
 800281c:	d002      	beq.n	8002824 <HAL_SPI_Transmit_IT+0x4c>
  {
    errorcode = HAL_BUSY;
 800281e:	2302      	movs	r3, #2
 8002820:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002822:	e057      	b.n	80028d4 <HAL_SPI_Transmit_IT+0xfc>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	2203      	movs	r2, #3
 8002828:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	2200      	movs	r2, #0
 8002830:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	68ba      	ldr	r2, [r7, #8]
 8002836:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	88fa      	ldrh	r2, [r7, #6]
 800283c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	88fa      	ldrh	r2, [r7, #6]
 8002842:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	2200      	movs	r2, #0
 8002848:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	2200      	movs	r2, #0
 800284e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	2200      	movs	r2, #0
 8002856:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxISR       = NULL;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	2200      	movs	r2, #0
 800285e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	68db      	ldr	r3, [r3, #12]
 8002864:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002868:	d903      	bls.n	8002872 <HAL_SPI_Transmit_IT+0x9a>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	4a1f      	ldr	r2, [pc, #124]	; (80028ec <HAL_SPI_Transmit_IT+0x114>)
 800286e:	651a      	str	r2, [r3, #80]	; 0x50
 8002870:	e002      	b.n	8002878 <HAL_SPI_Transmit_IT+0xa0>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	4a1e      	ldr	r2, [pc, #120]	; (80028f0 <HAL_SPI_Transmit_IT+0x118>)
 8002876:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002880:	d10f      	bne.n	80028a2 <HAL_SPI_Transmit_IT+0xca>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	681a      	ldr	r2, [r3, #0]
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002890:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	681a      	ldr	r2, [r3, #0]
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80028a0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	685a      	ldr	r2, [r3, #4]
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 80028b0:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028bc:	2b40      	cmp	r3, #64	; 0x40
 80028be:	d008      	beq.n	80028d2 <HAL_SPI_Transmit_IT+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80028ce:	601a      	str	r2, [r3, #0]
 80028d0:	e000      	b.n	80028d4 <HAL_SPI_Transmit_IT+0xfc>
  }

error :
 80028d2:	bf00      	nop
  __HAL_UNLOCK(hspi);
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	2200      	movs	r2, #0
 80028d8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80028dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80028de:	4618      	mov	r0, r3
 80028e0:	371c      	adds	r7, #28
 80028e2:	46bd      	mov	sp, r7
 80028e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e8:	4770      	bx	lr
 80028ea:	bf00      	nop
 80028ec:	080030e7 	.word	0x080030e7
 80028f0:	080030a1 	.word	0x080030a1

080028f4 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b086      	sub	sp, #24
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	60f8      	str	r0, [r7, #12]
 80028fc:	60b9      	str	r1, [r7, #8]
 80028fe:	4613      	mov	r3, r2
 8002900:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002902:	2300      	movs	r3, #0
 8002904:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d110      	bne.n	8002930 <HAL_SPI_Receive_IT+0x3c>
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002916:	d10b      	bne.n	8002930 <HAL_SPI_Receive_IT+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	2204      	movs	r2, #4
 800291c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 8002920:	88fb      	ldrh	r3, [r7, #6]
 8002922:	68ba      	ldr	r2, [r7, #8]
 8002924:	68b9      	ldr	r1, [r7, #8]
 8002926:	68f8      	ldr	r0, [r7, #12]
 8002928:	f000 f894 	bl	8002a54 <HAL_SPI_TransmitReceive_IT>
 800292c:	4603      	mov	r3, r0
 800292e:	e089      	b.n	8002a44 <HAL_SPI_Receive_IT+0x150>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002936:	2b01      	cmp	r3, #1
 8002938:	d101      	bne.n	800293e <HAL_SPI_Receive_IT+0x4a>
 800293a:	2302      	movs	r3, #2
 800293c:	e082      	b.n	8002a44 <HAL_SPI_Receive_IT+0x150>
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	2201      	movs	r2, #1
 8002942:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800294c:	b2db      	uxtb	r3, r3
 800294e:	2b01      	cmp	r3, #1
 8002950:	d002      	beq.n	8002958 <HAL_SPI_Receive_IT+0x64>
  {
    errorcode = HAL_BUSY;
 8002952:	2302      	movs	r3, #2
 8002954:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002956:	e070      	b.n	8002a3a <HAL_SPI_Receive_IT+0x146>
  }

  if ((pData == NULL) || (Size == 0U))
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d002      	beq.n	8002964 <HAL_SPI_Receive_IT+0x70>
 800295e:	88fb      	ldrh	r3, [r7, #6]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d102      	bne.n	800296a <HAL_SPI_Receive_IT+0x76>
  {
    errorcode = HAL_ERROR;
 8002964:	2301      	movs	r3, #1
 8002966:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002968:	e067      	b.n	8002a3a <HAL_SPI_Receive_IT+0x146>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	2204      	movs	r2, #4
 800296e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	2200      	movs	r2, #0
 8002976:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	68ba      	ldr	r2, [r7, #8]
 800297c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	88fa      	ldrh	r2, [r7, #6]
 8002982:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	88fa      	ldrh	r2, [r7, #6]
 800298a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	2200      	movs	r2, #0
 8002992:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	2200      	movs	r2, #0
 8002998:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	2200      	movs	r2, #0
 800299e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	2200      	movs	r2, #0
 80029a4:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check the data size to adapt Rx threshold and the set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	68db      	ldr	r3, [r3, #12]
 80029aa:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80029ae:	d90b      	bls.n	80029c8 <HAL_SPI_Receive_IT+0xd4>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	685a      	ldr	r2, [r3, #4]
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80029be:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	4a22      	ldr	r2, [pc, #136]	; (8002a4c <HAL_SPI_Receive_IT+0x158>)
 80029c4:	64da      	str	r2, [r3, #76]	; 0x4c
 80029c6:	e00a      	b.n	80029de <HAL_SPI_Receive_IT+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	685a      	ldr	r2, [r3, #4]
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80029d6:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_8BIT;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	4a1d      	ldr	r2, [pc, #116]	; (8002a50 <HAL_SPI_Receive_IT+0x15c>)
 80029dc:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80029e6:	d10f      	bne.n	8002a08 <HAL_SPI_Receive_IT+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80029f6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	681a      	ldr	r2, [r3, #0]
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002a06:	601a      	str	r2, [r3, #0]
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	685a      	ldr	r2, [r3, #4]
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8002a16:	605a      	str	r2, [r3, #4]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a22:	2b40      	cmp	r3, #64	; 0x40
 8002a24:	d008      	beq.n	8002a38 <HAL_SPI_Receive_IT+0x144>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	681a      	ldr	r2, [r3, #0]
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a34:	601a      	str	r2, [r3, #0]
 8002a36:	e000      	b.n	8002a3a <HAL_SPI_Receive_IT+0x146>
  }

error :
 8002a38:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002a42:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a44:	4618      	mov	r0, r3
 8002a46:	3718      	adds	r7, #24
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bd80      	pop	{r7, pc}
 8002a4c:	08003055 	.word	0x08003055
 8002a50:	08003005 	.word	0x08003005

08002a54 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8002a54:	b480      	push	{r7}
 8002a56:	b087      	sub	sp, #28
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	60f8      	str	r0, [r7, #12]
 8002a5c:	60b9      	str	r1, [r7, #8]
 8002a5e:	607a      	str	r2, [r7, #4]
 8002a60:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002a62:	2300      	movs	r3, #0
 8002a64:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002a6c:	2b01      	cmp	r3, #1
 8002a6e:	d101      	bne.n	8002a74 <HAL_SPI_TransmitReceive_IT+0x20>
 8002a70:	2302      	movs	r3, #2
 8002a72:	e091      	b.n	8002b98 <HAL_SPI_TransmitReceive_IT+0x144>
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	2201      	movs	r2, #1
 8002a78:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002a82:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002a8a:	7dbb      	ldrb	r3, [r7, #22]
 8002a8c:	2b01      	cmp	r3, #1
 8002a8e:	d00d      	beq.n	8002aac <HAL_SPI_TransmitReceive_IT+0x58>
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002a96:	d106      	bne.n	8002aa6 <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d102      	bne.n	8002aa6 <HAL_SPI_TransmitReceive_IT+0x52>
 8002aa0:	7dbb      	ldrb	r3, [r7, #22]
 8002aa2:	2b04      	cmp	r3, #4
 8002aa4:	d002      	beq.n	8002aac <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 8002aa6:	2302      	movs	r3, #2
 8002aa8:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002aaa:	e070      	b.n	8002b8e <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d005      	beq.n	8002abe <HAL_SPI_TransmitReceive_IT+0x6a>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d002      	beq.n	8002abe <HAL_SPI_TransmitReceive_IT+0x6a>
 8002ab8:	887b      	ldrh	r3, [r7, #2]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d102      	bne.n	8002ac4 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002ac2:	e064      	b.n	8002b8e <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002aca:	b2db      	uxtb	r3, r3
 8002acc:	2b04      	cmp	r3, #4
 8002ace:	d003      	beq.n	8002ad8 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	2205      	movs	r2, #5
 8002ad4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	2200      	movs	r2, #0
 8002adc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	68ba      	ldr	r2, [r7, #8]
 8002ae2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	887a      	ldrh	r2, [r7, #2]
 8002ae8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	887a      	ldrh	r2, [r7, #2]
 8002aee:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	687a      	ldr	r2, [r7, #4]
 8002af4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	887a      	ldrh	r2, [r7, #2]
 8002afa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	887a      	ldrh	r2, [r7, #2]
 8002b02:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	68db      	ldr	r3, [r3, #12]
 8002b0a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002b0e:	d906      	bls.n	8002b1e <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	4a24      	ldr	r2, [pc, #144]	; (8002ba4 <HAL_SPI_TransmitReceive_IT+0x150>)
 8002b14:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	4a23      	ldr	r2, [pc, #140]	; (8002ba8 <HAL_SPI_TransmitReceive_IT+0x154>)
 8002b1a:	651a      	str	r2, [r3, #80]	; 0x50
 8002b1c:	e005      	b.n	8002b2a <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	4a22      	ldr	r2, [pc, #136]	; (8002bac <HAL_SPI_TransmitReceive_IT+0x158>)
 8002b22:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	4a22      	ldr	r2, [pc, #136]	; (8002bb0 <HAL_SPI_TransmitReceive_IT+0x15c>)
 8002b28:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	68db      	ldr	r3, [r3, #12]
 8002b2e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002b32:	d802      	bhi.n	8002b3a <HAL_SPI_TransmitReceive_IT+0xe6>
 8002b34:	887b      	ldrh	r3, [r7, #2]
 8002b36:	2b01      	cmp	r3, #1
 8002b38:	d908      	bls.n	8002b4c <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	685a      	ldr	r2, [r3, #4]
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002b48:	605a      	str	r2, [r3, #4]
 8002b4a:	e007      	b.n	8002b5c <HAL_SPI_TransmitReceive_IT+0x108>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	685a      	ldr	r2, [r3, #4]
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002b5a:	605a      	str	r2, [r3, #4]
  }

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	685a      	ldr	r2, [r3, #4]
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 8002b6a:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b76:	2b40      	cmp	r3, #64	; 0x40
 8002b78:	d008      	beq.n	8002b8c <HAL_SPI_TransmitReceive_IT+0x138>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	681a      	ldr	r2, [r3, #0]
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b88:	601a      	str	r2, [r3, #0]
 8002b8a:	e000      	b.n	8002b8e <HAL_SPI_TransmitReceive_IT+0x13a>
  }

error :
 8002b8c:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	2200      	movs	r2, #0
 8002b92:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002b96:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b98:	4618      	mov	r0, r3
 8002b9a:	371c      	adds	r7, #28
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba2:	4770      	bx	lr
 8002ba4:	08002f3f 	.word	0x08002f3f
 8002ba8:	08002fa5 	.word	0x08002fa5
 8002bac:	08002def 	.word	0x08002def
 8002bb0:	08002ead 	.word	0x08002ead

08002bb4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b088      	sub	sp, #32
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002bcc:	69bb      	ldr	r3, [r7, #24]
 8002bce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d10e      	bne.n	8002bf4 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002bd6:	69bb      	ldr	r3, [r7, #24]
 8002bd8:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d009      	beq.n	8002bf4 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002be0:	69fb      	ldr	r3, [r7, #28]
 8002be2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d004      	beq.n	8002bf4 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bee:	6878      	ldr	r0, [r7, #4]
 8002bf0:	4798      	blx	r3
    return;
 8002bf2:	e0ce      	b.n	8002d92 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8002bf4:	69bb      	ldr	r3, [r7, #24]
 8002bf6:	f003 0302 	and.w	r3, r3, #2
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d009      	beq.n	8002c12 <HAL_SPI_IRQHandler+0x5e>
 8002bfe:	69fb      	ldr	r3, [r7, #28]
 8002c00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d004      	beq.n	8002c12 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c0c:	6878      	ldr	r0, [r7, #4]
 8002c0e:	4798      	blx	r3
    return;
 8002c10:	e0bf      	b.n	8002d92 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002c12:	69bb      	ldr	r3, [r7, #24]
 8002c14:	f003 0320 	and.w	r3, r3, #32
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d10a      	bne.n	8002c32 <HAL_SPI_IRQHandler+0x7e>
 8002c1c:	69bb      	ldr	r3, [r7, #24]
 8002c1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d105      	bne.n	8002c32 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8002c26:	69bb      	ldr	r3, [r7, #24]
 8002c28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	f000 80b0 	beq.w	8002d92 <HAL_SPI_IRQHandler+0x1de>
 8002c32:	69fb      	ldr	r3, [r7, #28]
 8002c34:	f003 0320 	and.w	r3, r3, #32
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	f000 80aa 	beq.w	8002d92 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002c3e:	69bb      	ldr	r3, [r7, #24]
 8002c40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d023      	beq.n	8002c90 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002c4e:	b2db      	uxtb	r3, r3
 8002c50:	2b03      	cmp	r3, #3
 8002c52:	d011      	beq.n	8002c78 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c58:	f043 0204 	orr.w	r2, r3, #4
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002c60:	2300      	movs	r3, #0
 8002c62:	617b      	str	r3, [r7, #20]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	68db      	ldr	r3, [r3, #12]
 8002c6a:	617b      	str	r3, [r7, #20]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	617b      	str	r3, [r7, #20]
 8002c74:	697b      	ldr	r3, [r7, #20]
 8002c76:	e00b      	b.n	8002c90 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002c78:	2300      	movs	r3, #0
 8002c7a:	613b      	str	r3, [r7, #16]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	68db      	ldr	r3, [r3, #12]
 8002c82:	613b      	str	r3, [r7, #16]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	613b      	str	r3, [r7, #16]
 8002c8c:	693b      	ldr	r3, [r7, #16]
        return;
 8002c8e:	e080      	b.n	8002d92 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8002c90:	69bb      	ldr	r3, [r7, #24]
 8002c92:	f003 0320 	and.w	r3, r3, #32
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d014      	beq.n	8002cc4 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c9e:	f043 0201 	orr.w	r2, r3, #1
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	60fb      	str	r3, [r7, #12]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	689b      	ldr	r3, [r3, #8]
 8002cb0:	60fb      	str	r3, [r7, #12]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	681a      	ldr	r2, [r3, #0]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002cc0:	601a      	str	r2, [r3, #0]
 8002cc2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8002cc4:	69bb      	ldr	r3, [r7, #24]
 8002cc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d00c      	beq.n	8002ce8 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cd2:	f043 0208 	orr.w	r2, r3, #8
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8002cda:	2300      	movs	r3, #0
 8002cdc:	60bb      	str	r3, [r7, #8]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	689b      	ldr	r3, [r3, #8]
 8002ce4:	60bb      	str	r3, [r7, #8]
 8002ce6:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d04f      	beq.n	8002d90 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	685a      	ldr	r2, [r3, #4]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002cfe:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2201      	movs	r2, #1
 8002d04:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8002d08:	69fb      	ldr	r3, [r7, #28]
 8002d0a:	f003 0302 	and.w	r3, r3, #2
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d104      	bne.n	8002d1c <HAL_SPI_IRQHandler+0x168>
 8002d12:	69fb      	ldr	r3, [r7, #28]
 8002d14:	f003 0301 	and.w	r3, r3, #1
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d034      	beq.n	8002d86 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	685a      	ldr	r2, [r3, #4]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f022 0203 	bic.w	r2, r2, #3
 8002d2a:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d011      	beq.n	8002d58 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d38:	4a17      	ldr	r2, [pc, #92]	; (8002d98 <HAL_SPI_IRQHandler+0x1e4>)
 8002d3a:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d40:	4618      	mov	r0, r3
 8002d42:	f7fe fa12 	bl	800116a <HAL_DMA_Abort_IT>
 8002d46:	4603      	mov	r3, r0
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d005      	beq.n	8002d58 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d50:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d016      	beq.n	8002d8e <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d64:	4a0c      	ldr	r2, [pc, #48]	; (8002d98 <HAL_SPI_IRQHandler+0x1e4>)
 8002d66:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f7fe f9fc 	bl	800116a <HAL_DMA_Abort_IT>
 8002d72:	4603      	mov	r3, r0
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d00a      	beq.n	8002d8e <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d7c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8002d84:	e003      	b.n	8002d8e <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8002d86:	6878      	ldr	r0, [r7, #4]
 8002d88:	f7fd fdba 	bl	8000900 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8002d8c:	e000      	b.n	8002d90 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8002d8e:	bf00      	nop
    return;
 8002d90:	bf00      	nop
  }
}
 8002d92:	3720      	adds	r7, #32
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bd80      	pop	{r7, pc}
 8002d98:	08002dc5 	.word	0x08002dc5

08002d9c <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b083      	sub	sp, #12
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8002da4:	bf00      	nop
 8002da6:	370c      	adds	r7, #12
 8002da8:	46bd      	mov	sp, r7
 8002daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dae:	4770      	bx	lr

08002db0 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b083      	sub	sp, #12
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8002db8:	bf00      	nop
 8002dba:	370c      	adds	r7, #12
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc2:	4770      	bx	lr

08002dc4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b084      	sub	sp, #16
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dd0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002de0:	68f8      	ldr	r0, [r7, #12]
 8002de2:	f7fd fd8d 	bl	8000900 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002de6:	bf00      	nop
 8002de8:	3710      	adds	r7, #16
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}

08002dee <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002dee:	b580      	push	{r7, lr}
 8002df0:	b082      	sub	sp, #8
 8002df2:	af00      	add	r7, sp, #0
 8002df4:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002dfc:	b29b      	uxth	r3, r3
 8002dfe:	2b01      	cmp	r3, #1
 8002e00:	d923      	bls.n	8002e4a <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	68da      	ldr	r2, [r3, #12]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e0c:	b292      	uxth	r2, r2
 8002e0e:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e14:	1c9a      	adds	r2, r3, #2
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002e20:	b29b      	uxth	r3, r3
 8002e22:	3b02      	subs	r3, #2
 8002e24:	b29a      	uxth	r2, r3
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002e32:	b29b      	uxth	r3, r3
 8002e34:	2b01      	cmp	r3, #1
 8002e36:	d11f      	bne.n	8002e78 <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	685a      	ldr	r2, [r3, #4]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002e46:	605a      	str	r2, [r3, #4]
 8002e48:	e016      	b.n	8002e78 <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f103 020c 	add.w	r2, r3, #12
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e56:	7812      	ldrb	r2, [r2, #0]
 8002e58:	b2d2      	uxtb	r2, r2
 8002e5a:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e60:	1c5a      	adds	r2, r3, #1
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002e6c:	b29b      	uxth	r3, r3
 8002e6e:	3b01      	subs	r3, #1
 8002e70:	b29a      	uxth	r2, r3
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002e7e:	b29b      	uxth	r3, r3
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d10f      	bne.n	8002ea4 <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	685a      	ldr	r2, [r3, #4]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002e92:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e98:	b29b      	uxth	r3, r3
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d102      	bne.n	8002ea4 <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 8002e9e:	6878      	ldr	r0, [r7, #4]
 8002ea0:	f000 fb48 	bl	8003534 <SPI_CloseRxTx_ISR>
    }
  }
}
 8002ea4:	bf00      	nop
 8002ea6:	3708      	adds	r7, #8
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bd80      	pop	{r7, pc}

08002eac <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b082      	sub	sp, #8
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002eb8:	b29b      	uxth	r3, r3
 8002eba:	2b01      	cmp	r3, #1
 8002ebc:	d912      	bls.n	8002ee4 <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ec2:	881a      	ldrh	r2, [r3, #0]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ece:	1c9a      	adds	r2, r3, #2
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ed8:	b29b      	uxth	r3, r3
 8002eda:	3b02      	subs	r3, #2
 8002edc:	b29a      	uxth	r2, r3
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002ee2:	e012      	b.n	8002f0a <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	330c      	adds	r3, #12
 8002eee:	7812      	ldrb	r2, [r2, #0]
 8002ef0:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ef6:	1c5a      	adds	r2, r3, #1
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f00:	b29b      	uxth	r3, r3
 8002f02:	3b01      	subs	r3, #1
 8002f04:	b29a      	uxth	r2, r3
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f0e:	b29b      	uxth	r3, r3
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d110      	bne.n	8002f36 <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	685a      	ldr	r2, [r3, #4]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f22:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002f2a:	b29b      	uxth	r3, r3
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d102      	bne.n	8002f36 <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 8002f30:	6878      	ldr	r0, [r7, #4]
 8002f32:	f000 faff 	bl	8003534 <SPI_CloseRxTx_ISR>
    }
  }
}
 8002f36:	bf00      	nop
 8002f38:	3708      	adds	r7, #8
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}

08002f3e <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002f3e:	b580      	push	{r7, lr}
 8002f40:	b082      	sub	sp, #8
 8002f42:	af00      	add	r7, sp, #0
 8002f44:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	68da      	ldr	r2, [r3, #12]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f50:	b292      	uxth	r2, r2
 8002f52:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f58:	1c9a      	adds	r2, r3, #2
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002f64:	b29b      	uxth	r3, r3
 8002f66:	3b01      	subs	r3, #1
 8002f68:	b29a      	uxth	r2, r3
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  if (hspi->RxXferCount == 0U)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002f76:	b29b      	uxth	r3, r3
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d10f      	bne.n	8002f9c <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	685a      	ldr	r2, [r3, #4]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f8a:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f90:	b29b      	uxth	r3, r3
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d102      	bne.n	8002f9c <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 8002f96:	6878      	ldr	r0, [r7, #4]
 8002f98:	f000 facc 	bl	8003534 <SPI_CloseRxTx_ISR>
    }
  }
}
 8002f9c:	bf00      	nop
 8002f9e:	3708      	adds	r7, #8
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}

08002fa4 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b082      	sub	sp, #8
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fb0:	881a      	ldrh	r2, [r3, #0]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fbc:	1c9a      	adds	r2, r3, #2
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fc6:	b29b      	uxth	r3, r3
 8002fc8:	3b01      	subs	r3, #1
 8002fca:	b29a      	uxth	r2, r3
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fd4:	b29b      	uxth	r3, r3
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d110      	bne.n	8002ffc <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	685a      	ldr	r2, [r3, #4]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002fe8:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002ff0:	b29b      	uxth	r3, r3
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d102      	bne.n	8002ffc <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8002ff6:	6878      	ldr	r0, [r7, #4]
 8002ff8:	f000 fa9c 	bl	8003534 <SPI_CloseRxTx_ISR>
    }
  }
}
 8002ffc:	bf00      	nop
 8002ffe:	3708      	adds	r7, #8
 8003000:	46bd      	mov	sp, r7
 8003002:	bd80      	pop	{r7, pc}

08003004 <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b082      	sub	sp, #8
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f103 020c 	add.w	r2, r3, #12
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003018:	7812      	ldrb	r2, [r2, #0]
 800301a:	b2d2      	uxtb	r2, r2
 800301c:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003022:	1c5a      	adds	r2, r3, #1
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800302e:	b29b      	uxth	r3, r3
 8003030:	3b01      	subs	r3, #1
 8003032:	b29a      	uxth	r2, r3
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003040:	b29b      	uxth	r3, r3
 8003042:	2b00      	cmp	r3, #0
 8003044:	d102      	bne.n	800304c <SPI_RxISR_8BIT+0x48>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8003046:	6878      	ldr	r0, [r7, #4]
 8003048:	f000 fab6 	bl	80035b8 <SPI_CloseRx_ISR>
  }
}
 800304c:	bf00      	nop
 800304e:	3708      	adds	r7, #8
 8003050:	46bd      	mov	sp, r7
 8003052:	bd80      	pop	{r7, pc}

08003054 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b082      	sub	sp, #8
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	68da      	ldr	r2, [r3, #12]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003066:	b292      	uxth	r2, r2
 8003068:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800306e:	1c9a      	adds	r2, r3, #2
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800307a:	b29b      	uxth	r3, r3
 800307c:	3b01      	subs	r3, #1
 800307e:	b29a      	uxth	r2, r3
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800308c:	b29b      	uxth	r3, r3
 800308e:	2b00      	cmp	r3, #0
 8003090:	d102      	bne.n	8003098 <SPI_RxISR_16BIT+0x44>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8003092:	6878      	ldr	r0, [r7, #4]
 8003094:	f000 fa90 	bl	80035b8 <SPI_CloseRx_ISR>
  }
}
 8003098:	bf00      	nop
 800309a:	3708      	adds	r7, #8
 800309c:	46bd      	mov	sp, r7
 800309e:	bd80      	pop	{r7, pc}

080030a0 <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b082      	sub	sp, #8
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	330c      	adds	r3, #12
 80030b2:	7812      	ldrb	r2, [r2, #0]
 80030b4:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030ba:	1c5a      	adds	r2, r3, #1
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030c4:	b29b      	uxth	r3, r3
 80030c6:	3b01      	subs	r3, #1
 80030c8:	b29a      	uxth	r2, r3
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030d2:	b29b      	uxth	r3, r3
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d102      	bne.n	80030de <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 80030d8:	6878      	ldr	r0, [r7, #4]
 80030da:	f000 fa9d 	bl	8003618 <SPI_CloseTx_ISR>
  }
}
 80030de:	bf00      	nop
 80030e0:	3708      	adds	r7, #8
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}

080030e6 <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80030e6:	b580      	push	{r7, lr}
 80030e8:	b082      	sub	sp, #8
 80030ea:	af00      	add	r7, sp, #0
 80030ec:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030f2:	881a      	ldrh	r2, [r3, #0]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030fe:	1c9a      	adds	r2, r3, #2
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003108:	b29b      	uxth	r3, r3
 800310a:	3b01      	subs	r3, #1
 800310c:	b29a      	uxth	r2, r3
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003116:	b29b      	uxth	r3, r3
 8003118:	2b00      	cmp	r3, #0
 800311a:	d102      	bne.n	8003122 <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 800311c:	6878      	ldr	r0, [r7, #4]
 800311e:	f000 fa7b 	bl	8003618 <SPI_CloseTx_ISR>
  }
}
 8003122:	bf00      	nop
 8003124:	3708      	adds	r7, #8
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}
	...

0800312c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b088      	sub	sp, #32
 8003130:	af00      	add	r7, sp, #0
 8003132:	60f8      	str	r0, [r7, #12]
 8003134:	60b9      	str	r1, [r7, #8]
 8003136:	603b      	str	r3, [r7, #0]
 8003138:	4613      	mov	r3, r2
 800313a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800313c:	f7fd fe88 	bl	8000e50 <HAL_GetTick>
 8003140:	4602      	mov	r2, r0
 8003142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003144:	1a9b      	subs	r3, r3, r2
 8003146:	683a      	ldr	r2, [r7, #0]
 8003148:	4413      	add	r3, r2
 800314a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800314c:	f7fd fe80 	bl	8000e50 <HAL_GetTick>
 8003150:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003152:	4b39      	ldr	r3, [pc, #228]	; (8003238 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	015b      	lsls	r3, r3, #5
 8003158:	0d1b      	lsrs	r3, r3, #20
 800315a:	69fa      	ldr	r2, [r7, #28]
 800315c:	fb02 f303 	mul.w	r3, r2, r3
 8003160:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003162:	e054      	b.n	800320e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800316a:	d050      	beq.n	800320e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800316c:	f7fd fe70 	bl	8000e50 <HAL_GetTick>
 8003170:	4602      	mov	r2, r0
 8003172:	69bb      	ldr	r3, [r7, #24]
 8003174:	1ad3      	subs	r3, r2, r3
 8003176:	69fa      	ldr	r2, [r7, #28]
 8003178:	429a      	cmp	r2, r3
 800317a:	d902      	bls.n	8003182 <SPI_WaitFlagStateUntilTimeout+0x56>
 800317c:	69fb      	ldr	r3, [r7, #28]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d13d      	bne.n	80031fe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	685a      	ldr	r2, [r3, #4]
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003190:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800319a:	d111      	bne.n	80031c0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	689b      	ldr	r3, [r3, #8]
 80031a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031a4:	d004      	beq.n	80031b0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	689b      	ldr	r3, [r3, #8]
 80031aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031ae:	d107      	bne.n	80031c0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	681a      	ldr	r2, [r3, #0]
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80031be:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031c8:	d10f      	bne.n	80031ea <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	681a      	ldr	r2, [r3, #0]
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80031d8:	601a      	str	r2, [r3, #0]
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	681a      	ldr	r2, [r3, #0]
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80031e8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	2201      	movs	r2, #1
 80031ee:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	2200      	movs	r2, #0
 80031f6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80031fa:	2303      	movs	r3, #3
 80031fc:	e017      	b.n	800322e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80031fe:	697b      	ldr	r3, [r7, #20]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d101      	bne.n	8003208 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003204:	2300      	movs	r3, #0
 8003206:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003208:	697b      	ldr	r3, [r7, #20]
 800320a:	3b01      	subs	r3, #1
 800320c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	689a      	ldr	r2, [r3, #8]
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	4013      	ands	r3, r2
 8003218:	68ba      	ldr	r2, [r7, #8]
 800321a:	429a      	cmp	r2, r3
 800321c:	bf0c      	ite	eq
 800321e:	2301      	moveq	r3, #1
 8003220:	2300      	movne	r3, #0
 8003222:	b2db      	uxtb	r3, r3
 8003224:	461a      	mov	r2, r3
 8003226:	79fb      	ldrb	r3, [r7, #7]
 8003228:	429a      	cmp	r2, r3
 800322a:	d19b      	bne.n	8003164 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800322c:	2300      	movs	r3, #0
}
 800322e:	4618      	mov	r0, r3
 8003230:	3720      	adds	r7, #32
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}
 8003236:	bf00      	nop
 8003238:	20000000 	.word	0x20000000

0800323c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b08a      	sub	sp, #40	; 0x28
 8003240:	af00      	add	r7, sp, #0
 8003242:	60f8      	str	r0, [r7, #12]
 8003244:	60b9      	str	r1, [r7, #8]
 8003246:	607a      	str	r2, [r7, #4]
 8003248:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800324a:	2300      	movs	r3, #0
 800324c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800324e:	f7fd fdff 	bl	8000e50 <HAL_GetTick>
 8003252:	4602      	mov	r2, r0
 8003254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003256:	1a9b      	subs	r3, r3, r2
 8003258:	683a      	ldr	r2, [r7, #0]
 800325a:	4413      	add	r3, r2
 800325c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800325e:	f7fd fdf7 	bl	8000e50 <HAL_GetTick>
 8003262:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	330c      	adds	r3, #12
 800326a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800326c:	4b3d      	ldr	r3, [pc, #244]	; (8003364 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800326e:	681a      	ldr	r2, [r3, #0]
 8003270:	4613      	mov	r3, r2
 8003272:	009b      	lsls	r3, r3, #2
 8003274:	4413      	add	r3, r2
 8003276:	00da      	lsls	r2, r3, #3
 8003278:	1ad3      	subs	r3, r2, r3
 800327a:	0d1b      	lsrs	r3, r3, #20
 800327c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800327e:	fb02 f303 	mul.w	r3, r2, r3
 8003282:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003284:	e060      	b.n	8003348 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003286:	68bb      	ldr	r3, [r7, #8]
 8003288:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800328c:	d107      	bne.n	800329e <SPI_WaitFifoStateUntilTimeout+0x62>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d104      	bne.n	800329e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003294:	69fb      	ldr	r3, [r7, #28]
 8003296:	781b      	ldrb	r3, [r3, #0]
 8003298:	b2db      	uxtb	r3, r3
 800329a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800329c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80032a4:	d050      	beq.n	8003348 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80032a6:	f7fd fdd3 	bl	8000e50 <HAL_GetTick>
 80032aa:	4602      	mov	r2, r0
 80032ac:	6a3b      	ldr	r3, [r7, #32]
 80032ae:	1ad3      	subs	r3, r2, r3
 80032b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032b2:	429a      	cmp	r2, r3
 80032b4:	d902      	bls.n	80032bc <SPI_WaitFifoStateUntilTimeout+0x80>
 80032b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d13d      	bne.n	8003338 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	685a      	ldr	r2, [r3, #4]
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80032ca:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80032d4:	d111      	bne.n	80032fa <SPI_WaitFifoStateUntilTimeout+0xbe>
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032de:	d004      	beq.n	80032ea <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	689b      	ldr	r3, [r3, #8]
 80032e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032e8:	d107      	bne.n	80032fa <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	681a      	ldr	r2, [r3, #0]
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80032f8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003302:	d10f      	bne.n	8003324 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	681a      	ldr	r2, [r3, #0]
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003312:	601a      	str	r2, [r3, #0]
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	681a      	ldr	r2, [r3, #0]
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003322:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	2201      	movs	r2, #1
 8003328:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	2200      	movs	r2, #0
 8003330:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003334:	2303      	movs	r3, #3
 8003336:	e010      	b.n	800335a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003338:	69bb      	ldr	r3, [r7, #24]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d101      	bne.n	8003342 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800333e:	2300      	movs	r3, #0
 8003340:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8003342:	69bb      	ldr	r3, [r7, #24]
 8003344:	3b01      	subs	r3, #1
 8003346:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	689a      	ldr	r2, [r3, #8]
 800334e:	68bb      	ldr	r3, [r7, #8]
 8003350:	4013      	ands	r3, r2
 8003352:	687a      	ldr	r2, [r7, #4]
 8003354:	429a      	cmp	r2, r3
 8003356:	d196      	bne.n	8003286 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003358:	2300      	movs	r3, #0
}
 800335a:	4618      	mov	r0, r3
 800335c:	3728      	adds	r7, #40	; 0x28
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}
 8003362:	bf00      	nop
 8003364:	20000000 	.word	0x20000000

08003368 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b088      	sub	sp, #32
 800336c:	af02      	add	r7, sp, #8
 800336e:	60f8      	str	r0, [r7, #12]
 8003370:	60b9      	str	r1, [r7, #8]
 8003372:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800337c:	d111      	bne.n	80033a2 <SPI_EndRxTransaction+0x3a>
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	689b      	ldr	r3, [r3, #8]
 8003382:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003386:	d004      	beq.n	8003392 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	689b      	ldr	r3, [r3, #8]
 800338c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003390:	d107      	bne.n	80033a2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	681a      	ldr	r2, [r3, #0]
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80033a0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80033aa:	d112      	bne.n	80033d2 <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	9300      	str	r3, [sp, #0]
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	2200      	movs	r2, #0
 80033b4:	2180      	movs	r1, #128	; 0x80
 80033b6:	68f8      	ldr	r0, [r7, #12]
 80033b8:	f7ff feb8 	bl	800312c <SPI_WaitFlagStateUntilTimeout>
 80033bc:	4603      	mov	r3, r0
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d021      	beq.n	8003406 <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033c6:	f043 0220 	orr.w	r2, r3, #32
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80033ce:	2303      	movs	r3, #3
 80033d0:	e03d      	b.n	800344e <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in µs */
    __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80033d2:	4b21      	ldr	r3, [pc, #132]	; (8003458 <SPI_EndRxTransaction+0xf0>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a21      	ldr	r2, [pc, #132]	; (800345c <SPI_EndRxTransaction+0xf4>)
 80033d8:	fba2 2303 	umull	r2, r3, r2, r3
 80033dc:	0d5b      	lsrs	r3, r3, #21
 80033de:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80033e2:	fb02 f303 	mul.w	r3, r2, r3
 80033e6:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d00a      	beq.n	8003404 <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	3b01      	subs	r3, #1
 80033f2:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	689b      	ldr	r3, [r3, #8]
 80033fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033fe:	2b80      	cmp	r3, #128	; 0x80
 8003400:	d0f2      	beq.n	80033e8 <SPI_EndRxTransaction+0x80>
 8003402:	e000      	b.n	8003406 <SPI_EndRxTransaction+0x9e>
        break;
 8003404:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800340e:	d11d      	bne.n	800344c <SPI_EndRxTransaction+0xe4>
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003418:	d004      	beq.n	8003424 <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003422:	d113      	bne.n	800344c <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	9300      	str	r3, [sp, #0]
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	2200      	movs	r2, #0
 800342c:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003430:	68f8      	ldr	r0, [r7, #12]
 8003432:	f7ff ff03 	bl	800323c <SPI_WaitFifoStateUntilTimeout>
 8003436:	4603      	mov	r3, r0
 8003438:	2b00      	cmp	r3, #0
 800343a:	d007      	beq.n	800344c <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003440:	f043 0220 	orr.w	r2, r3, #32
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8003448:	2303      	movs	r3, #3
 800344a:	e000      	b.n	800344e <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 800344c:	2300      	movs	r3, #0
}
 800344e:	4618      	mov	r0, r3
 8003450:	3718      	adds	r7, #24
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}
 8003456:	bf00      	nop
 8003458:	20000000 	.word	0x20000000
 800345c:	165e9f81 	.word	0x165e9f81

08003460 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b088      	sub	sp, #32
 8003464:	af02      	add	r7, sp, #8
 8003466:	60f8      	str	r0, [r7, #12]
 8003468:	60b9      	str	r1, [r7, #8]
 800346a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	9300      	str	r3, [sp, #0]
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	2200      	movs	r2, #0
 8003474:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003478:	68f8      	ldr	r0, [r7, #12]
 800347a:	f7ff fedf 	bl	800323c <SPI_WaitFifoStateUntilTimeout>
 800347e:	4603      	mov	r3, r0
 8003480:	2b00      	cmp	r3, #0
 8003482:	d007      	beq.n	8003494 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003488:	f043 0220 	orr.w	r2, r3, #32
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003490:	2303      	movs	r3, #3
 8003492:	e046      	b.n	8003522 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003494:	4b25      	ldr	r3, [pc, #148]	; (800352c <SPI_EndRxTxTransaction+0xcc>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a25      	ldr	r2, [pc, #148]	; (8003530 <SPI_EndRxTxTransaction+0xd0>)
 800349a:	fba2 2303 	umull	r2, r3, r2, r3
 800349e:	0d5b      	lsrs	r3, r3, #21
 80034a0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80034a4:	fb02 f303 	mul.w	r3, r2, r3
 80034a8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80034b2:	d112      	bne.n	80034da <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	9300      	str	r3, [sp, #0]
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	2200      	movs	r2, #0
 80034bc:	2180      	movs	r1, #128	; 0x80
 80034be:	68f8      	ldr	r0, [r7, #12]
 80034c0:	f7ff fe34 	bl	800312c <SPI_WaitFlagStateUntilTimeout>
 80034c4:	4603      	mov	r3, r0
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d016      	beq.n	80034f8 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034ce:	f043 0220 	orr.w	r2, r3, #32
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80034d6:	2303      	movs	r3, #3
 80034d8:	e023      	b.n	8003522 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d00a      	beq.n	80034f6 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	3b01      	subs	r3, #1
 80034e4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	689b      	ldr	r3, [r3, #8]
 80034ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034f0:	2b80      	cmp	r3, #128	; 0x80
 80034f2:	d0f2      	beq.n	80034da <SPI_EndRxTxTransaction+0x7a>
 80034f4:	e000      	b.n	80034f8 <SPI_EndRxTxTransaction+0x98>
        break;
 80034f6:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	9300      	str	r3, [sp, #0]
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	2200      	movs	r2, #0
 8003500:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003504:	68f8      	ldr	r0, [r7, #12]
 8003506:	f7ff fe99 	bl	800323c <SPI_WaitFifoStateUntilTimeout>
 800350a:	4603      	mov	r3, r0
 800350c:	2b00      	cmp	r3, #0
 800350e:	d007      	beq.n	8003520 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003514:	f043 0220 	orr.w	r2, r3, #32
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800351c:	2303      	movs	r3, #3
 800351e:	e000      	b.n	8003522 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8003520:	2300      	movs	r3, #0
}
 8003522:	4618      	mov	r0, r3
 8003524:	3718      	adds	r7, #24
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}
 800352a:	bf00      	nop
 800352c:	20000000 	.word	0x20000000
 8003530:	165e9f81 	.word	0x165e9f81

08003534 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b084      	sub	sp, #16
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800353c:	f7fd fc88 	bl	8000e50 <HAL_GetTick>
 8003540:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	685a      	ldr	r2, [r3, #4]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f022 0220 	bic.w	r2, r2, #32
 8003550:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003552:	68fa      	ldr	r2, [r7, #12]
 8003554:	2164      	movs	r1, #100	; 0x64
 8003556:	6878      	ldr	r0, [r7, #4]
 8003558:	f7ff ff82 	bl	8003460 <SPI_EndRxTxTransaction>
 800355c:	4603      	mov	r3, r0
 800355e:	2b00      	cmp	r3, #0
 8003560:	d005      	beq.n	800356e <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003566:	f043 0220 	orr.w	r2, r3, #32
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	661a      	str	r2, [r3, #96]	; 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003572:	2b00      	cmp	r3, #0
 8003574:	d115      	bne.n	80035a2 <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800357c:	b2db      	uxtb	r3, r3
 800357e:	2b04      	cmp	r3, #4
 8003580:	d107      	bne.n	8003592 <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2201      	movs	r2, #1
 8003586:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 800358a:	6878      	ldr	r0, [r7, #4]
 800358c:	f7ff fc06 	bl	8002d9c <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8003590:	e00e      	b.n	80035b0 <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2201      	movs	r2, #1
 8003596:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 800359a:	6878      	ldr	r0, [r7, #4]
 800359c:	f7ff fc08 	bl	8002db0 <HAL_SPI_TxRxCpltCallback>
}
 80035a0:	e006      	b.n	80035b0 <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2201      	movs	r2, #1
 80035a6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	f7fd f9a8 	bl	8000900 <HAL_SPI_ErrorCallback>
}
 80035b0:	bf00      	nop
 80035b2:	3710      	adds	r7, #16
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bd80      	pop	{r7, pc}

080035b8 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b082      	sub	sp, #8
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	685a      	ldr	r2, [r3, #4]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80035ce:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 80035d0:	f7fd fc3e 	bl	8000e50 <HAL_GetTick>
 80035d4:	4603      	mov	r3, r0
 80035d6:	461a      	mov	r2, r3
 80035d8:	2164      	movs	r1, #100	; 0x64
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	f7ff fec4 	bl	8003368 <SPI_EndRxTransaction>
 80035e0:	4603      	mov	r3, r0
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d005      	beq.n	80035f2 <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035ea:	f043 0220 	orr.w	r2, r3, #32
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	661a      	str	r2, [r3, #96]	; 0x60
  }
  hspi->State = HAL_SPI_STATE_READY;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2201      	movs	r2, #1
 80035f6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d103      	bne.n	800360a <SPI_CloseRx_ISR+0x52>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 8003602:	6878      	ldr	r0, [r7, #4]
 8003604:	f7ff fbca 	bl	8002d9c <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8003608:	e002      	b.n	8003610 <SPI_CloseRx_ISR+0x58>
      HAL_SPI_ErrorCallback(hspi);
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	f7fd f978 	bl	8000900 <HAL_SPI_ErrorCallback>
}
 8003610:	bf00      	nop
 8003612:	3708      	adds	r7, #8
 8003614:	46bd      	mov	sp, r7
 8003616:	bd80      	pop	{r7, pc}

08003618 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b084      	sub	sp, #16
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003620:	f7fd fc16 	bl	8000e50 <HAL_GetTick>
 8003624:	60f8      	str	r0, [r7, #12]

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	685a      	ldr	r2, [r3, #4]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003634:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003636:	68fa      	ldr	r2, [r7, #12]
 8003638:	2164      	movs	r1, #100	; 0x64
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	f7ff ff10 	bl	8003460 <SPI_EndRxTxTransaction>
 8003640:	4603      	mov	r3, r0
 8003642:	2b00      	cmp	r3, #0
 8003644:	d005      	beq.n	8003652 <SPI_CloseTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800364a:	f043 0220 	orr.w	r2, r3, #32
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	689b      	ldr	r3, [r3, #8]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d10a      	bne.n	8003670 <SPI_CloseTx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800365a:	2300      	movs	r3, #0
 800365c:	60bb      	str	r3, [r7, #8]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	68db      	ldr	r3, [r3, #12]
 8003664:	60bb      	str	r3, [r7, #8]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	689b      	ldr	r3, [r3, #8]
 800366c:	60bb      	str	r3, [r7, #8]
 800366e:	68bb      	ldr	r3, [r7, #8]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2201      	movs	r2, #1
 8003674:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800367c:	2b00      	cmp	r3, #0
 800367e:	d003      	beq.n	8003688 <SPI_CloseTx_ISR+0x70>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8003680:	6878      	ldr	r0, [r7, #4]
 8003682:	f7fd f93d 	bl	8000900 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8003686:	e002      	b.n	800368e <SPI_CloseTx_ISR+0x76>
    HAL_SPI_TxCpltCallback(hspi);
 8003688:	6878      	ldr	r0, [r7, #4]
 800368a:	f7fd f91d 	bl	80008c8 <HAL_SPI_TxCpltCallback>
}
 800368e:	bf00      	nop
 8003690:	3710      	adds	r7, #16
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}

08003696 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003696:	b580      	push	{r7, lr}
 8003698:	b082      	sub	sp, #8
 800369a:	af00      	add	r7, sp, #0
 800369c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d101      	bne.n	80036a8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80036a4:	2301      	movs	r3, #1
 80036a6:	e040      	b.n	800372a <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d106      	bne.n	80036be <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2200      	movs	r2, #0
 80036b4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80036b8:	6878      	ldr	r0, [r7, #4]
 80036ba:	f7fd fa07 	bl	8000acc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2224      	movs	r2, #36	; 0x24
 80036c2:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	681a      	ldr	r2, [r3, #0]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f022 0201 	bic.w	r2, r2, #1
 80036d2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80036d4:	6878      	ldr	r0, [r7, #4]
 80036d6:	f000 fbc1 	bl	8003e5c <UART_SetConfig>
 80036da:	4603      	mov	r3, r0
 80036dc:	2b01      	cmp	r3, #1
 80036de:	d101      	bne.n	80036e4 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80036e0:	2301      	movs	r3, #1
 80036e2:	e022      	b.n	800372a <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d002      	beq.n	80036f2 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80036ec:	6878      	ldr	r0, [r7, #4]
 80036ee:	f000 fe19 	bl	8004324 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	685a      	ldr	r2, [r3, #4]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003700:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	689a      	ldr	r2, [r3, #8]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003710:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	681a      	ldr	r2, [r3, #0]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f042 0201 	orr.w	r2, r2, #1
 8003720:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003722:	6878      	ldr	r0, [r7, #4]
 8003724:	f000 fea0 	bl	8004468 <UART_CheckIdleState>
 8003728:	4603      	mov	r3, r0
}
 800372a:	4618      	mov	r0, r3
 800372c:	3708      	adds	r7, #8
 800372e:	46bd      	mov	sp, r7
 8003730:	bd80      	pop	{r7, pc}

08003732 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003732:	b580      	push	{r7, lr}
 8003734:	b08a      	sub	sp, #40	; 0x28
 8003736:	af02      	add	r7, sp, #8
 8003738:	60f8      	str	r0, [r7, #12]
 800373a:	60b9      	str	r1, [r7, #8]
 800373c:	603b      	str	r3, [r7, #0]
 800373e:	4613      	mov	r3, r2
 8003740:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003746:	2b20      	cmp	r3, #32
 8003748:	d171      	bne.n	800382e <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800374a:	68bb      	ldr	r3, [r7, #8]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d002      	beq.n	8003756 <HAL_UART_Transmit+0x24>
 8003750:	88fb      	ldrh	r3, [r7, #6]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d101      	bne.n	800375a <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003756:	2301      	movs	r3, #1
 8003758:	e06a      	b.n	8003830 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	2200      	movs	r2, #0
 800375e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	2221      	movs	r2, #33	; 0x21
 8003766:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003768:	f7fd fb72 	bl	8000e50 <HAL_GetTick>
 800376c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	88fa      	ldrh	r2, [r7, #6]
 8003772:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	88fa      	ldrh	r2, [r7, #6]
 800377a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	689b      	ldr	r3, [r3, #8]
 8003782:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003786:	d108      	bne.n	800379a <HAL_UART_Transmit+0x68>
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	691b      	ldr	r3, [r3, #16]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d104      	bne.n	800379a <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003790:	2300      	movs	r3, #0
 8003792:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	61bb      	str	r3, [r7, #24]
 8003798:	e003      	b.n	80037a2 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800379a:	68bb      	ldr	r3, [r7, #8]
 800379c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800379e:	2300      	movs	r3, #0
 80037a0:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80037a2:	e02c      	b.n	80037fe <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	9300      	str	r3, [sp, #0]
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	2200      	movs	r2, #0
 80037ac:	2180      	movs	r1, #128	; 0x80
 80037ae:	68f8      	ldr	r0, [r7, #12]
 80037b0:	f000 fea7 	bl	8004502 <UART_WaitOnFlagUntilTimeout>
 80037b4:	4603      	mov	r3, r0
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d001      	beq.n	80037be <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 80037ba:	2303      	movs	r3, #3
 80037bc:	e038      	b.n	8003830 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80037be:	69fb      	ldr	r3, [r7, #28]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d10b      	bne.n	80037dc <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80037c4:	69bb      	ldr	r3, [r7, #24]
 80037c6:	881b      	ldrh	r3, [r3, #0]
 80037c8:	461a      	mov	r2, r3
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80037d2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80037d4:	69bb      	ldr	r3, [r7, #24]
 80037d6:	3302      	adds	r3, #2
 80037d8:	61bb      	str	r3, [r7, #24]
 80037da:	e007      	b.n	80037ec <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80037dc:	69fb      	ldr	r3, [r7, #28]
 80037de:	781a      	ldrb	r2, [r3, #0]
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80037e6:	69fb      	ldr	r3, [r7, #28]
 80037e8:	3301      	adds	r3, #1
 80037ea:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80037f2:	b29b      	uxth	r3, r3
 80037f4:	3b01      	subs	r3, #1
 80037f6:	b29a      	uxth	r2, r3
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003804:	b29b      	uxth	r3, r3
 8003806:	2b00      	cmp	r3, #0
 8003808:	d1cc      	bne.n	80037a4 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	9300      	str	r3, [sp, #0]
 800380e:	697b      	ldr	r3, [r7, #20]
 8003810:	2200      	movs	r2, #0
 8003812:	2140      	movs	r1, #64	; 0x40
 8003814:	68f8      	ldr	r0, [r7, #12]
 8003816:	f000 fe74 	bl	8004502 <UART_WaitOnFlagUntilTimeout>
 800381a:	4603      	mov	r3, r0
 800381c:	2b00      	cmp	r3, #0
 800381e:	d001      	beq.n	8003824 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8003820:	2303      	movs	r3, #3
 8003822:	e005      	b.n	8003830 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	2220      	movs	r2, #32
 8003828:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800382a:	2300      	movs	r3, #0
 800382c:	e000      	b.n	8003830 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800382e:	2302      	movs	r3, #2
  }
}
 8003830:	4618      	mov	r0, r3
 8003832:	3720      	adds	r7, #32
 8003834:	46bd      	mov	sp, r7
 8003836:	bd80      	pop	{r7, pc}

08003838 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b0ba      	sub	sp, #232	; 0xe8
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	69db      	ldr	r3, [r3, #28]
 8003846:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	689b      	ldr	r3, [r3, #8]
 800385a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800385e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003862:	f640 030f 	movw	r3, #2063	; 0x80f
 8003866:	4013      	ands	r3, r2
 8003868:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800386c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003870:	2b00      	cmp	r3, #0
 8003872:	d115      	bne.n	80038a0 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003874:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003878:	f003 0320 	and.w	r3, r3, #32
 800387c:	2b00      	cmp	r3, #0
 800387e:	d00f      	beq.n	80038a0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003880:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003884:	f003 0320 	and.w	r3, r3, #32
 8003888:	2b00      	cmp	r3, #0
 800388a:	d009      	beq.n	80038a0 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003890:	2b00      	cmp	r3, #0
 8003892:	f000 82ac 	beq.w	8003dee <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800389a:	6878      	ldr	r0, [r7, #4]
 800389c:	4798      	blx	r3
      }
      return;
 800389e:	e2a6      	b.n	8003dee <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80038a0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	f000 8117 	beq.w	8003ad8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80038aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80038ae:	f003 0301 	and.w	r3, r3, #1
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d106      	bne.n	80038c4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80038b6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80038ba:	4b85      	ldr	r3, [pc, #532]	; (8003ad0 <HAL_UART_IRQHandler+0x298>)
 80038bc:	4013      	ands	r3, r2
 80038be:	2b00      	cmp	r3, #0
 80038c0:	f000 810a 	beq.w	8003ad8 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80038c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038c8:	f003 0301 	and.w	r3, r3, #1
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d011      	beq.n	80038f4 <HAL_UART_IRQHandler+0xbc>
 80038d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80038d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d00b      	beq.n	80038f4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	2201      	movs	r2, #1
 80038e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80038ea:	f043 0201 	orr.w	r2, r3, #1
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80038f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038f8:	f003 0302 	and.w	r3, r3, #2
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d011      	beq.n	8003924 <HAL_UART_IRQHandler+0xec>
 8003900:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003904:	f003 0301 	and.w	r3, r3, #1
 8003908:	2b00      	cmp	r3, #0
 800390a:	d00b      	beq.n	8003924 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	2202      	movs	r2, #2
 8003912:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800391a:	f043 0204 	orr.w	r2, r3, #4
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003924:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003928:	f003 0304 	and.w	r3, r3, #4
 800392c:	2b00      	cmp	r3, #0
 800392e:	d011      	beq.n	8003954 <HAL_UART_IRQHandler+0x11c>
 8003930:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003934:	f003 0301 	and.w	r3, r3, #1
 8003938:	2b00      	cmp	r3, #0
 800393a:	d00b      	beq.n	8003954 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	2204      	movs	r2, #4
 8003942:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800394a:	f043 0202 	orr.w	r2, r3, #2
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003954:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003958:	f003 0308 	and.w	r3, r3, #8
 800395c:	2b00      	cmp	r3, #0
 800395e:	d017      	beq.n	8003990 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003960:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003964:	f003 0320 	and.w	r3, r3, #32
 8003968:	2b00      	cmp	r3, #0
 800396a:	d105      	bne.n	8003978 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800396c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003970:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003974:	2b00      	cmp	r3, #0
 8003976:	d00b      	beq.n	8003990 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	2208      	movs	r2, #8
 800397e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003986:	f043 0208 	orr.w	r2, r3, #8
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003990:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003994:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003998:	2b00      	cmp	r3, #0
 800399a:	d012      	beq.n	80039c2 <HAL_UART_IRQHandler+0x18a>
 800399c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039a0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d00c      	beq.n	80039c2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80039b0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039b8:	f043 0220 	orr.w	r2, r3, #32
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	f000 8212 	beq.w	8003df2 <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80039ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039d2:	f003 0320 	and.w	r3, r3, #32
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d00d      	beq.n	80039f6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80039da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039de:	f003 0320 	and.w	r3, r3, #32
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d007      	beq.n	80039f6 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d003      	beq.n	80039f6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80039f2:	6878      	ldr	r0, [r7, #4]
 80039f4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039fc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	689b      	ldr	r3, [r3, #8]
 8003a06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a0a:	2b40      	cmp	r3, #64	; 0x40
 8003a0c:	d005      	beq.n	8003a1a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003a0e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003a12:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d04f      	beq.n	8003aba <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003a1a:	6878      	ldr	r0, [r7, #4]
 8003a1c:	f000 fe37 	bl	800468e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	689b      	ldr	r3, [r3, #8]
 8003a26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a2a:	2b40      	cmp	r3, #64	; 0x40
 8003a2c:	d141      	bne.n	8003ab2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	3308      	adds	r3, #8
 8003a34:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a38:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003a3c:	e853 3f00 	ldrex	r3, [r3]
 8003a40:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003a44:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003a48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a4c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	3308      	adds	r3, #8
 8003a56:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003a5a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003a5e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a62:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003a66:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003a6a:	e841 2300 	strex	r3, r2, [r1]
 8003a6e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003a72:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d1d9      	bne.n	8003a2e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d013      	beq.n	8003aaa <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a86:	4a13      	ldr	r2, [pc, #76]	; (8003ad4 <HAL_UART_IRQHandler+0x29c>)
 8003a88:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a8e:	4618      	mov	r0, r3
 8003a90:	f7fd fb6b 	bl	800116a <HAL_DMA_Abort_IT>
 8003a94:	4603      	mov	r3, r0
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d017      	beq.n	8003aca <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003aa0:	687a      	ldr	r2, [r7, #4]
 8003aa2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003aa4:	4610      	mov	r0, r2
 8003aa6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003aa8:	e00f      	b.n	8003aca <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003aaa:	6878      	ldr	r0, [r7, #4]
 8003aac:	f000 f9b6 	bl	8003e1c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ab0:	e00b      	b.n	8003aca <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003ab2:	6878      	ldr	r0, [r7, #4]
 8003ab4:	f000 f9b2 	bl	8003e1c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ab8:	e007      	b.n	8003aca <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003aba:	6878      	ldr	r0, [r7, #4]
 8003abc:	f000 f9ae 	bl	8003e1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8003ac8:	e193      	b.n	8003df2 <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003aca:	bf00      	nop
    return;
 8003acc:	e191      	b.n	8003df2 <HAL_UART_IRQHandler+0x5ba>
 8003ace:	bf00      	nop
 8003ad0:	04000120 	.word	0x04000120
 8003ad4:	08004757 	.word	0x08004757

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003adc:	2b01      	cmp	r3, #1
 8003ade:	f040 814c 	bne.w	8003d7a <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003ae2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ae6:	f003 0310 	and.w	r3, r3, #16
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	f000 8145 	beq.w	8003d7a <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003af0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003af4:	f003 0310 	and.w	r3, r3, #16
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	f000 813e 	beq.w	8003d7a <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	2210      	movs	r2, #16
 8003b04:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	689b      	ldr	r3, [r3, #8]
 8003b0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b10:	2b40      	cmp	r3, #64	; 0x40
 8003b12:	f040 80b6 	bne.w	8003c82 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003b22:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	f000 8165 	beq.w	8003df6 <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003b32:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003b36:	429a      	cmp	r2, r3
 8003b38:	f080 815d 	bcs.w	8003df6 <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003b42:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b4a:	69db      	ldr	r3, [r3, #28]
 8003b4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b50:	f000 8086 	beq.w	8003c60 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b5c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003b60:	e853 3f00 	ldrex	r3, [r3]
 8003b64:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003b68:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003b6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b70:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	461a      	mov	r2, r3
 8003b7a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003b7e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003b82:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b86:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003b8a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003b8e:	e841 2300 	strex	r3, r2, [r1]
 8003b92:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003b96:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d1da      	bne.n	8003b54 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	3308      	adds	r3, #8
 8003ba4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ba6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ba8:	e853 3f00 	ldrex	r3, [r3]
 8003bac:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003bae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003bb0:	f023 0301 	bic.w	r3, r3, #1
 8003bb4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	3308      	adds	r3, #8
 8003bbe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003bc2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003bc6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bc8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003bca:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003bce:	e841 2300 	strex	r3, r2, [r1]
 8003bd2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003bd4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d1e1      	bne.n	8003b9e <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	3308      	adds	r3, #8
 8003be0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003be2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003be4:	e853 3f00 	ldrex	r3, [r3]
 8003be8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003bea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003bec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003bf0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	3308      	adds	r3, #8
 8003bfa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003bfe:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003c00:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c02:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003c04:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003c06:	e841 2300 	strex	r3, r2, [r1]
 8003c0a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003c0c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d1e3      	bne.n	8003bda <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2220      	movs	r2, #32
 8003c16:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c28:	e853 3f00 	ldrex	r3, [r3]
 8003c2c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003c2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c30:	f023 0310 	bic.w	r3, r3, #16
 8003c34:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	461a      	mov	r2, r3
 8003c3e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003c42:	65bb      	str	r3, [r7, #88]	; 0x58
 8003c44:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c46:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003c48:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003c4a:	e841 2300 	strex	r3, r2, [r1]
 8003c4e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003c50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d1e4      	bne.n	8003c20 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	f7fd fa15 	bl	800108a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2202      	movs	r2, #2
 8003c64:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003c72:	b29b      	uxth	r3, r3
 8003c74:	1ad3      	subs	r3, r2, r3
 8003c76:	b29b      	uxth	r3, r3
 8003c78:	4619      	mov	r1, r3
 8003c7a:	6878      	ldr	r0, [r7, #4]
 8003c7c:	f000 f8d8 	bl	8003e30 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003c80:	e0b9      	b.n	8003df6 <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003c8e:	b29b      	uxth	r3, r3
 8003c90:	1ad3      	subs	r3, r2, r3
 8003c92:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003c9c:	b29b      	uxth	r3, r3
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	f000 80ab 	beq.w	8003dfa <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8003ca4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	f000 80a6 	beq.w	8003dfa <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cb6:	e853 3f00 	ldrex	r3, [r3]
 8003cba:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003cbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cbe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003cc2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	461a      	mov	r2, r3
 8003ccc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003cd0:	647b      	str	r3, [r7, #68]	; 0x44
 8003cd2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cd4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003cd6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003cd8:	e841 2300 	strex	r3, r2, [r1]
 8003cdc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003cde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d1e4      	bne.n	8003cae <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	3308      	adds	r3, #8
 8003cea:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cee:	e853 3f00 	ldrex	r3, [r3]
 8003cf2:	623b      	str	r3, [r7, #32]
   return(result);
 8003cf4:	6a3b      	ldr	r3, [r7, #32]
 8003cf6:	f023 0301 	bic.w	r3, r3, #1
 8003cfa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	3308      	adds	r3, #8
 8003d04:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003d08:	633a      	str	r2, [r7, #48]	; 0x30
 8003d0a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d0c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003d0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d10:	e841 2300 	strex	r3, r2, [r1]
 8003d14:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003d16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d1e3      	bne.n	8003ce4 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2220      	movs	r2, #32
 8003d20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2200      	movs	r2, #0
 8003d28:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	e853 3f00 	ldrex	r3, [r3]
 8003d3c:	60fb      	str	r3, [r7, #12]
   return(result);
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	f023 0310 	bic.w	r3, r3, #16
 8003d44:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	461a      	mov	r2, r3
 8003d4e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003d52:	61fb      	str	r3, [r7, #28]
 8003d54:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d56:	69b9      	ldr	r1, [r7, #24]
 8003d58:	69fa      	ldr	r2, [r7, #28]
 8003d5a:	e841 2300 	strex	r3, r2, [r1]
 8003d5e:	617b      	str	r3, [r7, #20]
   return(result);
 8003d60:	697b      	ldr	r3, [r7, #20]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d1e4      	bne.n	8003d30 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2202      	movs	r2, #2
 8003d6a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003d6c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003d70:	4619      	mov	r1, r3
 8003d72:	6878      	ldr	r0, [r7, #4]
 8003d74:	f000 f85c 	bl	8003e30 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003d78:	e03f      	b.n	8003dfa <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003d7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d00e      	beq.n	8003da4 <HAL_UART_IRQHandler+0x56c>
 8003d86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003d8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d008      	beq.n	8003da4 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003d9a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003d9c:	6878      	ldr	r0, [r7, #4]
 8003d9e:	f000 f853 	bl	8003e48 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003da2:	e02d      	b.n	8003e00 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003da4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003da8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d00e      	beq.n	8003dce <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003db0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003db4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d008      	beq.n	8003dce <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d01c      	beq.n	8003dfe <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003dc8:	6878      	ldr	r0, [r7, #4]
 8003dca:	4798      	blx	r3
    }
    return;
 8003dcc:	e017      	b.n	8003dfe <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003dce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003dd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d012      	beq.n	8003e00 <HAL_UART_IRQHandler+0x5c8>
 8003dda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003dde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d00c      	beq.n	8003e00 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 8003de6:	6878      	ldr	r0, [r7, #4]
 8003de8:	f000 fccb 	bl	8004782 <UART_EndTransmit_IT>
    return;
 8003dec:	e008      	b.n	8003e00 <HAL_UART_IRQHandler+0x5c8>
      return;
 8003dee:	bf00      	nop
 8003df0:	e006      	b.n	8003e00 <HAL_UART_IRQHandler+0x5c8>
    return;
 8003df2:	bf00      	nop
 8003df4:	e004      	b.n	8003e00 <HAL_UART_IRQHandler+0x5c8>
      return;
 8003df6:	bf00      	nop
 8003df8:	e002      	b.n	8003e00 <HAL_UART_IRQHandler+0x5c8>
      return;
 8003dfa:	bf00      	nop
 8003dfc:	e000      	b.n	8003e00 <HAL_UART_IRQHandler+0x5c8>
    return;
 8003dfe:	bf00      	nop
  }

}
 8003e00:	37e8      	adds	r7, #232	; 0xe8
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}
 8003e06:	bf00      	nop

08003e08 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	b083      	sub	sp, #12
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003e10:	bf00      	nop
 8003e12:	370c      	adds	r7, #12
 8003e14:	46bd      	mov	sp, r7
 8003e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1a:	4770      	bx	lr

08003e1c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b083      	sub	sp, #12
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003e24:	bf00      	nop
 8003e26:	370c      	adds	r7, #12
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2e:	4770      	bx	lr

08003e30 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003e30:	b480      	push	{r7}
 8003e32:	b083      	sub	sp, #12
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
 8003e38:	460b      	mov	r3, r1
 8003e3a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003e3c:	bf00      	nop
 8003e3e:	370c      	adds	r7, #12
 8003e40:	46bd      	mov	sp, r7
 8003e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e46:	4770      	bx	lr

08003e48 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	b083      	sub	sp, #12
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003e50:	bf00      	nop
 8003e52:	370c      	adds	r7, #12
 8003e54:	46bd      	mov	sp, r7
 8003e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5a:	4770      	bx	lr

08003e5c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b088      	sub	sp, #32
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003e64:	2300      	movs	r3, #0
 8003e66:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	689a      	ldr	r2, [r3, #8]
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	691b      	ldr	r3, [r3, #16]
 8003e70:	431a      	orrs	r2, r3
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	695b      	ldr	r3, [r3, #20]
 8003e76:	431a      	orrs	r2, r3
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	69db      	ldr	r3, [r3, #28]
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	681a      	ldr	r2, [r3, #0]
 8003e86:	4ba6      	ldr	r3, [pc, #664]	; (8004120 <UART_SetConfig+0x2c4>)
 8003e88:	4013      	ands	r3, r2
 8003e8a:	687a      	ldr	r2, [r7, #4]
 8003e8c:	6812      	ldr	r2, [r2, #0]
 8003e8e:	6979      	ldr	r1, [r7, #20]
 8003e90:	430b      	orrs	r3, r1
 8003e92:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	68da      	ldr	r2, [r3, #12]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	430a      	orrs	r2, r1
 8003ea8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	699b      	ldr	r3, [r3, #24]
 8003eae:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6a1b      	ldr	r3, [r3, #32]
 8003eb4:	697a      	ldr	r2, [r7, #20]
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	697a      	ldr	r2, [r7, #20]
 8003eca:	430a      	orrs	r2, r1
 8003ecc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a94      	ldr	r2, [pc, #592]	; (8004124 <UART_SetConfig+0x2c8>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d120      	bne.n	8003f1a <UART_SetConfig+0xbe>
 8003ed8:	4b93      	ldr	r3, [pc, #588]	; (8004128 <UART_SetConfig+0x2cc>)
 8003eda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ede:	f003 0303 	and.w	r3, r3, #3
 8003ee2:	2b03      	cmp	r3, #3
 8003ee4:	d816      	bhi.n	8003f14 <UART_SetConfig+0xb8>
 8003ee6:	a201      	add	r2, pc, #4	; (adr r2, 8003eec <UART_SetConfig+0x90>)
 8003ee8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eec:	08003efd 	.word	0x08003efd
 8003ef0:	08003f09 	.word	0x08003f09
 8003ef4:	08003f03 	.word	0x08003f03
 8003ef8:	08003f0f 	.word	0x08003f0f
 8003efc:	2301      	movs	r3, #1
 8003efe:	77fb      	strb	r3, [r7, #31]
 8003f00:	e150      	b.n	80041a4 <UART_SetConfig+0x348>
 8003f02:	2302      	movs	r3, #2
 8003f04:	77fb      	strb	r3, [r7, #31]
 8003f06:	e14d      	b.n	80041a4 <UART_SetConfig+0x348>
 8003f08:	2304      	movs	r3, #4
 8003f0a:	77fb      	strb	r3, [r7, #31]
 8003f0c:	e14a      	b.n	80041a4 <UART_SetConfig+0x348>
 8003f0e:	2308      	movs	r3, #8
 8003f10:	77fb      	strb	r3, [r7, #31]
 8003f12:	e147      	b.n	80041a4 <UART_SetConfig+0x348>
 8003f14:	2310      	movs	r3, #16
 8003f16:	77fb      	strb	r3, [r7, #31]
 8003f18:	e144      	b.n	80041a4 <UART_SetConfig+0x348>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4a83      	ldr	r2, [pc, #524]	; (800412c <UART_SetConfig+0x2d0>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d132      	bne.n	8003f8a <UART_SetConfig+0x12e>
 8003f24:	4b80      	ldr	r3, [pc, #512]	; (8004128 <UART_SetConfig+0x2cc>)
 8003f26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f2a:	f003 030c 	and.w	r3, r3, #12
 8003f2e:	2b0c      	cmp	r3, #12
 8003f30:	d828      	bhi.n	8003f84 <UART_SetConfig+0x128>
 8003f32:	a201      	add	r2, pc, #4	; (adr r2, 8003f38 <UART_SetConfig+0xdc>)
 8003f34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f38:	08003f6d 	.word	0x08003f6d
 8003f3c:	08003f85 	.word	0x08003f85
 8003f40:	08003f85 	.word	0x08003f85
 8003f44:	08003f85 	.word	0x08003f85
 8003f48:	08003f79 	.word	0x08003f79
 8003f4c:	08003f85 	.word	0x08003f85
 8003f50:	08003f85 	.word	0x08003f85
 8003f54:	08003f85 	.word	0x08003f85
 8003f58:	08003f73 	.word	0x08003f73
 8003f5c:	08003f85 	.word	0x08003f85
 8003f60:	08003f85 	.word	0x08003f85
 8003f64:	08003f85 	.word	0x08003f85
 8003f68:	08003f7f 	.word	0x08003f7f
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	77fb      	strb	r3, [r7, #31]
 8003f70:	e118      	b.n	80041a4 <UART_SetConfig+0x348>
 8003f72:	2302      	movs	r3, #2
 8003f74:	77fb      	strb	r3, [r7, #31]
 8003f76:	e115      	b.n	80041a4 <UART_SetConfig+0x348>
 8003f78:	2304      	movs	r3, #4
 8003f7a:	77fb      	strb	r3, [r7, #31]
 8003f7c:	e112      	b.n	80041a4 <UART_SetConfig+0x348>
 8003f7e:	2308      	movs	r3, #8
 8003f80:	77fb      	strb	r3, [r7, #31]
 8003f82:	e10f      	b.n	80041a4 <UART_SetConfig+0x348>
 8003f84:	2310      	movs	r3, #16
 8003f86:	77fb      	strb	r3, [r7, #31]
 8003f88:	e10c      	b.n	80041a4 <UART_SetConfig+0x348>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a68      	ldr	r2, [pc, #416]	; (8004130 <UART_SetConfig+0x2d4>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d120      	bne.n	8003fd6 <UART_SetConfig+0x17a>
 8003f94:	4b64      	ldr	r3, [pc, #400]	; (8004128 <UART_SetConfig+0x2cc>)
 8003f96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f9a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003f9e:	2b30      	cmp	r3, #48	; 0x30
 8003fa0:	d013      	beq.n	8003fca <UART_SetConfig+0x16e>
 8003fa2:	2b30      	cmp	r3, #48	; 0x30
 8003fa4:	d814      	bhi.n	8003fd0 <UART_SetConfig+0x174>
 8003fa6:	2b20      	cmp	r3, #32
 8003fa8:	d009      	beq.n	8003fbe <UART_SetConfig+0x162>
 8003faa:	2b20      	cmp	r3, #32
 8003fac:	d810      	bhi.n	8003fd0 <UART_SetConfig+0x174>
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d002      	beq.n	8003fb8 <UART_SetConfig+0x15c>
 8003fb2:	2b10      	cmp	r3, #16
 8003fb4:	d006      	beq.n	8003fc4 <UART_SetConfig+0x168>
 8003fb6:	e00b      	b.n	8003fd0 <UART_SetConfig+0x174>
 8003fb8:	2300      	movs	r3, #0
 8003fba:	77fb      	strb	r3, [r7, #31]
 8003fbc:	e0f2      	b.n	80041a4 <UART_SetConfig+0x348>
 8003fbe:	2302      	movs	r3, #2
 8003fc0:	77fb      	strb	r3, [r7, #31]
 8003fc2:	e0ef      	b.n	80041a4 <UART_SetConfig+0x348>
 8003fc4:	2304      	movs	r3, #4
 8003fc6:	77fb      	strb	r3, [r7, #31]
 8003fc8:	e0ec      	b.n	80041a4 <UART_SetConfig+0x348>
 8003fca:	2308      	movs	r3, #8
 8003fcc:	77fb      	strb	r3, [r7, #31]
 8003fce:	e0e9      	b.n	80041a4 <UART_SetConfig+0x348>
 8003fd0:	2310      	movs	r3, #16
 8003fd2:	77fb      	strb	r3, [r7, #31]
 8003fd4:	e0e6      	b.n	80041a4 <UART_SetConfig+0x348>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a56      	ldr	r2, [pc, #344]	; (8004134 <UART_SetConfig+0x2d8>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d120      	bne.n	8004022 <UART_SetConfig+0x1c6>
 8003fe0:	4b51      	ldr	r3, [pc, #324]	; (8004128 <UART_SetConfig+0x2cc>)
 8003fe2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fe6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003fea:	2bc0      	cmp	r3, #192	; 0xc0
 8003fec:	d013      	beq.n	8004016 <UART_SetConfig+0x1ba>
 8003fee:	2bc0      	cmp	r3, #192	; 0xc0
 8003ff0:	d814      	bhi.n	800401c <UART_SetConfig+0x1c0>
 8003ff2:	2b80      	cmp	r3, #128	; 0x80
 8003ff4:	d009      	beq.n	800400a <UART_SetConfig+0x1ae>
 8003ff6:	2b80      	cmp	r3, #128	; 0x80
 8003ff8:	d810      	bhi.n	800401c <UART_SetConfig+0x1c0>
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d002      	beq.n	8004004 <UART_SetConfig+0x1a8>
 8003ffe:	2b40      	cmp	r3, #64	; 0x40
 8004000:	d006      	beq.n	8004010 <UART_SetConfig+0x1b4>
 8004002:	e00b      	b.n	800401c <UART_SetConfig+0x1c0>
 8004004:	2300      	movs	r3, #0
 8004006:	77fb      	strb	r3, [r7, #31]
 8004008:	e0cc      	b.n	80041a4 <UART_SetConfig+0x348>
 800400a:	2302      	movs	r3, #2
 800400c:	77fb      	strb	r3, [r7, #31]
 800400e:	e0c9      	b.n	80041a4 <UART_SetConfig+0x348>
 8004010:	2304      	movs	r3, #4
 8004012:	77fb      	strb	r3, [r7, #31]
 8004014:	e0c6      	b.n	80041a4 <UART_SetConfig+0x348>
 8004016:	2308      	movs	r3, #8
 8004018:	77fb      	strb	r3, [r7, #31]
 800401a:	e0c3      	b.n	80041a4 <UART_SetConfig+0x348>
 800401c:	2310      	movs	r3, #16
 800401e:	77fb      	strb	r3, [r7, #31]
 8004020:	e0c0      	b.n	80041a4 <UART_SetConfig+0x348>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4a44      	ldr	r2, [pc, #272]	; (8004138 <UART_SetConfig+0x2dc>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d125      	bne.n	8004078 <UART_SetConfig+0x21c>
 800402c:	4b3e      	ldr	r3, [pc, #248]	; (8004128 <UART_SetConfig+0x2cc>)
 800402e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004032:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004036:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800403a:	d017      	beq.n	800406c <UART_SetConfig+0x210>
 800403c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004040:	d817      	bhi.n	8004072 <UART_SetConfig+0x216>
 8004042:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004046:	d00b      	beq.n	8004060 <UART_SetConfig+0x204>
 8004048:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800404c:	d811      	bhi.n	8004072 <UART_SetConfig+0x216>
 800404e:	2b00      	cmp	r3, #0
 8004050:	d003      	beq.n	800405a <UART_SetConfig+0x1fe>
 8004052:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004056:	d006      	beq.n	8004066 <UART_SetConfig+0x20a>
 8004058:	e00b      	b.n	8004072 <UART_SetConfig+0x216>
 800405a:	2300      	movs	r3, #0
 800405c:	77fb      	strb	r3, [r7, #31]
 800405e:	e0a1      	b.n	80041a4 <UART_SetConfig+0x348>
 8004060:	2302      	movs	r3, #2
 8004062:	77fb      	strb	r3, [r7, #31]
 8004064:	e09e      	b.n	80041a4 <UART_SetConfig+0x348>
 8004066:	2304      	movs	r3, #4
 8004068:	77fb      	strb	r3, [r7, #31]
 800406a:	e09b      	b.n	80041a4 <UART_SetConfig+0x348>
 800406c:	2308      	movs	r3, #8
 800406e:	77fb      	strb	r3, [r7, #31]
 8004070:	e098      	b.n	80041a4 <UART_SetConfig+0x348>
 8004072:	2310      	movs	r3, #16
 8004074:	77fb      	strb	r3, [r7, #31]
 8004076:	e095      	b.n	80041a4 <UART_SetConfig+0x348>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a2f      	ldr	r2, [pc, #188]	; (800413c <UART_SetConfig+0x2e0>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d125      	bne.n	80040ce <UART_SetConfig+0x272>
 8004082:	4b29      	ldr	r3, [pc, #164]	; (8004128 <UART_SetConfig+0x2cc>)
 8004084:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004088:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800408c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004090:	d017      	beq.n	80040c2 <UART_SetConfig+0x266>
 8004092:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004096:	d817      	bhi.n	80040c8 <UART_SetConfig+0x26c>
 8004098:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800409c:	d00b      	beq.n	80040b6 <UART_SetConfig+0x25a>
 800409e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040a2:	d811      	bhi.n	80040c8 <UART_SetConfig+0x26c>
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d003      	beq.n	80040b0 <UART_SetConfig+0x254>
 80040a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040ac:	d006      	beq.n	80040bc <UART_SetConfig+0x260>
 80040ae:	e00b      	b.n	80040c8 <UART_SetConfig+0x26c>
 80040b0:	2301      	movs	r3, #1
 80040b2:	77fb      	strb	r3, [r7, #31]
 80040b4:	e076      	b.n	80041a4 <UART_SetConfig+0x348>
 80040b6:	2302      	movs	r3, #2
 80040b8:	77fb      	strb	r3, [r7, #31]
 80040ba:	e073      	b.n	80041a4 <UART_SetConfig+0x348>
 80040bc:	2304      	movs	r3, #4
 80040be:	77fb      	strb	r3, [r7, #31]
 80040c0:	e070      	b.n	80041a4 <UART_SetConfig+0x348>
 80040c2:	2308      	movs	r3, #8
 80040c4:	77fb      	strb	r3, [r7, #31]
 80040c6:	e06d      	b.n	80041a4 <UART_SetConfig+0x348>
 80040c8:	2310      	movs	r3, #16
 80040ca:	77fb      	strb	r3, [r7, #31]
 80040cc:	e06a      	b.n	80041a4 <UART_SetConfig+0x348>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4a1b      	ldr	r2, [pc, #108]	; (8004140 <UART_SetConfig+0x2e4>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d138      	bne.n	800414a <UART_SetConfig+0x2ee>
 80040d8:	4b13      	ldr	r3, [pc, #76]	; (8004128 <UART_SetConfig+0x2cc>)
 80040da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040de:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80040e2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80040e6:	d017      	beq.n	8004118 <UART_SetConfig+0x2bc>
 80040e8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80040ec:	d82a      	bhi.n	8004144 <UART_SetConfig+0x2e8>
 80040ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040f2:	d00b      	beq.n	800410c <UART_SetConfig+0x2b0>
 80040f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040f8:	d824      	bhi.n	8004144 <UART_SetConfig+0x2e8>
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d003      	beq.n	8004106 <UART_SetConfig+0x2aa>
 80040fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004102:	d006      	beq.n	8004112 <UART_SetConfig+0x2b6>
 8004104:	e01e      	b.n	8004144 <UART_SetConfig+0x2e8>
 8004106:	2300      	movs	r3, #0
 8004108:	77fb      	strb	r3, [r7, #31]
 800410a:	e04b      	b.n	80041a4 <UART_SetConfig+0x348>
 800410c:	2302      	movs	r3, #2
 800410e:	77fb      	strb	r3, [r7, #31]
 8004110:	e048      	b.n	80041a4 <UART_SetConfig+0x348>
 8004112:	2304      	movs	r3, #4
 8004114:	77fb      	strb	r3, [r7, #31]
 8004116:	e045      	b.n	80041a4 <UART_SetConfig+0x348>
 8004118:	2308      	movs	r3, #8
 800411a:	77fb      	strb	r3, [r7, #31]
 800411c:	e042      	b.n	80041a4 <UART_SetConfig+0x348>
 800411e:	bf00      	nop
 8004120:	efff69f3 	.word	0xefff69f3
 8004124:	40011000 	.word	0x40011000
 8004128:	40023800 	.word	0x40023800
 800412c:	40004400 	.word	0x40004400
 8004130:	40004800 	.word	0x40004800
 8004134:	40004c00 	.word	0x40004c00
 8004138:	40005000 	.word	0x40005000
 800413c:	40011400 	.word	0x40011400
 8004140:	40007800 	.word	0x40007800
 8004144:	2310      	movs	r3, #16
 8004146:	77fb      	strb	r3, [r7, #31]
 8004148:	e02c      	b.n	80041a4 <UART_SetConfig+0x348>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4a72      	ldr	r2, [pc, #456]	; (8004318 <UART_SetConfig+0x4bc>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d125      	bne.n	80041a0 <UART_SetConfig+0x344>
 8004154:	4b71      	ldr	r3, [pc, #452]	; (800431c <UART_SetConfig+0x4c0>)
 8004156:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800415a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800415e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004162:	d017      	beq.n	8004194 <UART_SetConfig+0x338>
 8004164:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004168:	d817      	bhi.n	800419a <UART_SetConfig+0x33e>
 800416a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800416e:	d00b      	beq.n	8004188 <UART_SetConfig+0x32c>
 8004170:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004174:	d811      	bhi.n	800419a <UART_SetConfig+0x33e>
 8004176:	2b00      	cmp	r3, #0
 8004178:	d003      	beq.n	8004182 <UART_SetConfig+0x326>
 800417a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800417e:	d006      	beq.n	800418e <UART_SetConfig+0x332>
 8004180:	e00b      	b.n	800419a <UART_SetConfig+0x33e>
 8004182:	2300      	movs	r3, #0
 8004184:	77fb      	strb	r3, [r7, #31]
 8004186:	e00d      	b.n	80041a4 <UART_SetConfig+0x348>
 8004188:	2302      	movs	r3, #2
 800418a:	77fb      	strb	r3, [r7, #31]
 800418c:	e00a      	b.n	80041a4 <UART_SetConfig+0x348>
 800418e:	2304      	movs	r3, #4
 8004190:	77fb      	strb	r3, [r7, #31]
 8004192:	e007      	b.n	80041a4 <UART_SetConfig+0x348>
 8004194:	2308      	movs	r3, #8
 8004196:	77fb      	strb	r3, [r7, #31]
 8004198:	e004      	b.n	80041a4 <UART_SetConfig+0x348>
 800419a:	2310      	movs	r3, #16
 800419c:	77fb      	strb	r3, [r7, #31]
 800419e:	e001      	b.n	80041a4 <UART_SetConfig+0x348>
 80041a0:	2310      	movs	r3, #16
 80041a2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	69db      	ldr	r3, [r3, #28]
 80041a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041ac:	d15b      	bne.n	8004266 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80041ae:	7ffb      	ldrb	r3, [r7, #31]
 80041b0:	2b08      	cmp	r3, #8
 80041b2:	d828      	bhi.n	8004206 <UART_SetConfig+0x3aa>
 80041b4:	a201      	add	r2, pc, #4	; (adr r2, 80041bc <UART_SetConfig+0x360>)
 80041b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041ba:	bf00      	nop
 80041bc:	080041e1 	.word	0x080041e1
 80041c0:	080041e9 	.word	0x080041e9
 80041c4:	080041f1 	.word	0x080041f1
 80041c8:	08004207 	.word	0x08004207
 80041cc:	080041f7 	.word	0x080041f7
 80041d0:	08004207 	.word	0x08004207
 80041d4:	08004207 	.word	0x08004207
 80041d8:	08004207 	.word	0x08004207
 80041dc:	080041ff 	.word	0x080041ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80041e0:	f7fd fdfe 	bl	8001de0 <HAL_RCC_GetPCLK1Freq>
 80041e4:	61b8      	str	r0, [r7, #24]
        break;
 80041e6:	e013      	b.n	8004210 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80041e8:	f7fd fe0e 	bl	8001e08 <HAL_RCC_GetPCLK2Freq>
 80041ec:	61b8      	str	r0, [r7, #24]
        break;
 80041ee:	e00f      	b.n	8004210 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80041f0:	4b4b      	ldr	r3, [pc, #300]	; (8004320 <UART_SetConfig+0x4c4>)
 80041f2:	61bb      	str	r3, [r7, #24]
        break;
 80041f4:	e00c      	b.n	8004210 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80041f6:	f7fd fd21 	bl	8001c3c <HAL_RCC_GetSysClockFreq>
 80041fa:	61b8      	str	r0, [r7, #24]
        break;
 80041fc:	e008      	b.n	8004210 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80041fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004202:	61bb      	str	r3, [r7, #24]
        break;
 8004204:	e004      	b.n	8004210 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8004206:	2300      	movs	r3, #0
 8004208:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800420a:	2301      	movs	r3, #1
 800420c:	77bb      	strb	r3, [r7, #30]
        break;
 800420e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004210:	69bb      	ldr	r3, [r7, #24]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d074      	beq.n	8004300 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004216:	69bb      	ldr	r3, [r7, #24]
 8004218:	005a      	lsls	r2, r3, #1
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	085b      	lsrs	r3, r3, #1
 8004220:	441a      	add	r2, r3
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	fbb2 f3f3 	udiv	r3, r2, r3
 800422a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800422c:	693b      	ldr	r3, [r7, #16]
 800422e:	2b0f      	cmp	r3, #15
 8004230:	d916      	bls.n	8004260 <UART_SetConfig+0x404>
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004238:	d212      	bcs.n	8004260 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	b29b      	uxth	r3, r3
 800423e:	f023 030f 	bic.w	r3, r3, #15
 8004242:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004244:	693b      	ldr	r3, [r7, #16]
 8004246:	085b      	lsrs	r3, r3, #1
 8004248:	b29b      	uxth	r3, r3
 800424a:	f003 0307 	and.w	r3, r3, #7
 800424e:	b29a      	uxth	r2, r3
 8004250:	89fb      	ldrh	r3, [r7, #14]
 8004252:	4313      	orrs	r3, r2
 8004254:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	89fa      	ldrh	r2, [r7, #14]
 800425c:	60da      	str	r2, [r3, #12]
 800425e:	e04f      	b.n	8004300 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004260:	2301      	movs	r3, #1
 8004262:	77bb      	strb	r3, [r7, #30]
 8004264:	e04c      	b.n	8004300 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004266:	7ffb      	ldrb	r3, [r7, #31]
 8004268:	2b08      	cmp	r3, #8
 800426a:	d828      	bhi.n	80042be <UART_SetConfig+0x462>
 800426c:	a201      	add	r2, pc, #4	; (adr r2, 8004274 <UART_SetConfig+0x418>)
 800426e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004272:	bf00      	nop
 8004274:	08004299 	.word	0x08004299
 8004278:	080042a1 	.word	0x080042a1
 800427c:	080042a9 	.word	0x080042a9
 8004280:	080042bf 	.word	0x080042bf
 8004284:	080042af 	.word	0x080042af
 8004288:	080042bf 	.word	0x080042bf
 800428c:	080042bf 	.word	0x080042bf
 8004290:	080042bf 	.word	0x080042bf
 8004294:	080042b7 	.word	0x080042b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004298:	f7fd fda2 	bl	8001de0 <HAL_RCC_GetPCLK1Freq>
 800429c:	61b8      	str	r0, [r7, #24]
        break;
 800429e:	e013      	b.n	80042c8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80042a0:	f7fd fdb2 	bl	8001e08 <HAL_RCC_GetPCLK2Freq>
 80042a4:	61b8      	str	r0, [r7, #24]
        break;
 80042a6:	e00f      	b.n	80042c8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80042a8:	4b1d      	ldr	r3, [pc, #116]	; (8004320 <UART_SetConfig+0x4c4>)
 80042aa:	61bb      	str	r3, [r7, #24]
        break;
 80042ac:	e00c      	b.n	80042c8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80042ae:	f7fd fcc5 	bl	8001c3c <HAL_RCC_GetSysClockFreq>
 80042b2:	61b8      	str	r0, [r7, #24]
        break;
 80042b4:	e008      	b.n	80042c8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80042b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80042ba:	61bb      	str	r3, [r7, #24]
        break;
 80042bc:	e004      	b.n	80042c8 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80042be:	2300      	movs	r3, #0
 80042c0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80042c2:	2301      	movs	r3, #1
 80042c4:	77bb      	strb	r3, [r7, #30]
        break;
 80042c6:	bf00      	nop
    }

    if (pclk != 0U)
 80042c8:	69bb      	ldr	r3, [r7, #24]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d018      	beq.n	8004300 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	085a      	lsrs	r2, r3, #1
 80042d4:	69bb      	ldr	r3, [r7, #24]
 80042d6:	441a      	add	r2, r3
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80042e0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80042e2:	693b      	ldr	r3, [r7, #16]
 80042e4:	2b0f      	cmp	r3, #15
 80042e6:	d909      	bls.n	80042fc <UART_SetConfig+0x4a0>
 80042e8:	693b      	ldr	r3, [r7, #16]
 80042ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042ee:	d205      	bcs.n	80042fc <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80042f0:	693b      	ldr	r3, [r7, #16]
 80042f2:	b29a      	uxth	r2, r3
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	60da      	str	r2, [r3, #12]
 80042fa:	e001      	b.n	8004300 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80042fc:	2301      	movs	r3, #1
 80042fe:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2200      	movs	r2, #0
 8004304:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2200      	movs	r2, #0
 800430a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800430c:	7fbb      	ldrb	r3, [r7, #30]
}
 800430e:	4618      	mov	r0, r3
 8004310:	3720      	adds	r7, #32
 8004312:	46bd      	mov	sp, r7
 8004314:	bd80      	pop	{r7, pc}
 8004316:	bf00      	nop
 8004318:	40007c00 	.word	0x40007c00
 800431c:	40023800 	.word	0x40023800
 8004320:	00f42400 	.word	0x00f42400

08004324 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004324:	b480      	push	{r7}
 8004326:	b083      	sub	sp, #12
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004330:	f003 0301 	and.w	r3, r3, #1
 8004334:	2b00      	cmp	r3, #0
 8004336:	d00a      	beq.n	800434e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	430a      	orrs	r2, r1
 800434c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004352:	f003 0302 	and.w	r3, r3, #2
 8004356:	2b00      	cmp	r3, #0
 8004358:	d00a      	beq.n	8004370 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	430a      	orrs	r2, r1
 800436e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004374:	f003 0304 	and.w	r3, r3, #4
 8004378:	2b00      	cmp	r3, #0
 800437a:	d00a      	beq.n	8004392 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	430a      	orrs	r2, r1
 8004390:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004396:	f003 0308 	and.w	r3, r3, #8
 800439a:	2b00      	cmp	r3, #0
 800439c:	d00a      	beq.n	80043b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	430a      	orrs	r2, r1
 80043b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043b8:	f003 0310 	and.w	r3, r3, #16
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d00a      	beq.n	80043d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	689b      	ldr	r3, [r3, #8]
 80043c6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	430a      	orrs	r2, r1
 80043d4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043da:	f003 0320 	and.w	r3, r3, #32
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d00a      	beq.n	80043f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	689b      	ldr	r3, [r3, #8]
 80043e8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	430a      	orrs	r2, r1
 80043f6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004400:	2b00      	cmp	r3, #0
 8004402:	d01a      	beq.n	800443a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	430a      	orrs	r2, r1
 8004418:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800441e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004422:	d10a      	bne.n	800443a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	430a      	orrs	r2, r1
 8004438:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800443e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004442:	2b00      	cmp	r3, #0
 8004444:	d00a      	beq.n	800445c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	430a      	orrs	r2, r1
 800445a:	605a      	str	r2, [r3, #4]
  }
}
 800445c:	bf00      	nop
 800445e:	370c      	adds	r7, #12
 8004460:	46bd      	mov	sp, r7
 8004462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004466:	4770      	bx	lr

08004468 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b086      	sub	sp, #24
 800446c:	af02      	add	r7, sp, #8
 800446e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2200      	movs	r2, #0
 8004474:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004478:	f7fc fcea 	bl	8000e50 <HAL_GetTick>
 800447c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f003 0308 	and.w	r3, r3, #8
 8004488:	2b08      	cmp	r3, #8
 800448a:	d10e      	bne.n	80044aa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800448c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004490:	9300      	str	r3, [sp, #0]
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	2200      	movs	r2, #0
 8004496:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800449a:	6878      	ldr	r0, [r7, #4]
 800449c:	f000 f831 	bl	8004502 <UART_WaitOnFlagUntilTimeout>
 80044a0:	4603      	mov	r3, r0
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d001      	beq.n	80044aa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80044a6:	2303      	movs	r3, #3
 80044a8:	e027      	b.n	80044fa <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f003 0304 	and.w	r3, r3, #4
 80044b4:	2b04      	cmp	r3, #4
 80044b6:	d10e      	bne.n	80044d6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80044b8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80044bc:	9300      	str	r3, [sp, #0]
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	2200      	movs	r2, #0
 80044c2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80044c6:	6878      	ldr	r0, [r7, #4]
 80044c8:	f000 f81b 	bl	8004502 <UART_WaitOnFlagUntilTimeout>
 80044cc:	4603      	mov	r3, r0
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d001      	beq.n	80044d6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80044d2:	2303      	movs	r3, #3
 80044d4:	e011      	b.n	80044fa <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2220      	movs	r2, #32
 80044da:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2220      	movs	r2, #32
 80044e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2200      	movs	r2, #0
 80044e8:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2200      	movs	r2, #0
 80044ee:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2200      	movs	r2, #0
 80044f4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80044f8:	2300      	movs	r3, #0
}
 80044fa:	4618      	mov	r0, r3
 80044fc:	3710      	adds	r7, #16
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}

08004502 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004502:	b580      	push	{r7, lr}
 8004504:	b09c      	sub	sp, #112	; 0x70
 8004506:	af00      	add	r7, sp, #0
 8004508:	60f8      	str	r0, [r7, #12]
 800450a:	60b9      	str	r1, [r7, #8]
 800450c:	603b      	str	r3, [r7, #0]
 800450e:	4613      	mov	r3, r2
 8004510:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004512:	e0a7      	b.n	8004664 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004514:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004516:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800451a:	f000 80a3 	beq.w	8004664 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800451e:	f7fc fc97 	bl	8000e50 <HAL_GetTick>
 8004522:	4602      	mov	r2, r0
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	1ad3      	subs	r3, r2, r3
 8004528:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800452a:	429a      	cmp	r2, r3
 800452c:	d302      	bcc.n	8004534 <UART_WaitOnFlagUntilTimeout+0x32>
 800452e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004530:	2b00      	cmp	r3, #0
 8004532:	d13f      	bne.n	80045b4 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800453a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800453c:	e853 3f00 	ldrex	r3, [r3]
 8004540:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004542:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004544:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004548:	667b      	str	r3, [r7, #100]	; 0x64
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	461a      	mov	r2, r3
 8004550:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004552:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004554:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004556:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004558:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800455a:	e841 2300 	strex	r3, r2, [r1]
 800455e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004560:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004562:	2b00      	cmp	r3, #0
 8004564:	d1e6      	bne.n	8004534 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	3308      	adds	r3, #8
 800456c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800456e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004570:	e853 3f00 	ldrex	r3, [r3]
 8004574:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004576:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004578:	f023 0301 	bic.w	r3, r3, #1
 800457c:	663b      	str	r3, [r7, #96]	; 0x60
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	3308      	adds	r3, #8
 8004584:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004586:	64ba      	str	r2, [r7, #72]	; 0x48
 8004588:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800458a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800458c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800458e:	e841 2300 	strex	r3, r2, [r1]
 8004592:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004594:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004596:	2b00      	cmp	r3, #0
 8004598:	d1e5      	bne.n	8004566 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	2220      	movs	r2, #32
 800459e:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	2220      	movs	r2, #32
 80045a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	2200      	movs	r2, #0
 80045ac:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80045b0:	2303      	movs	r3, #3
 80045b2:	e068      	b.n	8004686 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f003 0304 	and.w	r3, r3, #4
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d050      	beq.n	8004664 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	69db      	ldr	r3, [r3, #28]
 80045c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80045d0:	d148      	bne.n	8004664 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80045da:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045e4:	e853 3f00 	ldrex	r3, [r3]
 80045e8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80045ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ec:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80045f0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	461a      	mov	r2, r3
 80045f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045fa:	637b      	str	r3, [r7, #52]	; 0x34
 80045fc:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045fe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004600:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004602:	e841 2300 	strex	r3, r2, [r1]
 8004606:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800460a:	2b00      	cmp	r3, #0
 800460c:	d1e6      	bne.n	80045dc <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	3308      	adds	r3, #8
 8004614:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004616:	697b      	ldr	r3, [r7, #20]
 8004618:	e853 3f00 	ldrex	r3, [r3]
 800461c:	613b      	str	r3, [r7, #16]
   return(result);
 800461e:	693b      	ldr	r3, [r7, #16]
 8004620:	f023 0301 	bic.w	r3, r3, #1
 8004624:	66bb      	str	r3, [r7, #104]	; 0x68
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	3308      	adds	r3, #8
 800462c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800462e:	623a      	str	r2, [r7, #32]
 8004630:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004632:	69f9      	ldr	r1, [r7, #28]
 8004634:	6a3a      	ldr	r2, [r7, #32]
 8004636:	e841 2300 	strex	r3, r2, [r1]
 800463a:	61bb      	str	r3, [r7, #24]
   return(result);
 800463c:	69bb      	ldr	r3, [r7, #24]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d1e5      	bne.n	800460e <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	2220      	movs	r2, #32
 8004646:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	2220      	movs	r2, #32
 800464c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	2220      	movs	r2, #32
 8004654:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	2200      	movs	r2, #0
 800465c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004660:	2303      	movs	r3, #3
 8004662:	e010      	b.n	8004686 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	69da      	ldr	r2, [r3, #28]
 800466a:	68bb      	ldr	r3, [r7, #8]
 800466c:	4013      	ands	r3, r2
 800466e:	68ba      	ldr	r2, [r7, #8]
 8004670:	429a      	cmp	r2, r3
 8004672:	bf0c      	ite	eq
 8004674:	2301      	moveq	r3, #1
 8004676:	2300      	movne	r3, #0
 8004678:	b2db      	uxtb	r3, r3
 800467a:	461a      	mov	r2, r3
 800467c:	79fb      	ldrb	r3, [r7, #7]
 800467e:	429a      	cmp	r2, r3
 8004680:	f43f af48 	beq.w	8004514 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004684:	2300      	movs	r3, #0
}
 8004686:	4618      	mov	r0, r3
 8004688:	3770      	adds	r7, #112	; 0x70
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}

0800468e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800468e:	b480      	push	{r7}
 8004690:	b095      	sub	sp, #84	; 0x54
 8004692:	af00      	add	r7, sp, #0
 8004694:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800469c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800469e:	e853 3f00 	ldrex	r3, [r3]
 80046a2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80046a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046a6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80046aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	461a      	mov	r2, r3
 80046b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046b4:	643b      	str	r3, [r7, #64]	; 0x40
 80046b6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046b8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80046ba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80046bc:	e841 2300 	strex	r3, r2, [r1]
 80046c0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80046c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d1e6      	bne.n	8004696 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	3308      	adds	r3, #8
 80046ce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046d0:	6a3b      	ldr	r3, [r7, #32]
 80046d2:	e853 3f00 	ldrex	r3, [r3]
 80046d6:	61fb      	str	r3, [r7, #28]
   return(result);
 80046d8:	69fb      	ldr	r3, [r7, #28]
 80046da:	f023 0301 	bic.w	r3, r3, #1
 80046de:	64bb      	str	r3, [r7, #72]	; 0x48
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	3308      	adds	r3, #8
 80046e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80046e8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80046ea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80046ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80046f0:	e841 2300 	strex	r3, r2, [r1]
 80046f4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80046f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d1e5      	bne.n	80046c8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004700:	2b01      	cmp	r3, #1
 8004702:	d118      	bne.n	8004736 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	e853 3f00 	ldrex	r3, [r3]
 8004710:	60bb      	str	r3, [r7, #8]
   return(result);
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	f023 0310 	bic.w	r3, r3, #16
 8004718:	647b      	str	r3, [r7, #68]	; 0x44
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	461a      	mov	r2, r3
 8004720:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004722:	61bb      	str	r3, [r7, #24]
 8004724:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004726:	6979      	ldr	r1, [r7, #20]
 8004728:	69ba      	ldr	r2, [r7, #24]
 800472a:	e841 2300 	strex	r3, r2, [r1]
 800472e:	613b      	str	r3, [r7, #16]
   return(result);
 8004730:	693b      	ldr	r3, [r7, #16]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d1e6      	bne.n	8004704 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2220      	movs	r2, #32
 800473a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2200      	movs	r2, #0
 8004742:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2200      	movs	r2, #0
 8004748:	669a      	str	r2, [r3, #104]	; 0x68
}
 800474a:	bf00      	nop
 800474c:	3754      	adds	r7, #84	; 0x54
 800474e:	46bd      	mov	sp, r7
 8004750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004754:	4770      	bx	lr

08004756 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004756:	b580      	push	{r7, lr}
 8004758:	b084      	sub	sp, #16
 800475a:	af00      	add	r7, sp, #0
 800475c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004762:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	2200      	movs	r2, #0
 8004768:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	2200      	movs	r2, #0
 8004770:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004774:	68f8      	ldr	r0, [r7, #12]
 8004776:	f7ff fb51 	bl	8003e1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800477a:	bf00      	nop
 800477c:	3710      	adds	r7, #16
 800477e:	46bd      	mov	sp, r7
 8004780:	bd80      	pop	{r7, pc}

08004782 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004782:	b580      	push	{r7, lr}
 8004784:	b088      	sub	sp, #32
 8004786:	af00      	add	r7, sp, #0
 8004788:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	e853 3f00 	ldrex	r3, [r3]
 8004796:	60bb      	str	r3, [r7, #8]
   return(result);
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800479e:	61fb      	str	r3, [r7, #28]
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	461a      	mov	r2, r3
 80047a6:	69fb      	ldr	r3, [r7, #28]
 80047a8:	61bb      	str	r3, [r7, #24]
 80047aa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047ac:	6979      	ldr	r1, [r7, #20]
 80047ae:	69ba      	ldr	r2, [r7, #24]
 80047b0:	e841 2300 	strex	r3, r2, [r1]
 80047b4:	613b      	str	r3, [r7, #16]
   return(result);
 80047b6:	693b      	ldr	r3, [r7, #16]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d1e6      	bne.n	800478a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2220      	movs	r2, #32
 80047c0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2200      	movs	r2, #0
 80047c6:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80047c8:	6878      	ldr	r0, [r7, #4]
 80047ca:	f7ff fb1d 	bl	8003e08 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80047ce:	bf00      	nop
 80047d0:	3720      	adds	r7, #32
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bd80      	pop	{r7, pc}
	...

080047d8 <std>:
 80047d8:	2300      	movs	r3, #0
 80047da:	b510      	push	{r4, lr}
 80047dc:	4604      	mov	r4, r0
 80047de:	e9c0 3300 	strd	r3, r3, [r0]
 80047e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80047e6:	6083      	str	r3, [r0, #8]
 80047e8:	8181      	strh	r1, [r0, #12]
 80047ea:	6643      	str	r3, [r0, #100]	; 0x64
 80047ec:	81c2      	strh	r2, [r0, #14]
 80047ee:	6183      	str	r3, [r0, #24]
 80047f0:	4619      	mov	r1, r3
 80047f2:	2208      	movs	r2, #8
 80047f4:	305c      	adds	r0, #92	; 0x5c
 80047f6:	f000 f9f7 	bl	8004be8 <memset>
 80047fa:	4b0d      	ldr	r3, [pc, #52]	; (8004830 <std+0x58>)
 80047fc:	6263      	str	r3, [r4, #36]	; 0x24
 80047fe:	4b0d      	ldr	r3, [pc, #52]	; (8004834 <std+0x5c>)
 8004800:	62a3      	str	r3, [r4, #40]	; 0x28
 8004802:	4b0d      	ldr	r3, [pc, #52]	; (8004838 <std+0x60>)
 8004804:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004806:	4b0d      	ldr	r3, [pc, #52]	; (800483c <std+0x64>)
 8004808:	6323      	str	r3, [r4, #48]	; 0x30
 800480a:	4b0d      	ldr	r3, [pc, #52]	; (8004840 <std+0x68>)
 800480c:	6224      	str	r4, [r4, #32]
 800480e:	429c      	cmp	r4, r3
 8004810:	d006      	beq.n	8004820 <std+0x48>
 8004812:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8004816:	4294      	cmp	r4, r2
 8004818:	d002      	beq.n	8004820 <std+0x48>
 800481a:	33d0      	adds	r3, #208	; 0xd0
 800481c:	429c      	cmp	r4, r3
 800481e:	d105      	bne.n	800482c <std+0x54>
 8004820:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004824:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004828:	f000 ba56 	b.w	8004cd8 <__retarget_lock_init_recursive>
 800482c:	bd10      	pop	{r4, pc}
 800482e:	bf00      	nop
 8004830:	08004a39 	.word	0x08004a39
 8004834:	08004a5b 	.word	0x08004a5b
 8004838:	08004a93 	.word	0x08004a93
 800483c:	08004ab7 	.word	0x08004ab7
 8004840:	200001e0 	.word	0x200001e0

08004844 <stdio_exit_handler>:
 8004844:	4a02      	ldr	r2, [pc, #8]	; (8004850 <stdio_exit_handler+0xc>)
 8004846:	4903      	ldr	r1, [pc, #12]	; (8004854 <stdio_exit_handler+0x10>)
 8004848:	4803      	ldr	r0, [pc, #12]	; (8004858 <stdio_exit_handler+0x14>)
 800484a:	f000 b869 	b.w	8004920 <_fwalk_sglue>
 800484e:	bf00      	nop
 8004850:	2000000c 	.word	0x2000000c
 8004854:	08005585 	.word	0x08005585
 8004858:	20000018 	.word	0x20000018

0800485c <cleanup_stdio>:
 800485c:	6841      	ldr	r1, [r0, #4]
 800485e:	4b0c      	ldr	r3, [pc, #48]	; (8004890 <cleanup_stdio+0x34>)
 8004860:	4299      	cmp	r1, r3
 8004862:	b510      	push	{r4, lr}
 8004864:	4604      	mov	r4, r0
 8004866:	d001      	beq.n	800486c <cleanup_stdio+0x10>
 8004868:	f000 fe8c 	bl	8005584 <_fflush_r>
 800486c:	68a1      	ldr	r1, [r4, #8]
 800486e:	4b09      	ldr	r3, [pc, #36]	; (8004894 <cleanup_stdio+0x38>)
 8004870:	4299      	cmp	r1, r3
 8004872:	d002      	beq.n	800487a <cleanup_stdio+0x1e>
 8004874:	4620      	mov	r0, r4
 8004876:	f000 fe85 	bl	8005584 <_fflush_r>
 800487a:	68e1      	ldr	r1, [r4, #12]
 800487c:	4b06      	ldr	r3, [pc, #24]	; (8004898 <cleanup_stdio+0x3c>)
 800487e:	4299      	cmp	r1, r3
 8004880:	d004      	beq.n	800488c <cleanup_stdio+0x30>
 8004882:	4620      	mov	r0, r4
 8004884:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004888:	f000 be7c 	b.w	8005584 <_fflush_r>
 800488c:	bd10      	pop	{r4, pc}
 800488e:	bf00      	nop
 8004890:	200001e0 	.word	0x200001e0
 8004894:	20000248 	.word	0x20000248
 8004898:	200002b0 	.word	0x200002b0

0800489c <global_stdio_init.part.0>:
 800489c:	b510      	push	{r4, lr}
 800489e:	4b0b      	ldr	r3, [pc, #44]	; (80048cc <global_stdio_init.part.0+0x30>)
 80048a0:	4c0b      	ldr	r4, [pc, #44]	; (80048d0 <global_stdio_init.part.0+0x34>)
 80048a2:	4a0c      	ldr	r2, [pc, #48]	; (80048d4 <global_stdio_init.part.0+0x38>)
 80048a4:	601a      	str	r2, [r3, #0]
 80048a6:	4620      	mov	r0, r4
 80048a8:	2200      	movs	r2, #0
 80048aa:	2104      	movs	r1, #4
 80048ac:	f7ff ff94 	bl	80047d8 <std>
 80048b0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80048b4:	2201      	movs	r2, #1
 80048b6:	2109      	movs	r1, #9
 80048b8:	f7ff ff8e 	bl	80047d8 <std>
 80048bc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80048c0:	2202      	movs	r2, #2
 80048c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80048c6:	2112      	movs	r1, #18
 80048c8:	f7ff bf86 	b.w	80047d8 <std>
 80048cc:	20000318 	.word	0x20000318
 80048d0:	200001e0 	.word	0x200001e0
 80048d4:	08004845 	.word	0x08004845

080048d8 <__sfp_lock_acquire>:
 80048d8:	4801      	ldr	r0, [pc, #4]	; (80048e0 <__sfp_lock_acquire+0x8>)
 80048da:	f000 b9fe 	b.w	8004cda <__retarget_lock_acquire_recursive>
 80048de:	bf00      	nop
 80048e0:	20000321 	.word	0x20000321

080048e4 <__sfp_lock_release>:
 80048e4:	4801      	ldr	r0, [pc, #4]	; (80048ec <__sfp_lock_release+0x8>)
 80048e6:	f000 b9f9 	b.w	8004cdc <__retarget_lock_release_recursive>
 80048ea:	bf00      	nop
 80048ec:	20000321 	.word	0x20000321

080048f0 <__sinit>:
 80048f0:	b510      	push	{r4, lr}
 80048f2:	4604      	mov	r4, r0
 80048f4:	f7ff fff0 	bl	80048d8 <__sfp_lock_acquire>
 80048f8:	6a23      	ldr	r3, [r4, #32]
 80048fa:	b11b      	cbz	r3, 8004904 <__sinit+0x14>
 80048fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004900:	f7ff bff0 	b.w	80048e4 <__sfp_lock_release>
 8004904:	4b04      	ldr	r3, [pc, #16]	; (8004918 <__sinit+0x28>)
 8004906:	6223      	str	r3, [r4, #32]
 8004908:	4b04      	ldr	r3, [pc, #16]	; (800491c <__sinit+0x2c>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d1f5      	bne.n	80048fc <__sinit+0xc>
 8004910:	f7ff ffc4 	bl	800489c <global_stdio_init.part.0>
 8004914:	e7f2      	b.n	80048fc <__sinit+0xc>
 8004916:	bf00      	nop
 8004918:	0800485d 	.word	0x0800485d
 800491c:	20000318 	.word	0x20000318

08004920 <_fwalk_sglue>:
 8004920:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004924:	4607      	mov	r7, r0
 8004926:	4688      	mov	r8, r1
 8004928:	4614      	mov	r4, r2
 800492a:	2600      	movs	r6, #0
 800492c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004930:	f1b9 0901 	subs.w	r9, r9, #1
 8004934:	d505      	bpl.n	8004942 <_fwalk_sglue+0x22>
 8004936:	6824      	ldr	r4, [r4, #0]
 8004938:	2c00      	cmp	r4, #0
 800493a:	d1f7      	bne.n	800492c <_fwalk_sglue+0xc>
 800493c:	4630      	mov	r0, r6
 800493e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004942:	89ab      	ldrh	r3, [r5, #12]
 8004944:	2b01      	cmp	r3, #1
 8004946:	d907      	bls.n	8004958 <_fwalk_sglue+0x38>
 8004948:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800494c:	3301      	adds	r3, #1
 800494e:	d003      	beq.n	8004958 <_fwalk_sglue+0x38>
 8004950:	4629      	mov	r1, r5
 8004952:	4638      	mov	r0, r7
 8004954:	47c0      	blx	r8
 8004956:	4306      	orrs	r6, r0
 8004958:	3568      	adds	r5, #104	; 0x68
 800495a:	e7e9      	b.n	8004930 <_fwalk_sglue+0x10>

0800495c <iprintf>:
 800495c:	b40f      	push	{r0, r1, r2, r3}
 800495e:	b507      	push	{r0, r1, r2, lr}
 8004960:	4906      	ldr	r1, [pc, #24]	; (800497c <iprintf+0x20>)
 8004962:	ab04      	add	r3, sp, #16
 8004964:	6808      	ldr	r0, [r1, #0]
 8004966:	f853 2b04 	ldr.w	r2, [r3], #4
 800496a:	6881      	ldr	r1, [r0, #8]
 800496c:	9301      	str	r3, [sp, #4]
 800496e:	f000 fad9 	bl	8004f24 <_vfiprintf_r>
 8004972:	b003      	add	sp, #12
 8004974:	f85d eb04 	ldr.w	lr, [sp], #4
 8004978:	b004      	add	sp, #16
 800497a:	4770      	bx	lr
 800497c:	20000064 	.word	0x20000064

08004980 <_puts_r>:
 8004980:	6a03      	ldr	r3, [r0, #32]
 8004982:	b570      	push	{r4, r5, r6, lr}
 8004984:	6884      	ldr	r4, [r0, #8]
 8004986:	4605      	mov	r5, r0
 8004988:	460e      	mov	r6, r1
 800498a:	b90b      	cbnz	r3, 8004990 <_puts_r+0x10>
 800498c:	f7ff ffb0 	bl	80048f0 <__sinit>
 8004990:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004992:	07db      	lsls	r3, r3, #31
 8004994:	d405      	bmi.n	80049a2 <_puts_r+0x22>
 8004996:	89a3      	ldrh	r3, [r4, #12]
 8004998:	0598      	lsls	r0, r3, #22
 800499a:	d402      	bmi.n	80049a2 <_puts_r+0x22>
 800499c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800499e:	f000 f99c 	bl	8004cda <__retarget_lock_acquire_recursive>
 80049a2:	89a3      	ldrh	r3, [r4, #12]
 80049a4:	0719      	lsls	r1, r3, #28
 80049a6:	d513      	bpl.n	80049d0 <_puts_r+0x50>
 80049a8:	6923      	ldr	r3, [r4, #16]
 80049aa:	b18b      	cbz	r3, 80049d0 <_puts_r+0x50>
 80049ac:	3e01      	subs	r6, #1
 80049ae:	68a3      	ldr	r3, [r4, #8]
 80049b0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80049b4:	3b01      	subs	r3, #1
 80049b6:	60a3      	str	r3, [r4, #8]
 80049b8:	b9e9      	cbnz	r1, 80049f6 <_puts_r+0x76>
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	da2e      	bge.n	8004a1c <_puts_r+0x9c>
 80049be:	4622      	mov	r2, r4
 80049c0:	210a      	movs	r1, #10
 80049c2:	4628      	mov	r0, r5
 80049c4:	f000 f87b 	bl	8004abe <__swbuf_r>
 80049c8:	3001      	adds	r0, #1
 80049ca:	d007      	beq.n	80049dc <_puts_r+0x5c>
 80049cc:	250a      	movs	r5, #10
 80049ce:	e007      	b.n	80049e0 <_puts_r+0x60>
 80049d0:	4621      	mov	r1, r4
 80049d2:	4628      	mov	r0, r5
 80049d4:	f000 f8b0 	bl	8004b38 <__swsetup_r>
 80049d8:	2800      	cmp	r0, #0
 80049da:	d0e7      	beq.n	80049ac <_puts_r+0x2c>
 80049dc:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80049e0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80049e2:	07da      	lsls	r2, r3, #31
 80049e4:	d405      	bmi.n	80049f2 <_puts_r+0x72>
 80049e6:	89a3      	ldrh	r3, [r4, #12]
 80049e8:	059b      	lsls	r3, r3, #22
 80049ea:	d402      	bmi.n	80049f2 <_puts_r+0x72>
 80049ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80049ee:	f000 f975 	bl	8004cdc <__retarget_lock_release_recursive>
 80049f2:	4628      	mov	r0, r5
 80049f4:	bd70      	pop	{r4, r5, r6, pc}
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	da04      	bge.n	8004a04 <_puts_r+0x84>
 80049fa:	69a2      	ldr	r2, [r4, #24]
 80049fc:	429a      	cmp	r2, r3
 80049fe:	dc06      	bgt.n	8004a0e <_puts_r+0x8e>
 8004a00:	290a      	cmp	r1, #10
 8004a02:	d004      	beq.n	8004a0e <_puts_r+0x8e>
 8004a04:	6823      	ldr	r3, [r4, #0]
 8004a06:	1c5a      	adds	r2, r3, #1
 8004a08:	6022      	str	r2, [r4, #0]
 8004a0a:	7019      	strb	r1, [r3, #0]
 8004a0c:	e7cf      	b.n	80049ae <_puts_r+0x2e>
 8004a0e:	4622      	mov	r2, r4
 8004a10:	4628      	mov	r0, r5
 8004a12:	f000 f854 	bl	8004abe <__swbuf_r>
 8004a16:	3001      	adds	r0, #1
 8004a18:	d1c9      	bne.n	80049ae <_puts_r+0x2e>
 8004a1a:	e7df      	b.n	80049dc <_puts_r+0x5c>
 8004a1c:	6823      	ldr	r3, [r4, #0]
 8004a1e:	250a      	movs	r5, #10
 8004a20:	1c5a      	adds	r2, r3, #1
 8004a22:	6022      	str	r2, [r4, #0]
 8004a24:	701d      	strb	r5, [r3, #0]
 8004a26:	e7db      	b.n	80049e0 <_puts_r+0x60>

08004a28 <puts>:
 8004a28:	4b02      	ldr	r3, [pc, #8]	; (8004a34 <puts+0xc>)
 8004a2a:	4601      	mov	r1, r0
 8004a2c:	6818      	ldr	r0, [r3, #0]
 8004a2e:	f7ff bfa7 	b.w	8004980 <_puts_r>
 8004a32:	bf00      	nop
 8004a34:	20000064 	.word	0x20000064

08004a38 <__sread>:
 8004a38:	b510      	push	{r4, lr}
 8004a3a:	460c      	mov	r4, r1
 8004a3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a40:	f000 f8fc 	bl	8004c3c <_read_r>
 8004a44:	2800      	cmp	r0, #0
 8004a46:	bfab      	itete	ge
 8004a48:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004a4a:	89a3      	ldrhlt	r3, [r4, #12]
 8004a4c:	181b      	addge	r3, r3, r0
 8004a4e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004a52:	bfac      	ite	ge
 8004a54:	6563      	strge	r3, [r4, #84]	; 0x54
 8004a56:	81a3      	strhlt	r3, [r4, #12]
 8004a58:	bd10      	pop	{r4, pc}

08004a5a <__swrite>:
 8004a5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a5e:	461f      	mov	r7, r3
 8004a60:	898b      	ldrh	r3, [r1, #12]
 8004a62:	05db      	lsls	r3, r3, #23
 8004a64:	4605      	mov	r5, r0
 8004a66:	460c      	mov	r4, r1
 8004a68:	4616      	mov	r6, r2
 8004a6a:	d505      	bpl.n	8004a78 <__swrite+0x1e>
 8004a6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a70:	2302      	movs	r3, #2
 8004a72:	2200      	movs	r2, #0
 8004a74:	f000 f8d0 	bl	8004c18 <_lseek_r>
 8004a78:	89a3      	ldrh	r3, [r4, #12]
 8004a7a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004a7e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004a82:	81a3      	strh	r3, [r4, #12]
 8004a84:	4632      	mov	r2, r6
 8004a86:	463b      	mov	r3, r7
 8004a88:	4628      	mov	r0, r5
 8004a8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004a8e:	f000 b8e7 	b.w	8004c60 <_write_r>

08004a92 <__sseek>:
 8004a92:	b510      	push	{r4, lr}
 8004a94:	460c      	mov	r4, r1
 8004a96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a9a:	f000 f8bd 	bl	8004c18 <_lseek_r>
 8004a9e:	1c43      	adds	r3, r0, #1
 8004aa0:	89a3      	ldrh	r3, [r4, #12]
 8004aa2:	bf15      	itete	ne
 8004aa4:	6560      	strne	r0, [r4, #84]	; 0x54
 8004aa6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004aaa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004aae:	81a3      	strheq	r3, [r4, #12]
 8004ab0:	bf18      	it	ne
 8004ab2:	81a3      	strhne	r3, [r4, #12]
 8004ab4:	bd10      	pop	{r4, pc}

08004ab6 <__sclose>:
 8004ab6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004aba:	f000 b89d 	b.w	8004bf8 <_close_r>

08004abe <__swbuf_r>:
 8004abe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ac0:	460e      	mov	r6, r1
 8004ac2:	4614      	mov	r4, r2
 8004ac4:	4605      	mov	r5, r0
 8004ac6:	b118      	cbz	r0, 8004ad0 <__swbuf_r+0x12>
 8004ac8:	6a03      	ldr	r3, [r0, #32]
 8004aca:	b90b      	cbnz	r3, 8004ad0 <__swbuf_r+0x12>
 8004acc:	f7ff ff10 	bl	80048f0 <__sinit>
 8004ad0:	69a3      	ldr	r3, [r4, #24]
 8004ad2:	60a3      	str	r3, [r4, #8]
 8004ad4:	89a3      	ldrh	r3, [r4, #12]
 8004ad6:	071a      	lsls	r2, r3, #28
 8004ad8:	d525      	bpl.n	8004b26 <__swbuf_r+0x68>
 8004ada:	6923      	ldr	r3, [r4, #16]
 8004adc:	b31b      	cbz	r3, 8004b26 <__swbuf_r+0x68>
 8004ade:	6823      	ldr	r3, [r4, #0]
 8004ae0:	6922      	ldr	r2, [r4, #16]
 8004ae2:	1a98      	subs	r0, r3, r2
 8004ae4:	6963      	ldr	r3, [r4, #20]
 8004ae6:	b2f6      	uxtb	r6, r6
 8004ae8:	4283      	cmp	r3, r0
 8004aea:	4637      	mov	r7, r6
 8004aec:	dc04      	bgt.n	8004af8 <__swbuf_r+0x3a>
 8004aee:	4621      	mov	r1, r4
 8004af0:	4628      	mov	r0, r5
 8004af2:	f000 fd47 	bl	8005584 <_fflush_r>
 8004af6:	b9e0      	cbnz	r0, 8004b32 <__swbuf_r+0x74>
 8004af8:	68a3      	ldr	r3, [r4, #8]
 8004afa:	3b01      	subs	r3, #1
 8004afc:	60a3      	str	r3, [r4, #8]
 8004afe:	6823      	ldr	r3, [r4, #0]
 8004b00:	1c5a      	adds	r2, r3, #1
 8004b02:	6022      	str	r2, [r4, #0]
 8004b04:	701e      	strb	r6, [r3, #0]
 8004b06:	6962      	ldr	r2, [r4, #20]
 8004b08:	1c43      	adds	r3, r0, #1
 8004b0a:	429a      	cmp	r2, r3
 8004b0c:	d004      	beq.n	8004b18 <__swbuf_r+0x5a>
 8004b0e:	89a3      	ldrh	r3, [r4, #12]
 8004b10:	07db      	lsls	r3, r3, #31
 8004b12:	d506      	bpl.n	8004b22 <__swbuf_r+0x64>
 8004b14:	2e0a      	cmp	r6, #10
 8004b16:	d104      	bne.n	8004b22 <__swbuf_r+0x64>
 8004b18:	4621      	mov	r1, r4
 8004b1a:	4628      	mov	r0, r5
 8004b1c:	f000 fd32 	bl	8005584 <_fflush_r>
 8004b20:	b938      	cbnz	r0, 8004b32 <__swbuf_r+0x74>
 8004b22:	4638      	mov	r0, r7
 8004b24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b26:	4621      	mov	r1, r4
 8004b28:	4628      	mov	r0, r5
 8004b2a:	f000 f805 	bl	8004b38 <__swsetup_r>
 8004b2e:	2800      	cmp	r0, #0
 8004b30:	d0d5      	beq.n	8004ade <__swbuf_r+0x20>
 8004b32:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8004b36:	e7f4      	b.n	8004b22 <__swbuf_r+0x64>

08004b38 <__swsetup_r>:
 8004b38:	b538      	push	{r3, r4, r5, lr}
 8004b3a:	4b2a      	ldr	r3, [pc, #168]	; (8004be4 <__swsetup_r+0xac>)
 8004b3c:	4605      	mov	r5, r0
 8004b3e:	6818      	ldr	r0, [r3, #0]
 8004b40:	460c      	mov	r4, r1
 8004b42:	b118      	cbz	r0, 8004b4c <__swsetup_r+0x14>
 8004b44:	6a03      	ldr	r3, [r0, #32]
 8004b46:	b90b      	cbnz	r3, 8004b4c <__swsetup_r+0x14>
 8004b48:	f7ff fed2 	bl	80048f0 <__sinit>
 8004b4c:	89a3      	ldrh	r3, [r4, #12]
 8004b4e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004b52:	0718      	lsls	r0, r3, #28
 8004b54:	d422      	bmi.n	8004b9c <__swsetup_r+0x64>
 8004b56:	06d9      	lsls	r1, r3, #27
 8004b58:	d407      	bmi.n	8004b6a <__swsetup_r+0x32>
 8004b5a:	2309      	movs	r3, #9
 8004b5c:	602b      	str	r3, [r5, #0]
 8004b5e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004b62:	81a3      	strh	r3, [r4, #12]
 8004b64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004b68:	e034      	b.n	8004bd4 <__swsetup_r+0x9c>
 8004b6a:	0758      	lsls	r0, r3, #29
 8004b6c:	d512      	bpl.n	8004b94 <__swsetup_r+0x5c>
 8004b6e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004b70:	b141      	cbz	r1, 8004b84 <__swsetup_r+0x4c>
 8004b72:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004b76:	4299      	cmp	r1, r3
 8004b78:	d002      	beq.n	8004b80 <__swsetup_r+0x48>
 8004b7a:	4628      	mov	r0, r5
 8004b7c:	f000 f8b0 	bl	8004ce0 <_free_r>
 8004b80:	2300      	movs	r3, #0
 8004b82:	6363      	str	r3, [r4, #52]	; 0x34
 8004b84:	89a3      	ldrh	r3, [r4, #12]
 8004b86:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004b8a:	81a3      	strh	r3, [r4, #12]
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	6063      	str	r3, [r4, #4]
 8004b90:	6923      	ldr	r3, [r4, #16]
 8004b92:	6023      	str	r3, [r4, #0]
 8004b94:	89a3      	ldrh	r3, [r4, #12]
 8004b96:	f043 0308 	orr.w	r3, r3, #8
 8004b9a:	81a3      	strh	r3, [r4, #12]
 8004b9c:	6923      	ldr	r3, [r4, #16]
 8004b9e:	b94b      	cbnz	r3, 8004bb4 <__swsetup_r+0x7c>
 8004ba0:	89a3      	ldrh	r3, [r4, #12]
 8004ba2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004ba6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004baa:	d003      	beq.n	8004bb4 <__swsetup_r+0x7c>
 8004bac:	4621      	mov	r1, r4
 8004bae:	4628      	mov	r0, r5
 8004bb0:	f000 fd36 	bl	8005620 <__smakebuf_r>
 8004bb4:	89a0      	ldrh	r0, [r4, #12]
 8004bb6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004bba:	f010 0301 	ands.w	r3, r0, #1
 8004bbe:	d00a      	beq.n	8004bd6 <__swsetup_r+0x9e>
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	60a3      	str	r3, [r4, #8]
 8004bc4:	6963      	ldr	r3, [r4, #20]
 8004bc6:	425b      	negs	r3, r3
 8004bc8:	61a3      	str	r3, [r4, #24]
 8004bca:	6923      	ldr	r3, [r4, #16]
 8004bcc:	b943      	cbnz	r3, 8004be0 <__swsetup_r+0xa8>
 8004bce:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004bd2:	d1c4      	bne.n	8004b5e <__swsetup_r+0x26>
 8004bd4:	bd38      	pop	{r3, r4, r5, pc}
 8004bd6:	0781      	lsls	r1, r0, #30
 8004bd8:	bf58      	it	pl
 8004bda:	6963      	ldrpl	r3, [r4, #20]
 8004bdc:	60a3      	str	r3, [r4, #8]
 8004bde:	e7f4      	b.n	8004bca <__swsetup_r+0x92>
 8004be0:	2000      	movs	r0, #0
 8004be2:	e7f7      	b.n	8004bd4 <__swsetup_r+0x9c>
 8004be4:	20000064 	.word	0x20000064

08004be8 <memset>:
 8004be8:	4402      	add	r2, r0
 8004bea:	4603      	mov	r3, r0
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d100      	bne.n	8004bf2 <memset+0xa>
 8004bf0:	4770      	bx	lr
 8004bf2:	f803 1b01 	strb.w	r1, [r3], #1
 8004bf6:	e7f9      	b.n	8004bec <memset+0x4>

08004bf8 <_close_r>:
 8004bf8:	b538      	push	{r3, r4, r5, lr}
 8004bfa:	4d06      	ldr	r5, [pc, #24]	; (8004c14 <_close_r+0x1c>)
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	4604      	mov	r4, r0
 8004c00:	4608      	mov	r0, r1
 8004c02:	602b      	str	r3, [r5, #0]
 8004c04:	f7fc f82d 	bl	8000c62 <_close>
 8004c08:	1c43      	adds	r3, r0, #1
 8004c0a:	d102      	bne.n	8004c12 <_close_r+0x1a>
 8004c0c:	682b      	ldr	r3, [r5, #0]
 8004c0e:	b103      	cbz	r3, 8004c12 <_close_r+0x1a>
 8004c10:	6023      	str	r3, [r4, #0]
 8004c12:	bd38      	pop	{r3, r4, r5, pc}
 8004c14:	2000031c 	.word	0x2000031c

08004c18 <_lseek_r>:
 8004c18:	b538      	push	{r3, r4, r5, lr}
 8004c1a:	4d07      	ldr	r5, [pc, #28]	; (8004c38 <_lseek_r+0x20>)
 8004c1c:	4604      	mov	r4, r0
 8004c1e:	4608      	mov	r0, r1
 8004c20:	4611      	mov	r1, r2
 8004c22:	2200      	movs	r2, #0
 8004c24:	602a      	str	r2, [r5, #0]
 8004c26:	461a      	mov	r2, r3
 8004c28:	f7fc f842 	bl	8000cb0 <_lseek>
 8004c2c:	1c43      	adds	r3, r0, #1
 8004c2e:	d102      	bne.n	8004c36 <_lseek_r+0x1e>
 8004c30:	682b      	ldr	r3, [r5, #0]
 8004c32:	b103      	cbz	r3, 8004c36 <_lseek_r+0x1e>
 8004c34:	6023      	str	r3, [r4, #0]
 8004c36:	bd38      	pop	{r3, r4, r5, pc}
 8004c38:	2000031c 	.word	0x2000031c

08004c3c <_read_r>:
 8004c3c:	b538      	push	{r3, r4, r5, lr}
 8004c3e:	4d07      	ldr	r5, [pc, #28]	; (8004c5c <_read_r+0x20>)
 8004c40:	4604      	mov	r4, r0
 8004c42:	4608      	mov	r0, r1
 8004c44:	4611      	mov	r1, r2
 8004c46:	2200      	movs	r2, #0
 8004c48:	602a      	str	r2, [r5, #0]
 8004c4a:	461a      	mov	r2, r3
 8004c4c:	f7fb ffec 	bl	8000c28 <_read>
 8004c50:	1c43      	adds	r3, r0, #1
 8004c52:	d102      	bne.n	8004c5a <_read_r+0x1e>
 8004c54:	682b      	ldr	r3, [r5, #0]
 8004c56:	b103      	cbz	r3, 8004c5a <_read_r+0x1e>
 8004c58:	6023      	str	r3, [r4, #0]
 8004c5a:	bd38      	pop	{r3, r4, r5, pc}
 8004c5c:	2000031c 	.word	0x2000031c

08004c60 <_write_r>:
 8004c60:	b538      	push	{r3, r4, r5, lr}
 8004c62:	4d07      	ldr	r5, [pc, #28]	; (8004c80 <_write_r+0x20>)
 8004c64:	4604      	mov	r4, r0
 8004c66:	4608      	mov	r0, r1
 8004c68:	4611      	mov	r1, r2
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	602a      	str	r2, [r5, #0]
 8004c6e:	461a      	mov	r2, r3
 8004c70:	f7fb fcb4 	bl	80005dc <_write>
 8004c74:	1c43      	adds	r3, r0, #1
 8004c76:	d102      	bne.n	8004c7e <_write_r+0x1e>
 8004c78:	682b      	ldr	r3, [r5, #0]
 8004c7a:	b103      	cbz	r3, 8004c7e <_write_r+0x1e>
 8004c7c:	6023      	str	r3, [r4, #0]
 8004c7e:	bd38      	pop	{r3, r4, r5, pc}
 8004c80:	2000031c 	.word	0x2000031c

08004c84 <__errno>:
 8004c84:	4b01      	ldr	r3, [pc, #4]	; (8004c8c <__errno+0x8>)
 8004c86:	6818      	ldr	r0, [r3, #0]
 8004c88:	4770      	bx	lr
 8004c8a:	bf00      	nop
 8004c8c:	20000064 	.word	0x20000064

08004c90 <__libc_init_array>:
 8004c90:	b570      	push	{r4, r5, r6, lr}
 8004c92:	4d0d      	ldr	r5, [pc, #52]	; (8004cc8 <__libc_init_array+0x38>)
 8004c94:	4c0d      	ldr	r4, [pc, #52]	; (8004ccc <__libc_init_array+0x3c>)
 8004c96:	1b64      	subs	r4, r4, r5
 8004c98:	10a4      	asrs	r4, r4, #2
 8004c9a:	2600      	movs	r6, #0
 8004c9c:	42a6      	cmp	r6, r4
 8004c9e:	d109      	bne.n	8004cb4 <__libc_init_array+0x24>
 8004ca0:	4d0b      	ldr	r5, [pc, #44]	; (8004cd0 <__libc_init_array+0x40>)
 8004ca2:	4c0c      	ldr	r4, [pc, #48]	; (8004cd4 <__libc_init_array+0x44>)
 8004ca4:	f000 fd2a 	bl	80056fc <_init>
 8004ca8:	1b64      	subs	r4, r4, r5
 8004caa:	10a4      	asrs	r4, r4, #2
 8004cac:	2600      	movs	r6, #0
 8004cae:	42a6      	cmp	r6, r4
 8004cb0:	d105      	bne.n	8004cbe <__libc_init_array+0x2e>
 8004cb2:	bd70      	pop	{r4, r5, r6, pc}
 8004cb4:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cb8:	4798      	blx	r3
 8004cba:	3601      	adds	r6, #1
 8004cbc:	e7ee      	b.n	8004c9c <__libc_init_array+0xc>
 8004cbe:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cc2:	4798      	blx	r3
 8004cc4:	3601      	adds	r6, #1
 8004cc6:	e7f2      	b.n	8004cae <__libc_init_array+0x1e>
 8004cc8:	08005798 	.word	0x08005798
 8004ccc:	08005798 	.word	0x08005798
 8004cd0:	08005798 	.word	0x08005798
 8004cd4:	0800579c 	.word	0x0800579c

08004cd8 <__retarget_lock_init_recursive>:
 8004cd8:	4770      	bx	lr

08004cda <__retarget_lock_acquire_recursive>:
 8004cda:	4770      	bx	lr

08004cdc <__retarget_lock_release_recursive>:
 8004cdc:	4770      	bx	lr
	...

08004ce0 <_free_r>:
 8004ce0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004ce2:	2900      	cmp	r1, #0
 8004ce4:	d044      	beq.n	8004d70 <_free_r+0x90>
 8004ce6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004cea:	9001      	str	r0, [sp, #4]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	f1a1 0404 	sub.w	r4, r1, #4
 8004cf2:	bfb8      	it	lt
 8004cf4:	18e4      	addlt	r4, r4, r3
 8004cf6:	f000 f8df 	bl	8004eb8 <__malloc_lock>
 8004cfa:	4a1e      	ldr	r2, [pc, #120]	; (8004d74 <_free_r+0x94>)
 8004cfc:	9801      	ldr	r0, [sp, #4]
 8004cfe:	6813      	ldr	r3, [r2, #0]
 8004d00:	b933      	cbnz	r3, 8004d10 <_free_r+0x30>
 8004d02:	6063      	str	r3, [r4, #4]
 8004d04:	6014      	str	r4, [r2, #0]
 8004d06:	b003      	add	sp, #12
 8004d08:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004d0c:	f000 b8da 	b.w	8004ec4 <__malloc_unlock>
 8004d10:	42a3      	cmp	r3, r4
 8004d12:	d908      	bls.n	8004d26 <_free_r+0x46>
 8004d14:	6825      	ldr	r5, [r4, #0]
 8004d16:	1961      	adds	r1, r4, r5
 8004d18:	428b      	cmp	r3, r1
 8004d1a:	bf01      	itttt	eq
 8004d1c:	6819      	ldreq	r1, [r3, #0]
 8004d1e:	685b      	ldreq	r3, [r3, #4]
 8004d20:	1949      	addeq	r1, r1, r5
 8004d22:	6021      	streq	r1, [r4, #0]
 8004d24:	e7ed      	b.n	8004d02 <_free_r+0x22>
 8004d26:	461a      	mov	r2, r3
 8004d28:	685b      	ldr	r3, [r3, #4]
 8004d2a:	b10b      	cbz	r3, 8004d30 <_free_r+0x50>
 8004d2c:	42a3      	cmp	r3, r4
 8004d2e:	d9fa      	bls.n	8004d26 <_free_r+0x46>
 8004d30:	6811      	ldr	r1, [r2, #0]
 8004d32:	1855      	adds	r5, r2, r1
 8004d34:	42a5      	cmp	r5, r4
 8004d36:	d10b      	bne.n	8004d50 <_free_r+0x70>
 8004d38:	6824      	ldr	r4, [r4, #0]
 8004d3a:	4421      	add	r1, r4
 8004d3c:	1854      	adds	r4, r2, r1
 8004d3e:	42a3      	cmp	r3, r4
 8004d40:	6011      	str	r1, [r2, #0]
 8004d42:	d1e0      	bne.n	8004d06 <_free_r+0x26>
 8004d44:	681c      	ldr	r4, [r3, #0]
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	6053      	str	r3, [r2, #4]
 8004d4a:	440c      	add	r4, r1
 8004d4c:	6014      	str	r4, [r2, #0]
 8004d4e:	e7da      	b.n	8004d06 <_free_r+0x26>
 8004d50:	d902      	bls.n	8004d58 <_free_r+0x78>
 8004d52:	230c      	movs	r3, #12
 8004d54:	6003      	str	r3, [r0, #0]
 8004d56:	e7d6      	b.n	8004d06 <_free_r+0x26>
 8004d58:	6825      	ldr	r5, [r4, #0]
 8004d5a:	1961      	adds	r1, r4, r5
 8004d5c:	428b      	cmp	r3, r1
 8004d5e:	bf04      	itt	eq
 8004d60:	6819      	ldreq	r1, [r3, #0]
 8004d62:	685b      	ldreq	r3, [r3, #4]
 8004d64:	6063      	str	r3, [r4, #4]
 8004d66:	bf04      	itt	eq
 8004d68:	1949      	addeq	r1, r1, r5
 8004d6a:	6021      	streq	r1, [r4, #0]
 8004d6c:	6054      	str	r4, [r2, #4]
 8004d6e:	e7ca      	b.n	8004d06 <_free_r+0x26>
 8004d70:	b003      	add	sp, #12
 8004d72:	bd30      	pop	{r4, r5, pc}
 8004d74:	20000324 	.word	0x20000324

08004d78 <sbrk_aligned>:
 8004d78:	b570      	push	{r4, r5, r6, lr}
 8004d7a:	4e0e      	ldr	r6, [pc, #56]	; (8004db4 <sbrk_aligned+0x3c>)
 8004d7c:	460c      	mov	r4, r1
 8004d7e:	6831      	ldr	r1, [r6, #0]
 8004d80:	4605      	mov	r5, r0
 8004d82:	b911      	cbnz	r1, 8004d8a <sbrk_aligned+0x12>
 8004d84:	f000 fcaa 	bl	80056dc <_sbrk_r>
 8004d88:	6030      	str	r0, [r6, #0]
 8004d8a:	4621      	mov	r1, r4
 8004d8c:	4628      	mov	r0, r5
 8004d8e:	f000 fca5 	bl	80056dc <_sbrk_r>
 8004d92:	1c43      	adds	r3, r0, #1
 8004d94:	d00a      	beq.n	8004dac <sbrk_aligned+0x34>
 8004d96:	1cc4      	adds	r4, r0, #3
 8004d98:	f024 0403 	bic.w	r4, r4, #3
 8004d9c:	42a0      	cmp	r0, r4
 8004d9e:	d007      	beq.n	8004db0 <sbrk_aligned+0x38>
 8004da0:	1a21      	subs	r1, r4, r0
 8004da2:	4628      	mov	r0, r5
 8004da4:	f000 fc9a 	bl	80056dc <_sbrk_r>
 8004da8:	3001      	adds	r0, #1
 8004daa:	d101      	bne.n	8004db0 <sbrk_aligned+0x38>
 8004dac:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8004db0:	4620      	mov	r0, r4
 8004db2:	bd70      	pop	{r4, r5, r6, pc}
 8004db4:	20000328 	.word	0x20000328

08004db8 <_malloc_r>:
 8004db8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004dbc:	1ccd      	adds	r5, r1, #3
 8004dbe:	f025 0503 	bic.w	r5, r5, #3
 8004dc2:	3508      	adds	r5, #8
 8004dc4:	2d0c      	cmp	r5, #12
 8004dc6:	bf38      	it	cc
 8004dc8:	250c      	movcc	r5, #12
 8004dca:	2d00      	cmp	r5, #0
 8004dcc:	4607      	mov	r7, r0
 8004dce:	db01      	blt.n	8004dd4 <_malloc_r+0x1c>
 8004dd0:	42a9      	cmp	r1, r5
 8004dd2:	d905      	bls.n	8004de0 <_malloc_r+0x28>
 8004dd4:	230c      	movs	r3, #12
 8004dd6:	603b      	str	r3, [r7, #0]
 8004dd8:	2600      	movs	r6, #0
 8004dda:	4630      	mov	r0, r6
 8004ddc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004de0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004eb4 <_malloc_r+0xfc>
 8004de4:	f000 f868 	bl	8004eb8 <__malloc_lock>
 8004de8:	f8d8 3000 	ldr.w	r3, [r8]
 8004dec:	461c      	mov	r4, r3
 8004dee:	bb5c      	cbnz	r4, 8004e48 <_malloc_r+0x90>
 8004df0:	4629      	mov	r1, r5
 8004df2:	4638      	mov	r0, r7
 8004df4:	f7ff ffc0 	bl	8004d78 <sbrk_aligned>
 8004df8:	1c43      	adds	r3, r0, #1
 8004dfa:	4604      	mov	r4, r0
 8004dfc:	d155      	bne.n	8004eaa <_malloc_r+0xf2>
 8004dfe:	f8d8 4000 	ldr.w	r4, [r8]
 8004e02:	4626      	mov	r6, r4
 8004e04:	2e00      	cmp	r6, #0
 8004e06:	d145      	bne.n	8004e94 <_malloc_r+0xdc>
 8004e08:	2c00      	cmp	r4, #0
 8004e0a:	d048      	beq.n	8004e9e <_malloc_r+0xe6>
 8004e0c:	6823      	ldr	r3, [r4, #0]
 8004e0e:	4631      	mov	r1, r6
 8004e10:	4638      	mov	r0, r7
 8004e12:	eb04 0903 	add.w	r9, r4, r3
 8004e16:	f000 fc61 	bl	80056dc <_sbrk_r>
 8004e1a:	4581      	cmp	r9, r0
 8004e1c:	d13f      	bne.n	8004e9e <_malloc_r+0xe6>
 8004e1e:	6821      	ldr	r1, [r4, #0]
 8004e20:	1a6d      	subs	r5, r5, r1
 8004e22:	4629      	mov	r1, r5
 8004e24:	4638      	mov	r0, r7
 8004e26:	f7ff ffa7 	bl	8004d78 <sbrk_aligned>
 8004e2a:	3001      	adds	r0, #1
 8004e2c:	d037      	beq.n	8004e9e <_malloc_r+0xe6>
 8004e2e:	6823      	ldr	r3, [r4, #0]
 8004e30:	442b      	add	r3, r5
 8004e32:	6023      	str	r3, [r4, #0]
 8004e34:	f8d8 3000 	ldr.w	r3, [r8]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d038      	beq.n	8004eae <_malloc_r+0xf6>
 8004e3c:	685a      	ldr	r2, [r3, #4]
 8004e3e:	42a2      	cmp	r2, r4
 8004e40:	d12b      	bne.n	8004e9a <_malloc_r+0xe2>
 8004e42:	2200      	movs	r2, #0
 8004e44:	605a      	str	r2, [r3, #4]
 8004e46:	e00f      	b.n	8004e68 <_malloc_r+0xb0>
 8004e48:	6822      	ldr	r2, [r4, #0]
 8004e4a:	1b52      	subs	r2, r2, r5
 8004e4c:	d41f      	bmi.n	8004e8e <_malloc_r+0xd6>
 8004e4e:	2a0b      	cmp	r2, #11
 8004e50:	d917      	bls.n	8004e82 <_malloc_r+0xca>
 8004e52:	1961      	adds	r1, r4, r5
 8004e54:	42a3      	cmp	r3, r4
 8004e56:	6025      	str	r5, [r4, #0]
 8004e58:	bf18      	it	ne
 8004e5a:	6059      	strne	r1, [r3, #4]
 8004e5c:	6863      	ldr	r3, [r4, #4]
 8004e5e:	bf08      	it	eq
 8004e60:	f8c8 1000 	streq.w	r1, [r8]
 8004e64:	5162      	str	r2, [r4, r5]
 8004e66:	604b      	str	r3, [r1, #4]
 8004e68:	4638      	mov	r0, r7
 8004e6a:	f104 060b 	add.w	r6, r4, #11
 8004e6e:	f000 f829 	bl	8004ec4 <__malloc_unlock>
 8004e72:	f026 0607 	bic.w	r6, r6, #7
 8004e76:	1d23      	adds	r3, r4, #4
 8004e78:	1af2      	subs	r2, r6, r3
 8004e7a:	d0ae      	beq.n	8004dda <_malloc_r+0x22>
 8004e7c:	1b9b      	subs	r3, r3, r6
 8004e7e:	50a3      	str	r3, [r4, r2]
 8004e80:	e7ab      	b.n	8004dda <_malloc_r+0x22>
 8004e82:	42a3      	cmp	r3, r4
 8004e84:	6862      	ldr	r2, [r4, #4]
 8004e86:	d1dd      	bne.n	8004e44 <_malloc_r+0x8c>
 8004e88:	f8c8 2000 	str.w	r2, [r8]
 8004e8c:	e7ec      	b.n	8004e68 <_malloc_r+0xb0>
 8004e8e:	4623      	mov	r3, r4
 8004e90:	6864      	ldr	r4, [r4, #4]
 8004e92:	e7ac      	b.n	8004dee <_malloc_r+0x36>
 8004e94:	4634      	mov	r4, r6
 8004e96:	6876      	ldr	r6, [r6, #4]
 8004e98:	e7b4      	b.n	8004e04 <_malloc_r+0x4c>
 8004e9a:	4613      	mov	r3, r2
 8004e9c:	e7cc      	b.n	8004e38 <_malloc_r+0x80>
 8004e9e:	230c      	movs	r3, #12
 8004ea0:	603b      	str	r3, [r7, #0]
 8004ea2:	4638      	mov	r0, r7
 8004ea4:	f000 f80e 	bl	8004ec4 <__malloc_unlock>
 8004ea8:	e797      	b.n	8004dda <_malloc_r+0x22>
 8004eaa:	6025      	str	r5, [r4, #0]
 8004eac:	e7dc      	b.n	8004e68 <_malloc_r+0xb0>
 8004eae:	605b      	str	r3, [r3, #4]
 8004eb0:	deff      	udf	#255	; 0xff
 8004eb2:	bf00      	nop
 8004eb4:	20000324 	.word	0x20000324

08004eb8 <__malloc_lock>:
 8004eb8:	4801      	ldr	r0, [pc, #4]	; (8004ec0 <__malloc_lock+0x8>)
 8004eba:	f7ff bf0e 	b.w	8004cda <__retarget_lock_acquire_recursive>
 8004ebe:	bf00      	nop
 8004ec0:	20000320 	.word	0x20000320

08004ec4 <__malloc_unlock>:
 8004ec4:	4801      	ldr	r0, [pc, #4]	; (8004ecc <__malloc_unlock+0x8>)
 8004ec6:	f7ff bf09 	b.w	8004cdc <__retarget_lock_release_recursive>
 8004eca:	bf00      	nop
 8004ecc:	20000320 	.word	0x20000320

08004ed0 <__sfputc_r>:
 8004ed0:	6893      	ldr	r3, [r2, #8]
 8004ed2:	3b01      	subs	r3, #1
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	b410      	push	{r4}
 8004ed8:	6093      	str	r3, [r2, #8]
 8004eda:	da08      	bge.n	8004eee <__sfputc_r+0x1e>
 8004edc:	6994      	ldr	r4, [r2, #24]
 8004ede:	42a3      	cmp	r3, r4
 8004ee0:	db01      	blt.n	8004ee6 <__sfputc_r+0x16>
 8004ee2:	290a      	cmp	r1, #10
 8004ee4:	d103      	bne.n	8004eee <__sfputc_r+0x1e>
 8004ee6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004eea:	f7ff bde8 	b.w	8004abe <__swbuf_r>
 8004eee:	6813      	ldr	r3, [r2, #0]
 8004ef0:	1c58      	adds	r0, r3, #1
 8004ef2:	6010      	str	r0, [r2, #0]
 8004ef4:	7019      	strb	r1, [r3, #0]
 8004ef6:	4608      	mov	r0, r1
 8004ef8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004efc:	4770      	bx	lr

08004efe <__sfputs_r>:
 8004efe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f00:	4606      	mov	r6, r0
 8004f02:	460f      	mov	r7, r1
 8004f04:	4614      	mov	r4, r2
 8004f06:	18d5      	adds	r5, r2, r3
 8004f08:	42ac      	cmp	r4, r5
 8004f0a:	d101      	bne.n	8004f10 <__sfputs_r+0x12>
 8004f0c:	2000      	movs	r0, #0
 8004f0e:	e007      	b.n	8004f20 <__sfputs_r+0x22>
 8004f10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f14:	463a      	mov	r2, r7
 8004f16:	4630      	mov	r0, r6
 8004f18:	f7ff ffda 	bl	8004ed0 <__sfputc_r>
 8004f1c:	1c43      	adds	r3, r0, #1
 8004f1e:	d1f3      	bne.n	8004f08 <__sfputs_r+0xa>
 8004f20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004f24 <_vfiprintf_r>:
 8004f24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f28:	460d      	mov	r5, r1
 8004f2a:	b09d      	sub	sp, #116	; 0x74
 8004f2c:	4614      	mov	r4, r2
 8004f2e:	4698      	mov	r8, r3
 8004f30:	4606      	mov	r6, r0
 8004f32:	b118      	cbz	r0, 8004f3c <_vfiprintf_r+0x18>
 8004f34:	6a03      	ldr	r3, [r0, #32]
 8004f36:	b90b      	cbnz	r3, 8004f3c <_vfiprintf_r+0x18>
 8004f38:	f7ff fcda 	bl	80048f0 <__sinit>
 8004f3c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004f3e:	07d9      	lsls	r1, r3, #31
 8004f40:	d405      	bmi.n	8004f4e <_vfiprintf_r+0x2a>
 8004f42:	89ab      	ldrh	r3, [r5, #12]
 8004f44:	059a      	lsls	r2, r3, #22
 8004f46:	d402      	bmi.n	8004f4e <_vfiprintf_r+0x2a>
 8004f48:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004f4a:	f7ff fec6 	bl	8004cda <__retarget_lock_acquire_recursive>
 8004f4e:	89ab      	ldrh	r3, [r5, #12]
 8004f50:	071b      	lsls	r3, r3, #28
 8004f52:	d501      	bpl.n	8004f58 <_vfiprintf_r+0x34>
 8004f54:	692b      	ldr	r3, [r5, #16]
 8004f56:	b99b      	cbnz	r3, 8004f80 <_vfiprintf_r+0x5c>
 8004f58:	4629      	mov	r1, r5
 8004f5a:	4630      	mov	r0, r6
 8004f5c:	f7ff fdec 	bl	8004b38 <__swsetup_r>
 8004f60:	b170      	cbz	r0, 8004f80 <_vfiprintf_r+0x5c>
 8004f62:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004f64:	07dc      	lsls	r4, r3, #31
 8004f66:	d504      	bpl.n	8004f72 <_vfiprintf_r+0x4e>
 8004f68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004f6c:	b01d      	add	sp, #116	; 0x74
 8004f6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f72:	89ab      	ldrh	r3, [r5, #12]
 8004f74:	0598      	lsls	r0, r3, #22
 8004f76:	d4f7      	bmi.n	8004f68 <_vfiprintf_r+0x44>
 8004f78:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004f7a:	f7ff feaf 	bl	8004cdc <__retarget_lock_release_recursive>
 8004f7e:	e7f3      	b.n	8004f68 <_vfiprintf_r+0x44>
 8004f80:	2300      	movs	r3, #0
 8004f82:	9309      	str	r3, [sp, #36]	; 0x24
 8004f84:	2320      	movs	r3, #32
 8004f86:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004f8a:	f8cd 800c 	str.w	r8, [sp, #12]
 8004f8e:	2330      	movs	r3, #48	; 0x30
 8004f90:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8005144 <_vfiprintf_r+0x220>
 8004f94:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004f98:	f04f 0901 	mov.w	r9, #1
 8004f9c:	4623      	mov	r3, r4
 8004f9e:	469a      	mov	sl, r3
 8004fa0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004fa4:	b10a      	cbz	r2, 8004faa <_vfiprintf_r+0x86>
 8004fa6:	2a25      	cmp	r2, #37	; 0x25
 8004fa8:	d1f9      	bne.n	8004f9e <_vfiprintf_r+0x7a>
 8004faa:	ebba 0b04 	subs.w	fp, sl, r4
 8004fae:	d00b      	beq.n	8004fc8 <_vfiprintf_r+0xa4>
 8004fb0:	465b      	mov	r3, fp
 8004fb2:	4622      	mov	r2, r4
 8004fb4:	4629      	mov	r1, r5
 8004fb6:	4630      	mov	r0, r6
 8004fb8:	f7ff ffa1 	bl	8004efe <__sfputs_r>
 8004fbc:	3001      	adds	r0, #1
 8004fbe:	f000 80a9 	beq.w	8005114 <_vfiprintf_r+0x1f0>
 8004fc2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004fc4:	445a      	add	r2, fp
 8004fc6:	9209      	str	r2, [sp, #36]	; 0x24
 8004fc8:	f89a 3000 	ldrb.w	r3, [sl]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	f000 80a1 	beq.w	8005114 <_vfiprintf_r+0x1f0>
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004fd8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004fdc:	f10a 0a01 	add.w	sl, sl, #1
 8004fe0:	9304      	str	r3, [sp, #16]
 8004fe2:	9307      	str	r3, [sp, #28]
 8004fe4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004fe8:	931a      	str	r3, [sp, #104]	; 0x68
 8004fea:	4654      	mov	r4, sl
 8004fec:	2205      	movs	r2, #5
 8004fee:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ff2:	4854      	ldr	r0, [pc, #336]	; (8005144 <_vfiprintf_r+0x220>)
 8004ff4:	f7fb f924 	bl	8000240 <memchr>
 8004ff8:	9a04      	ldr	r2, [sp, #16]
 8004ffa:	b9d8      	cbnz	r0, 8005034 <_vfiprintf_r+0x110>
 8004ffc:	06d1      	lsls	r1, r2, #27
 8004ffe:	bf44      	itt	mi
 8005000:	2320      	movmi	r3, #32
 8005002:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005006:	0713      	lsls	r3, r2, #28
 8005008:	bf44      	itt	mi
 800500a:	232b      	movmi	r3, #43	; 0x2b
 800500c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005010:	f89a 3000 	ldrb.w	r3, [sl]
 8005014:	2b2a      	cmp	r3, #42	; 0x2a
 8005016:	d015      	beq.n	8005044 <_vfiprintf_r+0x120>
 8005018:	9a07      	ldr	r2, [sp, #28]
 800501a:	4654      	mov	r4, sl
 800501c:	2000      	movs	r0, #0
 800501e:	f04f 0c0a 	mov.w	ip, #10
 8005022:	4621      	mov	r1, r4
 8005024:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005028:	3b30      	subs	r3, #48	; 0x30
 800502a:	2b09      	cmp	r3, #9
 800502c:	d94d      	bls.n	80050ca <_vfiprintf_r+0x1a6>
 800502e:	b1b0      	cbz	r0, 800505e <_vfiprintf_r+0x13a>
 8005030:	9207      	str	r2, [sp, #28]
 8005032:	e014      	b.n	800505e <_vfiprintf_r+0x13a>
 8005034:	eba0 0308 	sub.w	r3, r0, r8
 8005038:	fa09 f303 	lsl.w	r3, r9, r3
 800503c:	4313      	orrs	r3, r2
 800503e:	9304      	str	r3, [sp, #16]
 8005040:	46a2      	mov	sl, r4
 8005042:	e7d2      	b.n	8004fea <_vfiprintf_r+0xc6>
 8005044:	9b03      	ldr	r3, [sp, #12]
 8005046:	1d19      	adds	r1, r3, #4
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	9103      	str	r1, [sp, #12]
 800504c:	2b00      	cmp	r3, #0
 800504e:	bfbb      	ittet	lt
 8005050:	425b      	neglt	r3, r3
 8005052:	f042 0202 	orrlt.w	r2, r2, #2
 8005056:	9307      	strge	r3, [sp, #28]
 8005058:	9307      	strlt	r3, [sp, #28]
 800505a:	bfb8      	it	lt
 800505c:	9204      	strlt	r2, [sp, #16]
 800505e:	7823      	ldrb	r3, [r4, #0]
 8005060:	2b2e      	cmp	r3, #46	; 0x2e
 8005062:	d10c      	bne.n	800507e <_vfiprintf_r+0x15a>
 8005064:	7863      	ldrb	r3, [r4, #1]
 8005066:	2b2a      	cmp	r3, #42	; 0x2a
 8005068:	d134      	bne.n	80050d4 <_vfiprintf_r+0x1b0>
 800506a:	9b03      	ldr	r3, [sp, #12]
 800506c:	1d1a      	adds	r2, r3, #4
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	9203      	str	r2, [sp, #12]
 8005072:	2b00      	cmp	r3, #0
 8005074:	bfb8      	it	lt
 8005076:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800507a:	3402      	adds	r4, #2
 800507c:	9305      	str	r3, [sp, #20]
 800507e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8005154 <_vfiprintf_r+0x230>
 8005082:	7821      	ldrb	r1, [r4, #0]
 8005084:	2203      	movs	r2, #3
 8005086:	4650      	mov	r0, sl
 8005088:	f7fb f8da 	bl	8000240 <memchr>
 800508c:	b138      	cbz	r0, 800509e <_vfiprintf_r+0x17a>
 800508e:	9b04      	ldr	r3, [sp, #16]
 8005090:	eba0 000a 	sub.w	r0, r0, sl
 8005094:	2240      	movs	r2, #64	; 0x40
 8005096:	4082      	lsls	r2, r0
 8005098:	4313      	orrs	r3, r2
 800509a:	3401      	adds	r4, #1
 800509c:	9304      	str	r3, [sp, #16]
 800509e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80050a2:	4829      	ldr	r0, [pc, #164]	; (8005148 <_vfiprintf_r+0x224>)
 80050a4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80050a8:	2206      	movs	r2, #6
 80050aa:	f7fb f8c9 	bl	8000240 <memchr>
 80050ae:	2800      	cmp	r0, #0
 80050b0:	d03f      	beq.n	8005132 <_vfiprintf_r+0x20e>
 80050b2:	4b26      	ldr	r3, [pc, #152]	; (800514c <_vfiprintf_r+0x228>)
 80050b4:	bb1b      	cbnz	r3, 80050fe <_vfiprintf_r+0x1da>
 80050b6:	9b03      	ldr	r3, [sp, #12]
 80050b8:	3307      	adds	r3, #7
 80050ba:	f023 0307 	bic.w	r3, r3, #7
 80050be:	3308      	adds	r3, #8
 80050c0:	9303      	str	r3, [sp, #12]
 80050c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80050c4:	443b      	add	r3, r7
 80050c6:	9309      	str	r3, [sp, #36]	; 0x24
 80050c8:	e768      	b.n	8004f9c <_vfiprintf_r+0x78>
 80050ca:	fb0c 3202 	mla	r2, ip, r2, r3
 80050ce:	460c      	mov	r4, r1
 80050d0:	2001      	movs	r0, #1
 80050d2:	e7a6      	b.n	8005022 <_vfiprintf_r+0xfe>
 80050d4:	2300      	movs	r3, #0
 80050d6:	3401      	adds	r4, #1
 80050d8:	9305      	str	r3, [sp, #20]
 80050da:	4619      	mov	r1, r3
 80050dc:	f04f 0c0a 	mov.w	ip, #10
 80050e0:	4620      	mov	r0, r4
 80050e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80050e6:	3a30      	subs	r2, #48	; 0x30
 80050e8:	2a09      	cmp	r2, #9
 80050ea:	d903      	bls.n	80050f4 <_vfiprintf_r+0x1d0>
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d0c6      	beq.n	800507e <_vfiprintf_r+0x15a>
 80050f0:	9105      	str	r1, [sp, #20]
 80050f2:	e7c4      	b.n	800507e <_vfiprintf_r+0x15a>
 80050f4:	fb0c 2101 	mla	r1, ip, r1, r2
 80050f8:	4604      	mov	r4, r0
 80050fa:	2301      	movs	r3, #1
 80050fc:	e7f0      	b.n	80050e0 <_vfiprintf_r+0x1bc>
 80050fe:	ab03      	add	r3, sp, #12
 8005100:	9300      	str	r3, [sp, #0]
 8005102:	462a      	mov	r2, r5
 8005104:	4b12      	ldr	r3, [pc, #72]	; (8005150 <_vfiprintf_r+0x22c>)
 8005106:	a904      	add	r1, sp, #16
 8005108:	4630      	mov	r0, r6
 800510a:	f3af 8000 	nop.w
 800510e:	4607      	mov	r7, r0
 8005110:	1c78      	adds	r0, r7, #1
 8005112:	d1d6      	bne.n	80050c2 <_vfiprintf_r+0x19e>
 8005114:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005116:	07d9      	lsls	r1, r3, #31
 8005118:	d405      	bmi.n	8005126 <_vfiprintf_r+0x202>
 800511a:	89ab      	ldrh	r3, [r5, #12]
 800511c:	059a      	lsls	r2, r3, #22
 800511e:	d402      	bmi.n	8005126 <_vfiprintf_r+0x202>
 8005120:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005122:	f7ff fddb 	bl	8004cdc <__retarget_lock_release_recursive>
 8005126:	89ab      	ldrh	r3, [r5, #12]
 8005128:	065b      	lsls	r3, r3, #25
 800512a:	f53f af1d 	bmi.w	8004f68 <_vfiprintf_r+0x44>
 800512e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005130:	e71c      	b.n	8004f6c <_vfiprintf_r+0x48>
 8005132:	ab03      	add	r3, sp, #12
 8005134:	9300      	str	r3, [sp, #0]
 8005136:	462a      	mov	r2, r5
 8005138:	4b05      	ldr	r3, [pc, #20]	; (8005150 <_vfiprintf_r+0x22c>)
 800513a:	a904      	add	r1, sp, #16
 800513c:	4630      	mov	r0, r6
 800513e:	f000 f879 	bl	8005234 <_printf_i>
 8005142:	e7e4      	b.n	800510e <_vfiprintf_r+0x1ea>
 8005144:	0800575c 	.word	0x0800575c
 8005148:	08005766 	.word	0x08005766
 800514c:	00000000 	.word	0x00000000
 8005150:	08004eff 	.word	0x08004eff
 8005154:	08005762 	.word	0x08005762

08005158 <_printf_common>:
 8005158:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800515c:	4616      	mov	r6, r2
 800515e:	4699      	mov	r9, r3
 8005160:	688a      	ldr	r2, [r1, #8]
 8005162:	690b      	ldr	r3, [r1, #16]
 8005164:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005168:	4293      	cmp	r3, r2
 800516a:	bfb8      	it	lt
 800516c:	4613      	movlt	r3, r2
 800516e:	6033      	str	r3, [r6, #0]
 8005170:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005174:	4607      	mov	r7, r0
 8005176:	460c      	mov	r4, r1
 8005178:	b10a      	cbz	r2, 800517e <_printf_common+0x26>
 800517a:	3301      	adds	r3, #1
 800517c:	6033      	str	r3, [r6, #0]
 800517e:	6823      	ldr	r3, [r4, #0]
 8005180:	0699      	lsls	r1, r3, #26
 8005182:	bf42      	ittt	mi
 8005184:	6833      	ldrmi	r3, [r6, #0]
 8005186:	3302      	addmi	r3, #2
 8005188:	6033      	strmi	r3, [r6, #0]
 800518a:	6825      	ldr	r5, [r4, #0]
 800518c:	f015 0506 	ands.w	r5, r5, #6
 8005190:	d106      	bne.n	80051a0 <_printf_common+0x48>
 8005192:	f104 0a19 	add.w	sl, r4, #25
 8005196:	68e3      	ldr	r3, [r4, #12]
 8005198:	6832      	ldr	r2, [r6, #0]
 800519a:	1a9b      	subs	r3, r3, r2
 800519c:	42ab      	cmp	r3, r5
 800519e:	dc26      	bgt.n	80051ee <_printf_common+0x96>
 80051a0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80051a4:	1e13      	subs	r3, r2, #0
 80051a6:	6822      	ldr	r2, [r4, #0]
 80051a8:	bf18      	it	ne
 80051aa:	2301      	movne	r3, #1
 80051ac:	0692      	lsls	r2, r2, #26
 80051ae:	d42b      	bmi.n	8005208 <_printf_common+0xb0>
 80051b0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80051b4:	4649      	mov	r1, r9
 80051b6:	4638      	mov	r0, r7
 80051b8:	47c0      	blx	r8
 80051ba:	3001      	adds	r0, #1
 80051bc:	d01e      	beq.n	80051fc <_printf_common+0xa4>
 80051be:	6823      	ldr	r3, [r4, #0]
 80051c0:	6922      	ldr	r2, [r4, #16]
 80051c2:	f003 0306 	and.w	r3, r3, #6
 80051c6:	2b04      	cmp	r3, #4
 80051c8:	bf02      	ittt	eq
 80051ca:	68e5      	ldreq	r5, [r4, #12]
 80051cc:	6833      	ldreq	r3, [r6, #0]
 80051ce:	1aed      	subeq	r5, r5, r3
 80051d0:	68a3      	ldr	r3, [r4, #8]
 80051d2:	bf0c      	ite	eq
 80051d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80051d8:	2500      	movne	r5, #0
 80051da:	4293      	cmp	r3, r2
 80051dc:	bfc4      	itt	gt
 80051de:	1a9b      	subgt	r3, r3, r2
 80051e0:	18ed      	addgt	r5, r5, r3
 80051e2:	2600      	movs	r6, #0
 80051e4:	341a      	adds	r4, #26
 80051e6:	42b5      	cmp	r5, r6
 80051e8:	d11a      	bne.n	8005220 <_printf_common+0xc8>
 80051ea:	2000      	movs	r0, #0
 80051ec:	e008      	b.n	8005200 <_printf_common+0xa8>
 80051ee:	2301      	movs	r3, #1
 80051f0:	4652      	mov	r2, sl
 80051f2:	4649      	mov	r1, r9
 80051f4:	4638      	mov	r0, r7
 80051f6:	47c0      	blx	r8
 80051f8:	3001      	adds	r0, #1
 80051fa:	d103      	bne.n	8005204 <_printf_common+0xac>
 80051fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005200:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005204:	3501      	adds	r5, #1
 8005206:	e7c6      	b.n	8005196 <_printf_common+0x3e>
 8005208:	18e1      	adds	r1, r4, r3
 800520a:	1c5a      	adds	r2, r3, #1
 800520c:	2030      	movs	r0, #48	; 0x30
 800520e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005212:	4422      	add	r2, r4
 8005214:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005218:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800521c:	3302      	adds	r3, #2
 800521e:	e7c7      	b.n	80051b0 <_printf_common+0x58>
 8005220:	2301      	movs	r3, #1
 8005222:	4622      	mov	r2, r4
 8005224:	4649      	mov	r1, r9
 8005226:	4638      	mov	r0, r7
 8005228:	47c0      	blx	r8
 800522a:	3001      	adds	r0, #1
 800522c:	d0e6      	beq.n	80051fc <_printf_common+0xa4>
 800522e:	3601      	adds	r6, #1
 8005230:	e7d9      	b.n	80051e6 <_printf_common+0x8e>
	...

08005234 <_printf_i>:
 8005234:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005238:	7e0f      	ldrb	r7, [r1, #24]
 800523a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800523c:	2f78      	cmp	r7, #120	; 0x78
 800523e:	4691      	mov	r9, r2
 8005240:	4680      	mov	r8, r0
 8005242:	460c      	mov	r4, r1
 8005244:	469a      	mov	sl, r3
 8005246:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800524a:	d807      	bhi.n	800525c <_printf_i+0x28>
 800524c:	2f62      	cmp	r7, #98	; 0x62
 800524e:	d80a      	bhi.n	8005266 <_printf_i+0x32>
 8005250:	2f00      	cmp	r7, #0
 8005252:	f000 80d4 	beq.w	80053fe <_printf_i+0x1ca>
 8005256:	2f58      	cmp	r7, #88	; 0x58
 8005258:	f000 80c0 	beq.w	80053dc <_printf_i+0x1a8>
 800525c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005260:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005264:	e03a      	b.n	80052dc <_printf_i+0xa8>
 8005266:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800526a:	2b15      	cmp	r3, #21
 800526c:	d8f6      	bhi.n	800525c <_printf_i+0x28>
 800526e:	a101      	add	r1, pc, #4	; (adr r1, 8005274 <_printf_i+0x40>)
 8005270:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005274:	080052cd 	.word	0x080052cd
 8005278:	080052e1 	.word	0x080052e1
 800527c:	0800525d 	.word	0x0800525d
 8005280:	0800525d 	.word	0x0800525d
 8005284:	0800525d 	.word	0x0800525d
 8005288:	0800525d 	.word	0x0800525d
 800528c:	080052e1 	.word	0x080052e1
 8005290:	0800525d 	.word	0x0800525d
 8005294:	0800525d 	.word	0x0800525d
 8005298:	0800525d 	.word	0x0800525d
 800529c:	0800525d 	.word	0x0800525d
 80052a0:	080053e5 	.word	0x080053e5
 80052a4:	0800530d 	.word	0x0800530d
 80052a8:	0800539f 	.word	0x0800539f
 80052ac:	0800525d 	.word	0x0800525d
 80052b0:	0800525d 	.word	0x0800525d
 80052b4:	08005407 	.word	0x08005407
 80052b8:	0800525d 	.word	0x0800525d
 80052bc:	0800530d 	.word	0x0800530d
 80052c0:	0800525d 	.word	0x0800525d
 80052c4:	0800525d 	.word	0x0800525d
 80052c8:	080053a7 	.word	0x080053a7
 80052cc:	682b      	ldr	r3, [r5, #0]
 80052ce:	1d1a      	adds	r2, r3, #4
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	602a      	str	r2, [r5, #0]
 80052d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80052d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80052dc:	2301      	movs	r3, #1
 80052de:	e09f      	b.n	8005420 <_printf_i+0x1ec>
 80052e0:	6820      	ldr	r0, [r4, #0]
 80052e2:	682b      	ldr	r3, [r5, #0]
 80052e4:	0607      	lsls	r7, r0, #24
 80052e6:	f103 0104 	add.w	r1, r3, #4
 80052ea:	6029      	str	r1, [r5, #0]
 80052ec:	d501      	bpl.n	80052f2 <_printf_i+0xbe>
 80052ee:	681e      	ldr	r6, [r3, #0]
 80052f0:	e003      	b.n	80052fa <_printf_i+0xc6>
 80052f2:	0646      	lsls	r6, r0, #25
 80052f4:	d5fb      	bpl.n	80052ee <_printf_i+0xba>
 80052f6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80052fa:	2e00      	cmp	r6, #0
 80052fc:	da03      	bge.n	8005306 <_printf_i+0xd2>
 80052fe:	232d      	movs	r3, #45	; 0x2d
 8005300:	4276      	negs	r6, r6
 8005302:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005306:	485a      	ldr	r0, [pc, #360]	; (8005470 <_printf_i+0x23c>)
 8005308:	230a      	movs	r3, #10
 800530a:	e012      	b.n	8005332 <_printf_i+0xfe>
 800530c:	682b      	ldr	r3, [r5, #0]
 800530e:	6820      	ldr	r0, [r4, #0]
 8005310:	1d19      	adds	r1, r3, #4
 8005312:	6029      	str	r1, [r5, #0]
 8005314:	0605      	lsls	r5, r0, #24
 8005316:	d501      	bpl.n	800531c <_printf_i+0xe8>
 8005318:	681e      	ldr	r6, [r3, #0]
 800531a:	e002      	b.n	8005322 <_printf_i+0xee>
 800531c:	0641      	lsls	r1, r0, #25
 800531e:	d5fb      	bpl.n	8005318 <_printf_i+0xe4>
 8005320:	881e      	ldrh	r6, [r3, #0]
 8005322:	4853      	ldr	r0, [pc, #332]	; (8005470 <_printf_i+0x23c>)
 8005324:	2f6f      	cmp	r7, #111	; 0x6f
 8005326:	bf0c      	ite	eq
 8005328:	2308      	moveq	r3, #8
 800532a:	230a      	movne	r3, #10
 800532c:	2100      	movs	r1, #0
 800532e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005332:	6865      	ldr	r5, [r4, #4]
 8005334:	60a5      	str	r5, [r4, #8]
 8005336:	2d00      	cmp	r5, #0
 8005338:	bfa2      	ittt	ge
 800533a:	6821      	ldrge	r1, [r4, #0]
 800533c:	f021 0104 	bicge.w	r1, r1, #4
 8005340:	6021      	strge	r1, [r4, #0]
 8005342:	b90e      	cbnz	r6, 8005348 <_printf_i+0x114>
 8005344:	2d00      	cmp	r5, #0
 8005346:	d04b      	beq.n	80053e0 <_printf_i+0x1ac>
 8005348:	4615      	mov	r5, r2
 800534a:	fbb6 f1f3 	udiv	r1, r6, r3
 800534e:	fb03 6711 	mls	r7, r3, r1, r6
 8005352:	5dc7      	ldrb	r7, [r0, r7]
 8005354:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005358:	4637      	mov	r7, r6
 800535a:	42bb      	cmp	r3, r7
 800535c:	460e      	mov	r6, r1
 800535e:	d9f4      	bls.n	800534a <_printf_i+0x116>
 8005360:	2b08      	cmp	r3, #8
 8005362:	d10b      	bne.n	800537c <_printf_i+0x148>
 8005364:	6823      	ldr	r3, [r4, #0]
 8005366:	07de      	lsls	r6, r3, #31
 8005368:	d508      	bpl.n	800537c <_printf_i+0x148>
 800536a:	6923      	ldr	r3, [r4, #16]
 800536c:	6861      	ldr	r1, [r4, #4]
 800536e:	4299      	cmp	r1, r3
 8005370:	bfde      	ittt	le
 8005372:	2330      	movle	r3, #48	; 0x30
 8005374:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005378:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800537c:	1b52      	subs	r2, r2, r5
 800537e:	6122      	str	r2, [r4, #16]
 8005380:	f8cd a000 	str.w	sl, [sp]
 8005384:	464b      	mov	r3, r9
 8005386:	aa03      	add	r2, sp, #12
 8005388:	4621      	mov	r1, r4
 800538a:	4640      	mov	r0, r8
 800538c:	f7ff fee4 	bl	8005158 <_printf_common>
 8005390:	3001      	adds	r0, #1
 8005392:	d14a      	bne.n	800542a <_printf_i+0x1f6>
 8005394:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005398:	b004      	add	sp, #16
 800539a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800539e:	6823      	ldr	r3, [r4, #0]
 80053a0:	f043 0320 	orr.w	r3, r3, #32
 80053a4:	6023      	str	r3, [r4, #0]
 80053a6:	4833      	ldr	r0, [pc, #204]	; (8005474 <_printf_i+0x240>)
 80053a8:	2778      	movs	r7, #120	; 0x78
 80053aa:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80053ae:	6823      	ldr	r3, [r4, #0]
 80053b0:	6829      	ldr	r1, [r5, #0]
 80053b2:	061f      	lsls	r7, r3, #24
 80053b4:	f851 6b04 	ldr.w	r6, [r1], #4
 80053b8:	d402      	bmi.n	80053c0 <_printf_i+0x18c>
 80053ba:	065f      	lsls	r7, r3, #25
 80053bc:	bf48      	it	mi
 80053be:	b2b6      	uxthmi	r6, r6
 80053c0:	07df      	lsls	r7, r3, #31
 80053c2:	bf48      	it	mi
 80053c4:	f043 0320 	orrmi.w	r3, r3, #32
 80053c8:	6029      	str	r1, [r5, #0]
 80053ca:	bf48      	it	mi
 80053cc:	6023      	strmi	r3, [r4, #0]
 80053ce:	b91e      	cbnz	r6, 80053d8 <_printf_i+0x1a4>
 80053d0:	6823      	ldr	r3, [r4, #0]
 80053d2:	f023 0320 	bic.w	r3, r3, #32
 80053d6:	6023      	str	r3, [r4, #0]
 80053d8:	2310      	movs	r3, #16
 80053da:	e7a7      	b.n	800532c <_printf_i+0xf8>
 80053dc:	4824      	ldr	r0, [pc, #144]	; (8005470 <_printf_i+0x23c>)
 80053de:	e7e4      	b.n	80053aa <_printf_i+0x176>
 80053e0:	4615      	mov	r5, r2
 80053e2:	e7bd      	b.n	8005360 <_printf_i+0x12c>
 80053e4:	682b      	ldr	r3, [r5, #0]
 80053e6:	6826      	ldr	r6, [r4, #0]
 80053e8:	6961      	ldr	r1, [r4, #20]
 80053ea:	1d18      	adds	r0, r3, #4
 80053ec:	6028      	str	r0, [r5, #0]
 80053ee:	0635      	lsls	r5, r6, #24
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	d501      	bpl.n	80053f8 <_printf_i+0x1c4>
 80053f4:	6019      	str	r1, [r3, #0]
 80053f6:	e002      	b.n	80053fe <_printf_i+0x1ca>
 80053f8:	0670      	lsls	r0, r6, #25
 80053fa:	d5fb      	bpl.n	80053f4 <_printf_i+0x1c0>
 80053fc:	8019      	strh	r1, [r3, #0]
 80053fe:	2300      	movs	r3, #0
 8005400:	6123      	str	r3, [r4, #16]
 8005402:	4615      	mov	r5, r2
 8005404:	e7bc      	b.n	8005380 <_printf_i+0x14c>
 8005406:	682b      	ldr	r3, [r5, #0]
 8005408:	1d1a      	adds	r2, r3, #4
 800540a:	602a      	str	r2, [r5, #0]
 800540c:	681d      	ldr	r5, [r3, #0]
 800540e:	6862      	ldr	r2, [r4, #4]
 8005410:	2100      	movs	r1, #0
 8005412:	4628      	mov	r0, r5
 8005414:	f7fa ff14 	bl	8000240 <memchr>
 8005418:	b108      	cbz	r0, 800541e <_printf_i+0x1ea>
 800541a:	1b40      	subs	r0, r0, r5
 800541c:	6060      	str	r0, [r4, #4]
 800541e:	6863      	ldr	r3, [r4, #4]
 8005420:	6123      	str	r3, [r4, #16]
 8005422:	2300      	movs	r3, #0
 8005424:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005428:	e7aa      	b.n	8005380 <_printf_i+0x14c>
 800542a:	6923      	ldr	r3, [r4, #16]
 800542c:	462a      	mov	r2, r5
 800542e:	4649      	mov	r1, r9
 8005430:	4640      	mov	r0, r8
 8005432:	47d0      	blx	sl
 8005434:	3001      	adds	r0, #1
 8005436:	d0ad      	beq.n	8005394 <_printf_i+0x160>
 8005438:	6823      	ldr	r3, [r4, #0]
 800543a:	079b      	lsls	r3, r3, #30
 800543c:	d413      	bmi.n	8005466 <_printf_i+0x232>
 800543e:	68e0      	ldr	r0, [r4, #12]
 8005440:	9b03      	ldr	r3, [sp, #12]
 8005442:	4298      	cmp	r0, r3
 8005444:	bfb8      	it	lt
 8005446:	4618      	movlt	r0, r3
 8005448:	e7a6      	b.n	8005398 <_printf_i+0x164>
 800544a:	2301      	movs	r3, #1
 800544c:	4632      	mov	r2, r6
 800544e:	4649      	mov	r1, r9
 8005450:	4640      	mov	r0, r8
 8005452:	47d0      	blx	sl
 8005454:	3001      	adds	r0, #1
 8005456:	d09d      	beq.n	8005394 <_printf_i+0x160>
 8005458:	3501      	adds	r5, #1
 800545a:	68e3      	ldr	r3, [r4, #12]
 800545c:	9903      	ldr	r1, [sp, #12]
 800545e:	1a5b      	subs	r3, r3, r1
 8005460:	42ab      	cmp	r3, r5
 8005462:	dcf2      	bgt.n	800544a <_printf_i+0x216>
 8005464:	e7eb      	b.n	800543e <_printf_i+0x20a>
 8005466:	2500      	movs	r5, #0
 8005468:	f104 0619 	add.w	r6, r4, #25
 800546c:	e7f5      	b.n	800545a <_printf_i+0x226>
 800546e:	bf00      	nop
 8005470:	0800576d 	.word	0x0800576d
 8005474:	0800577e 	.word	0x0800577e

08005478 <__sflush_r>:
 8005478:	898a      	ldrh	r2, [r1, #12]
 800547a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800547e:	4605      	mov	r5, r0
 8005480:	0710      	lsls	r0, r2, #28
 8005482:	460c      	mov	r4, r1
 8005484:	d458      	bmi.n	8005538 <__sflush_r+0xc0>
 8005486:	684b      	ldr	r3, [r1, #4]
 8005488:	2b00      	cmp	r3, #0
 800548a:	dc05      	bgt.n	8005498 <__sflush_r+0x20>
 800548c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800548e:	2b00      	cmp	r3, #0
 8005490:	dc02      	bgt.n	8005498 <__sflush_r+0x20>
 8005492:	2000      	movs	r0, #0
 8005494:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005498:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800549a:	2e00      	cmp	r6, #0
 800549c:	d0f9      	beq.n	8005492 <__sflush_r+0x1a>
 800549e:	2300      	movs	r3, #0
 80054a0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80054a4:	682f      	ldr	r7, [r5, #0]
 80054a6:	6a21      	ldr	r1, [r4, #32]
 80054a8:	602b      	str	r3, [r5, #0]
 80054aa:	d032      	beq.n	8005512 <__sflush_r+0x9a>
 80054ac:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80054ae:	89a3      	ldrh	r3, [r4, #12]
 80054b0:	075a      	lsls	r2, r3, #29
 80054b2:	d505      	bpl.n	80054c0 <__sflush_r+0x48>
 80054b4:	6863      	ldr	r3, [r4, #4]
 80054b6:	1ac0      	subs	r0, r0, r3
 80054b8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80054ba:	b10b      	cbz	r3, 80054c0 <__sflush_r+0x48>
 80054bc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80054be:	1ac0      	subs	r0, r0, r3
 80054c0:	2300      	movs	r3, #0
 80054c2:	4602      	mov	r2, r0
 80054c4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80054c6:	6a21      	ldr	r1, [r4, #32]
 80054c8:	4628      	mov	r0, r5
 80054ca:	47b0      	blx	r6
 80054cc:	1c43      	adds	r3, r0, #1
 80054ce:	89a3      	ldrh	r3, [r4, #12]
 80054d0:	d106      	bne.n	80054e0 <__sflush_r+0x68>
 80054d2:	6829      	ldr	r1, [r5, #0]
 80054d4:	291d      	cmp	r1, #29
 80054d6:	d82b      	bhi.n	8005530 <__sflush_r+0xb8>
 80054d8:	4a29      	ldr	r2, [pc, #164]	; (8005580 <__sflush_r+0x108>)
 80054da:	410a      	asrs	r2, r1
 80054dc:	07d6      	lsls	r6, r2, #31
 80054de:	d427      	bmi.n	8005530 <__sflush_r+0xb8>
 80054e0:	2200      	movs	r2, #0
 80054e2:	6062      	str	r2, [r4, #4]
 80054e4:	04d9      	lsls	r1, r3, #19
 80054e6:	6922      	ldr	r2, [r4, #16]
 80054e8:	6022      	str	r2, [r4, #0]
 80054ea:	d504      	bpl.n	80054f6 <__sflush_r+0x7e>
 80054ec:	1c42      	adds	r2, r0, #1
 80054ee:	d101      	bne.n	80054f4 <__sflush_r+0x7c>
 80054f0:	682b      	ldr	r3, [r5, #0]
 80054f2:	b903      	cbnz	r3, 80054f6 <__sflush_r+0x7e>
 80054f4:	6560      	str	r0, [r4, #84]	; 0x54
 80054f6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80054f8:	602f      	str	r7, [r5, #0]
 80054fa:	2900      	cmp	r1, #0
 80054fc:	d0c9      	beq.n	8005492 <__sflush_r+0x1a>
 80054fe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005502:	4299      	cmp	r1, r3
 8005504:	d002      	beq.n	800550c <__sflush_r+0x94>
 8005506:	4628      	mov	r0, r5
 8005508:	f7ff fbea 	bl	8004ce0 <_free_r>
 800550c:	2000      	movs	r0, #0
 800550e:	6360      	str	r0, [r4, #52]	; 0x34
 8005510:	e7c0      	b.n	8005494 <__sflush_r+0x1c>
 8005512:	2301      	movs	r3, #1
 8005514:	4628      	mov	r0, r5
 8005516:	47b0      	blx	r6
 8005518:	1c41      	adds	r1, r0, #1
 800551a:	d1c8      	bne.n	80054ae <__sflush_r+0x36>
 800551c:	682b      	ldr	r3, [r5, #0]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d0c5      	beq.n	80054ae <__sflush_r+0x36>
 8005522:	2b1d      	cmp	r3, #29
 8005524:	d001      	beq.n	800552a <__sflush_r+0xb2>
 8005526:	2b16      	cmp	r3, #22
 8005528:	d101      	bne.n	800552e <__sflush_r+0xb6>
 800552a:	602f      	str	r7, [r5, #0]
 800552c:	e7b1      	b.n	8005492 <__sflush_r+0x1a>
 800552e:	89a3      	ldrh	r3, [r4, #12]
 8005530:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005534:	81a3      	strh	r3, [r4, #12]
 8005536:	e7ad      	b.n	8005494 <__sflush_r+0x1c>
 8005538:	690f      	ldr	r7, [r1, #16]
 800553a:	2f00      	cmp	r7, #0
 800553c:	d0a9      	beq.n	8005492 <__sflush_r+0x1a>
 800553e:	0793      	lsls	r3, r2, #30
 8005540:	680e      	ldr	r6, [r1, #0]
 8005542:	bf08      	it	eq
 8005544:	694b      	ldreq	r3, [r1, #20]
 8005546:	600f      	str	r7, [r1, #0]
 8005548:	bf18      	it	ne
 800554a:	2300      	movne	r3, #0
 800554c:	eba6 0807 	sub.w	r8, r6, r7
 8005550:	608b      	str	r3, [r1, #8]
 8005552:	f1b8 0f00 	cmp.w	r8, #0
 8005556:	dd9c      	ble.n	8005492 <__sflush_r+0x1a>
 8005558:	6a21      	ldr	r1, [r4, #32]
 800555a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800555c:	4643      	mov	r3, r8
 800555e:	463a      	mov	r2, r7
 8005560:	4628      	mov	r0, r5
 8005562:	47b0      	blx	r6
 8005564:	2800      	cmp	r0, #0
 8005566:	dc06      	bgt.n	8005576 <__sflush_r+0xfe>
 8005568:	89a3      	ldrh	r3, [r4, #12]
 800556a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800556e:	81a3      	strh	r3, [r4, #12]
 8005570:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005574:	e78e      	b.n	8005494 <__sflush_r+0x1c>
 8005576:	4407      	add	r7, r0
 8005578:	eba8 0800 	sub.w	r8, r8, r0
 800557c:	e7e9      	b.n	8005552 <__sflush_r+0xda>
 800557e:	bf00      	nop
 8005580:	dfbffffe 	.word	0xdfbffffe

08005584 <_fflush_r>:
 8005584:	b538      	push	{r3, r4, r5, lr}
 8005586:	690b      	ldr	r3, [r1, #16]
 8005588:	4605      	mov	r5, r0
 800558a:	460c      	mov	r4, r1
 800558c:	b913      	cbnz	r3, 8005594 <_fflush_r+0x10>
 800558e:	2500      	movs	r5, #0
 8005590:	4628      	mov	r0, r5
 8005592:	bd38      	pop	{r3, r4, r5, pc}
 8005594:	b118      	cbz	r0, 800559e <_fflush_r+0x1a>
 8005596:	6a03      	ldr	r3, [r0, #32]
 8005598:	b90b      	cbnz	r3, 800559e <_fflush_r+0x1a>
 800559a:	f7ff f9a9 	bl	80048f0 <__sinit>
 800559e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d0f3      	beq.n	800558e <_fflush_r+0xa>
 80055a6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80055a8:	07d0      	lsls	r0, r2, #31
 80055aa:	d404      	bmi.n	80055b6 <_fflush_r+0x32>
 80055ac:	0599      	lsls	r1, r3, #22
 80055ae:	d402      	bmi.n	80055b6 <_fflush_r+0x32>
 80055b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80055b2:	f7ff fb92 	bl	8004cda <__retarget_lock_acquire_recursive>
 80055b6:	4628      	mov	r0, r5
 80055b8:	4621      	mov	r1, r4
 80055ba:	f7ff ff5d 	bl	8005478 <__sflush_r>
 80055be:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80055c0:	07da      	lsls	r2, r3, #31
 80055c2:	4605      	mov	r5, r0
 80055c4:	d4e4      	bmi.n	8005590 <_fflush_r+0xc>
 80055c6:	89a3      	ldrh	r3, [r4, #12]
 80055c8:	059b      	lsls	r3, r3, #22
 80055ca:	d4e1      	bmi.n	8005590 <_fflush_r+0xc>
 80055cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80055ce:	f7ff fb85 	bl	8004cdc <__retarget_lock_release_recursive>
 80055d2:	e7dd      	b.n	8005590 <_fflush_r+0xc>

080055d4 <__swhatbuf_r>:
 80055d4:	b570      	push	{r4, r5, r6, lr}
 80055d6:	460c      	mov	r4, r1
 80055d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055dc:	2900      	cmp	r1, #0
 80055de:	b096      	sub	sp, #88	; 0x58
 80055e0:	4615      	mov	r5, r2
 80055e2:	461e      	mov	r6, r3
 80055e4:	da0d      	bge.n	8005602 <__swhatbuf_r+0x2e>
 80055e6:	89a3      	ldrh	r3, [r4, #12]
 80055e8:	f013 0f80 	tst.w	r3, #128	; 0x80
 80055ec:	f04f 0100 	mov.w	r1, #0
 80055f0:	bf0c      	ite	eq
 80055f2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80055f6:	2340      	movne	r3, #64	; 0x40
 80055f8:	2000      	movs	r0, #0
 80055fa:	6031      	str	r1, [r6, #0]
 80055fc:	602b      	str	r3, [r5, #0]
 80055fe:	b016      	add	sp, #88	; 0x58
 8005600:	bd70      	pop	{r4, r5, r6, pc}
 8005602:	466a      	mov	r2, sp
 8005604:	f000 f848 	bl	8005698 <_fstat_r>
 8005608:	2800      	cmp	r0, #0
 800560a:	dbec      	blt.n	80055e6 <__swhatbuf_r+0x12>
 800560c:	9901      	ldr	r1, [sp, #4]
 800560e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8005612:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8005616:	4259      	negs	r1, r3
 8005618:	4159      	adcs	r1, r3
 800561a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800561e:	e7eb      	b.n	80055f8 <__swhatbuf_r+0x24>

08005620 <__smakebuf_r>:
 8005620:	898b      	ldrh	r3, [r1, #12]
 8005622:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005624:	079d      	lsls	r5, r3, #30
 8005626:	4606      	mov	r6, r0
 8005628:	460c      	mov	r4, r1
 800562a:	d507      	bpl.n	800563c <__smakebuf_r+0x1c>
 800562c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005630:	6023      	str	r3, [r4, #0]
 8005632:	6123      	str	r3, [r4, #16]
 8005634:	2301      	movs	r3, #1
 8005636:	6163      	str	r3, [r4, #20]
 8005638:	b002      	add	sp, #8
 800563a:	bd70      	pop	{r4, r5, r6, pc}
 800563c:	ab01      	add	r3, sp, #4
 800563e:	466a      	mov	r2, sp
 8005640:	f7ff ffc8 	bl	80055d4 <__swhatbuf_r>
 8005644:	9900      	ldr	r1, [sp, #0]
 8005646:	4605      	mov	r5, r0
 8005648:	4630      	mov	r0, r6
 800564a:	f7ff fbb5 	bl	8004db8 <_malloc_r>
 800564e:	b948      	cbnz	r0, 8005664 <__smakebuf_r+0x44>
 8005650:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005654:	059a      	lsls	r2, r3, #22
 8005656:	d4ef      	bmi.n	8005638 <__smakebuf_r+0x18>
 8005658:	f023 0303 	bic.w	r3, r3, #3
 800565c:	f043 0302 	orr.w	r3, r3, #2
 8005660:	81a3      	strh	r3, [r4, #12]
 8005662:	e7e3      	b.n	800562c <__smakebuf_r+0xc>
 8005664:	89a3      	ldrh	r3, [r4, #12]
 8005666:	6020      	str	r0, [r4, #0]
 8005668:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800566c:	81a3      	strh	r3, [r4, #12]
 800566e:	9b00      	ldr	r3, [sp, #0]
 8005670:	6163      	str	r3, [r4, #20]
 8005672:	9b01      	ldr	r3, [sp, #4]
 8005674:	6120      	str	r0, [r4, #16]
 8005676:	b15b      	cbz	r3, 8005690 <__smakebuf_r+0x70>
 8005678:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800567c:	4630      	mov	r0, r6
 800567e:	f000 f81d 	bl	80056bc <_isatty_r>
 8005682:	b128      	cbz	r0, 8005690 <__smakebuf_r+0x70>
 8005684:	89a3      	ldrh	r3, [r4, #12]
 8005686:	f023 0303 	bic.w	r3, r3, #3
 800568a:	f043 0301 	orr.w	r3, r3, #1
 800568e:	81a3      	strh	r3, [r4, #12]
 8005690:	89a3      	ldrh	r3, [r4, #12]
 8005692:	431d      	orrs	r5, r3
 8005694:	81a5      	strh	r5, [r4, #12]
 8005696:	e7cf      	b.n	8005638 <__smakebuf_r+0x18>

08005698 <_fstat_r>:
 8005698:	b538      	push	{r3, r4, r5, lr}
 800569a:	4d07      	ldr	r5, [pc, #28]	; (80056b8 <_fstat_r+0x20>)
 800569c:	2300      	movs	r3, #0
 800569e:	4604      	mov	r4, r0
 80056a0:	4608      	mov	r0, r1
 80056a2:	4611      	mov	r1, r2
 80056a4:	602b      	str	r3, [r5, #0]
 80056a6:	f7fb fae8 	bl	8000c7a <_fstat>
 80056aa:	1c43      	adds	r3, r0, #1
 80056ac:	d102      	bne.n	80056b4 <_fstat_r+0x1c>
 80056ae:	682b      	ldr	r3, [r5, #0]
 80056b0:	b103      	cbz	r3, 80056b4 <_fstat_r+0x1c>
 80056b2:	6023      	str	r3, [r4, #0]
 80056b4:	bd38      	pop	{r3, r4, r5, pc}
 80056b6:	bf00      	nop
 80056b8:	2000031c 	.word	0x2000031c

080056bc <_isatty_r>:
 80056bc:	b538      	push	{r3, r4, r5, lr}
 80056be:	4d06      	ldr	r5, [pc, #24]	; (80056d8 <_isatty_r+0x1c>)
 80056c0:	2300      	movs	r3, #0
 80056c2:	4604      	mov	r4, r0
 80056c4:	4608      	mov	r0, r1
 80056c6:	602b      	str	r3, [r5, #0]
 80056c8:	f7fb fae7 	bl	8000c9a <_isatty>
 80056cc:	1c43      	adds	r3, r0, #1
 80056ce:	d102      	bne.n	80056d6 <_isatty_r+0x1a>
 80056d0:	682b      	ldr	r3, [r5, #0]
 80056d2:	b103      	cbz	r3, 80056d6 <_isatty_r+0x1a>
 80056d4:	6023      	str	r3, [r4, #0]
 80056d6:	bd38      	pop	{r3, r4, r5, pc}
 80056d8:	2000031c 	.word	0x2000031c

080056dc <_sbrk_r>:
 80056dc:	b538      	push	{r3, r4, r5, lr}
 80056de:	4d06      	ldr	r5, [pc, #24]	; (80056f8 <_sbrk_r+0x1c>)
 80056e0:	2300      	movs	r3, #0
 80056e2:	4604      	mov	r4, r0
 80056e4:	4608      	mov	r0, r1
 80056e6:	602b      	str	r3, [r5, #0]
 80056e8:	f7fb faf0 	bl	8000ccc <_sbrk>
 80056ec:	1c43      	adds	r3, r0, #1
 80056ee:	d102      	bne.n	80056f6 <_sbrk_r+0x1a>
 80056f0:	682b      	ldr	r3, [r5, #0]
 80056f2:	b103      	cbz	r3, 80056f6 <_sbrk_r+0x1a>
 80056f4:	6023      	str	r3, [r4, #0]
 80056f6:	bd38      	pop	{r3, r4, r5, pc}
 80056f8:	2000031c 	.word	0x2000031c

080056fc <_init>:
 80056fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056fe:	bf00      	nop
 8005700:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005702:	bc08      	pop	{r3}
 8005704:	469e      	mov	lr, r3
 8005706:	4770      	bx	lr

08005708 <_fini>:
 8005708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800570a:	bf00      	nop
 800570c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800570e:	bc08      	pop	{r3}
 8005710:	469e      	mov	lr, r3
 8005712:	4770      	bx	lr
