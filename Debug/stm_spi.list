
stm_spi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005888  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  08005a88  08005a88  00015a88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005b6c  08005b6c  0002008c  2**0
                  CONTENTS
  4 .ARM          00000008  08005b6c  08005b6c  00015b6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005b74  08005b74  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005b74  08005b74  00015b74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005b78  08005b78  00015b78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  08005b7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002c4  2000008c  08005c08  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000350  08005c08  00020350  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200ba  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d66b  00000000  00000000  000200fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002148  00000000  00000000  0002d768  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ab0  00000000  00000000  0002f8b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000828  00000000  00000000  00030360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002de84  00000000  00000000  00030b88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000db12  00000000  00000000  0005ea0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00111d25  00000000  00000000  0006c51e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003280  00000000  00000000  0017e244  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  001814c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	2000008c 	.word	0x2000008c
 800021c:	00000000 	.word	0x00000000
 8000220:	08005a70 	.word	0x08005a70

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000090 	.word	0x20000090
 800023c:	08005a70 	.word	0x08005a70

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002f4:	f000 b970 	b.w	80005d8 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9e08      	ldr	r6, [sp, #32]
 8000316:	460d      	mov	r5, r1
 8000318:	4604      	mov	r4, r0
 800031a:	460f      	mov	r7, r1
 800031c:	2b00      	cmp	r3, #0
 800031e:	d14a      	bne.n	80003b6 <__udivmoddi4+0xa6>
 8000320:	428a      	cmp	r2, r1
 8000322:	4694      	mov	ip, r2
 8000324:	d965      	bls.n	80003f2 <__udivmoddi4+0xe2>
 8000326:	fab2 f382 	clz	r3, r2
 800032a:	b143      	cbz	r3, 800033e <__udivmoddi4+0x2e>
 800032c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000330:	f1c3 0220 	rsb	r2, r3, #32
 8000334:	409f      	lsls	r7, r3
 8000336:	fa20 f202 	lsr.w	r2, r0, r2
 800033a:	4317      	orrs	r7, r2
 800033c:	409c      	lsls	r4, r3
 800033e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000342:	fa1f f58c 	uxth.w	r5, ip
 8000346:	fbb7 f1fe 	udiv	r1, r7, lr
 800034a:	0c22      	lsrs	r2, r4, #16
 800034c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000350:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000354:	fb01 f005 	mul.w	r0, r1, r5
 8000358:	4290      	cmp	r0, r2
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x62>
 800035c:	eb1c 0202 	adds.w	r2, ip, r2
 8000360:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000364:	f080 811c 	bcs.w	80005a0 <__udivmoddi4+0x290>
 8000368:	4290      	cmp	r0, r2
 800036a:	f240 8119 	bls.w	80005a0 <__udivmoddi4+0x290>
 800036e:	3902      	subs	r1, #2
 8000370:	4462      	add	r2, ip
 8000372:	1a12      	subs	r2, r2, r0
 8000374:	b2a4      	uxth	r4, r4
 8000376:	fbb2 f0fe 	udiv	r0, r2, lr
 800037a:	fb0e 2210 	mls	r2, lr, r0, r2
 800037e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000382:	fb00 f505 	mul.w	r5, r0, r5
 8000386:	42a5      	cmp	r5, r4
 8000388:	d90a      	bls.n	80003a0 <__udivmoddi4+0x90>
 800038a:	eb1c 0404 	adds.w	r4, ip, r4
 800038e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000392:	f080 8107 	bcs.w	80005a4 <__udivmoddi4+0x294>
 8000396:	42a5      	cmp	r5, r4
 8000398:	f240 8104 	bls.w	80005a4 <__udivmoddi4+0x294>
 800039c:	4464      	add	r4, ip
 800039e:	3802      	subs	r0, #2
 80003a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003a4:	1b64      	subs	r4, r4, r5
 80003a6:	2100      	movs	r1, #0
 80003a8:	b11e      	cbz	r6, 80003b2 <__udivmoddi4+0xa2>
 80003aa:	40dc      	lsrs	r4, r3
 80003ac:	2300      	movs	r3, #0
 80003ae:	e9c6 4300 	strd	r4, r3, [r6]
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0xbc>
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	f000 80ed 	beq.w	800059a <__udivmoddi4+0x28a>
 80003c0:	2100      	movs	r1, #0
 80003c2:	e9c6 0500 	strd	r0, r5, [r6]
 80003c6:	4608      	mov	r0, r1
 80003c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003cc:	fab3 f183 	clz	r1, r3
 80003d0:	2900      	cmp	r1, #0
 80003d2:	d149      	bne.n	8000468 <__udivmoddi4+0x158>
 80003d4:	42ab      	cmp	r3, r5
 80003d6:	d302      	bcc.n	80003de <__udivmoddi4+0xce>
 80003d8:	4282      	cmp	r2, r0
 80003da:	f200 80f8 	bhi.w	80005ce <__udivmoddi4+0x2be>
 80003de:	1a84      	subs	r4, r0, r2
 80003e0:	eb65 0203 	sbc.w	r2, r5, r3
 80003e4:	2001      	movs	r0, #1
 80003e6:	4617      	mov	r7, r2
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d0e2      	beq.n	80003b2 <__udivmoddi4+0xa2>
 80003ec:	e9c6 4700 	strd	r4, r7, [r6]
 80003f0:	e7df      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003f2:	b902      	cbnz	r2, 80003f6 <__udivmoddi4+0xe6>
 80003f4:	deff      	udf	#255	; 0xff
 80003f6:	fab2 f382 	clz	r3, r2
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	f040 8090 	bne.w	8000520 <__udivmoddi4+0x210>
 8000400:	1a8a      	subs	r2, r1, r2
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2101      	movs	r1, #1
 800040c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000410:	fb07 2015 	mls	r0, r7, r5, r2
 8000414:	0c22      	lsrs	r2, r4, #16
 8000416:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800041a:	fb0e f005 	mul.w	r0, lr, r5
 800041e:	4290      	cmp	r0, r2
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x124>
 8000422:	eb1c 0202 	adds.w	r2, ip, r2
 8000426:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x122>
 800042c:	4290      	cmp	r0, r2
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2b8>
 8000432:	4645      	mov	r5, r8
 8000434:	1a12      	subs	r2, r2, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb2 f0f7 	udiv	r0, r2, r7
 800043c:	fb07 2210 	mls	r2, r7, r0, r2
 8000440:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x14e>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x14c>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2c2>
 800045c:	4610      	mov	r0, r2
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000466:	e79f      	b.n	80003a8 <__udivmoddi4+0x98>
 8000468:	f1c1 0720 	rsb	r7, r1, #32
 800046c:	408b      	lsls	r3, r1
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa05 f401 	lsl.w	r4, r5, r1
 800047a:	fa20 f307 	lsr.w	r3, r0, r7
 800047e:	40fd      	lsrs	r5, r7
 8000480:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000484:	4323      	orrs	r3, r4
 8000486:	fbb5 f8f9 	udiv	r8, r5, r9
 800048a:	fa1f fe8c 	uxth.w	lr, ip
 800048e:	fb09 5518 	mls	r5, r9, r8, r5
 8000492:	0c1c      	lsrs	r4, r3, #16
 8000494:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000498:	fb08 f50e 	mul.w	r5, r8, lr
 800049c:	42a5      	cmp	r5, r4
 800049e:	fa02 f201 	lsl.w	r2, r2, r1
 80004a2:	fa00 f001 	lsl.w	r0, r0, r1
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b0>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2b4>
 80004b4:	42a5      	cmp	r5, r4
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2b4>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4464      	add	r4, ip
 80004c0:	1b64      	subs	r4, r4, r5
 80004c2:	b29d      	uxth	r5, r3
 80004c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004c8:	fb09 4413 	mls	r4, r9, r3, r4
 80004cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004d4:	45a6      	cmp	lr, r4
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1da>
 80004d8:	eb1c 0404 	adds.w	r4, ip, r4
 80004dc:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2ac>
 80004e2:	45a6      	cmp	lr, r4
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2ac>
 80004e6:	3b02      	subs	r3, #2
 80004e8:	4464      	add	r4, ip
 80004ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ee:	fba3 9502 	umull	r9, r5, r3, r2
 80004f2:	eba4 040e 	sub.w	r4, r4, lr
 80004f6:	42ac      	cmp	r4, r5
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46ae      	mov	lr, r5
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x29c>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x298>
 8000500:	b156      	cbz	r6, 8000518 <__udivmoddi4+0x208>
 8000502:	ebb0 0208 	subs.w	r2, r0, r8
 8000506:	eb64 040e 	sbc.w	r4, r4, lr
 800050a:	fa04 f707 	lsl.w	r7, r4, r7
 800050e:	40ca      	lsrs	r2, r1
 8000510:	40cc      	lsrs	r4, r1
 8000512:	4317      	orrs	r7, r2
 8000514:	e9c6 7400 	strd	r7, r4, [r6]
 8000518:	4618      	mov	r0, r3
 800051a:	2100      	movs	r1, #0
 800051c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000520:	f1c3 0120 	rsb	r1, r3, #32
 8000524:	fa02 fc03 	lsl.w	ip, r2, r3
 8000528:	fa20 f201 	lsr.w	r2, r0, r1
 800052c:	fa25 f101 	lsr.w	r1, r5, r1
 8000530:	409d      	lsls	r5, r3
 8000532:	432a      	orrs	r2, r5
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000540:	fb07 1510 	mls	r5, r7, r0, r1
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800054a:	fb00 f50e 	mul.w	r5, r0, lr
 800054e:	428d      	cmp	r5, r1
 8000550:	fa04 f403 	lsl.w	r4, r4, r3
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x258>
 8000556:	eb1c 0101 	adds.w	r1, ip, r1
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000560:	428d      	cmp	r5, r1
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000564:	3802      	subs	r0, #2
 8000566:	4461      	add	r1, ip
 8000568:	1b49      	subs	r1, r1, r5
 800056a:	b292      	uxth	r2, r2
 800056c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000570:	fb07 1115 	mls	r1, r7, r5, r1
 8000574:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000578:	fb05 f10e 	mul.w	r1, r5, lr
 800057c:	4291      	cmp	r1, r2
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x282>
 8000580:	eb1c 0202 	adds.w	r2, ip, r2
 8000584:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 800058a:	4291      	cmp	r1, r2
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800058e:	3d02      	subs	r5, #2
 8000590:	4462      	add	r2, ip
 8000592:	1a52      	subs	r2, r2, r1
 8000594:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0xfc>
 800059a:	4631      	mov	r1, r6
 800059c:	4630      	mov	r0, r6
 800059e:	e708      	b.n	80003b2 <__udivmoddi4+0xa2>
 80005a0:	4639      	mov	r1, r7
 80005a2:	e6e6      	b.n	8000372 <__udivmoddi4+0x62>
 80005a4:	4610      	mov	r0, r2
 80005a6:	e6fb      	b.n	80003a0 <__udivmoddi4+0x90>
 80005a8:	4548      	cmp	r0, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f0>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005b4:	3b01      	subs	r3, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f0>
 80005b8:	4645      	mov	r5, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x282>
 80005bc:	462b      	mov	r3, r5
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1da>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x258>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b0>
 80005c8:	3d02      	subs	r5, #2
 80005ca:	4462      	add	r2, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x124>
 80005ce:	4608      	mov	r0, r1
 80005d0:	e70a      	b.n	80003e8 <__udivmoddi4+0xd8>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x14e>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b084      	sub	sp, #16
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	60f8      	str	r0, [r7, #12]
 80005e4:	60b9      	str	r1, [r7, #8]
 80005e6:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)ptr, len, 100);
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	b29a      	uxth	r2, r3
 80005ec:	2364      	movs	r3, #100	; 0x64
 80005ee:	68b9      	ldr	r1, [r7, #8]
 80005f0:	4803      	ldr	r0, [pc, #12]	; (8000600 <_write+0x24>)
 80005f2:	f003 fa58 	bl	8003aa6 <HAL_UART_Transmit>
	return len;
 80005f6:	687b      	ldr	r3, [r7, #4]
}
 80005f8:	4618      	mov	r0, r3
 80005fa:	3710      	adds	r7, #16
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	20000170 	.word	0x20000170

08000604 <HAL_SPI_TxCpltCallback>:

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b082      	sub	sp, #8
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
	if (hspi->Instance == hspi5.Instance) {
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	681a      	ldr	r2, [r3, #0]
 8000610:	4b0d      	ldr	r3, [pc, #52]	; (8000648 <HAL_SPI_TxCpltCallback+0x44>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	429a      	cmp	r2, r3
 8000616:	d109      	bne.n	800062c <HAL_SPI_TxCpltCallback+0x28>
		master_transmit = 1;
 8000618:	4b0c      	ldr	r3, [pc, #48]	; (800064c <HAL_SPI_TxCpltCallback+0x48>)
 800061a:	2201      	movs	r2, #1
 800061c:	701a      	strb	r2, [r3, #0]
		slave_transmit = 0;
 800061e:	4b0c      	ldr	r3, [pc, #48]	; (8000650 <HAL_SPI_TxCpltCallback+0x4c>)
 8000620:	2200      	movs	r2, #0
 8000622:	701a      	strb	r2, [r3, #0]
		printf("Master T callback\r\n");
 8000624:	480b      	ldr	r0, [pc, #44]	; (8000654 <HAL_SPI_TxCpltCallback+0x50>)
 8000626:	f004 fbb9 	bl	8004d9c <puts>
	} else {
		slave_transmit = 1;
		master_transmit = 0;
		printf("Slave T callback\r\n");
	}
}
 800062a:	e008      	b.n	800063e <HAL_SPI_TxCpltCallback+0x3a>
		slave_transmit = 1;
 800062c:	4b08      	ldr	r3, [pc, #32]	; (8000650 <HAL_SPI_TxCpltCallback+0x4c>)
 800062e:	2201      	movs	r2, #1
 8000630:	701a      	strb	r2, [r3, #0]
		master_transmit = 0;
 8000632:	4b06      	ldr	r3, [pc, #24]	; (800064c <HAL_SPI_TxCpltCallback+0x48>)
 8000634:	2200      	movs	r2, #0
 8000636:	701a      	strb	r2, [r3, #0]
		printf("Slave T callback\r\n");
 8000638:	4807      	ldr	r0, [pc, #28]	; (8000658 <HAL_SPI_TxCpltCallback+0x54>)
 800063a:	f004 fbaf 	bl	8004d9c <puts>
}
 800063e:	bf00      	nop
 8000640:	3708      	adds	r7, #8
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	2000010c 	.word	0x2000010c
 800064c:	200001f8 	.word	0x200001f8
 8000650:	200001f9 	.word	0x200001f9
 8000654:	08005a88 	.word	0x08005a88
 8000658:	08005a9c 	.word	0x08005a9c

0800065c <HAL_SPI_RxCpltCallback>:

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b082      	sub	sp, #8
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
	if (hspi->Instance == hspi5.Instance) {
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	681a      	ldr	r2, [r3, #0]
 8000668:	4b07      	ldr	r3, [pc, #28]	; (8000688 <HAL_SPI_RxCpltCallback+0x2c>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	429a      	cmp	r2, r3
 800066e:	d103      	bne.n	8000678 <HAL_SPI_RxCpltCallback+0x1c>
		//slave_transmit = 0;
		printf("Master R callback\r\n");
 8000670:	4806      	ldr	r0, [pc, #24]	; (800068c <HAL_SPI_RxCpltCallback+0x30>)
 8000672:	f004 fb93 	bl	8004d9c <puts>
	} else {
		//master_transmit = 0;
		printf("Slave R callback\r\n");
	}
}
 8000676:	e002      	b.n	800067e <HAL_SPI_RxCpltCallback+0x22>
		printf("Slave R callback\r\n");
 8000678:	4805      	ldr	r0, [pc, #20]	; (8000690 <HAL_SPI_RxCpltCallback+0x34>)
 800067a:	f004 fb8f 	bl	8004d9c <puts>
}
 800067e:	bf00      	nop
 8000680:	3708      	adds	r7, #8
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	2000010c 	.word	0x2000010c
 800068c:	08005ab0 	.word	0x08005ab0
 8000690:	08005ac4 	.word	0x08005ac4

08000694 <HAL_SPI_ErrorCallback>:

void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b082      	sub	sp, #8
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
	if (hspi->Instance == hspi5.Instance) {
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	681a      	ldr	r2, [r3, #0]
 80006a0:	4b07      	ldr	r3, [pc, #28]	; (80006c0 <HAL_SPI_ErrorCallback+0x2c>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	429a      	cmp	r2, r3
 80006a6:	d103      	bne.n	80006b0 <HAL_SPI_ErrorCallback+0x1c>
			printf("Master er callback\r\n");
 80006a8:	4806      	ldr	r0, [pc, #24]	; (80006c4 <HAL_SPI_ErrorCallback+0x30>)
 80006aa:	f004 fb77 	bl	8004d9c <puts>
	} else {
			printf("Slave er callback\r\n");
	}
}
 80006ae:	e002      	b.n	80006b6 <HAL_SPI_ErrorCallback+0x22>
			printf("Slave er callback\r\n");
 80006b0:	4805      	ldr	r0, [pc, #20]	; (80006c8 <HAL_SPI_ErrorCallback+0x34>)
 80006b2:	f004 fb73 	bl	8004d9c <puts>
}
 80006b6:	bf00      	nop
 80006b8:	3708      	adds	r7, #8
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	2000010c 	.word	0x2000010c
 80006c4:	08005ad8 	.word	0x08005ad8
 80006c8:	08005aec 	.word	0x08005aec

080006cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006d2:	f000 fd0c 	bl	80010ee <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006d6:	f000 f88b 	bl	80007f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006da:	f000 f98d 	bl	80009f8 <MX_GPIO_Init>
  MX_SPI2_Init();
 80006de:	f000 f8e3 	bl	80008a8 <MX_SPI2_Init>
  MX_SPI5_Init();
 80006e2:	f000 f91f 	bl	8000924 <MX_SPI5_Init>
  MX_USART1_UART_Init();
 80006e6:	f000 f957 	bl	8000998 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  uint16_t data = 123;
 80006ea:	237b      	movs	r3, #123	; 0x7b
 80006ec:	80fb      	strh	r3, [r7, #6]
  uint8_t address = HYSTERESIS;
 80006ee:	2305      	movs	r3, #5
 80006f0:	717b      	strb	r3, [r7, #5]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  printf("we start");
 80006f2:	4839      	ldr	r0, [pc, #228]	; (80007d8 <main+0x10c>)
 80006f4:	f004 faec 	bl	8004cd0 <iprintf>
	  if (!master_transmit && !slave_transmit) {
 80006f8:	4b38      	ldr	r3, [pc, #224]	; (80007dc <main+0x110>)
 80006fa:	781b      	ldrb	r3, [r3, #0]
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d116      	bne.n	800072e <main+0x62>
 8000700:	4b37      	ldr	r3, [pc, #220]	; (80007e0 <main+0x114>)
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	2b00      	cmp	r3, #0
 8000706:	d112      	bne.n	800072e <main+0x62>
		  //master first transmit
		  my_spi_set_reg_adr(&hspi2, &address);
 8000708:	1d7b      	adds	r3, r7, #5
 800070a:	4619      	mov	r1, r3
 800070c:	4835      	ldr	r0, [pc, #212]	; (80007e4 <main+0x118>)
 800070e:	f000 f9a8 	bl	8000a62 <my_spi_set_reg_adr>
		  slave_resive_reg_adress(&hspi5);
 8000712:	4835      	ldr	r0, [pc, #212]	; (80007e8 <main+0x11c>)
 8000714:	f000 f9ea 	bl	8000aec <slave_resive_reg_adress>
		  my_spi_start_read_reg(&hspi2, &data);
 8000718:	1dbb      	adds	r3, r7, #6
 800071a:	4619      	mov	r1, r3
 800071c:	4831      	ldr	r0, [pc, #196]	; (80007e4 <main+0x118>)
 800071e:	f000 f9b1 	bl	8000a84 <my_spi_start_read_reg>
		  printf("Data value: %d\r\n", data);
 8000722:	88fb      	ldrh	r3, [r7, #6]
 8000724:	4619      	mov	r1, r3
 8000726:	4831      	ldr	r0, [pc, #196]	; (80007ec <main+0x120>)
 8000728:	f004 fad2 	bl	8004cd0 <iprintf>
 800072c:	e052      	b.n	80007d4 <main+0x108>
  	  } else if (master_transmit && !slave_transmit){
 800072e:	4b2b      	ldr	r3, [pc, #172]	; (80007dc <main+0x110>)
 8000730:	781b      	ldrb	r3, [r3, #0]
 8000732:	2b00      	cmp	r3, #0
 8000734:	d00a      	beq.n	800074c <main+0x80>
 8000736:	4b2a      	ldr	r3, [pc, #168]	; (80007e0 <main+0x114>)
 8000738:	781b      	ldrb	r3, [r3, #0]
 800073a:	2b00      	cmp	r3, #0
 800073c:	d106      	bne.n	800074c <main+0x80>
		  //slave respond
  		  slave_respond_to_master(&hspi5);
 800073e:	482a      	ldr	r0, [pc, #168]	; (80007e8 <main+0x11c>)
 8000740:	f000 fa44 	bl	8000bcc <slave_respond_to_master>
  		  my_spi_end_read_reg(&hspi2);
 8000744:	4827      	ldr	r0, [pc, #156]	; (80007e4 <main+0x118>)
 8000746:	f000 f9ae 	bl	8000aa6 <my_spi_end_read_reg>
 800074a:	e043      	b.n	80007d4 <main+0x108>
	  } else if(!master_transmit && slave_transmit && !(address & MY_SPI_WRITE_MOD)) {
 800074c:	4b23      	ldr	r3, [pc, #140]	; (80007dc <main+0x110>)
 800074e:	781b      	ldrb	r3, [r3, #0]
 8000750:	2b00      	cmp	r3, #0
 8000752:	d127      	bne.n	80007a4 <main+0xd8>
 8000754:	4b22      	ldr	r3, [pc, #136]	; (80007e0 <main+0x114>)
 8000756:	781b      	ldrb	r3, [r3, #0]
 8000758:	2b00      	cmp	r3, #0
 800075a:	d023      	beq.n	80007a4 <main+0xd8>
 800075c:	797b      	ldrb	r3, [r7, #5]
 800075e:	f003 0301 	and.w	r3, r3, #1
 8000762:	2b00      	cmp	r3, #0
 8000764:	d11e      	bne.n	80007a4 <main+0xd8>
		  //master respond
		  address |= MY_SPI_WRITE_MOD;
 8000766:	797b      	ldrb	r3, [r7, #5]
 8000768:	f043 0301 	orr.w	r3, r3, #1
 800076c:	b2db      	uxtb	r3, r3
 800076e:	717b      	strb	r3, [r7, #5]
		  my_spi_set_reg_adr(&hspi2, &address);
 8000770:	1d7b      	adds	r3, r7, #5
 8000772:	4619      	mov	r1, r3
 8000774:	481b      	ldr	r0, [pc, #108]	; (80007e4 <main+0x118>)
 8000776:	f000 f974 	bl	8000a62 <my_spi_set_reg_adr>
		  slave_resive_reg_adress(&hspi5);
 800077a:	481b      	ldr	r0, [pc, #108]	; (80007e8 <main+0x11c>)
 800077c:	f000 f9b6 	bl	8000aec <slave_resive_reg_adress>
		  data = (data + 2) & HYSTERESIS_MASK;
 8000780:	88fb      	ldrh	r3, [r7, #6]
 8000782:	3302      	adds	r3, #2
 8000784:	b29b      	uxth	r3, r3
 8000786:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800078a:	b29b      	uxth	r3, r3
 800078c:	80fb      	strh	r3, [r7, #6]
		  my_spi_set_reg(&hspi2, &data);
 800078e:	1dbb      	adds	r3, r7, #6
 8000790:	4619      	mov	r1, r3
 8000792:	4814      	ldr	r0, [pc, #80]	; (80007e4 <main+0x118>)
 8000794:	f000 f999 	bl	8000aca <my_spi_set_reg>
		  printf("Data value: %d\r\n", data);
 8000798:	88fb      	ldrh	r3, [r7, #6]
 800079a:	4619      	mov	r1, r3
 800079c:	4813      	ldr	r0, [pc, #76]	; (80007ec <main+0x120>)
 800079e:	f004 fa97 	bl	8004cd0 <iprintf>
 80007a2:	e017      	b.n	80007d4 <main+0x108>
	  } else {
		  address = (address >> 1) << 1;
 80007a4:	797b      	ldrb	r3, [r7, #5]
 80007a6:	085b      	lsrs	r3, r3, #1
 80007a8:	b2db      	uxtb	r3, r3
 80007aa:	005b      	lsls	r3, r3, #1
 80007ac:	b2db      	uxtb	r3, r3
 80007ae:	717b      	strb	r3, [r7, #5]
		  my_spi_set_reg_adr(&hspi2, &address);
 80007b0:	1d7b      	adds	r3, r7, #5
 80007b2:	4619      	mov	r1, r3
 80007b4:	480b      	ldr	r0, [pc, #44]	; (80007e4 <main+0x118>)
 80007b6:	f000 f954 	bl	8000a62 <my_spi_set_reg_adr>
		  slave_resive_reg_adress(&hspi5);
 80007ba:	480b      	ldr	r0, [pc, #44]	; (80007e8 <main+0x11c>)
 80007bc:	f000 f996 	bl	8000aec <slave_resive_reg_adress>
		  my_spi_start_read_reg(&hspi2, &data);
 80007c0:	1dbb      	adds	r3, r7, #6
 80007c2:	4619      	mov	r1, r3
 80007c4:	4807      	ldr	r0, [pc, #28]	; (80007e4 <main+0x118>)
 80007c6:	f000 f95d 	bl	8000a84 <my_spi_start_read_reg>
		  printf("Data value: %d\r\n", data);
 80007ca:	88fb      	ldrh	r3, [r7, #6]
 80007cc:	4619      	mov	r1, r3
 80007ce:	4807      	ldr	r0, [pc, #28]	; (80007ec <main+0x120>)
 80007d0:	f004 fa7e 	bl	8004cd0 <iprintf>
	  printf("we start");
 80007d4:	e78d      	b.n	80006f2 <main+0x26>
 80007d6:	bf00      	nop
 80007d8:	08005b00 	.word	0x08005b00
 80007dc:	200001f8 	.word	0x200001f8
 80007e0:	200001f9 	.word	0x200001f9
 80007e4:	200000a8 	.word	0x200000a8
 80007e8:	2000010c 	.word	0x2000010c
 80007ec:	08005b0c 	.word	0x08005b0c

080007f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b094      	sub	sp, #80	; 0x50
 80007f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007f6:	f107 031c 	add.w	r3, r7, #28
 80007fa:	2234      	movs	r2, #52	; 0x34
 80007fc:	2100      	movs	r1, #0
 80007fe:	4618      	mov	r0, r3
 8000800:	f004 fbac 	bl	8004f5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000804:	f107 0308 	add.w	r3, r7, #8
 8000808:	2200      	movs	r2, #0
 800080a:	601a      	str	r2, [r3, #0]
 800080c:	605a      	str	r2, [r3, #4]
 800080e:	609a      	str	r2, [r3, #8]
 8000810:	60da      	str	r2, [r3, #12]
 8000812:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000814:	4b22      	ldr	r3, [pc, #136]	; (80008a0 <SystemClock_Config+0xb0>)
 8000816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000818:	4a21      	ldr	r2, [pc, #132]	; (80008a0 <SystemClock_Config+0xb0>)
 800081a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800081e:	6413      	str	r3, [r2, #64]	; 0x40
 8000820:	4b1f      	ldr	r3, [pc, #124]	; (80008a0 <SystemClock_Config+0xb0>)
 8000822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000824:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000828:	607b      	str	r3, [r7, #4]
 800082a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800082c:	4b1d      	ldr	r3, [pc, #116]	; (80008a4 <SystemClock_Config+0xb4>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000834:	4a1b      	ldr	r2, [pc, #108]	; (80008a4 <SystemClock_Config+0xb4>)
 8000836:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800083a:	6013      	str	r3, [r2, #0]
 800083c:	4b19      	ldr	r3, [pc, #100]	; (80008a4 <SystemClock_Config+0xb4>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000844:	603b      	str	r3, [r7, #0]
 8000846:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000848:	2302      	movs	r3, #2
 800084a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800084c:	2301      	movs	r3, #1
 800084e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000850:	2310      	movs	r3, #16
 8000852:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000854:	2300      	movs	r3, #0
 8000856:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000858:	f107 031c 	add.w	r3, r7, #28
 800085c:	4618      	mov	r0, r3
 800085e:	f001 f817 	bl	8001890 <HAL_RCC_OscConfig>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8000868:	f000 f8f6 	bl	8000a58 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800086c:	230f      	movs	r3, #15
 800086e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000870:	2300      	movs	r3, #0
 8000872:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000874:	2300      	movs	r3, #0
 8000876:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000878:	2300      	movs	r3, #0
 800087a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800087c:	2300      	movs	r3, #0
 800087e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000880:	f107 0308 	add.w	r3, r7, #8
 8000884:	2100      	movs	r1, #0
 8000886:	4618      	mov	r0, r3
 8000888:	f001 fab0 	bl	8001dec <HAL_RCC_ClockConfig>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000892:	f000 f8e1 	bl	8000a58 <Error_Handler>
  }
}
 8000896:	bf00      	nop
 8000898:	3750      	adds	r7, #80	; 0x50
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	40023800 	.word	0x40023800
 80008a4:	40007000 	.word	0x40007000

080008a8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80008ac:	4b1b      	ldr	r3, [pc, #108]	; (800091c <MX_SPI2_Init+0x74>)
 80008ae:	4a1c      	ldr	r2, [pc, #112]	; (8000920 <MX_SPI2_Init+0x78>)
 80008b0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80008b2:	4b1a      	ldr	r3, [pc, #104]	; (800091c <MX_SPI2_Init+0x74>)
 80008b4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80008b8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80008ba:	4b18      	ldr	r3, [pc, #96]	; (800091c <MX_SPI2_Init+0x74>)
 80008bc:	2200      	movs	r2, #0
 80008be:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 80008c0:	4b16      	ldr	r3, [pc, #88]	; (800091c <MX_SPI2_Init+0x74>)
 80008c2:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 80008c6:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008c8:	4b14      	ldr	r3, [pc, #80]	; (800091c <MX_SPI2_Init+0x74>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008ce:	4b13      	ldr	r3, [pc, #76]	; (800091c <MX_SPI2_Init+0x74>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80008d4:	4b11      	ldr	r3, [pc, #68]	; (800091c <MX_SPI2_Init+0x74>)
 80008d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008da:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80008dc:	4b0f      	ldr	r3, [pc, #60]	; (800091c <MX_SPI2_Init+0x74>)
 80008de:	2200      	movs	r2, #0
 80008e0:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008e2:	4b0e      	ldr	r3, [pc, #56]	; (800091c <MX_SPI2_Init+0x74>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80008e8:	4b0c      	ldr	r3, [pc, #48]	; (800091c <MX_SPI2_Init+0x74>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008ee:	4b0b      	ldr	r3, [pc, #44]	; (800091c <MX_SPI2_Init+0x74>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80008f4:	4b09      	ldr	r3, [pc, #36]	; (800091c <MX_SPI2_Init+0x74>)
 80008f6:	2207      	movs	r2, #7
 80008f8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80008fa:	4b08      	ldr	r3, [pc, #32]	; (800091c <MX_SPI2_Init+0x74>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000900:	4b06      	ldr	r3, [pc, #24]	; (800091c <MX_SPI2_Init+0x74>)
 8000902:	2208      	movs	r2, #8
 8000904:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000906:	4805      	ldr	r0, [pc, #20]	; (800091c <MX_SPI2_Init+0x74>)
 8000908:	f002 f87e 	bl	8002a08 <HAL_SPI_Init>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000912:	f000 f8a1 	bl	8000a58 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000916:	bf00      	nop
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	200000a8 	.word	0x200000a8
 8000920:	40003800 	.word	0x40003800

08000924 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8000928:	4b19      	ldr	r3, [pc, #100]	; (8000990 <MX_SPI5_Init+0x6c>)
 800092a:	4a1a      	ldr	r2, [pc, #104]	; (8000994 <MX_SPI5_Init+0x70>)
 800092c:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_SLAVE;
 800092e:	4b18      	ldr	r3, [pc, #96]	; (8000990 <MX_SPI5_Init+0x6c>)
 8000930:	2200      	movs	r2, #0
 8000932:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8000934:	4b16      	ldr	r3, [pc, #88]	; (8000990 <MX_SPI5_Init+0x6c>)
 8000936:	2200      	movs	r2, #0
 8000938:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_16BIT;
 800093a:	4b15      	ldr	r3, [pc, #84]	; (8000990 <MX_SPI5_Init+0x6c>)
 800093c:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 8000940:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000942:	4b13      	ldr	r3, [pc, #76]	; (8000990 <MX_SPI5_Init+0x6c>)
 8000944:	2200      	movs	r2, #0
 8000946:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000948:	4b11      	ldr	r3, [pc, #68]	; (8000990 <MX_SPI5_Init+0x6c>)
 800094a:	2200      	movs	r2, #0
 800094c:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 800094e:	4b10      	ldr	r3, [pc, #64]	; (8000990 <MX_SPI5_Init+0x6c>)
 8000950:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000954:	619a      	str	r2, [r3, #24]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000956:	4b0e      	ldr	r3, [pc, #56]	; (8000990 <MX_SPI5_Init+0x6c>)
 8000958:	2200      	movs	r2, #0
 800095a:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 800095c:	4b0c      	ldr	r3, [pc, #48]	; (8000990 <MX_SPI5_Init+0x6c>)
 800095e:	2200      	movs	r2, #0
 8000960:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000962:	4b0b      	ldr	r3, [pc, #44]	; (8000990 <MX_SPI5_Init+0x6c>)
 8000964:	2200      	movs	r2, #0
 8000966:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 7;
 8000968:	4b09      	ldr	r3, [pc, #36]	; (8000990 <MX_SPI5_Init+0x6c>)
 800096a:	2207      	movs	r2, #7
 800096c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi5.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800096e:	4b08      	ldr	r3, [pc, #32]	; (8000990 <MX_SPI5_Init+0x6c>)
 8000970:	2200      	movs	r2, #0
 8000972:	631a      	str	r2, [r3, #48]	; 0x30
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000974:	4b06      	ldr	r3, [pc, #24]	; (8000990 <MX_SPI5_Init+0x6c>)
 8000976:	2200      	movs	r2, #0
 8000978:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 800097a:	4805      	ldr	r0, [pc, #20]	; (8000990 <MX_SPI5_Init+0x6c>)
 800097c:	f002 f844 	bl	8002a08 <HAL_SPI_Init>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <MX_SPI5_Init+0x66>
  {
    Error_Handler();
 8000986:	f000 f867 	bl	8000a58 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 800098a:	bf00      	nop
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	2000010c 	.word	0x2000010c
 8000994:	40015000 	.word	0x40015000

08000998 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800099c:	4b14      	ldr	r3, [pc, #80]	; (80009f0 <MX_USART1_UART_Init+0x58>)
 800099e:	4a15      	ldr	r2, [pc, #84]	; (80009f4 <MX_USART1_UART_Init+0x5c>)
 80009a0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80009a2:	4b13      	ldr	r3, [pc, #76]	; (80009f0 <MX_USART1_UART_Init+0x58>)
 80009a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009a8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009aa:	4b11      	ldr	r3, [pc, #68]	; (80009f0 <MX_USART1_UART_Init+0x58>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80009b0:	4b0f      	ldr	r3, [pc, #60]	; (80009f0 <MX_USART1_UART_Init+0x58>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80009b6:	4b0e      	ldr	r3, [pc, #56]	; (80009f0 <MX_USART1_UART_Init+0x58>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80009bc:	4b0c      	ldr	r3, [pc, #48]	; (80009f0 <MX_USART1_UART_Init+0x58>)
 80009be:	220c      	movs	r2, #12
 80009c0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009c2:	4b0b      	ldr	r3, [pc, #44]	; (80009f0 <MX_USART1_UART_Init+0x58>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009c8:	4b09      	ldr	r3, [pc, #36]	; (80009f0 <MX_USART1_UART_Init+0x58>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009ce:	4b08      	ldr	r3, [pc, #32]	; (80009f0 <MX_USART1_UART_Init+0x58>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009d4:	4b06      	ldr	r3, [pc, #24]	; (80009f0 <MX_USART1_UART_Init+0x58>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009da:	4805      	ldr	r0, [pc, #20]	; (80009f0 <MX_USART1_UART_Init+0x58>)
 80009dc:	f003 f815 	bl	8003a0a <HAL_UART_Init>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80009e6:	f000 f837 	bl	8000a58 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80009ea:	bf00      	nop
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	20000170 	.word	0x20000170
 80009f4:	40011000 	.word	0x40011000

080009f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	b085      	sub	sp, #20
 80009fc:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009fe:	4b15      	ldr	r3, [pc, #84]	; (8000a54 <MX_GPIO_Init+0x5c>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a02:	4a14      	ldr	r2, [pc, #80]	; (8000a54 <MX_GPIO_Init+0x5c>)
 8000a04:	f043 0302 	orr.w	r3, r3, #2
 8000a08:	6313      	str	r3, [r2, #48]	; 0x30
 8000a0a:	4b12      	ldr	r3, [pc, #72]	; (8000a54 <MX_GPIO_Init+0x5c>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0e:	f003 0302 	and.w	r3, r3, #2
 8000a12:	60fb      	str	r3, [r7, #12]
 8000a14:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a16:	4b0f      	ldr	r3, [pc, #60]	; (8000a54 <MX_GPIO_Init+0x5c>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1a:	4a0e      	ldr	r2, [pc, #56]	; (8000a54 <MX_GPIO_Init+0x5c>)
 8000a1c:	f043 0301 	orr.w	r3, r3, #1
 8000a20:	6313      	str	r3, [r2, #48]	; 0x30
 8000a22:	4b0c      	ldr	r3, [pc, #48]	; (8000a54 <MX_GPIO_Init+0x5c>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a26:	f003 0301 	and.w	r3, r3, #1
 8000a2a:	60bb      	str	r3, [r7, #8]
 8000a2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a2e:	4b09      	ldr	r3, [pc, #36]	; (8000a54 <MX_GPIO_Init+0x5c>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a32:	4a08      	ldr	r2, [pc, #32]	; (8000a54 <MX_GPIO_Init+0x5c>)
 8000a34:	f043 0320 	orr.w	r3, r3, #32
 8000a38:	6313      	str	r3, [r2, #48]	; 0x30
 8000a3a:	4b06      	ldr	r3, [pc, #24]	; (8000a54 <MX_GPIO_Init+0x5c>)
 8000a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3e:	f003 0320 	and.w	r3, r3, #32
 8000a42:	607b      	str	r3, [r7, #4]
 8000a44:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a46:	bf00      	nop
 8000a48:	3714      	adds	r7, #20
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop
 8000a54:	40023800 	.word	0x40023800

08000a58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a5c:	b672      	cpsid	i
}
 8000a5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a60:	e7fe      	b.n	8000a60 <Error_Handler+0x8>

08000a62 <my_spi_set_reg_adr>:

#include "my_spi_driver.h"

// Function to set register address
uint16_t my_spi_set_reg_adr(SPI_HandleTypeDef* hspi, uint8_t* address)
{
 8000a62:	b580      	push	{r7, lr}
 8000a64:	b084      	sub	sp, #16
 8000a66:	af00      	add	r7, sp, #0
 8000a68:	6078      	str	r0, [r7, #4]
 8000a6a:	6039      	str	r1, [r7, #0]
	uint16_t error;
	error = HAL_SPI_Transmit_IT(hspi, (uint8_t*) address, 1);
 8000a6c:	2201      	movs	r2, #1
 8000a6e:	6839      	ldr	r1, [r7, #0]
 8000a70:	6878      	ldr	r0, [r7, #4]
 8000a72:	f002 f875 	bl	8002b60 <HAL_SPI_Transmit_IT>
 8000a76:	4603      	mov	r3, r0
 8000a78:	81fb      	strh	r3, [r7, #14]
	return error;
 8000a7a:	89fb      	ldrh	r3, [r7, #14]
}
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	3710      	adds	r7, #16
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}

08000a84 <my_spi_start_read_reg>:

// Function to get register data
uint16_t my_spi_start_read_reg(SPI_HandleTypeDef* hspi, uint16_t* data)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b084      	sub	sp, #16
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
 8000a8c:	6039      	str	r1, [r7, #0]
	uint16_t error;
	error = HAL_SPI_Receive_IT(hspi, (uint8_t*) data, 2);
 8000a8e:	2202      	movs	r2, #2
 8000a90:	6839      	ldr	r1, [r7, #0]
 8000a92:	6878      	ldr	r0, [r7, #4]
 8000a94:	f002 f8f2 	bl	8002c7c <HAL_SPI_Receive_IT>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	81fb      	strh	r3, [r7, #14]
	return error;
 8000a9c:	89fb      	ldrh	r3, [r7, #14]
}
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	3710      	adds	r7, #16
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}

08000aa6 <my_spi_end_read_reg>:

uint16_t my_spi_end_read_reg(SPI_HandleTypeDef* hspi)
{
 8000aa6:	b480      	push	{r7}
 8000aa8:	b083      	sub	sp, #12
 8000aaa:	af00      	add	r7, sp, #0
 8000aac:	6078      	str	r0, [r7, #4]
	while (hspi->State != HAL_SPI_STATE_READY) {};
 8000aae:	bf00      	nop
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8000ab6:	b2db      	uxtb	r3, r3
 8000ab8:	2b01      	cmp	r3, #1
 8000aba:	d1f9      	bne.n	8000ab0 <my_spi_end_read_reg+0xa>
}
 8000abc:	bf00      	nop
 8000abe:	4618      	mov	r0, r3
 8000ac0:	370c      	adds	r7, #12
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac8:	4770      	bx	lr

08000aca <my_spi_set_reg>:

// Function to set register data
uint16_t my_spi_set_reg(SPI_HandleTypeDef* hspi, uint16_t* data)
{
 8000aca:	b580      	push	{r7, lr}
 8000acc:	b084      	sub	sp, #16
 8000ace:	af00      	add	r7, sp, #0
 8000ad0:	6078      	str	r0, [r7, #4]
 8000ad2:	6039      	str	r1, [r7, #0]
	uint16_t error;
	error = HAL_SPI_Transmit_IT(hspi, (uint8_t*) data, 2);
 8000ad4:	2202      	movs	r2, #2
 8000ad6:	6839      	ldr	r1, [r7, #0]
 8000ad8:	6878      	ldr	r0, [r7, #4]
 8000ada:	f002 f841 	bl	8002b60 <HAL_SPI_Transmit_IT>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	81fb      	strh	r3, [r7, #14]
	return error;
 8000ae2:	89fb      	ldrh	r3, [r7, #14]
}
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	3710      	adds	r7, #16
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}

08000aec <slave_resive_reg_adress>:
/*-------------------------------------*/

/*----------------FUNCTIONS FOR SPI COMUNICATION-----------------*/
// Resiving address of a register that master want to get/set
uint16_t slave_resive_reg_adress(SPI_HandleTypeDef *hspi)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b084      	sub	sp, #16
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
	uint16_t error;
	error = HAL_SPI_Receive_IT(hspi, &adress, 1);
 8000af4:	2201      	movs	r2, #1
 8000af6:	4912      	ldr	r1, [pc, #72]	; (8000b40 <slave_resive_reg_adress+0x54>)
 8000af8:	6878      	ldr	r0, [r7, #4]
 8000afa:	f002 f8bf 	bl	8002c7c <HAL_SPI_Receive_IT>
 8000afe:	4603      	mov	r3, r0
 8000b00:	81fb      	strh	r3, [r7, #14]
	while (hspi->State != HAL_SPI_STATE_READY) {
 8000b02:	e002      	b.n	8000b0a <slave_resive_reg_adress+0x1e>
		HAL_Delay(100u);
 8000b04:	2064      	movs	r0, #100	; 0x64
 8000b06:	f000 fb4f 	bl	80011a8 <HAL_Delay>
	while (hspi->State != HAL_SPI_STATE_READY) {
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8000b10:	b2db      	uxtb	r3, r3
 8000b12:	2b01      	cmp	r3, #1
 8000b14:	d1f6      	bne.n	8000b04 <slave_resive_reg_adress+0x18>
	}
	HAL_Delay(100u);
 8000b16:	2064      	movs	r0, #100	; 0x64
 8000b18:	f000 fb46 	bl	80011a8 <HAL_Delay>
	mod = adress & MY_SPI_WRITE_MOD;
 8000b1c:	4b08      	ldr	r3, [pc, #32]	; (8000b40 <slave_resive_reg_adress+0x54>)
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	f003 0301 	and.w	r3, r3, #1
 8000b24:	b2da      	uxtb	r2, r3
 8000b26:	4b07      	ldr	r3, [pc, #28]	; (8000b44 <slave_resive_reg_adress+0x58>)
 8000b28:	701a      	strb	r2, [r3, #0]
	adress = adress >> 1;
 8000b2a:	4b05      	ldr	r3, [pc, #20]	; (8000b40 <slave_resive_reg_adress+0x54>)
 8000b2c:	781b      	ldrb	r3, [r3, #0]
 8000b2e:	085b      	lsrs	r3, r3, #1
 8000b30:	b2da      	uxtb	r2, r3
 8000b32:	4b03      	ldr	r3, [pc, #12]	; (8000b40 <slave_resive_reg_adress+0x54>)
 8000b34:	701a      	strb	r2, [r3, #0]
	return error;
 8000b36:	89fb      	ldrh	r3, [r7, #14]
}
 8000b38:	4618      	mov	r0, r3
 8000b3a:	3710      	adds	r7, #16
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	200001fa 	.word	0x200001fa
 8000b44:	20000000 	.word	0x20000000

08000b48 <slave_transimt_reg>:

// Transmitting register to master
uint16_t slave_transimt_reg(SPI_HandleTypeDef *hspi)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b084      	sub	sp, #16
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
	uint16_t data = get_reg(adress);
 8000b50:	4b09      	ldr	r3, [pc, #36]	; (8000b78 <slave_transimt_reg+0x30>)
 8000b52:	781b      	ldrb	r3, [r3, #0]
 8000b54:	4618      	mov	r0, r3
 8000b56:	f000 f851 	bl	8000bfc <get_reg>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	81fb      	strh	r3, [r7, #14]
	return (uint16_t) HAL_SPI_Transmit_IT(hspi, (uint8_t*) &data, 2);
 8000b5e:	f107 030e 	add.w	r3, r7, #14
 8000b62:	2202      	movs	r2, #2
 8000b64:	4619      	mov	r1, r3
 8000b66:	6878      	ldr	r0, [r7, #4]
 8000b68:	f001 fffa 	bl	8002b60 <HAL_SPI_Transmit_IT>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	b29b      	uxth	r3, r3
}
 8000b70:	4618      	mov	r0, r3
 8000b72:	3710      	adds	r7, #16
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	200001fa 	.word	0x200001fa

08000b7c <slave_resive_reg_data>:

// Resiving register value fregister master to set it to desired register
uint16_t slave_resive_reg_data(SPI_HandleTypeDef *hspi)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b084      	sub	sp, #16
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
	uint16_t data;
	HAL_StatusTypeDef err;
	err = HAL_SPI_Receive_IT(hspi, (uint8_t*) &data, 2);
 8000b84:	f107 030c 	add.w	r3, r7, #12
 8000b88:	2202      	movs	r2, #2
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	6878      	ldr	r0, [r7, #4]
 8000b8e:	f002 f875 	bl	8002c7c <HAL_SPI_Receive_IT>
 8000b92:	4603      	mov	r3, r0
 8000b94:	73fb      	strb	r3, [r7, #15]
	while (hspi->State != HAL_SPI_STATE_READY) {};
 8000b96:	bf00      	nop
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8000b9e:	b2db      	uxtb	r3, r3
 8000ba0:	2b01      	cmp	r3, #1
 8000ba2:	d1f9      	bne.n	8000b98 <slave_resive_reg_data+0x1c>
	if (!err)
 8000ba4:	7bfb      	ldrb	r3, [r7, #15]
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d108      	bne.n	8000bbc <slave_resive_reg_data+0x40>
		return (uint16_t) set_reg__(adress, data);
 8000baa:	4b07      	ldr	r3, [pc, #28]	; (8000bc8 <slave_resive_reg_data+0x4c>)
 8000bac:	781b      	ldrb	r3, [r3, #0]
 8000bae:	89ba      	ldrh	r2, [r7, #12]
 8000bb0:	4611      	mov	r1, r2
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f000 f83a 	bl	8000c2c <set_reg__>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	e001      	b.n	8000bc0 <slave_resive_reg_data+0x44>
	return (uint16_t) err;
 8000bbc:	7bfb      	ldrb	r3, [r7, #15]
 8000bbe:	b29b      	uxth	r3, r3
}
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	3710      	adds	r7, #16
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	200001fa 	.word	0x200001fa

08000bcc <slave_respond_to_master>:

uint16_t slave_respond_to_master(SPI_HandleTypeDef *hspi)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
	if (mod)
 8000bd4:	4b08      	ldr	r3, [pc, #32]	; (8000bf8 <slave_respond_to_master+0x2c>)
 8000bd6:	781b      	ldrb	r3, [r3, #0]
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d004      	beq.n	8000be6 <slave_respond_to_master+0x1a>
		return slave_resive_reg_data(hspi);
 8000bdc:	6878      	ldr	r0, [r7, #4]
 8000bde:	f7ff ffcd 	bl	8000b7c <slave_resive_reg_data>
 8000be2:	4603      	mov	r3, r0
 8000be4:	e003      	b.n	8000bee <slave_respond_to_master+0x22>
	else
		return slave_transimt_reg(hspi);
 8000be6:	6878      	ldr	r0, [r7, #4]
 8000be8:	f7ff ffae 	bl	8000b48 <slave_transimt_reg>
 8000bec:	4603      	mov	r3, r0
}
 8000bee:	4618      	mov	r0, r3
 8000bf0:	3708      	adds	r7, #8
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	20000000 	.word	0x20000000

08000bfc <get_reg>:
/*----------------------------------------------------------------*/

/*--------------Function helpers----------------*/
uint16_t get_reg(uint8_t adress)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b083      	sub	sp, #12
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	4603      	mov	r3, r0
 8000c04:	71fb      	strb	r3, [r7, #7]
	if (adress >= 0 && adress <= 7)
 8000c06:	79fb      	ldrb	r3, [r7, #7]
 8000c08:	2b07      	cmp	r3, #7
 8000c0a:	d804      	bhi.n	8000c16 <get_reg+0x1a>
		return regs[adress];
 8000c0c:	79fb      	ldrb	r3, [r7, #7]
 8000c0e:	4a06      	ldr	r2, [pc, #24]	; (8000c28 <get_reg+0x2c>)
 8000c10:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c14:	e001      	b.n	8000c1a <get_reg+0x1e>
	return (uint16_t) WRONG_ADRESS;
 8000c16:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	370c      	adds	r7, #12
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop
 8000c28:	20000004 	.word	0x20000004

08000c2c <set_reg__>:

uint16_t set_reg__(uint8_t adress, uint16_t data)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	b085      	sub	sp, #20
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	4603      	mov	r3, r0
 8000c34:	460a      	mov	r2, r1
 8000c36:	71fb      	strb	r3, [r7, #7]
 8000c38:	4613      	mov	r3, r2
 8000c3a:	80bb      	strh	r3, [r7, #4]
	if (data & (~masks[adress])) {
 8000c3c:	88ba      	ldrh	r2, [r7, #4]
 8000c3e:	79fb      	ldrb	r3, [r7, #7]
 8000c40:	490b      	ldr	r1, [pc, #44]	; (8000c70 <set_reg__+0x44>)
 8000c42:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000c46:	43db      	mvns	r3, r3
 8000c48:	4013      	ands	r3, r2
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d004      	beq.n	8000c58 <set_reg__+0x2c>
		uint16_t err = (uint16_t) WRONG_VAL;
 8000c4e:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8000c52:	81fb      	strh	r3, [r7, #14]
		return err;
 8000c54:	89fb      	ldrh	r3, [r7, #14]
 8000c56:	e005      	b.n	8000c64 <set_reg__+0x38>
	}
	regs[adress] = data;
 8000c58:	79fb      	ldrb	r3, [r7, #7]
 8000c5a:	4906      	ldr	r1, [pc, #24]	; (8000c74 <set_reg__+0x48>)
 8000c5c:	88ba      	ldrh	r2, [r7, #4]
 8000c5e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	return 0;
 8000c62:	2300      	movs	r3, #0
}
 8000c64:	4618      	mov	r0, r3
 8000c66:	3714      	adds	r7, #20
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6e:	4770      	bx	lr
 8000c70:	20000014 	.word	0x20000014
 8000c74:	20000004 	.word	0x20000004

08000c78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	b083      	sub	sp, #12
 8000c7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000c7e:	4b0f      	ldr	r3, [pc, #60]	; (8000cbc <HAL_MspInit+0x44>)
 8000c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c82:	4a0e      	ldr	r2, [pc, #56]	; (8000cbc <HAL_MspInit+0x44>)
 8000c84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c88:	6413      	str	r3, [r2, #64]	; 0x40
 8000c8a:	4b0c      	ldr	r3, [pc, #48]	; (8000cbc <HAL_MspInit+0x44>)
 8000c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c92:	607b      	str	r3, [r7, #4]
 8000c94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c96:	4b09      	ldr	r3, [pc, #36]	; (8000cbc <HAL_MspInit+0x44>)
 8000c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c9a:	4a08      	ldr	r2, [pc, #32]	; (8000cbc <HAL_MspInit+0x44>)
 8000c9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ca0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ca2:	4b06      	ldr	r3, [pc, #24]	; (8000cbc <HAL_MspInit+0x44>)
 8000ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ca6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000caa:	603b      	str	r3, [r7, #0]
 8000cac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cae:	bf00      	nop
 8000cb0:	370c      	adds	r7, #12
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop
 8000cbc:	40023800 	.word	0x40023800

08000cc0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b08c      	sub	sp, #48	; 0x30
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc8:	f107 031c 	add.w	r3, r7, #28
 8000ccc:	2200      	movs	r2, #0
 8000cce:	601a      	str	r2, [r3, #0]
 8000cd0:	605a      	str	r2, [r3, #4]
 8000cd2:	609a      	str	r2, [r3, #8]
 8000cd4:	60da      	str	r2, [r3, #12]
 8000cd6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4a45      	ldr	r2, [pc, #276]	; (8000df4 <HAL_SPI_MspInit+0x134>)
 8000cde:	4293      	cmp	r3, r2
 8000ce0:	d14e      	bne.n	8000d80 <HAL_SPI_MspInit+0xc0>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000ce2:	4b45      	ldr	r3, [pc, #276]	; (8000df8 <HAL_SPI_MspInit+0x138>)
 8000ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ce6:	4a44      	ldr	r2, [pc, #272]	; (8000df8 <HAL_SPI_MspInit+0x138>)
 8000ce8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cec:	6413      	str	r3, [r2, #64]	; 0x40
 8000cee:	4b42      	ldr	r3, [pc, #264]	; (8000df8 <HAL_SPI_MspInit+0x138>)
 8000cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cf6:	61bb      	str	r3, [r7, #24]
 8000cf8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cfa:	4b3f      	ldr	r3, [pc, #252]	; (8000df8 <HAL_SPI_MspInit+0x138>)
 8000cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfe:	4a3e      	ldr	r2, [pc, #248]	; (8000df8 <HAL_SPI_MspInit+0x138>)
 8000d00:	f043 0301 	orr.w	r3, r3, #1
 8000d04:	6313      	str	r3, [r2, #48]	; 0x30
 8000d06:	4b3c      	ldr	r3, [pc, #240]	; (8000df8 <HAL_SPI_MspInit+0x138>)
 8000d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0a:	f003 0301 	and.w	r3, r3, #1
 8000d0e:	617b      	str	r3, [r7, #20]
 8000d10:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d12:	4b39      	ldr	r3, [pc, #228]	; (8000df8 <HAL_SPI_MspInit+0x138>)
 8000d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d16:	4a38      	ldr	r2, [pc, #224]	; (8000df8 <HAL_SPI_MspInit+0x138>)
 8000d18:	f043 0302 	orr.w	r3, r3, #2
 8000d1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d1e:	4b36      	ldr	r3, [pc, #216]	; (8000df8 <HAL_SPI_MspInit+0x138>)
 8000d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d22:	f003 0302 	and.w	r3, r3, #2
 8000d26:	613b      	str	r3, [r7, #16]
 8000d28:	693b      	ldr	r3, [r7, #16]
    /**SPI2 GPIO Configuration
    PA12     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000d2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d30:	2302      	movs	r3, #2
 8000d32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d34:	2300      	movs	r3, #0
 8000d36:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d38:	2303      	movs	r3, #3
 8000d3a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d3c:	2305      	movs	r3, #5
 8000d3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d40:	f107 031c 	add.w	r3, r7, #28
 8000d44:	4619      	mov	r1, r3
 8000d46:	482d      	ldr	r0, [pc, #180]	; (8000dfc <HAL_SPI_MspInit+0x13c>)
 8000d48:	f000 fbf6 	bl	8001538 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000d4c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000d50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d52:	2302      	movs	r3, #2
 8000d54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d56:	2300      	movs	r3, #0
 8000d58:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d5a:	2303      	movs	r3, #3
 8000d5c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d5e:	2305      	movs	r3, #5
 8000d60:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d62:	f107 031c 	add.w	r3, r7, #28
 8000d66:	4619      	mov	r1, r3
 8000d68:	4825      	ldr	r0, [pc, #148]	; (8000e00 <HAL_SPI_MspInit+0x140>)
 8000d6a:	f000 fbe5 	bl	8001538 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8000d6e:	2200      	movs	r2, #0
 8000d70:	2100      	movs	r1, #0
 8000d72:	2024      	movs	r0, #36	; 0x24
 8000d74:	f000 fb17 	bl	80013a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8000d78:	2024      	movs	r0, #36	; 0x24
 8000d7a:	f000 fb30 	bl	80013de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8000d7e:	e035      	b.n	8000dec <HAL_SPI_MspInit+0x12c>
  else if(hspi->Instance==SPI5)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	4a1f      	ldr	r2, [pc, #124]	; (8000e04 <HAL_SPI_MspInit+0x144>)
 8000d86:	4293      	cmp	r3, r2
 8000d88:	d130      	bne.n	8000dec <HAL_SPI_MspInit+0x12c>
    __HAL_RCC_SPI5_CLK_ENABLE();
 8000d8a:	4b1b      	ldr	r3, [pc, #108]	; (8000df8 <HAL_SPI_MspInit+0x138>)
 8000d8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d8e:	4a1a      	ldr	r2, [pc, #104]	; (8000df8 <HAL_SPI_MspInit+0x138>)
 8000d90:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000d94:	6453      	str	r3, [r2, #68]	; 0x44
 8000d96:	4b18      	ldr	r3, [pc, #96]	; (8000df8 <HAL_SPI_MspInit+0x138>)
 8000d98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d9e:	60fb      	str	r3, [r7, #12]
 8000da0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000da2:	4b15      	ldr	r3, [pc, #84]	; (8000df8 <HAL_SPI_MspInit+0x138>)
 8000da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da6:	4a14      	ldr	r2, [pc, #80]	; (8000df8 <HAL_SPI_MspInit+0x138>)
 8000da8:	f043 0320 	orr.w	r3, r3, #32
 8000dac:	6313      	str	r3, [r2, #48]	; 0x30
 8000dae:	4b12      	ldr	r3, [pc, #72]	; (8000df8 <HAL_SPI_MspInit+0x138>)
 8000db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db2:	f003 0320 	and.w	r3, r3, #32
 8000db6:	60bb      	str	r3, [r7, #8]
 8000db8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_8;
 8000dba:	f44f 7360 	mov.w	r3, #896	; 0x380
 8000dbe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc0:	2302      	movs	r3, #2
 8000dc2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dc8:	2303      	movs	r3, #3
 8000dca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8000dcc:	2305      	movs	r3, #5
 8000dce:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000dd0:	f107 031c 	add.w	r3, r7, #28
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	480c      	ldr	r0, [pc, #48]	; (8000e08 <HAL_SPI_MspInit+0x148>)
 8000dd8:	f000 fbae 	bl	8001538 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI5_IRQn, 0, 0);
 8000ddc:	2200      	movs	r2, #0
 8000dde:	2100      	movs	r1, #0
 8000de0:	2055      	movs	r0, #85	; 0x55
 8000de2:	f000 fae0 	bl	80013a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI5_IRQn);
 8000de6:	2055      	movs	r0, #85	; 0x55
 8000de8:	f000 faf9 	bl	80013de <HAL_NVIC_EnableIRQ>
}
 8000dec:	bf00      	nop
 8000dee:	3730      	adds	r7, #48	; 0x30
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	40003800 	.word	0x40003800
 8000df8:	40023800 	.word	0x40023800
 8000dfc:	40020000 	.word	0x40020000
 8000e00:	40020400 	.word	0x40020400
 8000e04:	40015000 	.word	0x40015000
 8000e08:	40021400 	.word	0x40021400

08000e0c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b0ae      	sub	sp, #184	; 0xb8
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e14:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000e18:	2200      	movs	r2, #0
 8000e1a:	601a      	str	r2, [r3, #0]
 8000e1c:	605a      	str	r2, [r3, #4]
 8000e1e:	609a      	str	r2, [r3, #8]
 8000e20:	60da      	str	r2, [r3, #12]
 8000e22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e24:	f107 0314 	add.w	r3, r7, #20
 8000e28:	2290      	movs	r2, #144	; 0x90
 8000e2a:	2100      	movs	r1, #0
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f004 f895 	bl	8004f5c <memset>
  if(huart->Instance==USART1)
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	4a25      	ldr	r2, [pc, #148]	; (8000ecc <HAL_UART_MspInit+0xc0>)
 8000e38:	4293      	cmp	r3, r2
 8000e3a:	d142      	bne.n	8000ec2 <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000e3c:	2340      	movs	r3, #64	; 0x40
 8000e3e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000e40:	2300      	movs	r3, #0
 8000e42:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e44:	f107 0314 	add.w	r3, r7, #20
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f001 f9b5 	bl	80021b8 <HAL_RCCEx_PeriphCLKConfig>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d001      	beq.n	8000e58 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000e54:	f7ff fe00 	bl	8000a58 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e58:	4b1d      	ldr	r3, [pc, #116]	; (8000ed0 <HAL_UART_MspInit+0xc4>)
 8000e5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e5c:	4a1c      	ldr	r2, [pc, #112]	; (8000ed0 <HAL_UART_MspInit+0xc4>)
 8000e5e:	f043 0310 	orr.w	r3, r3, #16
 8000e62:	6453      	str	r3, [r2, #68]	; 0x44
 8000e64:	4b1a      	ldr	r3, [pc, #104]	; (8000ed0 <HAL_UART_MspInit+0xc4>)
 8000e66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e68:	f003 0310 	and.w	r3, r3, #16
 8000e6c:	613b      	str	r3, [r7, #16]
 8000e6e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e70:	4b17      	ldr	r3, [pc, #92]	; (8000ed0 <HAL_UART_MspInit+0xc4>)
 8000e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e74:	4a16      	ldr	r2, [pc, #88]	; (8000ed0 <HAL_UART_MspInit+0xc4>)
 8000e76:	f043 0302 	orr.w	r3, r3, #2
 8000e7a:	6313      	str	r3, [r2, #48]	; 0x30
 8000e7c:	4b14      	ldr	r3, [pc, #80]	; (8000ed0 <HAL_UART_MspInit+0xc4>)
 8000e7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e80:	f003 0302 	and.w	r3, r3, #2
 8000e84:	60fb      	str	r3, [r7, #12]
 8000e86:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8000e88:	23c0      	movs	r3, #192	; 0xc0
 8000e8a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e8e:	2302      	movs	r3, #2
 8000e90:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e94:	2300      	movs	r3, #0
 8000e96:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e9a:	2303      	movs	r3, #3
 8000e9c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000ea0:	2307      	movs	r3, #7
 8000ea2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ea6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000eaa:	4619      	mov	r1, r3
 8000eac:	4809      	ldr	r0, [pc, #36]	; (8000ed4 <HAL_UART_MspInit+0xc8>)
 8000eae:	f000 fb43 	bl	8001538 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	2100      	movs	r1, #0
 8000eb6:	2025      	movs	r0, #37	; 0x25
 8000eb8:	f000 fa75 	bl	80013a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000ebc:	2025      	movs	r0, #37	; 0x25
 8000ebe:	f000 fa8e 	bl	80013de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000ec2:	bf00      	nop
 8000ec4:	37b8      	adds	r7, #184	; 0xb8
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	40011000 	.word	0x40011000
 8000ed0:	40023800 	.word	0x40023800
 8000ed4:	40020400 	.word	0x40020400

08000ed8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000edc:	e7fe      	b.n	8000edc <NMI_Handler+0x4>

08000ede <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ede:	b480      	push	{r7}
 8000ee0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ee2:	e7fe      	b.n	8000ee2 <HardFault_Handler+0x4>

08000ee4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ee8:	e7fe      	b.n	8000ee8 <MemManage_Handler+0x4>

08000eea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eea:	b480      	push	{r7}
 8000eec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eee:	e7fe      	b.n	8000eee <BusFault_Handler+0x4>

08000ef0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ef4:	e7fe      	b.n	8000ef4 <UsageFault_Handler+0x4>

08000ef6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ef6:	b480      	push	{r7}
 8000ef8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000efa:	bf00      	nop
 8000efc:	46bd      	mov	sp, r7
 8000efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f02:	4770      	bx	lr

08000f04 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f08:	bf00      	nop
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr

08000f12 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f12:	b480      	push	{r7}
 8000f14:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f16:	bf00      	nop
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr

08000f20 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f24:	f000 f920 	bl	8001168 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f28:	bf00      	nop
 8000f2a:	bd80      	pop	{r7, pc}

08000f2c <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8000f30:	4802      	ldr	r0, [pc, #8]	; (8000f3c <SPI2_IRQHandler+0x10>)
 8000f32:	f002 f803 	bl	8002f3c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8000f36:	bf00      	nop
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	200000a8 	.word	0x200000a8

08000f40 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000f44:	4802      	ldr	r0, [pc, #8]	; (8000f50 <USART1_IRQHandler+0x10>)
 8000f46:	f002 fe31 	bl	8003bac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000f4a:	bf00      	nop
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	20000170 	.word	0x20000170

08000f54 <SPI5_IRQHandler>:

/**
  * @brief This function handles SPI5 global interrupt.
  */
void SPI5_IRQHandler(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI5_IRQn 0 */

  /* USER CODE END SPI5_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi5);
 8000f58:	4802      	ldr	r0, [pc, #8]	; (8000f64 <SPI5_IRQHandler+0x10>)
 8000f5a:	f001 ffef 	bl	8002f3c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI5_IRQn 1 */

  /* USER CODE END SPI5_IRQn 1 */
}
 8000f5e:	bf00      	nop
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	2000010c 	.word	0x2000010c

08000f68 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b086      	sub	sp, #24
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	60f8      	str	r0, [r7, #12]
 8000f70:	60b9      	str	r1, [r7, #8]
 8000f72:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f74:	2300      	movs	r3, #0
 8000f76:	617b      	str	r3, [r7, #20]
 8000f78:	e00a      	b.n	8000f90 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000f7a:	f3af 8000 	nop.w
 8000f7e:	4601      	mov	r1, r0
 8000f80:	68bb      	ldr	r3, [r7, #8]
 8000f82:	1c5a      	adds	r2, r3, #1
 8000f84:	60ba      	str	r2, [r7, #8]
 8000f86:	b2ca      	uxtb	r2, r1
 8000f88:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f8a:	697b      	ldr	r3, [r7, #20]
 8000f8c:	3301      	adds	r3, #1
 8000f8e:	617b      	str	r3, [r7, #20]
 8000f90:	697a      	ldr	r2, [r7, #20]
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	429a      	cmp	r2, r3
 8000f96:	dbf0      	blt.n	8000f7a <_read+0x12>
  }

  return len;
 8000f98:	687b      	ldr	r3, [r7, #4]
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	3718      	adds	r7, #24
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}

08000fa2 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000fa2:	b480      	push	{r7}
 8000fa4:	b083      	sub	sp, #12
 8000fa6:	af00      	add	r7, sp, #0
 8000fa8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000faa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	370c      	adds	r7, #12
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr

08000fba <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000fba:	b480      	push	{r7}
 8000fbc:	b083      	sub	sp, #12
 8000fbe:	af00      	add	r7, sp, #0
 8000fc0:	6078      	str	r0, [r7, #4]
 8000fc2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000fca:	605a      	str	r2, [r3, #4]
  return 0;
 8000fcc:	2300      	movs	r3, #0
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	370c      	adds	r7, #12
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr

08000fda <_isatty>:

int _isatty(int file)
{
 8000fda:	b480      	push	{r7}
 8000fdc:	b083      	sub	sp, #12
 8000fde:	af00      	add	r7, sp, #0
 8000fe0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000fe2:	2301      	movs	r3, #1
}
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	370c      	adds	r7, #12
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr

08000ff0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b085      	sub	sp, #20
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	60f8      	str	r0, [r7, #12]
 8000ff8:	60b9      	str	r1, [r7, #8]
 8000ffa:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000ffc:	2300      	movs	r3, #0
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	3714      	adds	r7, #20
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr
	...

0800100c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b086      	sub	sp, #24
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001014:	4a14      	ldr	r2, [pc, #80]	; (8001068 <_sbrk+0x5c>)
 8001016:	4b15      	ldr	r3, [pc, #84]	; (800106c <_sbrk+0x60>)
 8001018:	1ad3      	subs	r3, r2, r3
 800101a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001020:	4b13      	ldr	r3, [pc, #76]	; (8001070 <_sbrk+0x64>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	2b00      	cmp	r3, #0
 8001026:	d102      	bne.n	800102e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001028:	4b11      	ldr	r3, [pc, #68]	; (8001070 <_sbrk+0x64>)
 800102a:	4a12      	ldr	r2, [pc, #72]	; (8001074 <_sbrk+0x68>)
 800102c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800102e:	4b10      	ldr	r3, [pc, #64]	; (8001070 <_sbrk+0x64>)
 8001030:	681a      	ldr	r2, [r3, #0]
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	4413      	add	r3, r2
 8001036:	693a      	ldr	r2, [r7, #16]
 8001038:	429a      	cmp	r2, r3
 800103a:	d207      	bcs.n	800104c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800103c:	f003 ffdc 	bl	8004ff8 <__errno>
 8001040:	4603      	mov	r3, r0
 8001042:	220c      	movs	r2, #12
 8001044:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001046:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800104a:	e009      	b.n	8001060 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800104c:	4b08      	ldr	r3, [pc, #32]	; (8001070 <_sbrk+0x64>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001052:	4b07      	ldr	r3, [pc, #28]	; (8001070 <_sbrk+0x64>)
 8001054:	681a      	ldr	r2, [r3, #0]
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	4413      	add	r3, r2
 800105a:	4a05      	ldr	r2, [pc, #20]	; (8001070 <_sbrk+0x64>)
 800105c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800105e:	68fb      	ldr	r3, [r7, #12]
}
 8001060:	4618      	mov	r0, r3
 8001062:	3718      	adds	r7, #24
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	20080000 	.word	0x20080000
 800106c:	00000400 	.word	0x00000400
 8001070:	200001fc 	.word	0x200001fc
 8001074:	20000350 	.word	0x20000350

08001078 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800107c:	4b06      	ldr	r3, [pc, #24]	; (8001098 <SystemInit+0x20>)
 800107e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001082:	4a05      	ldr	r2, [pc, #20]	; (8001098 <SystemInit+0x20>)
 8001084:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001088:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800108c:	bf00      	nop
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop
 8001098:	e000ed00 	.word	0xe000ed00

0800109c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800109c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010d4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80010a0:	480d      	ldr	r0, [pc, #52]	; (80010d8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80010a2:	490e      	ldr	r1, [pc, #56]	; (80010dc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80010a4:	4a0e      	ldr	r2, [pc, #56]	; (80010e0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80010a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010a8:	e002      	b.n	80010b0 <LoopCopyDataInit>

080010aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010ae:	3304      	adds	r3, #4

080010b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010b4:	d3f9      	bcc.n	80010aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010b6:	4a0b      	ldr	r2, [pc, #44]	; (80010e4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80010b8:	4c0b      	ldr	r4, [pc, #44]	; (80010e8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80010ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010bc:	e001      	b.n	80010c2 <LoopFillZerobss>

080010be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010c0:	3204      	adds	r2, #4

080010c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010c4:	d3fb      	bcc.n	80010be <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80010c6:	f7ff ffd7 	bl	8001078 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010ca:	f003 ff9b 	bl	8005004 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010ce:	f7ff fafd 	bl	80006cc <main>
  bx  lr    
 80010d2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80010d4:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80010d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010dc:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 80010e0:	08005b7c 	.word	0x08005b7c
  ldr r2, =_sbss
 80010e4:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 80010e8:	20000350 	.word	0x20000350

080010ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010ec:	e7fe      	b.n	80010ec <ADC_IRQHandler>

080010ee <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010ee:	b580      	push	{r7, lr}
 80010f0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010f2:	2003      	movs	r0, #3
 80010f4:	f000 f94c 	bl	8001390 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010f8:	200f      	movs	r0, #15
 80010fa:	f000 f805 	bl	8001108 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010fe:	f7ff fdbb 	bl	8000c78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001102:	2300      	movs	r3, #0
}
 8001104:	4618      	mov	r0, r3
 8001106:	bd80      	pop	{r7, pc}

08001108 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001110:	4b12      	ldr	r3, [pc, #72]	; (800115c <HAL_InitTick+0x54>)
 8001112:	681a      	ldr	r2, [r3, #0]
 8001114:	4b12      	ldr	r3, [pc, #72]	; (8001160 <HAL_InitTick+0x58>)
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	4619      	mov	r1, r3
 800111a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800111e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001122:	fbb2 f3f3 	udiv	r3, r2, r3
 8001126:	4618      	mov	r0, r3
 8001128:	f000 f967 	bl	80013fa <HAL_SYSTICK_Config>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d001      	beq.n	8001136 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001132:	2301      	movs	r3, #1
 8001134:	e00e      	b.n	8001154 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	2b0f      	cmp	r3, #15
 800113a:	d80a      	bhi.n	8001152 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800113c:	2200      	movs	r2, #0
 800113e:	6879      	ldr	r1, [r7, #4]
 8001140:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001144:	f000 f92f 	bl	80013a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001148:	4a06      	ldr	r2, [pc, #24]	; (8001164 <HAL_InitTick+0x5c>)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800114e:	2300      	movs	r3, #0
 8001150:	e000      	b.n	8001154 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001152:	2301      	movs	r3, #1
}
 8001154:	4618      	mov	r0, r3
 8001156:	3708      	adds	r7, #8
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	20000024 	.word	0x20000024
 8001160:	2000002c 	.word	0x2000002c
 8001164:	20000028 	.word	0x20000028

08001168 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800116c:	4b06      	ldr	r3, [pc, #24]	; (8001188 <HAL_IncTick+0x20>)
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	461a      	mov	r2, r3
 8001172:	4b06      	ldr	r3, [pc, #24]	; (800118c <HAL_IncTick+0x24>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4413      	add	r3, r2
 8001178:	4a04      	ldr	r2, [pc, #16]	; (800118c <HAL_IncTick+0x24>)
 800117a:	6013      	str	r3, [r2, #0]
}
 800117c:	bf00      	nop
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop
 8001188:	2000002c 	.word	0x2000002c
 800118c:	20000200 	.word	0x20000200

08001190 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
  return uwTick;
 8001194:	4b03      	ldr	r3, [pc, #12]	; (80011a4 <HAL_GetTick+0x14>)
 8001196:	681b      	ldr	r3, [r3, #0]
}
 8001198:	4618      	mov	r0, r3
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr
 80011a2:	bf00      	nop
 80011a4:	20000200 	.word	0x20000200

080011a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b084      	sub	sp, #16
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011b0:	f7ff ffee 	bl	8001190 <HAL_GetTick>
 80011b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80011c0:	d005      	beq.n	80011ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011c2:	4b0a      	ldr	r3, [pc, #40]	; (80011ec <HAL_Delay+0x44>)
 80011c4:	781b      	ldrb	r3, [r3, #0]
 80011c6:	461a      	mov	r2, r3
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	4413      	add	r3, r2
 80011cc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011ce:	bf00      	nop
 80011d0:	f7ff ffde 	bl	8001190 <HAL_GetTick>
 80011d4:	4602      	mov	r2, r0
 80011d6:	68bb      	ldr	r3, [r7, #8]
 80011d8:	1ad3      	subs	r3, r2, r3
 80011da:	68fa      	ldr	r2, [r7, #12]
 80011dc:	429a      	cmp	r2, r3
 80011de:	d8f7      	bhi.n	80011d0 <HAL_Delay+0x28>
  {
  }
}
 80011e0:	bf00      	nop
 80011e2:	bf00      	nop
 80011e4:	3710      	adds	r7, #16
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	2000002c 	.word	0x2000002c

080011f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011f0:	b480      	push	{r7}
 80011f2:	b085      	sub	sp, #20
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	f003 0307 	and.w	r3, r3, #7
 80011fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001200:	4b0b      	ldr	r3, [pc, #44]	; (8001230 <__NVIC_SetPriorityGrouping+0x40>)
 8001202:	68db      	ldr	r3, [r3, #12]
 8001204:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001206:	68ba      	ldr	r2, [r7, #8]
 8001208:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800120c:	4013      	ands	r3, r2
 800120e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001214:	68bb      	ldr	r3, [r7, #8]
 8001216:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001218:	4b06      	ldr	r3, [pc, #24]	; (8001234 <__NVIC_SetPriorityGrouping+0x44>)
 800121a:	4313      	orrs	r3, r2
 800121c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800121e:	4a04      	ldr	r2, [pc, #16]	; (8001230 <__NVIC_SetPriorityGrouping+0x40>)
 8001220:	68bb      	ldr	r3, [r7, #8]
 8001222:	60d3      	str	r3, [r2, #12]
}
 8001224:	bf00      	nop
 8001226:	3714      	adds	r7, #20
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr
 8001230:	e000ed00 	.word	0xe000ed00
 8001234:	05fa0000 	.word	0x05fa0000

08001238 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800123c:	4b04      	ldr	r3, [pc, #16]	; (8001250 <__NVIC_GetPriorityGrouping+0x18>)
 800123e:	68db      	ldr	r3, [r3, #12]
 8001240:	0a1b      	lsrs	r3, r3, #8
 8001242:	f003 0307 	and.w	r3, r3, #7
}
 8001246:	4618      	mov	r0, r3
 8001248:	46bd      	mov	sp, r7
 800124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124e:	4770      	bx	lr
 8001250:	e000ed00 	.word	0xe000ed00

08001254 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001254:	b480      	push	{r7}
 8001256:	b083      	sub	sp, #12
 8001258:	af00      	add	r7, sp, #0
 800125a:	4603      	mov	r3, r0
 800125c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800125e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001262:	2b00      	cmp	r3, #0
 8001264:	db0b      	blt.n	800127e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001266:	79fb      	ldrb	r3, [r7, #7]
 8001268:	f003 021f 	and.w	r2, r3, #31
 800126c:	4907      	ldr	r1, [pc, #28]	; (800128c <__NVIC_EnableIRQ+0x38>)
 800126e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001272:	095b      	lsrs	r3, r3, #5
 8001274:	2001      	movs	r0, #1
 8001276:	fa00 f202 	lsl.w	r2, r0, r2
 800127a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800127e:	bf00      	nop
 8001280:	370c      	adds	r7, #12
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr
 800128a:	bf00      	nop
 800128c:	e000e100 	.word	0xe000e100

08001290 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001290:	b480      	push	{r7}
 8001292:	b083      	sub	sp, #12
 8001294:	af00      	add	r7, sp, #0
 8001296:	4603      	mov	r3, r0
 8001298:	6039      	str	r1, [r7, #0]
 800129a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800129c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	db0a      	blt.n	80012ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	b2da      	uxtb	r2, r3
 80012a8:	490c      	ldr	r1, [pc, #48]	; (80012dc <__NVIC_SetPriority+0x4c>)
 80012aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ae:	0112      	lsls	r2, r2, #4
 80012b0:	b2d2      	uxtb	r2, r2
 80012b2:	440b      	add	r3, r1
 80012b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012b8:	e00a      	b.n	80012d0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	b2da      	uxtb	r2, r3
 80012be:	4908      	ldr	r1, [pc, #32]	; (80012e0 <__NVIC_SetPriority+0x50>)
 80012c0:	79fb      	ldrb	r3, [r7, #7]
 80012c2:	f003 030f 	and.w	r3, r3, #15
 80012c6:	3b04      	subs	r3, #4
 80012c8:	0112      	lsls	r2, r2, #4
 80012ca:	b2d2      	uxtb	r2, r2
 80012cc:	440b      	add	r3, r1
 80012ce:	761a      	strb	r2, [r3, #24]
}
 80012d0:	bf00      	nop
 80012d2:	370c      	adds	r7, #12
 80012d4:	46bd      	mov	sp, r7
 80012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012da:	4770      	bx	lr
 80012dc:	e000e100 	.word	0xe000e100
 80012e0:	e000ed00 	.word	0xe000ed00

080012e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b089      	sub	sp, #36	; 0x24
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	60f8      	str	r0, [r7, #12]
 80012ec:	60b9      	str	r1, [r7, #8]
 80012ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	f003 0307 	and.w	r3, r3, #7
 80012f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012f8:	69fb      	ldr	r3, [r7, #28]
 80012fa:	f1c3 0307 	rsb	r3, r3, #7
 80012fe:	2b04      	cmp	r3, #4
 8001300:	bf28      	it	cs
 8001302:	2304      	movcs	r3, #4
 8001304:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001306:	69fb      	ldr	r3, [r7, #28]
 8001308:	3304      	adds	r3, #4
 800130a:	2b06      	cmp	r3, #6
 800130c:	d902      	bls.n	8001314 <NVIC_EncodePriority+0x30>
 800130e:	69fb      	ldr	r3, [r7, #28]
 8001310:	3b03      	subs	r3, #3
 8001312:	e000      	b.n	8001316 <NVIC_EncodePriority+0x32>
 8001314:	2300      	movs	r3, #0
 8001316:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001318:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800131c:	69bb      	ldr	r3, [r7, #24]
 800131e:	fa02 f303 	lsl.w	r3, r2, r3
 8001322:	43da      	mvns	r2, r3
 8001324:	68bb      	ldr	r3, [r7, #8]
 8001326:	401a      	ands	r2, r3
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800132c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	fa01 f303 	lsl.w	r3, r1, r3
 8001336:	43d9      	mvns	r1, r3
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800133c:	4313      	orrs	r3, r2
         );
}
 800133e:	4618      	mov	r0, r3
 8001340:	3724      	adds	r7, #36	; 0x24
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr
	...

0800134c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	3b01      	subs	r3, #1
 8001358:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800135c:	d301      	bcc.n	8001362 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800135e:	2301      	movs	r3, #1
 8001360:	e00f      	b.n	8001382 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001362:	4a0a      	ldr	r2, [pc, #40]	; (800138c <SysTick_Config+0x40>)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	3b01      	subs	r3, #1
 8001368:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800136a:	210f      	movs	r1, #15
 800136c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001370:	f7ff ff8e 	bl	8001290 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001374:	4b05      	ldr	r3, [pc, #20]	; (800138c <SysTick_Config+0x40>)
 8001376:	2200      	movs	r2, #0
 8001378:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800137a:	4b04      	ldr	r3, [pc, #16]	; (800138c <SysTick_Config+0x40>)
 800137c:	2207      	movs	r2, #7
 800137e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001380:	2300      	movs	r3, #0
}
 8001382:	4618      	mov	r0, r3
 8001384:	3708      	adds	r7, #8
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	e000e010 	.word	0xe000e010

08001390 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001398:	6878      	ldr	r0, [r7, #4]
 800139a:	f7ff ff29 	bl	80011f0 <__NVIC_SetPriorityGrouping>
}
 800139e:	bf00      	nop
 80013a0:	3708      	adds	r7, #8
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}

080013a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013a6:	b580      	push	{r7, lr}
 80013a8:	b086      	sub	sp, #24
 80013aa:	af00      	add	r7, sp, #0
 80013ac:	4603      	mov	r3, r0
 80013ae:	60b9      	str	r1, [r7, #8]
 80013b0:	607a      	str	r2, [r7, #4]
 80013b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80013b4:	2300      	movs	r3, #0
 80013b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013b8:	f7ff ff3e 	bl	8001238 <__NVIC_GetPriorityGrouping>
 80013bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013be:	687a      	ldr	r2, [r7, #4]
 80013c0:	68b9      	ldr	r1, [r7, #8]
 80013c2:	6978      	ldr	r0, [r7, #20]
 80013c4:	f7ff ff8e 	bl	80012e4 <NVIC_EncodePriority>
 80013c8:	4602      	mov	r2, r0
 80013ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013ce:	4611      	mov	r1, r2
 80013d0:	4618      	mov	r0, r3
 80013d2:	f7ff ff5d 	bl	8001290 <__NVIC_SetPriority>
}
 80013d6:	bf00      	nop
 80013d8:	3718      	adds	r7, #24
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}

080013de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013de:	b580      	push	{r7, lr}
 80013e0:	b082      	sub	sp, #8
 80013e2:	af00      	add	r7, sp, #0
 80013e4:	4603      	mov	r3, r0
 80013e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ec:	4618      	mov	r0, r3
 80013ee:	f7ff ff31 	bl	8001254 <__NVIC_EnableIRQ>
}
 80013f2:	bf00      	nop
 80013f4:	3708      	adds	r7, #8
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}

080013fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013fa:	b580      	push	{r7, lr}
 80013fc:	b082      	sub	sp, #8
 80013fe:	af00      	add	r7, sp, #0
 8001400:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001402:	6878      	ldr	r0, [r7, #4]
 8001404:	f7ff ffa2 	bl	800134c <SysTick_Config>
 8001408:	4603      	mov	r3, r0
}
 800140a:	4618      	mov	r0, r3
 800140c:	3708      	adds	r7, #8
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}

08001412 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001412:	b580      	push	{r7, lr}
 8001414:	b084      	sub	sp, #16
 8001416:	af00      	add	r7, sp, #0
 8001418:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800141e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001420:	f7ff feb6 	bl	8001190 <HAL_GetTick>
 8001424:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800142c:	b2db      	uxtb	r3, r3
 800142e:	2b02      	cmp	r3, #2
 8001430:	d008      	beq.n	8001444 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	2280      	movs	r2, #128	; 0x80
 8001436:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	2200      	movs	r2, #0
 800143c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001440:	2301      	movs	r3, #1
 8001442:	e052      	b.n	80014ea <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	681a      	ldr	r2, [r3, #0]
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f022 0216 	bic.w	r2, r2, #22
 8001452:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	695a      	ldr	r2, [r3, #20]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001462:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001468:	2b00      	cmp	r3, #0
 800146a:	d103      	bne.n	8001474 <HAL_DMA_Abort+0x62>
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001470:	2b00      	cmp	r3, #0
 8001472:	d007      	beq.n	8001484 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	681a      	ldr	r2, [r3, #0]
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f022 0208 	bic.w	r2, r2, #8
 8001482:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	681a      	ldr	r2, [r3, #0]
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f022 0201 	bic.w	r2, r2, #1
 8001492:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001494:	e013      	b.n	80014be <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001496:	f7ff fe7b 	bl	8001190 <HAL_GetTick>
 800149a:	4602      	mov	r2, r0
 800149c:	68bb      	ldr	r3, [r7, #8]
 800149e:	1ad3      	subs	r3, r2, r3
 80014a0:	2b05      	cmp	r3, #5
 80014a2:	d90c      	bls.n	80014be <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2220      	movs	r2, #32
 80014a8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	2203      	movs	r2, #3
 80014ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	2200      	movs	r2, #0
 80014b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 80014ba:	2303      	movs	r3, #3
 80014bc:	e015      	b.n	80014ea <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f003 0301 	and.w	r3, r3, #1
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d1e4      	bne.n	8001496 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014d0:	223f      	movs	r2, #63	; 0x3f
 80014d2:	409a      	lsls	r2, r3
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	2201      	movs	r2, #1
 80014dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2200      	movs	r2, #0
 80014e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 80014e8:	2300      	movs	r3, #0
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	3710      	adds	r7, #16
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}

080014f2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80014f2:	b480      	push	{r7}
 80014f4:	b083      	sub	sp, #12
 80014f6:	af00      	add	r7, sp, #0
 80014f8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001500:	b2db      	uxtb	r3, r3
 8001502:	2b02      	cmp	r3, #2
 8001504:	d004      	beq.n	8001510 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	2280      	movs	r2, #128	; 0x80
 800150a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800150c:	2301      	movs	r3, #1
 800150e:	e00c      	b.n	800152a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2205      	movs	r2, #5
 8001514:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	681a      	ldr	r2, [r3, #0]
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f022 0201 	bic.w	r2, r2, #1
 8001526:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001528:	2300      	movs	r3, #0
}
 800152a:	4618      	mov	r0, r3
 800152c:	370c      	adds	r7, #12
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr
	...

08001538 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001538:	b480      	push	{r7}
 800153a:	b089      	sub	sp, #36	; 0x24
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
 8001540:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001542:	2300      	movs	r3, #0
 8001544:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001546:	2300      	movs	r3, #0
 8001548:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800154a:	2300      	movs	r3, #0
 800154c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800154e:	2300      	movs	r3, #0
 8001550:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001552:	2300      	movs	r3, #0
 8001554:	61fb      	str	r3, [r7, #28]
 8001556:	e175      	b.n	8001844 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001558:	2201      	movs	r2, #1
 800155a:	69fb      	ldr	r3, [r7, #28]
 800155c:	fa02 f303 	lsl.w	r3, r2, r3
 8001560:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	697a      	ldr	r2, [r7, #20]
 8001568:	4013      	ands	r3, r2
 800156a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800156c:	693a      	ldr	r2, [r7, #16]
 800156e:	697b      	ldr	r3, [r7, #20]
 8001570:	429a      	cmp	r2, r3
 8001572:	f040 8164 	bne.w	800183e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	f003 0303 	and.w	r3, r3, #3
 800157e:	2b01      	cmp	r3, #1
 8001580:	d005      	beq.n	800158e <HAL_GPIO_Init+0x56>
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	f003 0303 	and.w	r3, r3, #3
 800158a:	2b02      	cmp	r3, #2
 800158c:	d130      	bne.n	80015f0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	689b      	ldr	r3, [r3, #8]
 8001592:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001594:	69fb      	ldr	r3, [r7, #28]
 8001596:	005b      	lsls	r3, r3, #1
 8001598:	2203      	movs	r2, #3
 800159a:	fa02 f303 	lsl.w	r3, r2, r3
 800159e:	43db      	mvns	r3, r3
 80015a0:	69ba      	ldr	r2, [r7, #24]
 80015a2:	4013      	ands	r3, r2
 80015a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	68da      	ldr	r2, [r3, #12]
 80015aa:	69fb      	ldr	r3, [r7, #28]
 80015ac:	005b      	lsls	r3, r3, #1
 80015ae:	fa02 f303 	lsl.w	r3, r2, r3
 80015b2:	69ba      	ldr	r2, [r7, #24]
 80015b4:	4313      	orrs	r3, r2
 80015b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	69ba      	ldr	r2, [r7, #24]
 80015bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80015c4:	2201      	movs	r2, #1
 80015c6:	69fb      	ldr	r3, [r7, #28]
 80015c8:	fa02 f303 	lsl.w	r3, r2, r3
 80015cc:	43db      	mvns	r3, r3
 80015ce:	69ba      	ldr	r2, [r7, #24]
 80015d0:	4013      	ands	r3, r2
 80015d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	091b      	lsrs	r3, r3, #4
 80015da:	f003 0201 	and.w	r2, r3, #1
 80015de:	69fb      	ldr	r3, [r7, #28]
 80015e0:	fa02 f303 	lsl.w	r3, r2, r3
 80015e4:	69ba      	ldr	r2, [r7, #24]
 80015e6:	4313      	orrs	r3, r2
 80015e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	69ba      	ldr	r2, [r7, #24]
 80015ee:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	f003 0303 	and.w	r3, r3, #3
 80015f8:	2b03      	cmp	r3, #3
 80015fa:	d017      	beq.n	800162c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	68db      	ldr	r3, [r3, #12]
 8001600:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001602:	69fb      	ldr	r3, [r7, #28]
 8001604:	005b      	lsls	r3, r3, #1
 8001606:	2203      	movs	r2, #3
 8001608:	fa02 f303 	lsl.w	r3, r2, r3
 800160c:	43db      	mvns	r3, r3
 800160e:	69ba      	ldr	r2, [r7, #24]
 8001610:	4013      	ands	r3, r2
 8001612:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	689a      	ldr	r2, [r3, #8]
 8001618:	69fb      	ldr	r3, [r7, #28]
 800161a:	005b      	lsls	r3, r3, #1
 800161c:	fa02 f303 	lsl.w	r3, r2, r3
 8001620:	69ba      	ldr	r2, [r7, #24]
 8001622:	4313      	orrs	r3, r2
 8001624:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	69ba      	ldr	r2, [r7, #24]
 800162a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	f003 0303 	and.w	r3, r3, #3
 8001634:	2b02      	cmp	r3, #2
 8001636:	d123      	bne.n	8001680 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001638:	69fb      	ldr	r3, [r7, #28]
 800163a:	08da      	lsrs	r2, r3, #3
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	3208      	adds	r2, #8
 8001640:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001644:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001646:	69fb      	ldr	r3, [r7, #28]
 8001648:	f003 0307 	and.w	r3, r3, #7
 800164c:	009b      	lsls	r3, r3, #2
 800164e:	220f      	movs	r2, #15
 8001650:	fa02 f303 	lsl.w	r3, r2, r3
 8001654:	43db      	mvns	r3, r3
 8001656:	69ba      	ldr	r2, [r7, #24]
 8001658:	4013      	ands	r3, r2
 800165a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	691a      	ldr	r2, [r3, #16]
 8001660:	69fb      	ldr	r3, [r7, #28]
 8001662:	f003 0307 	and.w	r3, r3, #7
 8001666:	009b      	lsls	r3, r3, #2
 8001668:	fa02 f303 	lsl.w	r3, r2, r3
 800166c:	69ba      	ldr	r2, [r7, #24]
 800166e:	4313      	orrs	r3, r2
 8001670:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001672:	69fb      	ldr	r3, [r7, #28]
 8001674:	08da      	lsrs	r2, r3, #3
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	3208      	adds	r2, #8
 800167a:	69b9      	ldr	r1, [r7, #24]
 800167c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001686:	69fb      	ldr	r3, [r7, #28]
 8001688:	005b      	lsls	r3, r3, #1
 800168a:	2203      	movs	r2, #3
 800168c:	fa02 f303 	lsl.w	r3, r2, r3
 8001690:	43db      	mvns	r3, r3
 8001692:	69ba      	ldr	r2, [r7, #24]
 8001694:	4013      	ands	r3, r2
 8001696:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	f003 0203 	and.w	r2, r3, #3
 80016a0:	69fb      	ldr	r3, [r7, #28]
 80016a2:	005b      	lsls	r3, r3, #1
 80016a4:	fa02 f303 	lsl.w	r3, r2, r3
 80016a8:	69ba      	ldr	r2, [r7, #24]
 80016aa:	4313      	orrs	r3, r2
 80016ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	69ba      	ldr	r2, [r7, #24]
 80016b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80016bc:	2b00      	cmp	r3, #0
 80016be:	f000 80be 	beq.w	800183e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016c2:	4b66      	ldr	r3, [pc, #408]	; (800185c <HAL_GPIO_Init+0x324>)
 80016c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016c6:	4a65      	ldr	r2, [pc, #404]	; (800185c <HAL_GPIO_Init+0x324>)
 80016c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016cc:	6453      	str	r3, [r2, #68]	; 0x44
 80016ce:	4b63      	ldr	r3, [pc, #396]	; (800185c <HAL_GPIO_Init+0x324>)
 80016d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016d6:	60fb      	str	r3, [r7, #12]
 80016d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80016da:	4a61      	ldr	r2, [pc, #388]	; (8001860 <HAL_GPIO_Init+0x328>)
 80016dc:	69fb      	ldr	r3, [r7, #28]
 80016de:	089b      	lsrs	r3, r3, #2
 80016e0:	3302      	adds	r3, #2
 80016e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80016e8:	69fb      	ldr	r3, [r7, #28]
 80016ea:	f003 0303 	and.w	r3, r3, #3
 80016ee:	009b      	lsls	r3, r3, #2
 80016f0:	220f      	movs	r2, #15
 80016f2:	fa02 f303 	lsl.w	r3, r2, r3
 80016f6:	43db      	mvns	r3, r3
 80016f8:	69ba      	ldr	r2, [r7, #24]
 80016fa:	4013      	ands	r3, r2
 80016fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	4a58      	ldr	r2, [pc, #352]	; (8001864 <HAL_GPIO_Init+0x32c>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d037      	beq.n	8001776 <HAL_GPIO_Init+0x23e>
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	4a57      	ldr	r2, [pc, #348]	; (8001868 <HAL_GPIO_Init+0x330>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d031      	beq.n	8001772 <HAL_GPIO_Init+0x23a>
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	4a56      	ldr	r2, [pc, #344]	; (800186c <HAL_GPIO_Init+0x334>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d02b      	beq.n	800176e <HAL_GPIO_Init+0x236>
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	4a55      	ldr	r2, [pc, #340]	; (8001870 <HAL_GPIO_Init+0x338>)
 800171a:	4293      	cmp	r3, r2
 800171c:	d025      	beq.n	800176a <HAL_GPIO_Init+0x232>
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	4a54      	ldr	r2, [pc, #336]	; (8001874 <HAL_GPIO_Init+0x33c>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d01f      	beq.n	8001766 <HAL_GPIO_Init+0x22e>
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	4a53      	ldr	r2, [pc, #332]	; (8001878 <HAL_GPIO_Init+0x340>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d019      	beq.n	8001762 <HAL_GPIO_Init+0x22a>
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	4a52      	ldr	r2, [pc, #328]	; (800187c <HAL_GPIO_Init+0x344>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d013      	beq.n	800175e <HAL_GPIO_Init+0x226>
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	4a51      	ldr	r2, [pc, #324]	; (8001880 <HAL_GPIO_Init+0x348>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d00d      	beq.n	800175a <HAL_GPIO_Init+0x222>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	4a50      	ldr	r2, [pc, #320]	; (8001884 <HAL_GPIO_Init+0x34c>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d007      	beq.n	8001756 <HAL_GPIO_Init+0x21e>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	4a4f      	ldr	r2, [pc, #316]	; (8001888 <HAL_GPIO_Init+0x350>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d101      	bne.n	8001752 <HAL_GPIO_Init+0x21a>
 800174e:	2309      	movs	r3, #9
 8001750:	e012      	b.n	8001778 <HAL_GPIO_Init+0x240>
 8001752:	230a      	movs	r3, #10
 8001754:	e010      	b.n	8001778 <HAL_GPIO_Init+0x240>
 8001756:	2308      	movs	r3, #8
 8001758:	e00e      	b.n	8001778 <HAL_GPIO_Init+0x240>
 800175a:	2307      	movs	r3, #7
 800175c:	e00c      	b.n	8001778 <HAL_GPIO_Init+0x240>
 800175e:	2306      	movs	r3, #6
 8001760:	e00a      	b.n	8001778 <HAL_GPIO_Init+0x240>
 8001762:	2305      	movs	r3, #5
 8001764:	e008      	b.n	8001778 <HAL_GPIO_Init+0x240>
 8001766:	2304      	movs	r3, #4
 8001768:	e006      	b.n	8001778 <HAL_GPIO_Init+0x240>
 800176a:	2303      	movs	r3, #3
 800176c:	e004      	b.n	8001778 <HAL_GPIO_Init+0x240>
 800176e:	2302      	movs	r3, #2
 8001770:	e002      	b.n	8001778 <HAL_GPIO_Init+0x240>
 8001772:	2301      	movs	r3, #1
 8001774:	e000      	b.n	8001778 <HAL_GPIO_Init+0x240>
 8001776:	2300      	movs	r3, #0
 8001778:	69fa      	ldr	r2, [r7, #28]
 800177a:	f002 0203 	and.w	r2, r2, #3
 800177e:	0092      	lsls	r2, r2, #2
 8001780:	4093      	lsls	r3, r2
 8001782:	69ba      	ldr	r2, [r7, #24]
 8001784:	4313      	orrs	r3, r2
 8001786:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001788:	4935      	ldr	r1, [pc, #212]	; (8001860 <HAL_GPIO_Init+0x328>)
 800178a:	69fb      	ldr	r3, [r7, #28]
 800178c:	089b      	lsrs	r3, r3, #2
 800178e:	3302      	adds	r3, #2
 8001790:	69ba      	ldr	r2, [r7, #24]
 8001792:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001796:	4b3d      	ldr	r3, [pc, #244]	; (800188c <HAL_GPIO_Init+0x354>)
 8001798:	689b      	ldr	r3, [r3, #8]
 800179a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800179c:	693b      	ldr	r3, [r7, #16]
 800179e:	43db      	mvns	r3, r3
 80017a0:	69ba      	ldr	r2, [r7, #24]
 80017a2:	4013      	ands	r3, r2
 80017a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d003      	beq.n	80017ba <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80017b2:	69ba      	ldr	r2, [r7, #24]
 80017b4:	693b      	ldr	r3, [r7, #16]
 80017b6:	4313      	orrs	r3, r2
 80017b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80017ba:	4a34      	ldr	r2, [pc, #208]	; (800188c <HAL_GPIO_Init+0x354>)
 80017bc:	69bb      	ldr	r3, [r7, #24]
 80017be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80017c0:	4b32      	ldr	r3, [pc, #200]	; (800188c <HAL_GPIO_Init+0x354>)
 80017c2:	68db      	ldr	r3, [r3, #12]
 80017c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017c6:	693b      	ldr	r3, [r7, #16]
 80017c8:	43db      	mvns	r3, r3
 80017ca:	69ba      	ldr	r2, [r7, #24]
 80017cc:	4013      	ands	r3, r2
 80017ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d003      	beq.n	80017e4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80017dc:	69ba      	ldr	r2, [r7, #24]
 80017de:	693b      	ldr	r3, [r7, #16]
 80017e0:	4313      	orrs	r3, r2
 80017e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80017e4:	4a29      	ldr	r2, [pc, #164]	; (800188c <HAL_GPIO_Init+0x354>)
 80017e6:	69bb      	ldr	r3, [r7, #24]
 80017e8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80017ea:	4b28      	ldr	r3, [pc, #160]	; (800188c <HAL_GPIO_Init+0x354>)
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017f0:	693b      	ldr	r3, [r7, #16]
 80017f2:	43db      	mvns	r3, r3
 80017f4:	69ba      	ldr	r2, [r7, #24]
 80017f6:	4013      	ands	r3, r2
 80017f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001802:	2b00      	cmp	r3, #0
 8001804:	d003      	beq.n	800180e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001806:	69ba      	ldr	r2, [r7, #24]
 8001808:	693b      	ldr	r3, [r7, #16]
 800180a:	4313      	orrs	r3, r2
 800180c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800180e:	4a1f      	ldr	r2, [pc, #124]	; (800188c <HAL_GPIO_Init+0x354>)
 8001810:	69bb      	ldr	r3, [r7, #24]
 8001812:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001814:	4b1d      	ldr	r3, [pc, #116]	; (800188c <HAL_GPIO_Init+0x354>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800181a:	693b      	ldr	r3, [r7, #16]
 800181c:	43db      	mvns	r3, r3
 800181e:	69ba      	ldr	r2, [r7, #24]
 8001820:	4013      	ands	r3, r2
 8001822:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800182c:	2b00      	cmp	r3, #0
 800182e:	d003      	beq.n	8001838 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001830:	69ba      	ldr	r2, [r7, #24]
 8001832:	693b      	ldr	r3, [r7, #16]
 8001834:	4313      	orrs	r3, r2
 8001836:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001838:	4a14      	ldr	r2, [pc, #80]	; (800188c <HAL_GPIO_Init+0x354>)
 800183a:	69bb      	ldr	r3, [r7, #24]
 800183c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800183e:	69fb      	ldr	r3, [r7, #28]
 8001840:	3301      	adds	r3, #1
 8001842:	61fb      	str	r3, [r7, #28]
 8001844:	69fb      	ldr	r3, [r7, #28]
 8001846:	2b0f      	cmp	r3, #15
 8001848:	f67f ae86 	bls.w	8001558 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800184c:	bf00      	nop
 800184e:	bf00      	nop
 8001850:	3724      	adds	r7, #36	; 0x24
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr
 800185a:	bf00      	nop
 800185c:	40023800 	.word	0x40023800
 8001860:	40013800 	.word	0x40013800
 8001864:	40020000 	.word	0x40020000
 8001868:	40020400 	.word	0x40020400
 800186c:	40020800 	.word	0x40020800
 8001870:	40020c00 	.word	0x40020c00
 8001874:	40021000 	.word	0x40021000
 8001878:	40021400 	.word	0x40021400
 800187c:	40021800 	.word	0x40021800
 8001880:	40021c00 	.word	0x40021c00
 8001884:	40022000 	.word	0x40022000
 8001888:	40022400 	.word	0x40022400
 800188c:	40013c00 	.word	0x40013c00

08001890 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b086      	sub	sp, #24
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001898:	2300      	movs	r3, #0
 800189a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d101      	bne.n	80018a6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80018a2:	2301      	movs	r3, #1
 80018a4:	e29b      	b.n	8001dde <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f003 0301 	and.w	r3, r3, #1
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	f000 8087 	beq.w	80019c2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80018b4:	4b96      	ldr	r3, [pc, #600]	; (8001b10 <HAL_RCC_OscConfig+0x280>)
 80018b6:	689b      	ldr	r3, [r3, #8]
 80018b8:	f003 030c 	and.w	r3, r3, #12
 80018bc:	2b04      	cmp	r3, #4
 80018be:	d00c      	beq.n	80018da <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018c0:	4b93      	ldr	r3, [pc, #588]	; (8001b10 <HAL_RCC_OscConfig+0x280>)
 80018c2:	689b      	ldr	r3, [r3, #8]
 80018c4:	f003 030c 	and.w	r3, r3, #12
 80018c8:	2b08      	cmp	r3, #8
 80018ca:	d112      	bne.n	80018f2 <HAL_RCC_OscConfig+0x62>
 80018cc:	4b90      	ldr	r3, [pc, #576]	; (8001b10 <HAL_RCC_OscConfig+0x280>)
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018d4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80018d8:	d10b      	bne.n	80018f2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018da:	4b8d      	ldr	r3, [pc, #564]	; (8001b10 <HAL_RCC_OscConfig+0x280>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d06c      	beq.n	80019c0 <HAL_RCC_OscConfig+0x130>
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d168      	bne.n	80019c0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80018ee:	2301      	movs	r3, #1
 80018f0:	e275      	b.n	8001dde <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018fa:	d106      	bne.n	800190a <HAL_RCC_OscConfig+0x7a>
 80018fc:	4b84      	ldr	r3, [pc, #528]	; (8001b10 <HAL_RCC_OscConfig+0x280>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a83      	ldr	r2, [pc, #524]	; (8001b10 <HAL_RCC_OscConfig+0x280>)
 8001902:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001906:	6013      	str	r3, [r2, #0]
 8001908:	e02e      	b.n	8001968 <HAL_RCC_OscConfig+0xd8>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d10c      	bne.n	800192c <HAL_RCC_OscConfig+0x9c>
 8001912:	4b7f      	ldr	r3, [pc, #508]	; (8001b10 <HAL_RCC_OscConfig+0x280>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4a7e      	ldr	r2, [pc, #504]	; (8001b10 <HAL_RCC_OscConfig+0x280>)
 8001918:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800191c:	6013      	str	r3, [r2, #0]
 800191e:	4b7c      	ldr	r3, [pc, #496]	; (8001b10 <HAL_RCC_OscConfig+0x280>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4a7b      	ldr	r2, [pc, #492]	; (8001b10 <HAL_RCC_OscConfig+0x280>)
 8001924:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001928:	6013      	str	r3, [r2, #0]
 800192a:	e01d      	b.n	8001968 <HAL_RCC_OscConfig+0xd8>
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001934:	d10c      	bne.n	8001950 <HAL_RCC_OscConfig+0xc0>
 8001936:	4b76      	ldr	r3, [pc, #472]	; (8001b10 <HAL_RCC_OscConfig+0x280>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4a75      	ldr	r2, [pc, #468]	; (8001b10 <HAL_RCC_OscConfig+0x280>)
 800193c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001940:	6013      	str	r3, [r2, #0]
 8001942:	4b73      	ldr	r3, [pc, #460]	; (8001b10 <HAL_RCC_OscConfig+0x280>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4a72      	ldr	r2, [pc, #456]	; (8001b10 <HAL_RCC_OscConfig+0x280>)
 8001948:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800194c:	6013      	str	r3, [r2, #0]
 800194e:	e00b      	b.n	8001968 <HAL_RCC_OscConfig+0xd8>
 8001950:	4b6f      	ldr	r3, [pc, #444]	; (8001b10 <HAL_RCC_OscConfig+0x280>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a6e      	ldr	r2, [pc, #440]	; (8001b10 <HAL_RCC_OscConfig+0x280>)
 8001956:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800195a:	6013      	str	r3, [r2, #0]
 800195c:	4b6c      	ldr	r3, [pc, #432]	; (8001b10 <HAL_RCC_OscConfig+0x280>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a6b      	ldr	r2, [pc, #428]	; (8001b10 <HAL_RCC_OscConfig+0x280>)
 8001962:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001966:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d013      	beq.n	8001998 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001970:	f7ff fc0e 	bl	8001190 <HAL_GetTick>
 8001974:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001976:	e008      	b.n	800198a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001978:	f7ff fc0a 	bl	8001190 <HAL_GetTick>
 800197c:	4602      	mov	r2, r0
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	1ad3      	subs	r3, r2, r3
 8001982:	2b64      	cmp	r3, #100	; 0x64
 8001984:	d901      	bls.n	800198a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001986:	2303      	movs	r3, #3
 8001988:	e229      	b.n	8001dde <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800198a:	4b61      	ldr	r3, [pc, #388]	; (8001b10 <HAL_RCC_OscConfig+0x280>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001992:	2b00      	cmp	r3, #0
 8001994:	d0f0      	beq.n	8001978 <HAL_RCC_OscConfig+0xe8>
 8001996:	e014      	b.n	80019c2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001998:	f7ff fbfa 	bl	8001190 <HAL_GetTick>
 800199c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800199e:	e008      	b.n	80019b2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019a0:	f7ff fbf6 	bl	8001190 <HAL_GetTick>
 80019a4:	4602      	mov	r2, r0
 80019a6:	693b      	ldr	r3, [r7, #16]
 80019a8:	1ad3      	subs	r3, r2, r3
 80019aa:	2b64      	cmp	r3, #100	; 0x64
 80019ac:	d901      	bls.n	80019b2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80019ae:	2303      	movs	r3, #3
 80019b0:	e215      	b.n	8001dde <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019b2:	4b57      	ldr	r3, [pc, #348]	; (8001b10 <HAL_RCC_OscConfig+0x280>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d1f0      	bne.n	80019a0 <HAL_RCC_OscConfig+0x110>
 80019be:	e000      	b.n	80019c2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f003 0302 	and.w	r3, r3, #2
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d069      	beq.n	8001aa2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80019ce:	4b50      	ldr	r3, [pc, #320]	; (8001b10 <HAL_RCC_OscConfig+0x280>)
 80019d0:	689b      	ldr	r3, [r3, #8]
 80019d2:	f003 030c 	and.w	r3, r3, #12
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d00b      	beq.n	80019f2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019da:	4b4d      	ldr	r3, [pc, #308]	; (8001b10 <HAL_RCC_OscConfig+0x280>)
 80019dc:	689b      	ldr	r3, [r3, #8]
 80019de:	f003 030c 	and.w	r3, r3, #12
 80019e2:	2b08      	cmp	r3, #8
 80019e4:	d11c      	bne.n	8001a20 <HAL_RCC_OscConfig+0x190>
 80019e6:	4b4a      	ldr	r3, [pc, #296]	; (8001b10 <HAL_RCC_OscConfig+0x280>)
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d116      	bne.n	8001a20 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019f2:	4b47      	ldr	r3, [pc, #284]	; (8001b10 <HAL_RCC_OscConfig+0x280>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f003 0302 	and.w	r3, r3, #2
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d005      	beq.n	8001a0a <HAL_RCC_OscConfig+0x17a>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	68db      	ldr	r3, [r3, #12]
 8001a02:	2b01      	cmp	r3, #1
 8001a04:	d001      	beq.n	8001a0a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
 8001a08:	e1e9      	b.n	8001dde <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a0a:	4b41      	ldr	r3, [pc, #260]	; (8001b10 <HAL_RCC_OscConfig+0x280>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	691b      	ldr	r3, [r3, #16]
 8001a16:	00db      	lsls	r3, r3, #3
 8001a18:	493d      	ldr	r1, [pc, #244]	; (8001b10 <HAL_RCC_OscConfig+0x280>)
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a1e:	e040      	b.n	8001aa2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	68db      	ldr	r3, [r3, #12]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d023      	beq.n	8001a70 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a28:	4b39      	ldr	r3, [pc, #228]	; (8001b10 <HAL_RCC_OscConfig+0x280>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a38      	ldr	r2, [pc, #224]	; (8001b10 <HAL_RCC_OscConfig+0x280>)
 8001a2e:	f043 0301 	orr.w	r3, r3, #1
 8001a32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a34:	f7ff fbac 	bl	8001190 <HAL_GetTick>
 8001a38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a3a:	e008      	b.n	8001a4e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a3c:	f7ff fba8 	bl	8001190 <HAL_GetTick>
 8001a40:	4602      	mov	r2, r0
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	1ad3      	subs	r3, r2, r3
 8001a46:	2b02      	cmp	r3, #2
 8001a48:	d901      	bls.n	8001a4e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001a4a:	2303      	movs	r3, #3
 8001a4c:	e1c7      	b.n	8001dde <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a4e:	4b30      	ldr	r3, [pc, #192]	; (8001b10 <HAL_RCC_OscConfig+0x280>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f003 0302 	and.w	r3, r3, #2
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d0f0      	beq.n	8001a3c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a5a:	4b2d      	ldr	r3, [pc, #180]	; (8001b10 <HAL_RCC_OscConfig+0x280>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	691b      	ldr	r3, [r3, #16]
 8001a66:	00db      	lsls	r3, r3, #3
 8001a68:	4929      	ldr	r1, [pc, #164]	; (8001b10 <HAL_RCC_OscConfig+0x280>)
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	600b      	str	r3, [r1, #0]
 8001a6e:	e018      	b.n	8001aa2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a70:	4b27      	ldr	r3, [pc, #156]	; (8001b10 <HAL_RCC_OscConfig+0x280>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a26      	ldr	r2, [pc, #152]	; (8001b10 <HAL_RCC_OscConfig+0x280>)
 8001a76:	f023 0301 	bic.w	r3, r3, #1
 8001a7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a7c:	f7ff fb88 	bl	8001190 <HAL_GetTick>
 8001a80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a82:	e008      	b.n	8001a96 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a84:	f7ff fb84 	bl	8001190 <HAL_GetTick>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	693b      	ldr	r3, [r7, #16]
 8001a8c:	1ad3      	subs	r3, r2, r3
 8001a8e:	2b02      	cmp	r3, #2
 8001a90:	d901      	bls.n	8001a96 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001a92:	2303      	movs	r3, #3
 8001a94:	e1a3      	b.n	8001dde <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a96:	4b1e      	ldr	r3, [pc, #120]	; (8001b10 <HAL_RCC_OscConfig+0x280>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f003 0302 	and.w	r3, r3, #2
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d1f0      	bne.n	8001a84 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f003 0308 	and.w	r3, r3, #8
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d038      	beq.n	8001b20 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	695b      	ldr	r3, [r3, #20]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d019      	beq.n	8001aea <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ab6:	4b16      	ldr	r3, [pc, #88]	; (8001b10 <HAL_RCC_OscConfig+0x280>)
 8001ab8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001aba:	4a15      	ldr	r2, [pc, #84]	; (8001b10 <HAL_RCC_OscConfig+0x280>)
 8001abc:	f043 0301 	orr.w	r3, r3, #1
 8001ac0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ac2:	f7ff fb65 	bl	8001190 <HAL_GetTick>
 8001ac6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ac8:	e008      	b.n	8001adc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001aca:	f7ff fb61 	bl	8001190 <HAL_GetTick>
 8001ace:	4602      	mov	r2, r0
 8001ad0:	693b      	ldr	r3, [r7, #16]
 8001ad2:	1ad3      	subs	r3, r2, r3
 8001ad4:	2b02      	cmp	r3, #2
 8001ad6:	d901      	bls.n	8001adc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001ad8:	2303      	movs	r3, #3
 8001ada:	e180      	b.n	8001dde <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001adc:	4b0c      	ldr	r3, [pc, #48]	; (8001b10 <HAL_RCC_OscConfig+0x280>)
 8001ade:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ae0:	f003 0302 	and.w	r3, r3, #2
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d0f0      	beq.n	8001aca <HAL_RCC_OscConfig+0x23a>
 8001ae8:	e01a      	b.n	8001b20 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001aea:	4b09      	ldr	r3, [pc, #36]	; (8001b10 <HAL_RCC_OscConfig+0x280>)
 8001aec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001aee:	4a08      	ldr	r2, [pc, #32]	; (8001b10 <HAL_RCC_OscConfig+0x280>)
 8001af0:	f023 0301 	bic.w	r3, r3, #1
 8001af4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001af6:	f7ff fb4b 	bl	8001190 <HAL_GetTick>
 8001afa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001afc:	e00a      	b.n	8001b14 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001afe:	f7ff fb47 	bl	8001190 <HAL_GetTick>
 8001b02:	4602      	mov	r2, r0
 8001b04:	693b      	ldr	r3, [r7, #16]
 8001b06:	1ad3      	subs	r3, r2, r3
 8001b08:	2b02      	cmp	r3, #2
 8001b0a:	d903      	bls.n	8001b14 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001b0c:	2303      	movs	r3, #3
 8001b0e:	e166      	b.n	8001dde <HAL_RCC_OscConfig+0x54e>
 8001b10:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b14:	4b92      	ldr	r3, [pc, #584]	; (8001d60 <HAL_RCC_OscConfig+0x4d0>)
 8001b16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b18:	f003 0302 	and.w	r3, r3, #2
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d1ee      	bne.n	8001afe <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f003 0304 	and.w	r3, r3, #4
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	f000 80a4 	beq.w	8001c76 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b2e:	4b8c      	ldr	r3, [pc, #560]	; (8001d60 <HAL_RCC_OscConfig+0x4d0>)
 8001b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d10d      	bne.n	8001b56 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b3a:	4b89      	ldr	r3, [pc, #548]	; (8001d60 <HAL_RCC_OscConfig+0x4d0>)
 8001b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b3e:	4a88      	ldr	r2, [pc, #544]	; (8001d60 <HAL_RCC_OscConfig+0x4d0>)
 8001b40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b44:	6413      	str	r3, [r2, #64]	; 0x40
 8001b46:	4b86      	ldr	r3, [pc, #536]	; (8001d60 <HAL_RCC_OscConfig+0x4d0>)
 8001b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b4e:	60bb      	str	r3, [r7, #8]
 8001b50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b52:	2301      	movs	r3, #1
 8001b54:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b56:	4b83      	ldr	r3, [pc, #524]	; (8001d64 <HAL_RCC_OscConfig+0x4d4>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d118      	bne.n	8001b94 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001b62:	4b80      	ldr	r3, [pc, #512]	; (8001d64 <HAL_RCC_OscConfig+0x4d4>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4a7f      	ldr	r2, [pc, #508]	; (8001d64 <HAL_RCC_OscConfig+0x4d4>)
 8001b68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b6e:	f7ff fb0f 	bl	8001190 <HAL_GetTick>
 8001b72:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b74:	e008      	b.n	8001b88 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b76:	f7ff fb0b 	bl	8001190 <HAL_GetTick>
 8001b7a:	4602      	mov	r2, r0
 8001b7c:	693b      	ldr	r3, [r7, #16]
 8001b7e:	1ad3      	subs	r3, r2, r3
 8001b80:	2b64      	cmp	r3, #100	; 0x64
 8001b82:	d901      	bls.n	8001b88 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001b84:	2303      	movs	r3, #3
 8001b86:	e12a      	b.n	8001dde <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b88:	4b76      	ldr	r3, [pc, #472]	; (8001d64 <HAL_RCC_OscConfig+0x4d4>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d0f0      	beq.n	8001b76 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	689b      	ldr	r3, [r3, #8]
 8001b98:	2b01      	cmp	r3, #1
 8001b9a:	d106      	bne.n	8001baa <HAL_RCC_OscConfig+0x31a>
 8001b9c:	4b70      	ldr	r3, [pc, #448]	; (8001d60 <HAL_RCC_OscConfig+0x4d0>)
 8001b9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ba0:	4a6f      	ldr	r2, [pc, #444]	; (8001d60 <HAL_RCC_OscConfig+0x4d0>)
 8001ba2:	f043 0301 	orr.w	r3, r3, #1
 8001ba6:	6713      	str	r3, [r2, #112]	; 0x70
 8001ba8:	e02d      	b.n	8001c06 <HAL_RCC_OscConfig+0x376>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	689b      	ldr	r3, [r3, #8]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d10c      	bne.n	8001bcc <HAL_RCC_OscConfig+0x33c>
 8001bb2:	4b6b      	ldr	r3, [pc, #428]	; (8001d60 <HAL_RCC_OscConfig+0x4d0>)
 8001bb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bb6:	4a6a      	ldr	r2, [pc, #424]	; (8001d60 <HAL_RCC_OscConfig+0x4d0>)
 8001bb8:	f023 0301 	bic.w	r3, r3, #1
 8001bbc:	6713      	str	r3, [r2, #112]	; 0x70
 8001bbe:	4b68      	ldr	r3, [pc, #416]	; (8001d60 <HAL_RCC_OscConfig+0x4d0>)
 8001bc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bc2:	4a67      	ldr	r2, [pc, #412]	; (8001d60 <HAL_RCC_OscConfig+0x4d0>)
 8001bc4:	f023 0304 	bic.w	r3, r3, #4
 8001bc8:	6713      	str	r3, [r2, #112]	; 0x70
 8001bca:	e01c      	b.n	8001c06 <HAL_RCC_OscConfig+0x376>
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	689b      	ldr	r3, [r3, #8]
 8001bd0:	2b05      	cmp	r3, #5
 8001bd2:	d10c      	bne.n	8001bee <HAL_RCC_OscConfig+0x35e>
 8001bd4:	4b62      	ldr	r3, [pc, #392]	; (8001d60 <HAL_RCC_OscConfig+0x4d0>)
 8001bd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bd8:	4a61      	ldr	r2, [pc, #388]	; (8001d60 <HAL_RCC_OscConfig+0x4d0>)
 8001bda:	f043 0304 	orr.w	r3, r3, #4
 8001bde:	6713      	str	r3, [r2, #112]	; 0x70
 8001be0:	4b5f      	ldr	r3, [pc, #380]	; (8001d60 <HAL_RCC_OscConfig+0x4d0>)
 8001be2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001be4:	4a5e      	ldr	r2, [pc, #376]	; (8001d60 <HAL_RCC_OscConfig+0x4d0>)
 8001be6:	f043 0301 	orr.w	r3, r3, #1
 8001bea:	6713      	str	r3, [r2, #112]	; 0x70
 8001bec:	e00b      	b.n	8001c06 <HAL_RCC_OscConfig+0x376>
 8001bee:	4b5c      	ldr	r3, [pc, #368]	; (8001d60 <HAL_RCC_OscConfig+0x4d0>)
 8001bf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bf2:	4a5b      	ldr	r2, [pc, #364]	; (8001d60 <HAL_RCC_OscConfig+0x4d0>)
 8001bf4:	f023 0301 	bic.w	r3, r3, #1
 8001bf8:	6713      	str	r3, [r2, #112]	; 0x70
 8001bfa:	4b59      	ldr	r3, [pc, #356]	; (8001d60 <HAL_RCC_OscConfig+0x4d0>)
 8001bfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bfe:	4a58      	ldr	r2, [pc, #352]	; (8001d60 <HAL_RCC_OscConfig+0x4d0>)
 8001c00:	f023 0304 	bic.w	r3, r3, #4
 8001c04:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	689b      	ldr	r3, [r3, #8]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d015      	beq.n	8001c3a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c0e:	f7ff fabf 	bl	8001190 <HAL_GetTick>
 8001c12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c14:	e00a      	b.n	8001c2c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c16:	f7ff fabb 	bl	8001190 <HAL_GetTick>
 8001c1a:	4602      	mov	r2, r0
 8001c1c:	693b      	ldr	r3, [r7, #16]
 8001c1e:	1ad3      	subs	r3, r2, r3
 8001c20:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d901      	bls.n	8001c2c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001c28:	2303      	movs	r3, #3
 8001c2a:	e0d8      	b.n	8001dde <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c2c:	4b4c      	ldr	r3, [pc, #304]	; (8001d60 <HAL_RCC_OscConfig+0x4d0>)
 8001c2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c30:	f003 0302 	and.w	r3, r3, #2
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d0ee      	beq.n	8001c16 <HAL_RCC_OscConfig+0x386>
 8001c38:	e014      	b.n	8001c64 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c3a:	f7ff faa9 	bl	8001190 <HAL_GetTick>
 8001c3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c40:	e00a      	b.n	8001c58 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c42:	f7ff faa5 	bl	8001190 <HAL_GetTick>
 8001c46:	4602      	mov	r2, r0
 8001c48:	693b      	ldr	r3, [r7, #16]
 8001c4a:	1ad3      	subs	r3, r2, r3
 8001c4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d901      	bls.n	8001c58 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001c54:	2303      	movs	r3, #3
 8001c56:	e0c2      	b.n	8001dde <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c58:	4b41      	ldr	r3, [pc, #260]	; (8001d60 <HAL_RCC_OscConfig+0x4d0>)
 8001c5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c5c:	f003 0302 	and.w	r3, r3, #2
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d1ee      	bne.n	8001c42 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001c64:	7dfb      	ldrb	r3, [r7, #23]
 8001c66:	2b01      	cmp	r3, #1
 8001c68:	d105      	bne.n	8001c76 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c6a:	4b3d      	ldr	r3, [pc, #244]	; (8001d60 <HAL_RCC_OscConfig+0x4d0>)
 8001c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c6e:	4a3c      	ldr	r2, [pc, #240]	; (8001d60 <HAL_RCC_OscConfig+0x4d0>)
 8001c70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c74:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	699b      	ldr	r3, [r3, #24]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	f000 80ae 	beq.w	8001ddc <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c80:	4b37      	ldr	r3, [pc, #220]	; (8001d60 <HAL_RCC_OscConfig+0x4d0>)
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	f003 030c 	and.w	r3, r3, #12
 8001c88:	2b08      	cmp	r3, #8
 8001c8a:	d06d      	beq.n	8001d68 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	699b      	ldr	r3, [r3, #24]
 8001c90:	2b02      	cmp	r3, #2
 8001c92:	d14b      	bne.n	8001d2c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c94:	4b32      	ldr	r3, [pc, #200]	; (8001d60 <HAL_RCC_OscConfig+0x4d0>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a31      	ldr	r2, [pc, #196]	; (8001d60 <HAL_RCC_OscConfig+0x4d0>)
 8001c9a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ca0:	f7ff fa76 	bl	8001190 <HAL_GetTick>
 8001ca4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ca6:	e008      	b.n	8001cba <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ca8:	f7ff fa72 	bl	8001190 <HAL_GetTick>
 8001cac:	4602      	mov	r2, r0
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	1ad3      	subs	r3, r2, r3
 8001cb2:	2b02      	cmp	r3, #2
 8001cb4:	d901      	bls.n	8001cba <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001cb6:	2303      	movs	r3, #3
 8001cb8:	e091      	b.n	8001dde <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cba:	4b29      	ldr	r3, [pc, #164]	; (8001d60 <HAL_RCC_OscConfig+0x4d0>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d1f0      	bne.n	8001ca8 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	69da      	ldr	r2, [r3, #28]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6a1b      	ldr	r3, [r3, #32]
 8001cce:	431a      	orrs	r2, r3
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cd4:	019b      	lsls	r3, r3, #6
 8001cd6:	431a      	orrs	r2, r3
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cdc:	085b      	lsrs	r3, r3, #1
 8001cde:	3b01      	subs	r3, #1
 8001ce0:	041b      	lsls	r3, r3, #16
 8001ce2:	431a      	orrs	r2, r3
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ce8:	061b      	lsls	r3, r3, #24
 8001cea:	431a      	orrs	r2, r3
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf0:	071b      	lsls	r3, r3, #28
 8001cf2:	491b      	ldr	r1, [pc, #108]	; (8001d60 <HAL_RCC_OscConfig+0x4d0>)
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001cf8:	4b19      	ldr	r3, [pc, #100]	; (8001d60 <HAL_RCC_OscConfig+0x4d0>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a18      	ldr	r2, [pc, #96]	; (8001d60 <HAL_RCC_OscConfig+0x4d0>)
 8001cfe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d04:	f7ff fa44 	bl	8001190 <HAL_GetTick>
 8001d08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d0a:	e008      	b.n	8001d1e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d0c:	f7ff fa40 	bl	8001190 <HAL_GetTick>
 8001d10:	4602      	mov	r2, r0
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	1ad3      	subs	r3, r2, r3
 8001d16:	2b02      	cmp	r3, #2
 8001d18:	d901      	bls.n	8001d1e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001d1a:	2303      	movs	r3, #3
 8001d1c:	e05f      	b.n	8001dde <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d1e:	4b10      	ldr	r3, [pc, #64]	; (8001d60 <HAL_RCC_OscConfig+0x4d0>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d0f0      	beq.n	8001d0c <HAL_RCC_OscConfig+0x47c>
 8001d2a:	e057      	b.n	8001ddc <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d2c:	4b0c      	ldr	r3, [pc, #48]	; (8001d60 <HAL_RCC_OscConfig+0x4d0>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a0b      	ldr	r2, [pc, #44]	; (8001d60 <HAL_RCC_OscConfig+0x4d0>)
 8001d32:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d38:	f7ff fa2a 	bl	8001190 <HAL_GetTick>
 8001d3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d3e:	e008      	b.n	8001d52 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d40:	f7ff fa26 	bl	8001190 <HAL_GetTick>
 8001d44:	4602      	mov	r2, r0
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	1ad3      	subs	r3, r2, r3
 8001d4a:	2b02      	cmp	r3, #2
 8001d4c:	d901      	bls.n	8001d52 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8001d4e:	2303      	movs	r3, #3
 8001d50:	e045      	b.n	8001dde <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d52:	4b03      	ldr	r3, [pc, #12]	; (8001d60 <HAL_RCC_OscConfig+0x4d0>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d1f0      	bne.n	8001d40 <HAL_RCC_OscConfig+0x4b0>
 8001d5e:	e03d      	b.n	8001ddc <HAL_RCC_OscConfig+0x54c>
 8001d60:	40023800 	.word	0x40023800
 8001d64:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001d68:	4b1f      	ldr	r3, [pc, #124]	; (8001de8 <HAL_RCC_OscConfig+0x558>)
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	699b      	ldr	r3, [r3, #24]
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	d030      	beq.n	8001dd8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d80:	429a      	cmp	r2, r3
 8001d82:	d129      	bne.n	8001dd8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d8e:	429a      	cmp	r2, r3
 8001d90:	d122      	bne.n	8001dd8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d92:	68fa      	ldr	r2, [r7, #12]
 8001d94:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001d98:	4013      	ands	r3, r2
 8001d9a:	687a      	ldr	r2, [r7, #4]
 8001d9c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001d9e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d119      	bne.n	8001dd8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dae:	085b      	lsrs	r3, r3, #1
 8001db0:	3b01      	subs	r3, #1
 8001db2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001db4:	429a      	cmp	r2, r3
 8001db6:	d10f      	bne.n	8001dd8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dc2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	d107      	bne.n	8001dd8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd2:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001dd4:	429a      	cmp	r2, r3
 8001dd6:	d001      	beq.n	8001ddc <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	e000      	b.n	8001dde <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8001ddc:	2300      	movs	r3, #0
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	3718      	adds	r7, #24
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	40023800 	.word	0x40023800

08001dec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b084      	sub	sp, #16
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
 8001df4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001df6:	2300      	movs	r3, #0
 8001df8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d101      	bne.n	8001e04 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001e00:	2301      	movs	r3, #1
 8001e02:	e0d0      	b.n	8001fa6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e04:	4b6a      	ldr	r3, [pc, #424]	; (8001fb0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f003 030f 	and.w	r3, r3, #15
 8001e0c:	683a      	ldr	r2, [r7, #0]
 8001e0e:	429a      	cmp	r2, r3
 8001e10:	d910      	bls.n	8001e34 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e12:	4b67      	ldr	r3, [pc, #412]	; (8001fb0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f023 020f 	bic.w	r2, r3, #15
 8001e1a:	4965      	ldr	r1, [pc, #404]	; (8001fb0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e22:	4b63      	ldr	r3, [pc, #396]	; (8001fb0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f003 030f 	and.w	r3, r3, #15
 8001e2a:	683a      	ldr	r2, [r7, #0]
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	d001      	beq.n	8001e34 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001e30:	2301      	movs	r3, #1
 8001e32:	e0b8      	b.n	8001fa6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f003 0302 	and.w	r3, r3, #2
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d020      	beq.n	8001e82 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f003 0304 	and.w	r3, r3, #4
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d005      	beq.n	8001e58 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e4c:	4b59      	ldr	r3, [pc, #356]	; (8001fb4 <HAL_RCC_ClockConfig+0x1c8>)
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	4a58      	ldr	r2, [pc, #352]	; (8001fb4 <HAL_RCC_ClockConfig+0x1c8>)
 8001e52:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001e56:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f003 0308 	and.w	r3, r3, #8
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d005      	beq.n	8001e70 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e64:	4b53      	ldr	r3, [pc, #332]	; (8001fb4 <HAL_RCC_ClockConfig+0x1c8>)
 8001e66:	689b      	ldr	r3, [r3, #8]
 8001e68:	4a52      	ldr	r2, [pc, #328]	; (8001fb4 <HAL_RCC_ClockConfig+0x1c8>)
 8001e6a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001e6e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e70:	4b50      	ldr	r3, [pc, #320]	; (8001fb4 <HAL_RCC_ClockConfig+0x1c8>)
 8001e72:	689b      	ldr	r3, [r3, #8]
 8001e74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	689b      	ldr	r3, [r3, #8]
 8001e7c:	494d      	ldr	r1, [pc, #308]	; (8001fb4 <HAL_RCC_ClockConfig+0x1c8>)
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f003 0301 	and.w	r3, r3, #1
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d040      	beq.n	8001f10 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	2b01      	cmp	r3, #1
 8001e94:	d107      	bne.n	8001ea6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e96:	4b47      	ldr	r3, [pc, #284]	; (8001fb4 <HAL_RCC_ClockConfig+0x1c8>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d115      	bne.n	8001ece <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e07f      	b.n	8001fa6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	2b02      	cmp	r3, #2
 8001eac:	d107      	bne.n	8001ebe <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001eae:	4b41      	ldr	r3, [pc, #260]	; (8001fb4 <HAL_RCC_ClockConfig+0x1c8>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d109      	bne.n	8001ece <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e073      	b.n	8001fa6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ebe:	4b3d      	ldr	r3, [pc, #244]	; (8001fb4 <HAL_RCC_ClockConfig+0x1c8>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f003 0302 	and.w	r3, r3, #2
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d101      	bne.n	8001ece <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e06b      	b.n	8001fa6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ece:	4b39      	ldr	r3, [pc, #228]	; (8001fb4 <HAL_RCC_ClockConfig+0x1c8>)
 8001ed0:	689b      	ldr	r3, [r3, #8]
 8001ed2:	f023 0203 	bic.w	r2, r3, #3
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	4936      	ldr	r1, [pc, #216]	; (8001fb4 <HAL_RCC_ClockConfig+0x1c8>)
 8001edc:	4313      	orrs	r3, r2
 8001ede:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ee0:	f7ff f956 	bl	8001190 <HAL_GetTick>
 8001ee4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ee6:	e00a      	b.n	8001efe <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ee8:	f7ff f952 	bl	8001190 <HAL_GetTick>
 8001eec:	4602      	mov	r2, r0
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	1ad3      	subs	r3, r2, r3
 8001ef2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d901      	bls.n	8001efe <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001efa:	2303      	movs	r3, #3
 8001efc:	e053      	b.n	8001fa6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001efe:	4b2d      	ldr	r3, [pc, #180]	; (8001fb4 <HAL_RCC_ClockConfig+0x1c8>)
 8001f00:	689b      	ldr	r3, [r3, #8]
 8001f02:	f003 020c 	and.w	r2, r3, #12
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	009b      	lsls	r3, r3, #2
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	d1eb      	bne.n	8001ee8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f10:	4b27      	ldr	r3, [pc, #156]	; (8001fb0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f003 030f 	and.w	r3, r3, #15
 8001f18:	683a      	ldr	r2, [r7, #0]
 8001f1a:	429a      	cmp	r2, r3
 8001f1c:	d210      	bcs.n	8001f40 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f1e:	4b24      	ldr	r3, [pc, #144]	; (8001fb0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f023 020f 	bic.w	r2, r3, #15
 8001f26:	4922      	ldr	r1, [pc, #136]	; (8001fb0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f2e:	4b20      	ldr	r3, [pc, #128]	; (8001fb0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f003 030f 	and.w	r3, r3, #15
 8001f36:	683a      	ldr	r2, [r7, #0]
 8001f38:	429a      	cmp	r2, r3
 8001f3a:	d001      	beq.n	8001f40 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	e032      	b.n	8001fa6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f003 0304 	and.w	r3, r3, #4
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d008      	beq.n	8001f5e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f4c:	4b19      	ldr	r3, [pc, #100]	; (8001fb4 <HAL_RCC_ClockConfig+0x1c8>)
 8001f4e:	689b      	ldr	r3, [r3, #8]
 8001f50:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	68db      	ldr	r3, [r3, #12]
 8001f58:	4916      	ldr	r1, [pc, #88]	; (8001fb4 <HAL_RCC_ClockConfig+0x1c8>)
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f003 0308 	and.w	r3, r3, #8
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d009      	beq.n	8001f7e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001f6a:	4b12      	ldr	r3, [pc, #72]	; (8001fb4 <HAL_RCC_ClockConfig+0x1c8>)
 8001f6c:	689b      	ldr	r3, [r3, #8]
 8001f6e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	691b      	ldr	r3, [r3, #16]
 8001f76:	00db      	lsls	r3, r3, #3
 8001f78:	490e      	ldr	r1, [pc, #56]	; (8001fb4 <HAL_RCC_ClockConfig+0x1c8>)
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001f7e:	f000 f821 	bl	8001fc4 <HAL_RCC_GetSysClockFreq>
 8001f82:	4602      	mov	r2, r0
 8001f84:	4b0b      	ldr	r3, [pc, #44]	; (8001fb4 <HAL_RCC_ClockConfig+0x1c8>)
 8001f86:	689b      	ldr	r3, [r3, #8]
 8001f88:	091b      	lsrs	r3, r3, #4
 8001f8a:	f003 030f 	and.w	r3, r3, #15
 8001f8e:	490a      	ldr	r1, [pc, #40]	; (8001fb8 <HAL_RCC_ClockConfig+0x1cc>)
 8001f90:	5ccb      	ldrb	r3, [r1, r3]
 8001f92:	fa22 f303 	lsr.w	r3, r2, r3
 8001f96:	4a09      	ldr	r2, [pc, #36]	; (8001fbc <HAL_RCC_ClockConfig+0x1d0>)
 8001f98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001f9a:	4b09      	ldr	r3, [pc, #36]	; (8001fc0 <HAL_RCC_ClockConfig+0x1d4>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f7ff f8b2 	bl	8001108 <HAL_InitTick>

  return HAL_OK;
 8001fa4:	2300      	movs	r3, #0
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	3710      	adds	r7, #16
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	40023c00 	.word	0x40023c00
 8001fb4:	40023800 	.word	0x40023800
 8001fb8:	08005b20 	.word	0x08005b20
 8001fbc:	20000024 	.word	0x20000024
 8001fc0:	20000028 	.word	0x20000028

08001fc4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fc4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001fc8:	b090      	sub	sp, #64	; 0x40
 8001fca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	637b      	str	r3, [r7, #52]	; 0x34
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001fdc:	4b59      	ldr	r3, [pc, #356]	; (8002144 <HAL_RCC_GetSysClockFreq+0x180>)
 8001fde:	689b      	ldr	r3, [r3, #8]
 8001fe0:	f003 030c 	and.w	r3, r3, #12
 8001fe4:	2b08      	cmp	r3, #8
 8001fe6:	d00d      	beq.n	8002004 <HAL_RCC_GetSysClockFreq+0x40>
 8001fe8:	2b08      	cmp	r3, #8
 8001fea:	f200 80a1 	bhi.w	8002130 <HAL_RCC_GetSysClockFreq+0x16c>
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d002      	beq.n	8001ff8 <HAL_RCC_GetSysClockFreq+0x34>
 8001ff2:	2b04      	cmp	r3, #4
 8001ff4:	d003      	beq.n	8001ffe <HAL_RCC_GetSysClockFreq+0x3a>
 8001ff6:	e09b      	b.n	8002130 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001ff8:	4b53      	ldr	r3, [pc, #332]	; (8002148 <HAL_RCC_GetSysClockFreq+0x184>)
 8001ffa:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001ffc:	e09b      	b.n	8002136 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001ffe:	4b53      	ldr	r3, [pc, #332]	; (800214c <HAL_RCC_GetSysClockFreq+0x188>)
 8002000:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002002:	e098      	b.n	8002136 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002004:	4b4f      	ldr	r3, [pc, #316]	; (8002144 <HAL_RCC_GetSysClockFreq+0x180>)
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800200c:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800200e:	4b4d      	ldr	r3, [pc, #308]	; (8002144 <HAL_RCC_GetSysClockFreq+0x180>)
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002016:	2b00      	cmp	r3, #0
 8002018:	d028      	beq.n	800206c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800201a:	4b4a      	ldr	r3, [pc, #296]	; (8002144 <HAL_RCC_GetSysClockFreq+0x180>)
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	099b      	lsrs	r3, r3, #6
 8002020:	2200      	movs	r2, #0
 8002022:	623b      	str	r3, [r7, #32]
 8002024:	627a      	str	r2, [r7, #36]	; 0x24
 8002026:	6a3b      	ldr	r3, [r7, #32]
 8002028:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800202c:	2100      	movs	r1, #0
 800202e:	4b47      	ldr	r3, [pc, #284]	; (800214c <HAL_RCC_GetSysClockFreq+0x188>)
 8002030:	fb03 f201 	mul.w	r2, r3, r1
 8002034:	2300      	movs	r3, #0
 8002036:	fb00 f303 	mul.w	r3, r0, r3
 800203a:	4413      	add	r3, r2
 800203c:	4a43      	ldr	r2, [pc, #268]	; (800214c <HAL_RCC_GetSysClockFreq+0x188>)
 800203e:	fba0 1202 	umull	r1, r2, r0, r2
 8002042:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002044:	460a      	mov	r2, r1
 8002046:	62ba      	str	r2, [r7, #40]	; 0x28
 8002048:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800204a:	4413      	add	r3, r2
 800204c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800204e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002050:	2200      	movs	r2, #0
 8002052:	61bb      	str	r3, [r7, #24]
 8002054:	61fa      	str	r2, [r7, #28]
 8002056:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800205a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800205e:	f7fe f93f 	bl	80002e0 <__aeabi_uldivmod>
 8002062:	4602      	mov	r2, r0
 8002064:	460b      	mov	r3, r1
 8002066:	4613      	mov	r3, r2
 8002068:	63fb      	str	r3, [r7, #60]	; 0x3c
 800206a:	e053      	b.n	8002114 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800206c:	4b35      	ldr	r3, [pc, #212]	; (8002144 <HAL_RCC_GetSysClockFreq+0x180>)
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	099b      	lsrs	r3, r3, #6
 8002072:	2200      	movs	r2, #0
 8002074:	613b      	str	r3, [r7, #16]
 8002076:	617a      	str	r2, [r7, #20]
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800207e:	f04f 0b00 	mov.w	fp, #0
 8002082:	4652      	mov	r2, sl
 8002084:	465b      	mov	r3, fp
 8002086:	f04f 0000 	mov.w	r0, #0
 800208a:	f04f 0100 	mov.w	r1, #0
 800208e:	0159      	lsls	r1, r3, #5
 8002090:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002094:	0150      	lsls	r0, r2, #5
 8002096:	4602      	mov	r2, r0
 8002098:	460b      	mov	r3, r1
 800209a:	ebb2 080a 	subs.w	r8, r2, sl
 800209e:	eb63 090b 	sbc.w	r9, r3, fp
 80020a2:	f04f 0200 	mov.w	r2, #0
 80020a6:	f04f 0300 	mov.w	r3, #0
 80020aa:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80020ae:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80020b2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80020b6:	ebb2 0408 	subs.w	r4, r2, r8
 80020ba:	eb63 0509 	sbc.w	r5, r3, r9
 80020be:	f04f 0200 	mov.w	r2, #0
 80020c2:	f04f 0300 	mov.w	r3, #0
 80020c6:	00eb      	lsls	r3, r5, #3
 80020c8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80020cc:	00e2      	lsls	r2, r4, #3
 80020ce:	4614      	mov	r4, r2
 80020d0:	461d      	mov	r5, r3
 80020d2:	eb14 030a 	adds.w	r3, r4, sl
 80020d6:	603b      	str	r3, [r7, #0]
 80020d8:	eb45 030b 	adc.w	r3, r5, fp
 80020dc:	607b      	str	r3, [r7, #4]
 80020de:	f04f 0200 	mov.w	r2, #0
 80020e2:	f04f 0300 	mov.w	r3, #0
 80020e6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80020ea:	4629      	mov	r1, r5
 80020ec:	028b      	lsls	r3, r1, #10
 80020ee:	4621      	mov	r1, r4
 80020f0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80020f4:	4621      	mov	r1, r4
 80020f6:	028a      	lsls	r2, r1, #10
 80020f8:	4610      	mov	r0, r2
 80020fa:	4619      	mov	r1, r3
 80020fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020fe:	2200      	movs	r2, #0
 8002100:	60bb      	str	r3, [r7, #8]
 8002102:	60fa      	str	r2, [r7, #12]
 8002104:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002108:	f7fe f8ea 	bl	80002e0 <__aeabi_uldivmod>
 800210c:	4602      	mov	r2, r0
 800210e:	460b      	mov	r3, r1
 8002110:	4613      	mov	r3, r2
 8002112:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002114:	4b0b      	ldr	r3, [pc, #44]	; (8002144 <HAL_RCC_GetSysClockFreq+0x180>)
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	0c1b      	lsrs	r3, r3, #16
 800211a:	f003 0303 	and.w	r3, r3, #3
 800211e:	3301      	adds	r3, #1
 8002120:	005b      	lsls	r3, r3, #1
 8002122:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8002124:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002128:	fbb2 f3f3 	udiv	r3, r2, r3
 800212c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800212e:	e002      	b.n	8002136 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002130:	4b05      	ldr	r3, [pc, #20]	; (8002148 <HAL_RCC_GetSysClockFreq+0x184>)
 8002132:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002134:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002136:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002138:	4618      	mov	r0, r3
 800213a:	3740      	adds	r7, #64	; 0x40
 800213c:	46bd      	mov	sp, r7
 800213e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002142:	bf00      	nop
 8002144:	40023800 	.word	0x40023800
 8002148:	00f42400 	.word	0x00f42400
 800214c:	017d7840 	.word	0x017d7840

08002150 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002150:	b480      	push	{r7}
 8002152:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002154:	4b03      	ldr	r3, [pc, #12]	; (8002164 <HAL_RCC_GetHCLKFreq+0x14>)
 8002156:	681b      	ldr	r3, [r3, #0]
}
 8002158:	4618      	mov	r0, r3
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr
 8002162:	bf00      	nop
 8002164:	20000024 	.word	0x20000024

08002168 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800216c:	f7ff fff0 	bl	8002150 <HAL_RCC_GetHCLKFreq>
 8002170:	4602      	mov	r2, r0
 8002172:	4b05      	ldr	r3, [pc, #20]	; (8002188 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002174:	689b      	ldr	r3, [r3, #8]
 8002176:	0a9b      	lsrs	r3, r3, #10
 8002178:	f003 0307 	and.w	r3, r3, #7
 800217c:	4903      	ldr	r1, [pc, #12]	; (800218c <HAL_RCC_GetPCLK1Freq+0x24>)
 800217e:	5ccb      	ldrb	r3, [r1, r3]
 8002180:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002184:	4618      	mov	r0, r3
 8002186:	bd80      	pop	{r7, pc}
 8002188:	40023800 	.word	0x40023800
 800218c:	08005b30 	.word	0x08005b30

08002190 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002194:	f7ff ffdc 	bl	8002150 <HAL_RCC_GetHCLKFreq>
 8002198:	4602      	mov	r2, r0
 800219a:	4b05      	ldr	r3, [pc, #20]	; (80021b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800219c:	689b      	ldr	r3, [r3, #8]
 800219e:	0b5b      	lsrs	r3, r3, #13
 80021a0:	f003 0307 	and.w	r3, r3, #7
 80021a4:	4903      	ldr	r1, [pc, #12]	; (80021b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80021a6:	5ccb      	ldrb	r3, [r1, r3]
 80021a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	bd80      	pop	{r7, pc}
 80021b0:	40023800 	.word	0x40023800
 80021b4:	08005b30 	.word	0x08005b30

080021b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b088      	sub	sp, #32
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80021c0:	2300      	movs	r3, #0
 80021c2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80021c4:	2300      	movs	r3, #0
 80021c6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80021c8:	2300      	movs	r3, #0
 80021ca:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80021cc:	2300      	movs	r3, #0
 80021ce:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80021d0:	2300      	movs	r3, #0
 80021d2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f003 0301 	and.w	r3, r3, #1
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d012      	beq.n	8002206 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80021e0:	4b69      	ldr	r3, [pc, #420]	; (8002388 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021e2:	689b      	ldr	r3, [r3, #8]
 80021e4:	4a68      	ldr	r2, [pc, #416]	; (8002388 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021e6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80021ea:	6093      	str	r3, [r2, #8]
 80021ec:	4b66      	ldr	r3, [pc, #408]	; (8002388 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021ee:	689a      	ldr	r2, [r3, #8]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021f4:	4964      	ldr	r1, [pc, #400]	; (8002388 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021f6:	4313      	orrs	r3, r2
 80021f8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d101      	bne.n	8002206 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002202:	2301      	movs	r3, #1
 8002204:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800220e:	2b00      	cmp	r3, #0
 8002210:	d017      	beq.n	8002242 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002212:	4b5d      	ldr	r3, [pc, #372]	; (8002388 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002214:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002218:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002220:	4959      	ldr	r1, [pc, #356]	; (8002388 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002222:	4313      	orrs	r3, r2
 8002224:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800222c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002230:	d101      	bne.n	8002236 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002232:	2301      	movs	r3, #1
 8002234:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800223a:	2b00      	cmp	r3, #0
 800223c:	d101      	bne.n	8002242 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800223e:	2301      	movs	r3, #1
 8002240:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800224a:	2b00      	cmp	r3, #0
 800224c:	d017      	beq.n	800227e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800224e:	4b4e      	ldr	r3, [pc, #312]	; (8002388 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002250:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002254:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800225c:	494a      	ldr	r1, [pc, #296]	; (8002388 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800225e:	4313      	orrs	r3, r2
 8002260:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002268:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800226c:	d101      	bne.n	8002272 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800226e:	2301      	movs	r3, #1
 8002270:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002276:	2b00      	cmp	r3, #0
 8002278:	d101      	bne.n	800227e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800227a:	2301      	movs	r3, #1
 800227c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002286:	2b00      	cmp	r3, #0
 8002288:	d001      	beq.n	800228e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800228a:	2301      	movs	r3, #1
 800228c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f003 0320 	and.w	r3, r3, #32
 8002296:	2b00      	cmp	r3, #0
 8002298:	f000 808b 	beq.w	80023b2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800229c:	4b3a      	ldr	r3, [pc, #232]	; (8002388 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800229e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a0:	4a39      	ldr	r2, [pc, #228]	; (8002388 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022a6:	6413      	str	r3, [r2, #64]	; 0x40
 80022a8:	4b37      	ldr	r3, [pc, #220]	; (8002388 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022b0:	60bb      	str	r3, [r7, #8]
 80022b2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80022b4:	4b35      	ldr	r3, [pc, #212]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a34      	ldr	r2, [pc, #208]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80022ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022be:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80022c0:	f7fe ff66 	bl	8001190 <HAL_GetTick>
 80022c4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80022c6:	e008      	b.n	80022da <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022c8:	f7fe ff62 	bl	8001190 <HAL_GetTick>
 80022cc:	4602      	mov	r2, r0
 80022ce:	697b      	ldr	r3, [r7, #20]
 80022d0:	1ad3      	subs	r3, r2, r3
 80022d2:	2b64      	cmp	r3, #100	; 0x64
 80022d4:	d901      	bls.n	80022da <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80022d6:	2303      	movs	r3, #3
 80022d8:	e38f      	b.n	80029fa <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80022da:	4b2c      	ldr	r3, [pc, #176]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d0f0      	beq.n	80022c8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80022e6:	4b28      	ldr	r3, [pc, #160]	; (8002388 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022ee:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80022f0:	693b      	ldr	r3, [r7, #16]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d035      	beq.n	8002362 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022fe:	693a      	ldr	r2, [r7, #16]
 8002300:	429a      	cmp	r2, r3
 8002302:	d02e      	beq.n	8002362 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002304:	4b20      	ldr	r3, [pc, #128]	; (8002388 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002306:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002308:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800230c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800230e:	4b1e      	ldr	r3, [pc, #120]	; (8002388 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002310:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002312:	4a1d      	ldr	r2, [pc, #116]	; (8002388 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002314:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002318:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800231a:	4b1b      	ldr	r3, [pc, #108]	; (8002388 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800231c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800231e:	4a1a      	ldr	r2, [pc, #104]	; (8002388 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002320:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002324:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002326:	4a18      	ldr	r2, [pc, #96]	; (8002388 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002328:	693b      	ldr	r3, [r7, #16]
 800232a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800232c:	4b16      	ldr	r3, [pc, #88]	; (8002388 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800232e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002330:	f003 0301 	and.w	r3, r3, #1
 8002334:	2b01      	cmp	r3, #1
 8002336:	d114      	bne.n	8002362 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002338:	f7fe ff2a 	bl	8001190 <HAL_GetTick>
 800233c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800233e:	e00a      	b.n	8002356 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002340:	f7fe ff26 	bl	8001190 <HAL_GetTick>
 8002344:	4602      	mov	r2, r0
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	1ad3      	subs	r3, r2, r3
 800234a:	f241 3288 	movw	r2, #5000	; 0x1388
 800234e:	4293      	cmp	r3, r2
 8002350:	d901      	bls.n	8002356 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002352:	2303      	movs	r3, #3
 8002354:	e351      	b.n	80029fa <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002356:	4b0c      	ldr	r3, [pc, #48]	; (8002388 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002358:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800235a:	f003 0302 	and.w	r3, r3, #2
 800235e:	2b00      	cmp	r3, #0
 8002360:	d0ee      	beq.n	8002340 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002366:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800236a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800236e:	d111      	bne.n	8002394 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002370:	4b05      	ldr	r3, [pc, #20]	; (8002388 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800237c:	4b04      	ldr	r3, [pc, #16]	; (8002390 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800237e:	400b      	ands	r3, r1
 8002380:	4901      	ldr	r1, [pc, #4]	; (8002388 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002382:	4313      	orrs	r3, r2
 8002384:	608b      	str	r3, [r1, #8]
 8002386:	e00b      	b.n	80023a0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002388:	40023800 	.word	0x40023800
 800238c:	40007000 	.word	0x40007000
 8002390:	0ffffcff 	.word	0x0ffffcff
 8002394:	4bac      	ldr	r3, [pc, #688]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002396:	689b      	ldr	r3, [r3, #8]
 8002398:	4aab      	ldr	r2, [pc, #684]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800239a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800239e:	6093      	str	r3, [r2, #8]
 80023a0:	4ba9      	ldr	r3, [pc, #676]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023a2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023ac:	49a6      	ldr	r1, [pc, #664]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023ae:	4313      	orrs	r3, r2
 80023b0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f003 0310 	and.w	r3, r3, #16
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d010      	beq.n	80023e0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80023be:	4ba2      	ldr	r3, [pc, #648]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80023c4:	4aa0      	ldr	r2, [pc, #640]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80023ca:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80023ce:	4b9e      	ldr	r3, [pc, #632]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023d0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023d8:	499b      	ldr	r1, [pc, #620]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023da:	4313      	orrs	r3, r2
 80023dc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d00a      	beq.n	8002402 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80023ec:	4b96      	ldr	r3, [pc, #600]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023f2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80023fa:	4993      	ldr	r1, [pc, #588]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023fc:	4313      	orrs	r3, r2
 80023fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800240a:	2b00      	cmp	r3, #0
 800240c:	d00a      	beq.n	8002424 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800240e:	4b8e      	ldr	r3, [pc, #568]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002410:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002414:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800241c:	498a      	ldr	r1, [pc, #552]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800241e:	4313      	orrs	r3, r2
 8002420:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800242c:	2b00      	cmp	r3, #0
 800242e:	d00a      	beq.n	8002446 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002430:	4b85      	ldr	r3, [pc, #532]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002432:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002436:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800243e:	4982      	ldr	r1, [pc, #520]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002440:	4313      	orrs	r3, r2
 8002442:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800244e:	2b00      	cmp	r3, #0
 8002450:	d00a      	beq.n	8002468 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002452:	4b7d      	ldr	r3, [pc, #500]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002454:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002458:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002460:	4979      	ldr	r1, [pc, #484]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002462:	4313      	orrs	r3, r2
 8002464:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002470:	2b00      	cmp	r3, #0
 8002472:	d00a      	beq.n	800248a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002474:	4b74      	ldr	r3, [pc, #464]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002476:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800247a:	f023 0203 	bic.w	r2, r3, #3
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002482:	4971      	ldr	r1, [pc, #452]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002484:	4313      	orrs	r3, r2
 8002486:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002492:	2b00      	cmp	r3, #0
 8002494:	d00a      	beq.n	80024ac <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002496:	4b6c      	ldr	r3, [pc, #432]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002498:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800249c:	f023 020c 	bic.w	r2, r3, #12
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024a4:	4968      	ldr	r1, [pc, #416]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80024a6:	4313      	orrs	r3, r2
 80024a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d00a      	beq.n	80024ce <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80024b8:	4b63      	ldr	r3, [pc, #396]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80024ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024be:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024c6:	4960      	ldr	r1, [pc, #384]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80024c8:	4313      	orrs	r3, r2
 80024ca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d00a      	beq.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80024da:	4b5b      	ldr	r3, [pc, #364]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80024dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024e0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024e8:	4957      	ldr	r1, [pc, #348]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80024ea:	4313      	orrs	r3, r2
 80024ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d00a      	beq.n	8002512 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80024fc:	4b52      	ldr	r3, [pc, #328]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80024fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002502:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800250a:	494f      	ldr	r1, [pc, #316]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800250c:	4313      	orrs	r3, r2
 800250e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800251a:	2b00      	cmp	r3, #0
 800251c:	d00a      	beq.n	8002534 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800251e:	4b4a      	ldr	r3, [pc, #296]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002520:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002524:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800252c:	4946      	ldr	r1, [pc, #280]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800252e:	4313      	orrs	r3, r2
 8002530:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800253c:	2b00      	cmp	r3, #0
 800253e:	d00a      	beq.n	8002556 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002540:	4b41      	ldr	r3, [pc, #260]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002542:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002546:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800254e:	493e      	ldr	r1, [pc, #248]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002550:	4313      	orrs	r3, r2
 8002552:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800255e:	2b00      	cmp	r3, #0
 8002560:	d00a      	beq.n	8002578 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002562:	4b39      	ldr	r3, [pc, #228]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002564:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002568:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002570:	4935      	ldr	r1, [pc, #212]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002572:	4313      	orrs	r3, r2
 8002574:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002580:	2b00      	cmp	r3, #0
 8002582:	d00a      	beq.n	800259a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002584:	4b30      	ldr	r3, [pc, #192]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002586:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800258a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002592:	492d      	ldr	r1, [pc, #180]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002594:	4313      	orrs	r3, r2
 8002596:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d011      	beq.n	80025ca <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80025a6:	4b28      	ldr	r3, [pc, #160]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80025a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025ac:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80025b4:	4924      	ldr	r1, [pc, #144]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80025b6:	4313      	orrs	r3, r2
 80025b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80025c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80025c4:	d101      	bne.n	80025ca <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80025c6:	2301      	movs	r3, #1
 80025c8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 0308 	and.w	r3, r3, #8
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d001      	beq.n	80025da <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80025d6:	2301      	movs	r3, #1
 80025d8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d00a      	beq.n	80025fc <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80025e6:	4b18      	ldr	r3, [pc, #96]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80025e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025ec:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025f4:	4914      	ldr	r1, [pc, #80]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80025f6:	4313      	orrs	r3, r2
 80025f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002604:	2b00      	cmp	r3, #0
 8002606:	d00b      	beq.n	8002620 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002608:	4b0f      	ldr	r3, [pc, #60]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800260a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800260e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002618:	490b      	ldr	r1, [pc, #44]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800261a:	4313      	orrs	r3, r2
 800261c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002628:	2b00      	cmp	r3, #0
 800262a:	d00f      	beq.n	800264c <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800262c:	4b06      	ldr	r3, [pc, #24]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800262e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002632:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800263c:	4902      	ldr	r1, [pc, #8]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800263e:	4313      	orrs	r3, r2
 8002640:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002644:	e002      	b.n	800264c <HAL_RCCEx_PeriphCLKConfig+0x494>
 8002646:	bf00      	nop
 8002648:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002654:	2b00      	cmp	r3, #0
 8002656:	d00b      	beq.n	8002670 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002658:	4b8a      	ldr	r3, [pc, #552]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800265a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800265e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002668:	4986      	ldr	r1, [pc, #536]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800266a:	4313      	orrs	r3, r2
 800266c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002678:	2b00      	cmp	r3, #0
 800267a:	d00b      	beq.n	8002694 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800267c:	4b81      	ldr	r3, [pc, #516]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800267e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002682:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800268c:	497d      	ldr	r1, [pc, #500]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800268e:	4313      	orrs	r3, r2
 8002690:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002694:	69fb      	ldr	r3, [r7, #28]
 8002696:	2b01      	cmp	r3, #1
 8002698:	d006      	beq.n	80026a8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	f000 80d6 	beq.w	8002854 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80026a8:	4b76      	ldr	r3, [pc, #472]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a75      	ldr	r2, [pc, #468]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80026ae:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80026b2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026b4:	f7fe fd6c 	bl	8001190 <HAL_GetTick>
 80026b8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80026ba:	e008      	b.n	80026ce <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80026bc:	f7fe fd68 	bl	8001190 <HAL_GetTick>
 80026c0:	4602      	mov	r2, r0
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	1ad3      	subs	r3, r2, r3
 80026c6:	2b64      	cmp	r3, #100	; 0x64
 80026c8:	d901      	bls.n	80026ce <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80026ca:	2303      	movs	r3, #3
 80026cc:	e195      	b.n	80029fa <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80026ce:	4b6d      	ldr	r3, [pc, #436]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d1f0      	bne.n	80026bc <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 0301 	and.w	r3, r3, #1
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d021      	beq.n	800272a <HAL_RCCEx_PeriphCLKConfig+0x572>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d11d      	bne.n	800272a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80026ee:	4b65      	ldr	r3, [pc, #404]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80026f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80026f4:	0c1b      	lsrs	r3, r3, #16
 80026f6:	f003 0303 	and.w	r3, r3, #3
 80026fa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80026fc:	4b61      	ldr	r3, [pc, #388]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80026fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002702:	0e1b      	lsrs	r3, r3, #24
 8002704:	f003 030f 	and.w	r3, r3, #15
 8002708:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	019a      	lsls	r2, r3, #6
 8002710:	693b      	ldr	r3, [r7, #16]
 8002712:	041b      	lsls	r3, r3, #16
 8002714:	431a      	orrs	r2, r3
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	061b      	lsls	r3, r3, #24
 800271a:	431a      	orrs	r2, r3
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	689b      	ldr	r3, [r3, #8]
 8002720:	071b      	lsls	r3, r3, #28
 8002722:	4958      	ldr	r1, [pc, #352]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002724:	4313      	orrs	r3, r2
 8002726:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002732:	2b00      	cmp	r3, #0
 8002734:	d004      	beq.n	8002740 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800273a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800273e:	d00a      	beq.n	8002756 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002748:	2b00      	cmp	r3, #0
 800274a:	d02e      	beq.n	80027aa <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002750:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002754:	d129      	bne.n	80027aa <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002756:	4b4b      	ldr	r3, [pc, #300]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002758:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800275c:	0c1b      	lsrs	r3, r3, #16
 800275e:	f003 0303 	and.w	r3, r3, #3
 8002762:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002764:	4b47      	ldr	r3, [pc, #284]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002766:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800276a:	0f1b      	lsrs	r3, r3, #28
 800276c:	f003 0307 	and.w	r3, r3, #7
 8002770:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	019a      	lsls	r2, r3, #6
 8002778:	693b      	ldr	r3, [r7, #16]
 800277a:	041b      	lsls	r3, r3, #16
 800277c:	431a      	orrs	r2, r3
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	68db      	ldr	r3, [r3, #12]
 8002782:	061b      	lsls	r3, r3, #24
 8002784:	431a      	orrs	r2, r3
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	071b      	lsls	r3, r3, #28
 800278a:	493e      	ldr	r1, [pc, #248]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800278c:	4313      	orrs	r3, r2
 800278e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002792:	4b3c      	ldr	r3, [pc, #240]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002794:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002798:	f023 021f 	bic.w	r2, r3, #31
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a0:	3b01      	subs	r3, #1
 80027a2:	4938      	ldr	r1, [pc, #224]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80027a4:	4313      	orrs	r3, r2
 80027a6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d01d      	beq.n	80027f2 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80027b6:	4b33      	ldr	r3, [pc, #204]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80027b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80027bc:	0e1b      	lsrs	r3, r3, #24
 80027be:	f003 030f 	and.w	r3, r3, #15
 80027c2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80027c4:	4b2f      	ldr	r3, [pc, #188]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80027c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80027ca:	0f1b      	lsrs	r3, r3, #28
 80027cc:	f003 0307 	and.w	r3, r3, #7
 80027d0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	019a      	lsls	r2, r3, #6
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	691b      	ldr	r3, [r3, #16]
 80027dc:	041b      	lsls	r3, r3, #16
 80027de:	431a      	orrs	r2, r3
 80027e0:	693b      	ldr	r3, [r7, #16]
 80027e2:	061b      	lsls	r3, r3, #24
 80027e4:	431a      	orrs	r2, r3
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	071b      	lsls	r3, r3, #28
 80027ea:	4926      	ldr	r1, [pc, #152]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80027ec:	4313      	orrs	r3, r2
 80027ee:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d011      	beq.n	8002822 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	019a      	lsls	r2, r3, #6
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	691b      	ldr	r3, [r3, #16]
 8002808:	041b      	lsls	r3, r3, #16
 800280a:	431a      	orrs	r2, r3
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	68db      	ldr	r3, [r3, #12]
 8002810:	061b      	lsls	r3, r3, #24
 8002812:	431a      	orrs	r2, r3
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	689b      	ldr	r3, [r3, #8]
 8002818:	071b      	lsls	r3, r3, #28
 800281a:	491a      	ldr	r1, [pc, #104]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800281c:	4313      	orrs	r3, r2
 800281e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002822:	4b18      	ldr	r3, [pc, #96]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a17      	ldr	r2, [pc, #92]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002828:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800282c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800282e:	f7fe fcaf 	bl	8001190 <HAL_GetTick>
 8002832:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002834:	e008      	b.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002836:	f7fe fcab 	bl	8001190 <HAL_GetTick>
 800283a:	4602      	mov	r2, r0
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	1ad3      	subs	r3, r2, r3
 8002840:	2b64      	cmp	r3, #100	; 0x64
 8002842:	d901      	bls.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002844:	2303      	movs	r3, #3
 8002846:	e0d8      	b.n	80029fa <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002848:	4b0e      	ldr	r3, [pc, #56]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002850:	2b00      	cmp	r3, #0
 8002852:	d0f0      	beq.n	8002836 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002854:	69bb      	ldr	r3, [r7, #24]
 8002856:	2b01      	cmp	r3, #1
 8002858:	f040 80ce 	bne.w	80029f8 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800285c:	4b09      	ldr	r3, [pc, #36]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a08      	ldr	r2, [pc, #32]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002862:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002866:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002868:	f7fe fc92 	bl	8001190 <HAL_GetTick>
 800286c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800286e:	e00b      	b.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002870:	f7fe fc8e 	bl	8001190 <HAL_GetTick>
 8002874:	4602      	mov	r2, r0
 8002876:	697b      	ldr	r3, [r7, #20]
 8002878:	1ad3      	subs	r3, r2, r3
 800287a:	2b64      	cmp	r3, #100	; 0x64
 800287c:	d904      	bls.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800287e:	2303      	movs	r3, #3
 8002880:	e0bb      	b.n	80029fa <HAL_RCCEx_PeriphCLKConfig+0x842>
 8002882:	bf00      	nop
 8002884:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002888:	4b5e      	ldr	r3, [pc, #376]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002890:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002894:	d0ec      	beq.n	8002870 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d003      	beq.n	80028aa <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d009      	beq.n	80028be <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d02e      	beq.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d12a      	bne.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80028be:	4b51      	ldr	r3, [pc, #324]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80028c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028c4:	0c1b      	lsrs	r3, r3, #16
 80028c6:	f003 0303 	and.w	r3, r3, #3
 80028ca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80028cc:	4b4d      	ldr	r3, [pc, #308]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80028ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028d2:	0f1b      	lsrs	r3, r3, #28
 80028d4:	f003 0307 	and.w	r3, r3, #7
 80028d8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	695b      	ldr	r3, [r3, #20]
 80028de:	019a      	lsls	r2, r3, #6
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	041b      	lsls	r3, r3, #16
 80028e4:	431a      	orrs	r2, r3
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	699b      	ldr	r3, [r3, #24]
 80028ea:	061b      	lsls	r3, r3, #24
 80028ec:	431a      	orrs	r2, r3
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	071b      	lsls	r3, r3, #28
 80028f2:	4944      	ldr	r1, [pc, #272]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80028f4:	4313      	orrs	r3, r2
 80028f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80028fa:	4b42      	ldr	r3, [pc, #264]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80028fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002900:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002908:	3b01      	subs	r3, #1
 800290a:	021b      	lsls	r3, r3, #8
 800290c:	493d      	ldr	r1, [pc, #244]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800290e:	4313      	orrs	r3, r2
 8002910:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800291c:	2b00      	cmp	r3, #0
 800291e:	d022      	beq.n	8002966 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002924:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002928:	d11d      	bne.n	8002966 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800292a:	4b36      	ldr	r3, [pc, #216]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800292c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002930:	0e1b      	lsrs	r3, r3, #24
 8002932:	f003 030f 	and.w	r3, r3, #15
 8002936:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002938:	4b32      	ldr	r3, [pc, #200]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800293a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800293e:	0f1b      	lsrs	r3, r3, #28
 8002940:	f003 0307 	and.w	r3, r3, #7
 8002944:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	695b      	ldr	r3, [r3, #20]
 800294a:	019a      	lsls	r2, r3, #6
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6a1b      	ldr	r3, [r3, #32]
 8002950:	041b      	lsls	r3, r3, #16
 8002952:	431a      	orrs	r2, r3
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	061b      	lsls	r3, r3, #24
 8002958:	431a      	orrs	r2, r3
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	071b      	lsls	r3, r3, #28
 800295e:	4929      	ldr	r1, [pc, #164]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002960:	4313      	orrs	r3, r2
 8002962:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 0308 	and.w	r3, r3, #8
 800296e:	2b00      	cmp	r3, #0
 8002970:	d028      	beq.n	80029c4 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002972:	4b24      	ldr	r3, [pc, #144]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002974:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002978:	0e1b      	lsrs	r3, r3, #24
 800297a:	f003 030f 	and.w	r3, r3, #15
 800297e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002980:	4b20      	ldr	r3, [pc, #128]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002982:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002986:	0c1b      	lsrs	r3, r3, #16
 8002988:	f003 0303 	and.w	r3, r3, #3
 800298c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	695b      	ldr	r3, [r3, #20]
 8002992:	019a      	lsls	r2, r3, #6
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	041b      	lsls	r3, r3, #16
 8002998:	431a      	orrs	r2, r3
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	061b      	lsls	r3, r3, #24
 800299e:	431a      	orrs	r2, r3
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	69db      	ldr	r3, [r3, #28]
 80029a4:	071b      	lsls	r3, r3, #28
 80029a6:	4917      	ldr	r1, [pc, #92]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80029a8:	4313      	orrs	r3, r2
 80029aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80029ae:	4b15      	ldr	r3, [pc, #84]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80029b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80029b4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029bc:	4911      	ldr	r1, [pc, #68]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80029be:	4313      	orrs	r3, r2
 80029c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80029c4:	4b0f      	ldr	r3, [pc, #60]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a0e      	ldr	r2, [pc, #56]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80029ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029d0:	f7fe fbde 	bl	8001190 <HAL_GetTick>
 80029d4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80029d6:	e008      	b.n	80029ea <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80029d8:	f7fe fbda 	bl	8001190 <HAL_GetTick>
 80029dc:	4602      	mov	r2, r0
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	1ad3      	subs	r3, r2, r3
 80029e2:	2b64      	cmp	r3, #100	; 0x64
 80029e4:	d901      	bls.n	80029ea <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80029e6:	2303      	movs	r3, #3
 80029e8:	e007      	b.n	80029fa <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80029ea:	4b06      	ldr	r3, [pc, #24]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80029f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80029f6:	d1ef      	bne.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80029f8:	2300      	movs	r3, #0
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	3720      	adds	r7, #32
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	bf00      	nop
 8002a04:	40023800 	.word	0x40023800

08002a08 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b084      	sub	sp, #16
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d101      	bne.n	8002a1a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	e09d      	b.n	8002b56 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d108      	bne.n	8002a34 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002a2a:	d009      	beq.n	8002a40 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	61da      	str	r2, [r3, #28]
 8002a32:	e005      	b.n	8002a40 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2200      	movs	r2, #0
 8002a38:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2200      	movs	r2, #0
 8002a44:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002a4c:	b2db      	uxtb	r3, r3
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d106      	bne.n	8002a60 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2200      	movs	r2, #0
 8002a56:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002a5a:	6878      	ldr	r0, [r7, #4]
 8002a5c:	f7fe f930 	bl	8000cc0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2202      	movs	r2, #2
 8002a64:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	681a      	ldr	r2, [r3, #0]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a76:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	68db      	ldr	r3, [r3, #12]
 8002a7c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002a80:	d902      	bls.n	8002a88 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002a82:	2300      	movs	r3, #0
 8002a84:	60fb      	str	r3, [r7, #12]
 8002a86:	e002      	b.n	8002a8e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002a88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a8c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	68db      	ldr	r3, [r3, #12]
 8002a92:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002a96:	d007      	beq.n	8002aa8 <HAL_SPI_Init+0xa0>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	68db      	ldr	r3, [r3, #12]
 8002a9c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002aa0:	d002      	beq.n	8002aa8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	689b      	ldr	r3, [r3, #8]
 8002ab4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002ab8:	431a      	orrs	r2, r3
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	691b      	ldr	r3, [r3, #16]
 8002abe:	f003 0302 	and.w	r3, r3, #2
 8002ac2:	431a      	orrs	r2, r3
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	695b      	ldr	r3, [r3, #20]
 8002ac8:	f003 0301 	and.w	r3, r3, #1
 8002acc:	431a      	orrs	r2, r3
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	699b      	ldr	r3, [r3, #24]
 8002ad2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ad6:	431a      	orrs	r2, r3
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	69db      	ldr	r3, [r3, #28]
 8002adc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002ae0:	431a      	orrs	r2, r3
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6a1b      	ldr	r3, [r3, #32]
 8002ae6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002aea:	ea42 0103 	orr.w	r1, r2, r3
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002af2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	430a      	orrs	r2, r1
 8002afc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	699b      	ldr	r3, [r3, #24]
 8002b02:	0c1b      	lsrs	r3, r3, #16
 8002b04:	f003 0204 	and.w	r2, r3, #4
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b0c:	f003 0310 	and.w	r3, r3, #16
 8002b10:	431a      	orrs	r2, r3
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b16:	f003 0308 	and.w	r3, r3, #8
 8002b1a:	431a      	orrs	r2, r3
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	68db      	ldr	r3, [r3, #12]
 8002b20:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002b24:	ea42 0103 	orr.w	r1, r2, r3
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	430a      	orrs	r2, r1
 8002b34:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	69da      	ldr	r2, [r3, #28]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b44:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2201      	movs	r2, #1
 8002b50:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002b54:	2300      	movs	r3, #0
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	3710      	adds	r7, #16
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}
	...

08002b60 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8002b60:	b480      	push	{r7}
 8002b62:	b087      	sub	sp, #28
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	60f8      	str	r0, [r7, #12]
 8002b68:	60b9      	str	r1, [r7, #8]
 8002b6a:	4613      	mov	r3, r2
 8002b6c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002b78:	2b01      	cmp	r3, #1
 8002b7a:	d101      	bne.n	8002b80 <HAL_SPI_Transmit_IT+0x20>
 8002b7c:	2302      	movs	r3, #2
 8002b7e:	e072      	b.n	8002c66 <HAL_SPI_Transmit_IT+0x106>
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	2201      	movs	r2, #1
 8002b84:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if ((pData == NULL) || (Size == 0U))
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d002      	beq.n	8002b94 <HAL_SPI_Transmit_IT+0x34>
 8002b8e:	88fb      	ldrh	r3, [r7, #6]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d102      	bne.n	8002b9a <HAL_SPI_Transmit_IT+0x3a>
  {
    errorcode = HAL_ERROR;
 8002b94:	2301      	movs	r3, #1
 8002b96:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002b98:	e060      	b.n	8002c5c <HAL_SPI_Transmit_IT+0xfc>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002ba0:	b2db      	uxtb	r3, r3
 8002ba2:	2b01      	cmp	r3, #1
 8002ba4:	d002      	beq.n	8002bac <HAL_SPI_Transmit_IT+0x4c>
  {
    errorcode = HAL_BUSY;
 8002ba6:	2302      	movs	r3, #2
 8002ba8:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002baa:	e057      	b.n	8002c5c <HAL_SPI_Transmit_IT+0xfc>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	2203      	movs	r2, #3
 8002bb0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	68ba      	ldr	r2, [r7, #8]
 8002bbe:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	88fa      	ldrh	r2, [r7, #6]
 8002bc4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	88fa      	ldrh	r2, [r7, #6]
 8002bca:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxISR       = NULL;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	2200      	movs	r2, #0
 8002be6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	68db      	ldr	r3, [r3, #12]
 8002bec:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002bf0:	d903      	bls.n	8002bfa <HAL_SPI_Transmit_IT+0x9a>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	4a1f      	ldr	r2, [pc, #124]	; (8002c74 <HAL_SPI_Transmit_IT+0x114>)
 8002bf6:	651a      	str	r2, [r3, #80]	; 0x50
 8002bf8:	e002      	b.n	8002c00 <HAL_SPI_Transmit_IT+0xa0>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	4a1e      	ldr	r2, [pc, #120]	; (8002c78 <HAL_SPI_Transmit_IT+0x118>)
 8002bfe:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c08:	d10f      	bne.n	8002c2a <HAL_SPI_Transmit_IT+0xca>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	681a      	ldr	r2, [r3, #0]
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c18:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	681a      	ldr	r2, [r3, #0]
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002c28:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	685a      	ldr	r2, [r3, #4]
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 8002c38:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c44:	2b40      	cmp	r3, #64	; 0x40
 8002c46:	d008      	beq.n	8002c5a <HAL_SPI_Transmit_IT+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c56:	601a      	str	r2, [r3, #0]
 8002c58:	e000      	b.n	8002c5c <HAL_SPI_Transmit_IT+0xfc>
  }

error :
 8002c5a:	bf00      	nop
  __HAL_UNLOCK(hspi);
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002c64:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	371c      	adds	r7, #28
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c70:	4770      	bx	lr
 8002c72:	bf00      	nop
 8002c74:	0800345b 	.word	0x0800345b
 8002c78:	08003415 	.word	0x08003415

08002c7c <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b086      	sub	sp, #24
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	60f8      	str	r0, [r7, #12]
 8002c84:	60b9      	str	r1, [r7, #8]
 8002c86:	4613      	mov	r3, r2
 8002c88:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	689b      	ldr	r3, [r3, #8]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d110      	bne.n	8002cb8 <HAL_SPI_Receive_IT+0x3c>
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002c9e:	d10b      	bne.n	8002cb8 <HAL_SPI_Receive_IT+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	2204      	movs	r2, #4
 8002ca4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 8002ca8:	88fb      	ldrh	r3, [r7, #6]
 8002caa:	68ba      	ldr	r2, [r7, #8]
 8002cac:	68b9      	ldr	r1, [r7, #8]
 8002cae:	68f8      	ldr	r0, [r7, #12]
 8002cb0:	f000 f894 	bl	8002ddc <HAL_SPI_TransmitReceive_IT>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	e089      	b.n	8002dcc <HAL_SPI_Receive_IT+0x150>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002cbe:	2b01      	cmp	r3, #1
 8002cc0:	d101      	bne.n	8002cc6 <HAL_SPI_Receive_IT+0x4a>
 8002cc2:	2302      	movs	r3, #2
 8002cc4:	e082      	b.n	8002dcc <HAL_SPI_Receive_IT+0x150>
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	2201      	movs	r2, #1
 8002cca:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002cd4:	b2db      	uxtb	r3, r3
 8002cd6:	2b01      	cmp	r3, #1
 8002cd8:	d002      	beq.n	8002ce0 <HAL_SPI_Receive_IT+0x64>
  {
    errorcode = HAL_BUSY;
 8002cda:	2302      	movs	r3, #2
 8002cdc:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002cde:	e070      	b.n	8002dc2 <HAL_SPI_Receive_IT+0x146>
  }

  if ((pData == NULL) || (Size == 0U))
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d002      	beq.n	8002cec <HAL_SPI_Receive_IT+0x70>
 8002ce6:	88fb      	ldrh	r3, [r7, #6]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d102      	bne.n	8002cf2 <HAL_SPI_Receive_IT+0x76>
  {
    errorcode = HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002cf0:	e067      	b.n	8002dc2 <HAL_SPI_Receive_IT+0x146>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	2204      	movs	r2, #4
 8002cf6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	68ba      	ldr	r2, [r7, #8]
 8002d04:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	88fa      	ldrh	r2, [r7, #6]
 8002d0a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	88fa      	ldrh	r2, [r7, #6]
 8002d12:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	2200      	movs	r2, #0
 8002d26:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check the data size to adapt Rx threshold and the set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	68db      	ldr	r3, [r3, #12]
 8002d32:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002d36:	d90b      	bls.n	8002d50 <HAL_SPI_Receive_IT+0xd4>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	685a      	ldr	r2, [r3, #4]
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002d46:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	4a22      	ldr	r2, [pc, #136]	; (8002dd4 <HAL_SPI_Receive_IT+0x158>)
 8002d4c:	64da      	str	r2, [r3, #76]	; 0x4c
 8002d4e:	e00a      	b.n	8002d66 <HAL_SPI_Receive_IT+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	685a      	ldr	r2, [r3, #4]
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002d5e:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_8BIT;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	4a1d      	ldr	r2, [pc, #116]	; (8002dd8 <HAL_SPI_Receive_IT+0x15c>)
 8002d64:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d6e:	d10f      	bne.n	8002d90 <HAL_SPI_Receive_IT+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	681a      	ldr	r2, [r3, #0]
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d7e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	681a      	ldr	r2, [r3, #0]
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002d8e:	601a      	str	r2, [r3, #0]
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	685a      	ldr	r2, [r3, #4]
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8002d9e:	605a      	str	r2, [r3, #4]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002daa:	2b40      	cmp	r3, #64	; 0x40
 8002dac:	d008      	beq.n	8002dc0 <HAL_SPI_Receive_IT+0x144>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	681a      	ldr	r2, [r3, #0]
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002dbc:	601a      	str	r2, [r3, #0]
 8002dbe:	e000      	b.n	8002dc2 <HAL_SPI_Receive_IT+0x146>
  }

error :
 8002dc0:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002dca:	7dfb      	ldrb	r3, [r7, #23]
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	3718      	adds	r7, #24
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bd80      	pop	{r7, pc}
 8002dd4:	080033c9 	.word	0x080033c9
 8002dd8:	08003379 	.word	0x08003379

08002ddc <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b087      	sub	sp, #28
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	60f8      	str	r0, [r7, #12]
 8002de4:	60b9      	str	r1, [r7, #8]
 8002de6:	607a      	str	r2, [r7, #4]
 8002de8:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002dea:	2300      	movs	r3, #0
 8002dec:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002df4:	2b01      	cmp	r3, #1
 8002df6:	d101      	bne.n	8002dfc <HAL_SPI_TransmitReceive_IT+0x20>
 8002df8:	2302      	movs	r3, #2
 8002dfa:	e091      	b.n	8002f20 <HAL_SPI_TransmitReceive_IT+0x144>
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	2201      	movs	r2, #1
 8002e00:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002e0a:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002e12:	7dbb      	ldrb	r3, [r7, #22]
 8002e14:	2b01      	cmp	r3, #1
 8002e16:	d00d      	beq.n	8002e34 <HAL_SPI_TransmitReceive_IT+0x58>
 8002e18:	693b      	ldr	r3, [r7, #16]
 8002e1a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e1e:	d106      	bne.n	8002e2e <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d102      	bne.n	8002e2e <HAL_SPI_TransmitReceive_IT+0x52>
 8002e28:	7dbb      	ldrb	r3, [r7, #22]
 8002e2a:	2b04      	cmp	r3, #4
 8002e2c:	d002      	beq.n	8002e34 <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 8002e2e:	2302      	movs	r3, #2
 8002e30:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002e32:	e070      	b.n	8002f16 <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d005      	beq.n	8002e46 <HAL_SPI_TransmitReceive_IT+0x6a>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d002      	beq.n	8002e46 <HAL_SPI_TransmitReceive_IT+0x6a>
 8002e40:	887b      	ldrh	r3, [r7, #2]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d102      	bne.n	8002e4c <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002e4a:	e064      	b.n	8002f16 <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002e52:	b2db      	uxtb	r3, r3
 8002e54:	2b04      	cmp	r3, #4
 8002e56:	d003      	beq.n	8002e60 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	2205      	movs	r2, #5
 8002e5c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	2200      	movs	r2, #0
 8002e64:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	68ba      	ldr	r2, [r7, #8]
 8002e6a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	887a      	ldrh	r2, [r7, #2]
 8002e70:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	887a      	ldrh	r2, [r7, #2]
 8002e76:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	687a      	ldr	r2, [r7, #4]
 8002e7c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	887a      	ldrh	r2, [r7, #2]
 8002e82:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	887a      	ldrh	r2, [r7, #2]
 8002e8a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	68db      	ldr	r3, [r3, #12]
 8002e92:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002e96:	d906      	bls.n	8002ea6 <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	4a24      	ldr	r2, [pc, #144]	; (8002f2c <HAL_SPI_TransmitReceive_IT+0x150>)
 8002e9c:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	4a23      	ldr	r2, [pc, #140]	; (8002f30 <HAL_SPI_TransmitReceive_IT+0x154>)
 8002ea2:	651a      	str	r2, [r3, #80]	; 0x50
 8002ea4:	e005      	b.n	8002eb2 <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	4a22      	ldr	r2, [pc, #136]	; (8002f34 <HAL_SPI_TransmitReceive_IT+0x158>)
 8002eaa:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	4a22      	ldr	r2, [pc, #136]	; (8002f38 <HAL_SPI_TransmitReceive_IT+0x15c>)
 8002eb0:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	68db      	ldr	r3, [r3, #12]
 8002eb6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002eba:	d802      	bhi.n	8002ec2 <HAL_SPI_TransmitReceive_IT+0xe6>
 8002ebc:	887b      	ldrh	r3, [r7, #2]
 8002ebe:	2b01      	cmp	r3, #1
 8002ec0:	d908      	bls.n	8002ed4 <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	685a      	ldr	r2, [r3, #4]
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002ed0:	605a      	str	r2, [r3, #4]
 8002ed2:	e007      	b.n	8002ee4 <HAL_SPI_TransmitReceive_IT+0x108>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	685a      	ldr	r2, [r3, #4]
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002ee2:	605a      	str	r2, [r3, #4]
  }

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	685a      	ldr	r2, [r3, #4]
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 8002ef2:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002efe:	2b40      	cmp	r3, #64	; 0x40
 8002f00:	d008      	beq.n	8002f14 <HAL_SPI_TransmitReceive_IT+0x138>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	681a      	ldr	r2, [r3, #0]
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f10:	601a      	str	r2, [r3, #0]
 8002f12:	e000      	b.n	8002f16 <HAL_SPI_TransmitReceive_IT+0x13a>
  }

error :
 8002f14:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002f1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f20:	4618      	mov	r0, r3
 8002f22:	371c      	adds	r7, #28
 8002f24:	46bd      	mov	sp, r7
 8002f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2a:	4770      	bx	lr
 8002f2c:	080032b3 	.word	0x080032b3
 8002f30:	08003319 	.word	0x08003319
 8002f34:	08003163 	.word	0x08003163
 8002f38:	08003221 	.word	0x08003221

08002f3c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b088      	sub	sp, #32
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002f54:	69bb      	ldr	r3, [r7, #24]
 8002f56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d10e      	bne.n	8002f7c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002f5e:	69bb      	ldr	r3, [r7, #24]
 8002f60:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d009      	beq.n	8002f7c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002f68:	69fb      	ldr	r3, [r7, #28]
 8002f6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d004      	beq.n	8002f7c <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f76:	6878      	ldr	r0, [r7, #4]
 8002f78:	4798      	blx	r3
    return;
 8002f7a:	e0ce      	b.n	800311a <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8002f7c:	69bb      	ldr	r3, [r7, #24]
 8002f7e:	f003 0302 	and.w	r3, r3, #2
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d009      	beq.n	8002f9a <HAL_SPI_IRQHandler+0x5e>
 8002f86:	69fb      	ldr	r3, [r7, #28]
 8002f88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d004      	beq.n	8002f9a <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f94:	6878      	ldr	r0, [r7, #4]
 8002f96:	4798      	blx	r3
    return;
 8002f98:	e0bf      	b.n	800311a <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002f9a:	69bb      	ldr	r3, [r7, #24]
 8002f9c:	f003 0320 	and.w	r3, r3, #32
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d10a      	bne.n	8002fba <HAL_SPI_IRQHandler+0x7e>
 8002fa4:	69bb      	ldr	r3, [r7, #24]
 8002fa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d105      	bne.n	8002fba <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8002fae:	69bb      	ldr	r3, [r7, #24]
 8002fb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	f000 80b0 	beq.w	800311a <HAL_SPI_IRQHandler+0x1de>
 8002fba:	69fb      	ldr	r3, [r7, #28]
 8002fbc:	f003 0320 	and.w	r3, r3, #32
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	f000 80aa 	beq.w	800311a <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002fc6:	69bb      	ldr	r3, [r7, #24]
 8002fc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d023      	beq.n	8003018 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002fd6:	b2db      	uxtb	r3, r3
 8002fd8:	2b03      	cmp	r3, #3
 8002fda:	d011      	beq.n	8003000 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fe0:	f043 0204 	orr.w	r2, r3, #4
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002fe8:	2300      	movs	r3, #0
 8002fea:	617b      	str	r3, [r7, #20]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	68db      	ldr	r3, [r3, #12]
 8002ff2:	617b      	str	r3, [r7, #20]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	689b      	ldr	r3, [r3, #8]
 8002ffa:	617b      	str	r3, [r7, #20]
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	e00b      	b.n	8003018 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003000:	2300      	movs	r3, #0
 8003002:	613b      	str	r3, [r7, #16]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	68db      	ldr	r3, [r3, #12]
 800300a:	613b      	str	r3, [r7, #16]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	689b      	ldr	r3, [r3, #8]
 8003012:	613b      	str	r3, [r7, #16]
 8003014:	693b      	ldr	r3, [r7, #16]
        return;
 8003016:	e080      	b.n	800311a <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8003018:	69bb      	ldr	r3, [r7, #24]
 800301a:	f003 0320 	and.w	r3, r3, #32
 800301e:	2b00      	cmp	r3, #0
 8003020:	d014      	beq.n	800304c <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003026:	f043 0201 	orr.w	r2, r3, #1
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800302e:	2300      	movs	r3, #0
 8003030:	60fb      	str	r3, [r7, #12]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	60fb      	str	r3, [r7, #12]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	681a      	ldr	r2, [r3, #0]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003048:	601a      	str	r2, [r3, #0]
 800304a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800304c:	69bb      	ldr	r3, [r7, #24]
 800304e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003052:	2b00      	cmp	r3, #0
 8003054:	d00c      	beq.n	8003070 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800305a:	f043 0208 	orr.w	r2, r3, #8
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8003062:	2300      	movs	r3, #0
 8003064:	60bb      	str	r3, [r7, #8]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	60bb      	str	r3, [r7, #8]
 800306e:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003074:	2b00      	cmp	r3, #0
 8003076:	d04f      	beq.n	8003118 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	685a      	ldr	r2, [r3, #4]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003086:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2201      	movs	r2, #1
 800308c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003090:	69fb      	ldr	r3, [r7, #28]
 8003092:	f003 0302 	and.w	r3, r3, #2
 8003096:	2b00      	cmp	r3, #0
 8003098:	d104      	bne.n	80030a4 <HAL_SPI_IRQHandler+0x168>
 800309a:	69fb      	ldr	r3, [r7, #28]
 800309c:	f003 0301 	and.w	r3, r3, #1
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d034      	beq.n	800310e <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	685a      	ldr	r2, [r3, #4]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f022 0203 	bic.w	r2, r2, #3
 80030b2:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d011      	beq.n	80030e0 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030c0:	4a17      	ldr	r2, [pc, #92]	; (8003120 <HAL_SPI_IRQHandler+0x1e4>)
 80030c2:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030c8:	4618      	mov	r0, r3
 80030ca:	f7fe fa12 	bl	80014f2 <HAL_DMA_Abort_IT>
 80030ce:	4603      	mov	r3, r0
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d005      	beq.n	80030e0 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030d8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d016      	beq.n	8003116 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030ec:	4a0c      	ldr	r2, [pc, #48]	; (8003120 <HAL_SPI_IRQHandler+0x1e4>)
 80030ee:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030f4:	4618      	mov	r0, r3
 80030f6:	f7fe f9fc 	bl	80014f2 <HAL_DMA_Abort_IT>
 80030fa:	4603      	mov	r3, r0
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d00a      	beq.n	8003116 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003104:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 800310c:	e003      	b.n	8003116 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	f7fd fac0 	bl	8000694 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8003114:	e000      	b.n	8003118 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8003116:	bf00      	nop
    return;
 8003118:	bf00      	nop
  }
}
 800311a:	3720      	adds	r7, #32
 800311c:	46bd      	mov	sp, r7
 800311e:	bd80      	pop	{r7, pc}
 8003120:	08003139 	.word	0x08003139

08003124 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003124:	b480      	push	{r7}
 8003126:	b083      	sub	sp, #12
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800312c:	bf00      	nop
 800312e:	370c      	adds	r7, #12
 8003130:	46bd      	mov	sp, r7
 8003132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003136:	4770      	bx	lr

08003138 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b084      	sub	sp, #16
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003144:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	2200      	movs	r2, #0
 800314a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	2200      	movs	r2, #0
 8003152:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003154:	68f8      	ldr	r0, [r7, #12]
 8003156:	f7fd fa9d 	bl	8000694 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800315a:	bf00      	nop
 800315c:	3710      	adds	r7, #16
 800315e:	46bd      	mov	sp, r7
 8003160:	bd80      	pop	{r7, pc}

08003162 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003162:	b580      	push	{r7, lr}
 8003164:	b082      	sub	sp, #8
 8003166:	af00      	add	r7, sp, #0
 8003168:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003170:	b29b      	uxth	r3, r3
 8003172:	2b01      	cmp	r3, #1
 8003174:	d923      	bls.n	80031be <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	68da      	ldr	r2, [r3, #12]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003180:	b292      	uxth	r2, r2
 8003182:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003188:	1c9a      	adds	r2, r3, #2
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003194:	b29b      	uxth	r3, r3
 8003196:	3b02      	subs	r3, #2
 8003198:	b29a      	uxth	r2, r3
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80031a6:	b29b      	uxth	r3, r3
 80031a8:	2b01      	cmp	r3, #1
 80031aa:	d11f      	bne.n	80031ec <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	685a      	ldr	r2, [r3, #4]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80031ba:	605a      	str	r2, [r3, #4]
 80031bc:	e016      	b.n	80031ec <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f103 020c 	add.w	r2, r3, #12
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ca:	7812      	ldrb	r2, [r2, #0]
 80031cc:	b2d2      	uxtb	r2, r2
 80031ce:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d4:	1c5a      	adds	r2, r3, #1
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80031e0:	b29b      	uxth	r3, r3
 80031e2:	3b01      	subs	r3, #1
 80031e4:	b29a      	uxth	r2, r3
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80031f2:	b29b      	uxth	r3, r3
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d10f      	bne.n	8003218 <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	685a      	ldr	r2, [r3, #4]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003206:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800320c:	b29b      	uxth	r3, r3
 800320e:	2b00      	cmp	r3, #0
 8003210:	d102      	bne.n	8003218 <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 8003212:	6878      	ldr	r0, [r7, #4]
 8003214:	f000 fb48 	bl	80038a8 <SPI_CloseRxTx_ISR>
    }
  }
}
 8003218:	bf00      	nop
 800321a:	3708      	adds	r7, #8
 800321c:	46bd      	mov	sp, r7
 800321e:	bd80      	pop	{r7, pc}

08003220 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b082      	sub	sp, #8
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800322c:	b29b      	uxth	r3, r3
 800322e:	2b01      	cmp	r3, #1
 8003230:	d912      	bls.n	8003258 <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003236:	881a      	ldrh	r2, [r3, #0]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003242:	1c9a      	adds	r2, r3, #2
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800324c:	b29b      	uxth	r3, r3
 800324e:	3b02      	subs	r3, #2
 8003250:	b29a      	uxth	r2, r3
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003256:	e012      	b.n	800327e <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	330c      	adds	r3, #12
 8003262:	7812      	ldrb	r2, [r2, #0]
 8003264:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800326a:	1c5a      	adds	r2, r3, #1
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003274:	b29b      	uxth	r3, r3
 8003276:	3b01      	subs	r3, #1
 8003278:	b29a      	uxth	r2, r3
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003282:	b29b      	uxth	r3, r3
 8003284:	2b00      	cmp	r3, #0
 8003286:	d110      	bne.n	80032aa <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	685a      	ldr	r2, [r3, #4]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003296:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800329e:	b29b      	uxth	r3, r3
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d102      	bne.n	80032aa <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 80032a4:	6878      	ldr	r0, [r7, #4]
 80032a6:	f000 faff 	bl	80038a8 <SPI_CloseRxTx_ISR>
    }
  }
}
 80032aa:	bf00      	nop
 80032ac:	3708      	adds	r7, #8
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}

080032b2 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80032b2:	b580      	push	{r7, lr}
 80032b4:	b082      	sub	sp, #8
 80032b6:	af00      	add	r7, sp, #0
 80032b8:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	68da      	ldr	r2, [r3, #12]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c4:	b292      	uxth	r2, r2
 80032c6:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032cc:	1c9a      	adds	r2, r3, #2
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80032d8:	b29b      	uxth	r3, r3
 80032da:	3b01      	subs	r3, #1
 80032dc:	b29a      	uxth	r2, r3
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  if (hspi->RxXferCount == 0U)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80032ea:	b29b      	uxth	r3, r3
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d10f      	bne.n	8003310 <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	685a      	ldr	r2, [r3, #4]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80032fe:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003304:	b29b      	uxth	r3, r3
 8003306:	2b00      	cmp	r3, #0
 8003308:	d102      	bne.n	8003310 <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 800330a:	6878      	ldr	r0, [r7, #4]
 800330c:	f000 facc 	bl	80038a8 <SPI_CloseRxTx_ISR>
    }
  }
}
 8003310:	bf00      	nop
 8003312:	3708      	adds	r7, #8
 8003314:	46bd      	mov	sp, r7
 8003316:	bd80      	pop	{r7, pc}

08003318 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b082      	sub	sp, #8
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003324:	881a      	ldrh	r2, [r3, #0]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003330:	1c9a      	adds	r2, r3, #2
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800333a:	b29b      	uxth	r3, r3
 800333c:	3b01      	subs	r3, #1
 800333e:	b29a      	uxth	r2, r3
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003348:	b29b      	uxth	r3, r3
 800334a:	2b00      	cmp	r3, #0
 800334c:	d110      	bne.n	8003370 <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	685a      	ldr	r2, [r3, #4]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800335c:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003364:	b29b      	uxth	r3, r3
 8003366:	2b00      	cmp	r3, #0
 8003368:	d102      	bne.n	8003370 <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 800336a:	6878      	ldr	r0, [r7, #4]
 800336c:	f000 fa9c 	bl	80038a8 <SPI_CloseRxTx_ISR>
    }
  }
}
 8003370:	bf00      	nop
 8003372:	3708      	adds	r7, #8
 8003374:	46bd      	mov	sp, r7
 8003376:	bd80      	pop	{r7, pc}

08003378 <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b082      	sub	sp, #8
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f103 020c 	add.w	r2, r3, #12
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800338c:	7812      	ldrb	r2, [r2, #0]
 800338e:	b2d2      	uxtb	r2, r2
 8003390:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003396:	1c5a      	adds	r2, r3, #1
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80033a2:	b29b      	uxth	r3, r3
 80033a4:	3b01      	subs	r3, #1
 80033a6:	b29a      	uxth	r2, r3
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80033b4:	b29b      	uxth	r3, r3
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d102      	bne.n	80033c0 <SPI_RxISR_8BIT+0x48>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 80033ba:	6878      	ldr	r0, [r7, #4]
 80033bc:	f000 fab6 	bl	800392c <SPI_CloseRx_ISR>
  }
}
 80033c0:	bf00      	nop
 80033c2:	3708      	adds	r7, #8
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd80      	pop	{r7, pc}

080033c8 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b082      	sub	sp, #8
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	68da      	ldr	r2, [r3, #12]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033da:	b292      	uxth	r2, r2
 80033dc:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e2:	1c9a      	adds	r2, r3, #2
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80033ee:	b29b      	uxth	r3, r3
 80033f0:	3b01      	subs	r3, #1
 80033f2:	b29a      	uxth	r2, r3
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003400:	b29b      	uxth	r3, r3
 8003402:	2b00      	cmp	r3, #0
 8003404:	d102      	bne.n	800340c <SPI_RxISR_16BIT+0x44>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8003406:	6878      	ldr	r0, [r7, #4]
 8003408:	f000 fa90 	bl	800392c <SPI_CloseRx_ISR>
  }
}
 800340c:	bf00      	nop
 800340e:	3708      	adds	r7, #8
 8003410:	46bd      	mov	sp, r7
 8003412:	bd80      	pop	{r7, pc}

08003414 <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b082      	sub	sp, #8
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	330c      	adds	r3, #12
 8003426:	7812      	ldrb	r2, [r2, #0]
 8003428:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800342e:	1c5a      	adds	r2, r3, #1
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003438:	b29b      	uxth	r3, r3
 800343a:	3b01      	subs	r3, #1
 800343c:	b29a      	uxth	r2, r3
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003446:	b29b      	uxth	r3, r3
 8003448:	2b00      	cmp	r3, #0
 800344a:	d102      	bne.n	8003452 <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 800344c:	6878      	ldr	r0, [r7, #4]
 800344e:	f000 fa9d 	bl	800398c <SPI_CloseTx_ISR>
  }
}
 8003452:	bf00      	nop
 8003454:	3708      	adds	r7, #8
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}

0800345a <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800345a:	b580      	push	{r7, lr}
 800345c:	b082      	sub	sp, #8
 800345e:	af00      	add	r7, sp, #0
 8003460:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003466:	881a      	ldrh	r2, [r3, #0]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003472:	1c9a      	adds	r2, r3, #2
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800347c:	b29b      	uxth	r3, r3
 800347e:	3b01      	subs	r3, #1
 8003480:	b29a      	uxth	r2, r3
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800348a:	b29b      	uxth	r3, r3
 800348c:	2b00      	cmp	r3, #0
 800348e:	d102      	bne.n	8003496 <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8003490:	6878      	ldr	r0, [r7, #4]
 8003492:	f000 fa7b 	bl	800398c <SPI_CloseTx_ISR>
  }
}
 8003496:	bf00      	nop
 8003498:	3708      	adds	r7, #8
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}
	...

080034a0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b088      	sub	sp, #32
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	60f8      	str	r0, [r7, #12]
 80034a8:	60b9      	str	r1, [r7, #8]
 80034aa:	603b      	str	r3, [r7, #0]
 80034ac:	4613      	mov	r3, r2
 80034ae:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80034b0:	f7fd fe6e 	bl	8001190 <HAL_GetTick>
 80034b4:	4602      	mov	r2, r0
 80034b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034b8:	1a9b      	subs	r3, r3, r2
 80034ba:	683a      	ldr	r2, [r7, #0]
 80034bc:	4413      	add	r3, r2
 80034be:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80034c0:	f7fd fe66 	bl	8001190 <HAL_GetTick>
 80034c4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80034c6:	4b39      	ldr	r3, [pc, #228]	; (80035ac <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	015b      	lsls	r3, r3, #5
 80034cc:	0d1b      	lsrs	r3, r3, #20
 80034ce:	69fa      	ldr	r2, [r7, #28]
 80034d0:	fb02 f303 	mul.w	r3, r2, r3
 80034d4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80034d6:	e054      	b.n	8003582 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80034de:	d050      	beq.n	8003582 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80034e0:	f7fd fe56 	bl	8001190 <HAL_GetTick>
 80034e4:	4602      	mov	r2, r0
 80034e6:	69bb      	ldr	r3, [r7, #24]
 80034e8:	1ad3      	subs	r3, r2, r3
 80034ea:	69fa      	ldr	r2, [r7, #28]
 80034ec:	429a      	cmp	r2, r3
 80034ee:	d902      	bls.n	80034f6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80034f0:	69fb      	ldr	r3, [r7, #28]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d13d      	bne.n	8003572 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	685a      	ldr	r2, [r3, #4]
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003504:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800350e:	d111      	bne.n	8003534 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	689b      	ldr	r3, [r3, #8]
 8003514:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003518:	d004      	beq.n	8003524 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	689b      	ldr	r3, [r3, #8]
 800351e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003522:	d107      	bne.n	8003534 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	681a      	ldr	r2, [r3, #0]
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003532:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003538:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800353c:	d10f      	bne.n	800355e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	681a      	ldr	r2, [r3, #0]
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800354c:	601a      	str	r2, [r3, #0]
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	681a      	ldr	r2, [r3, #0]
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800355c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	2201      	movs	r2, #1
 8003562:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	2200      	movs	r2, #0
 800356a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800356e:	2303      	movs	r3, #3
 8003570:	e017      	b.n	80035a2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d101      	bne.n	800357c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003578:	2300      	movs	r3, #0
 800357a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800357c:	697b      	ldr	r3, [r7, #20]
 800357e:	3b01      	subs	r3, #1
 8003580:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	689a      	ldr	r2, [r3, #8]
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	4013      	ands	r3, r2
 800358c:	68ba      	ldr	r2, [r7, #8]
 800358e:	429a      	cmp	r2, r3
 8003590:	bf0c      	ite	eq
 8003592:	2301      	moveq	r3, #1
 8003594:	2300      	movne	r3, #0
 8003596:	b2db      	uxtb	r3, r3
 8003598:	461a      	mov	r2, r3
 800359a:	79fb      	ldrb	r3, [r7, #7]
 800359c:	429a      	cmp	r2, r3
 800359e:	d19b      	bne.n	80034d8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80035a0:	2300      	movs	r3, #0
}
 80035a2:	4618      	mov	r0, r3
 80035a4:	3720      	adds	r7, #32
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}
 80035aa:	bf00      	nop
 80035ac:	20000024 	.word	0x20000024

080035b0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b08a      	sub	sp, #40	; 0x28
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	60f8      	str	r0, [r7, #12]
 80035b8:	60b9      	str	r1, [r7, #8]
 80035ba:	607a      	str	r2, [r7, #4]
 80035bc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80035be:	2300      	movs	r3, #0
 80035c0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80035c2:	f7fd fde5 	bl	8001190 <HAL_GetTick>
 80035c6:	4602      	mov	r2, r0
 80035c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035ca:	1a9b      	subs	r3, r3, r2
 80035cc:	683a      	ldr	r2, [r7, #0]
 80035ce:	4413      	add	r3, r2
 80035d0:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80035d2:	f7fd fddd 	bl	8001190 <HAL_GetTick>
 80035d6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	330c      	adds	r3, #12
 80035de:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80035e0:	4b3d      	ldr	r3, [pc, #244]	; (80036d8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80035e2:	681a      	ldr	r2, [r3, #0]
 80035e4:	4613      	mov	r3, r2
 80035e6:	009b      	lsls	r3, r3, #2
 80035e8:	4413      	add	r3, r2
 80035ea:	00da      	lsls	r2, r3, #3
 80035ec:	1ad3      	subs	r3, r2, r3
 80035ee:	0d1b      	lsrs	r3, r3, #20
 80035f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035f2:	fb02 f303 	mul.w	r3, r2, r3
 80035f6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80035f8:	e060      	b.n	80036bc <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80035fa:	68bb      	ldr	r3, [r7, #8]
 80035fc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003600:	d107      	bne.n	8003612 <SPI_WaitFifoStateUntilTimeout+0x62>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d104      	bne.n	8003612 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003608:	69fb      	ldr	r3, [r7, #28]
 800360a:	781b      	ldrb	r3, [r3, #0]
 800360c:	b2db      	uxtb	r3, r3
 800360e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003610:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003618:	d050      	beq.n	80036bc <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800361a:	f7fd fdb9 	bl	8001190 <HAL_GetTick>
 800361e:	4602      	mov	r2, r0
 8003620:	6a3b      	ldr	r3, [r7, #32]
 8003622:	1ad3      	subs	r3, r2, r3
 8003624:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003626:	429a      	cmp	r2, r3
 8003628:	d902      	bls.n	8003630 <SPI_WaitFifoStateUntilTimeout+0x80>
 800362a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800362c:	2b00      	cmp	r3, #0
 800362e:	d13d      	bne.n	80036ac <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	685a      	ldr	r2, [r3, #4]
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800363e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003648:	d111      	bne.n	800366e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003652:	d004      	beq.n	800365e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	689b      	ldr	r3, [r3, #8]
 8003658:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800365c:	d107      	bne.n	800366e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	681a      	ldr	r2, [r3, #0]
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800366c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003672:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003676:	d10f      	bne.n	8003698 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	681a      	ldr	r2, [r3, #0]
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003686:	601a      	str	r2, [r3, #0]
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003696:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	2201      	movs	r2, #1
 800369c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	2200      	movs	r2, #0
 80036a4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80036a8:	2303      	movs	r3, #3
 80036aa:	e010      	b.n	80036ce <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80036ac:	69bb      	ldr	r3, [r7, #24]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d101      	bne.n	80036b6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80036b2:	2300      	movs	r3, #0
 80036b4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80036b6:	69bb      	ldr	r3, [r7, #24]
 80036b8:	3b01      	subs	r3, #1
 80036ba:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	689a      	ldr	r2, [r3, #8]
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	4013      	ands	r3, r2
 80036c6:	687a      	ldr	r2, [r7, #4]
 80036c8:	429a      	cmp	r2, r3
 80036ca:	d196      	bne.n	80035fa <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80036cc:	2300      	movs	r3, #0
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	3728      	adds	r7, #40	; 0x28
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}
 80036d6:	bf00      	nop
 80036d8:	20000024 	.word	0x20000024

080036dc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b088      	sub	sp, #32
 80036e0:	af02      	add	r7, sp, #8
 80036e2:	60f8      	str	r0, [r7, #12]
 80036e4:	60b9      	str	r1, [r7, #8]
 80036e6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80036f0:	d111      	bne.n	8003716 <SPI_EndRxTransaction+0x3a>
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	689b      	ldr	r3, [r3, #8]
 80036f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036fa:	d004      	beq.n	8003706 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003704:	d107      	bne.n	8003716 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	681a      	ldr	r2, [r3, #0]
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003714:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800371e:	d112      	bne.n	8003746 <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	9300      	str	r3, [sp, #0]
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	2200      	movs	r2, #0
 8003728:	2180      	movs	r1, #128	; 0x80
 800372a:	68f8      	ldr	r0, [r7, #12]
 800372c:	f7ff feb8 	bl	80034a0 <SPI_WaitFlagStateUntilTimeout>
 8003730:	4603      	mov	r3, r0
 8003732:	2b00      	cmp	r3, #0
 8003734:	d021      	beq.n	800377a <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800373a:	f043 0220 	orr.w	r2, r3, #32
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8003742:	2303      	movs	r3, #3
 8003744:	e03d      	b.n	80037c2 <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in µs */
    __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003746:	4b21      	ldr	r3, [pc, #132]	; (80037cc <SPI_EndRxTransaction+0xf0>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a21      	ldr	r2, [pc, #132]	; (80037d0 <SPI_EndRxTransaction+0xf4>)
 800374c:	fba2 2303 	umull	r2, r3, r2, r3
 8003750:	0d5b      	lsrs	r3, r3, #21
 8003752:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003756:	fb02 f303 	mul.w	r3, r2, r3
 800375a:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800375c:	697b      	ldr	r3, [r7, #20]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d00a      	beq.n	8003778 <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 8003762:	697b      	ldr	r3, [r7, #20]
 8003764:	3b01      	subs	r3, #1
 8003766:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	689b      	ldr	r3, [r3, #8]
 800376e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003772:	2b80      	cmp	r3, #128	; 0x80
 8003774:	d0f2      	beq.n	800375c <SPI_EndRxTransaction+0x80>
 8003776:	e000      	b.n	800377a <SPI_EndRxTransaction+0x9e>
        break;
 8003778:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003782:	d11d      	bne.n	80037c0 <SPI_EndRxTransaction+0xe4>
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	689b      	ldr	r3, [r3, #8]
 8003788:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800378c:	d004      	beq.n	8003798 <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	689b      	ldr	r3, [r3, #8]
 8003792:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003796:	d113      	bne.n	80037c0 <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	9300      	str	r3, [sp, #0]
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	2200      	movs	r2, #0
 80037a0:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80037a4:	68f8      	ldr	r0, [r7, #12]
 80037a6:	f7ff ff03 	bl	80035b0 <SPI_WaitFifoStateUntilTimeout>
 80037aa:	4603      	mov	r3, r0
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d007      	beq.n	80037c0 <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037b4:	f043 0220 	orr.w	r2, r3, #32
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80037bc:	2303      	movs	r3, #3
 80037be:	e000      	b.n	80037c2 <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 80037c0:	2300      	movs	r3, #0
}
 80037c2:	4618      	mov	r0, r3
 80037c4:	3718      	adds	r7, #24
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}
 80037ca:	bf00      	nop
 80037cc:	20000024 	.word	0x20000024
 80037d0:	165e9f81 	.word	0x165e9f81

080037d4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b088      	sub	sp, #32
 80037d8:	af02      	add	r7, sp, #8
 80037da:	60f8      	str	r0, [r7, #12]
 80037dc:	60b9      	str	r1, [r7, #8]
 80037de:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	9300      	str	r3, [sp, #0]
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	2200      	movs	r2, #0
 80037e8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80037ec:	68f8      	ldr	r0, [r7, #12]
 80037ee:	f7ff fedf 	bl	80035b0 <SPI_WaitFifoStateUntilTimeout>
 80037f2:	4603      	mov	r3, r0
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d007      	beq.n	8003808 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037fc:	f043 0220 	orr.w	r2, r3, #32
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003804:	2303      	movs	r3, #3
 8003806:	e046      	b.n	8003896 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003808:	4b25      	ldr	r3, [pc, #148]	; (80038a0 <SPI_EndRxTxTransaction+0xcc>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a25      	ldr	r2, [pc, #148]	; (80038a4 <SPI_EndRxTxTransaction+0xd0>)
 800380e:	fba2 2303 	umull	r2, r3, r2, r3
 8003812:	0d5b      	lsrs	r3, r3, #21
 8003814:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003818:	fb02 f303 	mul.w	r3, r2, r3
 800381c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003826:	d112      	bne.n	800384e <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	9300      	str	r3, [sp, #0]
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	2200      	movs	r2, #0
 8003830:	2180      	movs	r1, #128	; 0x80
 8003832:	68f8      	ldr	r0, [r7, #12]
 8003834:	f7ff fe34 	bl	80034a0 <SPI_WaitFlagStateUntilTimeout>
 8003838:	4603      	mov	r3, r0
 800383a:	2b00      	cmp	r3, #0
 800383c:	d016      	beq.n	800386c <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003842:	f043 0220 	orr.w	r2, r3, #32
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800384a:	2303      	movs	r3, #3
 800384c:	e023      	b.n	8003896 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d00a      	beq.n	800386a <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8003854:	697b      	ldr	r3, [r7, #20]
 8003856:	3b01      	subs	r3, #1
 8003858:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	689b      	ldr	r3, [r3, #8]
 8003860:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003864:	2b80      	cmp	r3, #128	; 0x80
 8003866:	d0f2      	beq.n	800384e <SPI_EndRxTxTransaction+0x7a>
 8003868:	e000      	b.n	800386c <SPI_EndRxTxTransaction+0x98>
        break;
 800386a:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	9300      	str	r3, [sp, #0]
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	2200      	movs	r2, #0
 8003874:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003878:	68f8      	ldr	r0, [r7, #12]
 800387a:	f7ff fe99 	bl	80035b0 <SPI_WaitFifoStateUntilTimeout>
 800387e:	4603      	mov	r3, r0
 8003880:	2b00      	cmp	r3, #0
 8003882:	d007      	beq.n	8003894 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003888:	f043 0220 	orr.w	r2, r3, #32
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003890:	2303      	movs	r3, #3
 8003892:	e000      	b.n	8003896 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8003894:	2300      	movs	r3, #0
}
 8003896:	4618      	mov	r0, r3
 8003898:	3718      	adds	r7, #24
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}
 800389e:	bf00      	nop
 80038a0:	20000024 	.word	0x20000024
 80038a4:	165e9f81 	.word	0x165e9f81

080038a8 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b084      	sub	sp, #16
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80038b0:	f7fd fc6e 	bl	8001190 <HAL_GetTick>
 80038b4:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	685a      	ldr	r2, [r3, #4]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f022 0220 	bic.w	r2, r2, #32
 80038c4:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80038c6:	68fa      	ldr	r2, [r7, #12]
 80038c8:	2164      	movs	r1, #100	; 0x64
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	f7ff ff82 	bl	80037d4 <SPI_EndRxTxTransaction>
 80038d0:	4603      	mov	r3, r0
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d005      	beq.n	80038e2 <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038da:	f043 0220 	orr.w	r2, r3, #32
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	661a      	str	r2, [r3, #96]	; 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d115      	bne.n	8003916 <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80038f0:	b2db      	uxtb	r3, r3
 80038f2:	2b04      	cmp	r3, #4
 80038f4:	d107      	bne.n	8003906 <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2201      	movs	r2, #1
 80038fa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 80038fe:	6878      	ldr	r0, [r7, #4]
 8003900:	f7fc feac 	bl	800065c <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8003904:	e00e      	b.n	8003924 <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2201      	movs	r2, #1
 800390a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 800390e:	6878      	ldr	r0, [r7, #4]
 8003910:	f7ff fc08 	bl	8003124 <HAL_SPI_TxRxCpltCallback>
}
 8003914:	e006      	b.n	8003924 <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2201      	movs	r2, #1
 800391a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 800391e:	6878      	ldr	r0, [r7, #4]
 8003920:	f7fc feb8 	bl	8000694 <HAL_SPI_ErrorCallback>
}
 8003924:	bf00      	nop
 8003926:	3710      	adds	r7, #16
 8003928:	46bd      	mov	sp, r7
 800392a:	bd80      	pop	{r7, pc}

0800392c <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b082      	sub	sp, #8
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	685a      	ldr	r2, [r3, #4]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003942:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8003944:	f7fd fc24 	bl	8001190 <HAL_GetTick>
 8003948:	4603      	mov	r3, r0
 800394a:	461a      	mov	r2, r3
 800394c:	2164      	movs	r1, #100	; 0x64
 800394e:	6878      	ldr	r0, [r7, #4]
 8003950:	f7ff fec4 	bl	80036dc <SPI_EndRxTransaction>
 8003954:	4603      	mov	r3, r0
 8003956:	2b00      	cmp	r3, #0
 8003958:	d005      	beq.n	8003966 <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800395e:	f043 0220 	orr.w	r2, r3, #32
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	661a      	str	r2, [r3, #96]	; 0x60
  }
  hspi->State = HAL_SPI_STATE_READY;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2201      	movs	r2, #1
 800396a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003972:	2b00      	cmp	r3, #0
 8003974:	d103      	bne.n	800397e <SPI_CloseRx_ISR+0x52>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 8003976:	6878      	ldr	r0, [r7, #4]
 8003978:	f7fc fe70 	bl	800065c <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 800397c:	e002      	b.n	8003984 <SPI_CloseRx_ISR+0x58>
      HAL_SPI_ErrorCallback(hspi);
 800397e:	6878      	ldr	r0, [r7, #4]
 8003980:	f7fc fe88 	bl	8000694 <HAL_SPI_ErrorCallback>
}
 8003984:	bf00      	nop
 8003986:	3708      	adds	r7, #8
 8003988:	46bd      	mov	sp, r7
 800398a:	bd80      	pop	{r7, pc}

0800398c <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b084      	sub	sp, #16
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003994:	f7fd fbfc 	bl	8001190 <HAL_GetTick>
 8003998:	60f8      	str	r0, [r7, #12]

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	685a      	ldr	r2, [r3, #4]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80039a8:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80039aa:	68fa      	ldr	r2, [r7, #12]
 80039ac:	2164      	movs	r1, #100	; 0x64
 80039ae:	6878      	ldr	r0, [r7, #4]
 80039b0:	f7ff ff10 	bl	80037d4 <SPI_EndRxTxTransaction>
 80039b4:	4603      	mov	r3, r0
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d005      	beq.n	80039c6 <SPI_CloseTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039be:	f043 0220 	orr.w	r2, r3, #32
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	689b      	ldr	r3, [r3, #8]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d10a      	bne.n	80039e4 <SPI_CloseTx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80039ce:	2300      	movs	r3, #0
 80039d0:	60bb      	str	r3, [r7, #8]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	68db      	ldr	r3, [r3, #12]
 80039d8:	60bb      	str	r3, [r7, #8]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	689b      	ldr	r3, [r3, #8]
 80039e0:	60bb      	str	r3, [r7, #8]
 80039e2:	68bb      	ldr	r3, [r7, #8]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2201      	movs	r2, #1
 80039e8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d003      	beq.n	80039fc <SPI_CloseTx_ISR+0x70>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 80039f4:	6878      	ldr	r0, [r7, #4]
 80039f6:	f7fc fe4d 	bl	8000694 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 80039fa:	e002      	b.n	8003a02 <SPI_CloseTx_ISR+0x76>
    HAL_SPI_TxCpltCallback(hspi);
 80039fc:	6878      	ldr	r0, [r7, #4]
 80039fe:	f7fc fe01 	bl	8000604 <HAL_SPI_TxCpltCallback>
}
 8003a02:	bf00      	nop
 8003a04:	3710      	adds	r7, #16
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}

08003a0a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a0a:	b580      	push	{r7, lr}
 8003a0c:	b082      	sub	sp, #8
 8003a0e:	af00      	add	r7, sp, #0
 8003a10:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d101      	bne.n	8003a1c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	e040      	b.n	8003a9e <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d106      	bne.n	8003a32 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2200      	movs	r2, #0
 8003a28:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a2c:	6878      	ldr	r0, [r7, #4]
 8003a2e:	f7fd f9ed 	bl	8000e0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2224      	movs	r2, #36	; 0x24
 8003a36:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	681a      	ldr	r2, [r3, #0]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f022 0201 	bic.w	r2, r2, #1
 8003a46:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003a48:	6878      	ldr	r0, [r7, #4]
 8003a4a:	f000 fbc1 	bl	80041d0 <UART_SetConfig>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	2b01      	cmp	r3, #1
 8003a52:	d101      	bne.n	8003a58 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003a54:	2301      	movs	r3, #1
 8003a56:	e022      	b.n	8003a9e <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d002      	beq.n	8003a66 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003a60:	6878      	ldr	r0, [r7, #4]
 8003a62:	f000 fe19 	bl	8004698 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	685a      	ldr	r2, [r3, #4]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003a74:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	689a      	ldr	r2, [r3, #8]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003a84:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	681a      	ldr	r2, [r3, #0]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f042 0201 	orr.w	r2, r2, #1
 8003a94:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	f000 fea0 	bl	80047dc <UART_CheckIdleState>
 8003a9c:	4603      	mov	r3, r0
}
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	3708      	adds	r7, #8
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}

08003aa6 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003aa6:	b580      	push	{r7, lr}
 8003aa8:	b08a      	sub	sp, #40	; 0x28
 8003aaa:	af02      	add	r7, sp, #8
 8003aac:	60f8      	str	r0, [r7, #12]
 8003aae:	60b9      	str	r1, [r7, #8]
 8003ab0:	603b      	str	r3, [r7, #0]
 8003ab2:	4613      	mov	r3, r2
 8003ab4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003aba:	2b20      	cmp	r3, #32
 8003abc:	d171      	bne.n	8003ba2 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d002      	beq.n	8003aca <HAL_UART_Transmit+0x24>
 8003ac4:	88fb      	ldrh	r3, [r7, #6]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d101      	bne.n	8003ace <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	e06a      	b.n	8003ba4 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	2221      	movs	r2, #33	; 0x21
 8003ada:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003adc:	f7fd fb58 	bl	8001190 <HAL_GetTick>
 8003ae0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	88fa      	ldrh	r2, [r7, #6]
 8003ae6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	88fa      	ldrh	r2, [r7, #6]
 8003aee:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	689b      	ldr	r3, [r3, #8]
 8003af6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003afa:	d108      	bne.n	8003b0e <HAL_UART_Transmit+0x68>
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	691b      	ldr	r3, [r3, #16]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d104      	bne.n	8003b0e <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003b04:	2300      	movs	r3, #0
 8003b06:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	61bb      	str	r3, [r7, #24]
 8003b0c:	e003      	b.n	8003b16 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003b0e:	68bb      	ldr	r3, [r7, #8]
 8003b10:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003b12:	2300      	movs	r3, #0
 8003b14:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003b16:	e02c      	b.n	8003b72 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	9300      	str	r3, [sp, #0]
 8003b1c:	697b      	ldr	r3, [r7, #20]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	2180      	movs	r1, #128	; 0x80
 8003b22:	68f8      	ldr	r0, [r7, #12]
 8003b24:	f000 fea7 	bl	8004876 <UART_WaitOnFlagUntilTimeout>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d001      	beq.n	8003b32 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8003b2e:	2303      	movs	r3, #3
 8003b30:	e038      	b.n	8003ba4 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003b32:	69fb      	ldr	r3, [r7, #28]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d10b      	bne.n	8003b50 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003b38:	69bb      	ldr	r3, [r7, #24]
 8003b3a:	881b      	ldrh	r3, [r3, #0]
 8003b3c:	461a      	mov	r2, r3
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b46:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003b48:	69bb      	ldr	r3, [r7, #24]
 8003b4a:	3302      	adds	r3, #2
 8003b4c:	61bb      	str	r3, [r7, #24]
 8003b4e:	e007      	b.n	8003b60 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003b50:	69fb      	ldr	r3, [r7, #28]
 8003b52:	781a      	ldrb	r2, [r3, #0]
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003b5a:	69fb      	ldr	r3, [r7, #28]
 8003b5c:	3301      	adds	r3, #1
 8003b5e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003b66:	b29b      	uxth	r3, r3
 8003b68:	3b01      	subs	r3, #1
 8003b6a:	b29a      	uxth	r2, r3
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003b78:	b29b      	uxth	r3, r3
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d1cc      	bne.n	8003b18 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	9300      	str	r3, [sp, #0]
 8003b82:	697b      	ldr	r3, [r7, #20]
 8003b84:	2200      	movs	r2, #0
 8003b86:	2140      	movs	r1, #64	; 0x40
 8003b88:	68f8      	ldr	r0, [r7, #12]
 8003b8a:	f000 fe74 	bl	8004876 <UART_WaitOnFlagUntilTimeout>
 8003b8e:	4603      	mov	r3, r0
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d001      	beq.n	8003b98 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8003b94:	2303      	movs	r3, #3
 8003b96:	e005      	b.n	8003ba4 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	2220      	movs	r2, #32
 8003b9c:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	e000      	b.n	8003ba4 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003ba2:	2302      	movs	r3, #2
  }
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	3720      	adds	r7, #32
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bd80      	pop	{r7, pc}

08003bac <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b0ba      	sub	sp, #232	; 0xe8
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	69db      	ldr	r3, [r3, #28]
 8003bba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	689b      	ldr	r3, [r3, #8]
 8003bce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003bd2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003bd6:	f640 030f 	movw	r3, #2063	; 0x80f
 8003bda:	4013      	ands	r3, r2
 8003bdc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003be0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d115      	bne.n	8003c14 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003be8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bec:	f003 0320 	and.w	r3, r3, #32
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d00f      	beq.n	8003c14 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003bf4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003bf8:	f003 0320 	and.w	r3, r3, #32
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d009      	beq.n	8003c14 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	f000 82ac 	beq.w	8004162 <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c0e:	6878      	ldr	r0, [r7, #4]
 8003c10:	4798      	blx	r3
      }
      return;
 8003c12:	e2a6      	b.n	8004162 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003c14:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	f000 8117 	beq.w	8003e4c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003c1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c22:	f003 0301 	and.w	r3, r3, #1
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d106      	bne.n	8003c38 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003c2a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003c2e:	4b85      	ldr	r3, [pc, #532]	; (8003e44 <HAL_UART_IRQHandler+0x298>)
 8003c30:	4013      	ands	r3, r2
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	f000 810a 	beq.w	8003e4c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003c38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c3c:	f003 0301 	and.w	r3, r3, #1
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d011      	beq.n	8003c68 <HAL_UART_IRQHandler+0xbc>
 8003c44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d00b      	beq.n	8003c68 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	2201      	movs	r2, #1
 8003c56:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c5e:	f043 0201 	orr.w	r2, r3, #1
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003c68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c6c:	f003 0302 	and.w	r3, r3, #2
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d011      	beq.n	8003c98 <HAL_UART_IRQHandler+0xec>
 8003c74:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c78:	f003 0301 	and.w	r3, r3, #1
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d00b      	beq.n	8003c98 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	2202      	movs	r2, #2
 8003c86:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c8e:	f043 0204 	orr.w	r2, r3, #4
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003c98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c9c:	f003 0304 	and.w	r3, r3, #4
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d011      	beq.n	8003cc8 <HAL_UART_IRQHandler+0x11c>
 8003ca4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ca8:	f003 0301 	and.w	r3, r3, #1
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d00b      	beq.n	8003cc8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	2204      	movs	r2, #4
 8003cb6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003cbe:	f043 0202 	orr.w	r2, r3, #2
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003cc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ccc:	f003 0308 	and.w	r3, r3, #8
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d017      	beq.n	8003d04 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003cd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003cd8:	f003 0320 	and.w	r3, r3, #32
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d105      	bne.n	8003cec <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003ce0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ce4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d00b      	beq.n	8003d04 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	2208      	movs	r2, #8
 8003cf2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003cfa:	f043 0208 	orr.w	r2, r3, #8
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003d04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d08:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d012      	beq.n	8003d36 <HAL_UART_IRQHandler+0x18a>
 8003d10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d14:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d00c      	beq.n	8003d36 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003d24:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d2c:	f043 0220 	orr.w	r2, r3, #32
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	f000 8212 	beq.w	8004166 <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003d42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d46:	f003 0320 	and.w	r3, r3, #32
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d00d      	beq.n	8003d6a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003d4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d52:	f003 0320 	and.w	r3, r3, #32
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d007      	beq.n	8003d6a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d003      	beq.n	8003d6a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d66:	6878      	ldr	r0, [r7, #4]
 8003d68:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d70:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	689b      	ldr	r3, [r3, #8]
 8003d7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d7e:	2b40      	cmp	r3, #64	; 0x40
 8003d80:	d005      	beq.n	8003d8e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003d82:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003d86:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d04f      	beq.n	8003e2e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003d8e:	6878      	ldr	r0, [r7, #4]
 8003d90:	f000 fe37 	bl	8004a02 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	689b      	ldr	r3, [r3, #8]
 8003d9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d9e:	2b40      	cmp	r3, #64	; 0x40
 8003da0:	d141      	bne.n	8003e26 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	3308      	adds	r3, #8
 8003da8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003db0:	e853 3f00 	ldrex	r3, [r3]
 8003db4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003db8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003dbc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003dc0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	3308      	adds	r3, #8
 8003dca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003dce:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003dd2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dd6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003dda:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003dde:	e841 2300 	strex	r3, r2, [r1]
 8003de2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003de6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d1d9      	bne.n	8003da2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d013      	beq.n	8003e1e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dfa:	4a13      	ldr	r2, [pc, #76]	; (8003e48 <HAL_UART_IRQHandler+0x29c>)
 8003dfc:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e02:	4618      	mov	r0, r3
 8003e04:	f7fd fb75 	bl	80014f2 <HAL_DMA_Abort_IT>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d017      	beq.n	8003e3e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e14:	687a      	ldr	r2, [r7, #4]
 8003e16:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003e18:	4610      	mov	r0, r2
 8003e1a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e1c:	e00f      	b.n	8003e3e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003e1e:	6878      	ldr	r0, [r7, #4]
 8003e20:	f000 f9b6 	bl	8004190 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e24:	e00b      	b.n	8003e3e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003e26:	6878      	ldr	r0, [r7, #4]
 8003e28:	f000 f9b2 	bl	8004190 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e2c:	e007      	b.n	8003e3e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	f000 f9ae 	bl	8004190 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2200      	movs	r2, #0
 8003e38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8003e3c:	e193      	b.n	8004166 <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e3e:	bf00      	nop
    return;
 8003e40:	e191      	b.n	8004166 <HAL_UART_IRQHandler+0x5ba>
 8003e42:	bf00      	nop
 8003e44:	04000120 	.word	0x04000120
 8003e48:	08004acb 	.word	0x08004acb

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e50:	2b01      	cmp	r3, #1
 8003e52:	f040 814c 	bne.w	80040ee <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003e56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e5a:	f003 0310 	and.w	r3, r3, #16
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	f000 8145 	beq.w	80040ee <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003e64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e68:	f003 0310 	and.w	r3, r3, #16
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	f000 813e 	beq.w	80040ee <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	2210      	movs	r2, #16
 8003e78:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	689b      	ldr	r3, [r3, #8]
 8003e80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e84:	2b40      	cmp	r3, #64	; 0x40
 8003e86:	f040 80b6 	bne.w	8003ff6 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003e96:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	f000 8165 	beq.w	800416a <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003ea6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003eaa:	429a      	cmp	r2, r3
 8003eac:	f080 815d 	bcs.w	800416a <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003eb6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ebe:	69db      	ldr	r3, [r3, #28]
 8003ec0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ec4:	f000 8086 	beq.w	8003fd4 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ed0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003ed4:	e853 3f00 	ldrex	r3, [r3]
 8003ed8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003edc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003ee0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ee4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	461a      	mov	r2, r3
 8003eee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003ef2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003ef6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003efa:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003efe:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003f02:	e841 2300 	strex	r3, r2, [r1]
 8003f06:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003f0a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d1da      	bne.n	8003ec8 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	3308      	adds	r3, #8
 8003f18:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f1a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f1c:	e853 3f00 	ldrex	r3, [r3]
 8003f20:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003f22:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003f24:	f023 0301 	bic.w	r3, r3, #1
 8003f28:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	3308      	adds	r3, #8
 8003f32:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003f36:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003f3a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f3c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003f3e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003f42:	e841 2300 	strex	r3, r2, [r1]
 8003f46:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003f48:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d1e1      	bne.n	8003f12 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	3308      	adds	r3, #8
 8003f54:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f56:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003f58:	e853 3f00 	ldrex	r3, [r3]
 8003f5c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003f5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f60:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f64:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	3308      	adds	r3, #8
 8003f6e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003f72:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003f74:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f76:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003f78:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003f7a:	e841 2300 	strex	r3, r2, [r1]
 8003f7e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003f80:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d1e3      	bne.n	8003f4e <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2220      	movs	r2, #32
 8003f8a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2200      	movs	r2, #0
 8003f92:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f9c:	e853 3f00 	ldrex	r3, [r3]
 8003fa0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003fa2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003fa4:	f023 0310 	bic.w	r3, r3, #16
 8003fa8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	461a      	mov	r2, r3
 8003fb2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003fb6:	65bb      	str	r3, [r7, #88]	; 0x58
 8003fb8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fba:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003fbc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003fbe:	e841 2300 	strex	r3, r2, [r1]
 8003fc2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003fc4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d1e4      	bne.n	8003f94 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fce:	4618      	mov	r0, r3
 8003fd0:	f7fd fa1f 	bl	8001412 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2202      	movs	r2, #2
 8003fd8:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003fe6:	b29b      	uxth	r3, r3
 8003fe8:	1ad3      	subs	r3, r2, r3
 8003fea:	b29b      	uxth	r3, r3
 8003fec:	4619      	mov	r1, r3
 8003fee:	6878      	ldr	r0, [r7, #4]
 8003ff0:	f000 f8d8 	bl	80041a4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003ff4:	e0b9      	b.n	800416a <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004002:	b29b      	uxth	r3, r3
 8004004:	1ad3      	subs	r3, r2, r3
 8004006:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004010:	b29b      	uxth	r3, r3
 8004012:	2b00      	cmp	r3, #0
 8004014:	f000 80ab 	beq.w	800416e <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8004018:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800401c:	2b00      	cmp	r3, #0
 800401e:	f000 80a6 	beq.w	800416e <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004028:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800402a:	e853 3f00 	ldrex	r3, [r3]
 800402e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004030:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004032:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004036:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	461a      	mov	r2, r3
 8004040:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004044:	647b      	str	r3, [r7, #68]	; 0x44
 8004046:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004048:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800404a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800404c:	e841 2300 	strex	r3, r2, [r1]
 8004050:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004052:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004054:	2b00      	cmp	r3, #0
 8004056:	d1e4      	bne.n	8004022 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	3308      	adds	r3, #8
 800405e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004062:	e853 3f00 	ldrex	r3, [r3]
 8004066:	623b      	str	r3, [r7, #32]
   return(result);
 8004068:	6a3b      	ldr	r3, [r7, #32]
 800406a:	f023 0301 	bic.w	r3, r3, #1
 800406e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	3308      	adds	r3, #8
 8004078:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800407c:	633a      	str	r2, [r7, #48]	; 0x30
 800407e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004080:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004082:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004084:	e841 2300 	strex	r3, r2, [r1]
 8004088:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800408a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800408c:	2b00      	cmp	r3, #0
 800408e:	d1e3      	bne.n	8004058 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2220      	movs	r2, #32
 8004094:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2200      	movs	r2, #0
 800409c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2200      	movs	r2, #0
 80040a2:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040aa:	693b      	ldr	r3, [r7, #16]
 80040ac:	e853 3f00 	ldrex	r3, [r3]
 80040b0:	60fb      	str	r3, [r7, #12]
   return(result);
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	f023 0310 	bic.w	r3, r3, #16
 80040b8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	461a      	mov	r2, r3
 80040c2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80040c6:	61fb      	str	r3, [r7, #28]
 80040c8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040ca:	69b9      	ldr	r1, [r7, #24]
 80040cc:	69fa      	ldr	r2, [r7, #28]
 80040ce:	e841 2300 	strex	r3, r2, [r1]
 80040d2:	617b      	str	r3, [r7, #20]
   return(result);
 80040d4:	697b      	ldr	r3, [r7, #20]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d1e4      	bne.n	80040a4 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2202      	movs	r2, #2
 80040de:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80040e0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80040e4:	4619      	mov	r1, r3
 80040e6:	6878      	ldr	r0, [r7, #4]
 80040e8:	f000 f85c 	bl	80041a4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80040ec:	e03f      	b.n	800416e <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80040ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d00e      	beq.n	8004118 <HAL_UART_IRQHandler+0x56c>
 80040fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80040fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004102:	2b00      	cmp	r3, #0
 8004104:	d008      	beq.n	8004118 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800410e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004110:	6878      	ldr	r0, [r7, #4]
 8004112:	f000 f853 	bl	80041bc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004116:	e02d      	b.n	8004174 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004118:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800411c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004120:	2b00      	cmp	r3, #0
 8004122:	d00e      	beq.n	8004142 <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004124:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004128:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800412c:	2b00      	cmp	r3, #0
 800412e:	d008      	beq.n	8004142 <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004134:	2b00      	cmp	r3, #0
 8004136:	d01c      	beq.n	8004172 <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800413c:	6878      	ldr	r0, [r7, #4]
 800413e:	4798      	blx	r3
    }
    return;
 8004140:	e017      	b.n	8004172 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004142:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004146:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800414a:	2b00      	cmp	r3, #0
 800414c:	d012      	beq.n	8004174 <HAL_UART_IRQHandler+0x5c8>
 800414e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004152:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004156:	2b00      	cmp	r3, #0
 8004158:	d00c      	beq.n	8004174 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 800415a:	6878      	ldr	r0, [r7, #4]
 800415c:	f000 fccb 	bl	8004af6 <UART_EndTransmit_IT>
    return;
 8004160:	e008      	b.n	8004174 <HAL_UART_IRQHandler+0x5c8>
      return;
 8004162:	bf00      	nop
 8004164:	e006      	b.n	8004174 <HAL_UART_IRQHandler+0x5c8>
    return;
 8004166:	bf00      	nop
 8004168:	e004      	b.n	8004174 <HAL_UART_IRQHandler+0x5c8>
      return;
 800416a:	bf00      	nop
 800416c:	e002      	b.n	8004174 <HAL_UART_IRQHandler+0x5c8>
      return;
 800416e:	bf00      	nop
 8004170:	e000      	b.n	8004174 <HAL_UART_IRQHandler+0x5c8>
    return;
 8004172:	bf00      	nop
  }

}
 8004174:	37e8      	adds	r7, #232	; 0xe8
 8004176:	46bd      	mov	sp, r7
 8004178:	bd80      	pop	{r7, pc}
 800417a:	bf00      	nop

0800417c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800417c:	b480      	push	{r7}
 800417e:	b083      	sub	sp, #12
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004184:	bf00      	nop
 8004186:	370c      	adds	r7, #12
 8004188:	46bd      	mov	sp, r7
 800418a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418e:	4770      	bx	lr

08004190 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004190:	b480      	push	{r7}
 8004192:	b083      	sub	sp, #12
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004198:	bf00      	nop
 800419a:	370c      	adds	r7, #12
 800419c:	46bd      	mov	sp, r7
 800419e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a2:	4770      	bx	lr

080041a4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80041a4:	b480      	push	{r7}
 80041a6:	b083      	sub	sp, #12
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
 80041ac:	460b      	mov	r3, r1
 80041ae:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80041b0:	bf00      	nop
 80041b2:	370c      	adds	r7, #12
 80041b4:	46bd      	mov	sp, r7
 80041b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ba:	4770      	bx	lr

080041bc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80041bc:	b480      	push	{r7}
 80041be:	b083      	sub	sp, #12
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80041c4:	bf00      	nop
 80041c6:	370c      	adds	r7, #12
 80041c8:	46bd      	mov	sp, r7
 80041ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ce:	4770      	bx	lr

080041d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b088      	sub	sp, #32
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80041d8:	2300      	movs	r3, #0
 80041da:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	689a      	ldr	r2, [r3, #8]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	691b      	ldr	r3, [r3, #16]
 80041e4:	431a      	orrs	r2, r3
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	695b      	ldr	r3, [r3, #20]
 80041ea:	431a      	orrs	r2, r3
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	69db      	ldr	r3, [r3, #28]
 80041f0:	4313      	orrs	r3, r2
 80041f2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	681a      	ldr	r2, [r3, #0]
 80041fa:	4ba6      	ldr	r3, [pc, #664]	; (8004494 <UART_SetConfig+0x2c4>)
 80041fc:	4013      	ands	r3, r2
 80041fe:	687a      	ldr	r2, [r7, #4]
 8004200:	6812      	ldr	r2, [r2, #0]
 8004202:	6979      	ldr	r1, [r7, #20]
 8004204:	430b      	orrs	r3, r1
 8004206:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	68da      	ldr	r2, [r3, #12]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	430a      	orrs	r2, r1
 800421c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	699b      	ldr	r3, [r3, #24]
 8004222:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6a1b      	ldr	r3, [r3, #32]
 8004228:	697a      	ldr	r2, [r7, #20]
 800422a:	4313      	orrs	r3, r2
 800422c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	689b      	ldr	r3, [r3, #8]
 8004234:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	697a      	ldr	r2, [r7, #20]
 800423e:	430a      	orrs	r2, r1
 8004240:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a94      	ldr	r2, [pc, #592]	; (8004498 <UART_SetConfig+0x2c8>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d120      	bne.n	800428e <UART_SetConfig+0xbe>
 800424c:	4b93      	ldr	r3, [pc, #588]	; (800449c <UART_SetConfig+0x2cc>)
 800424e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004252:	f003 0303 	and.w	r3, r3, #3
 8004256:	2b03      	cmp	r3, #3
 8004258:	d816      	bhi.n	8004288 <UART_SetConfig+0xb8>
 800425a:	a201      	add	r2, pc, #4	; (adr r2, 8004260 <UART_SetConfig+0x90>)
 800425c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004260:	08004271 	.word	0x08004271
 8004264:	0800427d 	.word	0x0800427d
 8004268:	08004277 	.word	0x08004277
 800426c:	08004283 	.word	0x08004283
 8004270:	2301      	movs	r3, #1
 8004272:	77fb      	strb	r3, [r7, #31]
 8004274:	e150      	b.n	8004518 <UART_SetConfig+0x348>
 8004276:	2302      	movs	r3, #2
 8004278:	77fb      	strb	r3, [r7, #31]
 800427a:	e14d      	b.n	8004518 <UART_SetConfig+0x348>
 800427c:	2304      	movs	r3, #4
 800427e:	77fb      	strb	r3, [r7, #31]
 8004280:	e14a      	b.n	8004518 <UART_SetConfig+0x348>
 8004282:	2308      	movs	r3, #8
 8004284:	77fb      	strb	r3, [r7, #31]
 8004286:	e147      	b.n	8004518 <UART_SetConfig+0x348>
 8004288:	2310      	movs	r3, #16
 800428a:	77fb      	strb	r3, [r7, #31]
 800428c:	e144      	b.n	8004518 <UART_SetConfig+0x348>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4a83      	ldr	r2, [pc, #524]	; (80044a0 <UART_SetConfig+0x2d0>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d132      	bne.n	80042fe <UART_SetConfig+0x12e>
 8004298:	4b80      	ldr	r3, [pc, #512]	; (800449c <UART_SetConfig+0x2cc>)
 800429a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800429e:	f003 030c 	and.w	r3, r3, #12
 80042a2:	2b0c      	cmp	r3, #12
 80042a4:	d828      	bhi.n	80042f8 <UART_SetConfig+0x128>
 80042a6:	a201      	add	r2, pc, #4	; (adr r2, 80042ac <UART_SetConfig+0xdc>)
 80042a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042ac:	080042e1 	.word	0x080042e1
 80042b0:	080042f9 	.word	0x080042f9
 80042b4:	080042f9 	.word	0x080042f9
 80042b8:	080042f9 	.word	0x080042f9
 80042bc:	080042ed 	.word	0x080042ed
 80042c0:	080042f9 	.word	0x080042f9
 80042c4:	080042f9 	.word	0x080042f9
 80042c8:	080042f9 	.word	0x080042f9
 80042cc:	080042e7 	.word	0x080042e7
 80042d0:	080042f9 	.word	0x080042f9
 80042d4:	080042f9 	.word	0x080042f9
 80042d8:	080042f9 	.word	0x080042f9
 80042dc:	080042f3 	.word	0x080042f3
 80042e0:	2300      	movs	r3, #0
 80042e2:	77fb      	strb	r3, [r7, #31]
 80042e4:	e118      	b.n	8004518 <UART_SetConfig+0x348>
 80042e6:	2302      	movs	r3, #2
 80042e8:	77fb      	strb	r3, [r7, #31]
 80042ea:	e115      	b.n	8004518 <UART_SetConfig+0x348>
 80042ec:	2304      	movs	r3, #4
 80042ee:	77fb      	strb	r3, [r7, #31]
 80042f0:	e112      	b.n	8004518 <UART_SetConfig+0x348>
 80042f2:	2308      	movs	r3, #8
 80042f4:	77fb      	strb	r3, [r7, #31]
 80042f6:	e10f      	b.n	8004518 <UART_SetConfig+0x348>
 80042f8:	2310      	movs	r3, #16
 80042fa:	77fb      	strb	r3, [r7, #31]
 80042fc:	e10c      	b.n	8004518 <UART_SetConfig+0x348>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a68      	ldr	r2, [pc, #416]	; (80044a4 <UART_SetConfig+0x2d4>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d120      	bne.n	800434a <UART_SetConfig+0x17a>
 8004308:	4b64      	ldr	r3, [pc, #400]	; (800449c <UART_SetConfig+0x2cc>)
 800430a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800430e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004312:	2b30      	cmp	r3, #48	; 0x30
 8004314:	d013      	beq.n	800433e <UART_SetConfig+0x16e>
 8004316:	2b30      	cmp	r3, #48	; 0x30
 8004318:	d814      	bhi.n	8004344 <UART_SetConfig+0x174>
 800431a:	2b20      	cmp	r3, #32
 800431c:	d009      	beq.n	8004332 <UART_SetConfig+0x162>
 800431e:	2b20      	cmp	r3, #32
 8004320:	d810      	bhi.n	8004344 <UART_SetConfig+0x174>
 8004322:	2b00      	cmp	r3, #0
 8004324:	d002      	beq.n	800432c <UART_SetConfig+0x15c>
 8004326:	2b10      	cmp	r3, #16
 8004328:	d006      	beq.n	8004338 <UART_SetConfig+0x168>
 800432a:	e00b      	b.n	8004344 <UART_SetConfig+0x174>
 800432c:	2300      	movs	r3, #0
 800432e:	77fb      	strb	r3, [r7, #31]
 8004330:	e0f2      	b.n	8004518 <UART_SetConfig+0x348>
 8004332:	2302      	movs	r3, #2
 8004334:	77fb      	strb	r3, [r7, #31]
 8004336:	e0ef      	b.n	8004518 <UART_SetConfig+0x348>
 8004338:	2304      	movs	r3, #4
 800433a:	77fb      	strb	r3, [r7, #31]
 800433c:	e0ec      	b.n	8004518 <UART_SetConfig+0x348>
 800433e:	2308      	movs	r3, #8
 8004340:	77fb      	strb	r3, [r7, #31]
 8004342:	e0e9      	b.n	8004518 <UART_SetConfig+0x348>
 8004344:	2310      	movs	r3, #16
 8004346:	77fb      	strb	r3, [r7, #31]
 8004348:	e0e6      	b.n	8004518 <UART_SetConfig+0x348>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a56      	ldr	r2, [pc, #344]	; (80044a8 <UART_SetConfig+0x2d8>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d120      	bne.n	8004396 <UART_SetConfig+0x1c6>
 8004354:	4b51      	ldr	r3, [pc, #324]	; (800449c <UART_SetConfig+0x2cc>)
 8004356:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800435a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800435e:	2bc0      	cmp	r3, #192	; 0xc0
 8004360:	d013      	beq.n	800438a <UART_SetConfig+0x1ba>
 8004362:	2bc0      	cmp	r3, #192	; 0xc0
 8004364:	d814      	bhi.n	8004390 <UART_SetConfig+0x1c0>
 8004366:	2b80      	cmp	r3, #128	; 0x80
 8004368:	d009      	beq.n	800437e <UART_SetConfig+0x1ae>
 800436a:	2b80      	cmp	r3, #128	; 0x80
 800436c:	d810      	bhi.n	8004390 <UART_SetConfig+0x1c0>
 800436e:	2b00      	cmp	r3, #0
 8004370:	d002      	beq.n	8004378 <UART_SetConfig+0x1a8>
 8004372:	2b40      	cmp	r3, #64	; 0x40
 8004374:	d006      	beq.n	8004384 <UART_SetConfig+0x1b4>
 8004376:	e00b      	b.n	8004390 <UART_SetConfig+0x1c0>
 8004378:	2300      	movs	r3, #0
 800437a:	77fb      	strb	r3, [r7, #31]
 800437c:	e0cc      	b.n	8004518 <UART_SetConfig+0x348>
 800437e:	2302      	movs	r3, #2
 8004380:	77fb      	strb	r3, [r7, #31]
 8004382:	e0c9      	b.n	8004518 <UART_SetConfig+0x348>
 8004384:	2304      	movs	r3, #4
 8004386:	77fb      	strb	r3, [r7, #31]
 8004388:	e0c6      	b.n	8004518 <UART_SetConfig+0x348>
 800438a:	2308      	movs	r3, #8
 800438c:	77fb      	strb	r3, [r7, #31]
 800438e:	e0c3      	b.n	8004518 <UART_SetConfig+0x348>
 8004390:	2310      	movs	r3, #16
 8004392:	77fb      	strb	r3, [r7, #31]
 8004394:	e0c0      	b.n	8004518 <UART_SetConfig+0x348>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a44      	ldr	r2, [pc, #272]	; (80044ac <UART_SetConfig+0x2dc>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d125      	bne.n	80043ec <UART_SetConfig+0x21c>
 80043a0:	4b3e      	ldr	r3, [pc, #248]	; (800449c <UART_SetConfig+0x2cc>)
 80043a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80043ae:	d017      	beq.n	80043e0 <UART_SetConfig+0x210>
 80043b0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80043b4:	d817      	bhi.n	80043e6 <UART_SetConfig+0x216>
 80043b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043ba:	d00b      	beq.n	80043d4 <UART_SetConfig+0x204>
 80043bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043c0:	d811      	bhi.n	80043e6 <UART_SetConfig+0x216>
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d003      	beq.n	80043ce <UART_SetConfig+0x1fe>
 80043c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043ca:	d006      	beq.n	80043da <UART_SetConfig+0x20a>
 80043cc:	e00b      	b.n	80043e6 <UART_SetConfig+0x216>
 80043ce:	2300      	movs	r3, #0
 80043d0:	77fb      	strb	r3, [r7, #31]
 80043d2:	e0a1      	b.n	8004518 <UART_SetConfig+0x348>
 80043d4:	2302      	movs	r3, #2
 80043d6:	77fb      	strb	r3, [r7, #31]
 80043d8:	e09e      	b.n	8004518 <UART_SetConfig+0x348>
 80043da:	2304      	movs	r3, #4
 80043dc:	77fb      	strb	r3, [r7, #31]
 80043de:	e09b      	b.n	8004518 <UART_SetConfig+0x348>
 80043e0:	2308      	movs	r3, #8
 80043e2:	77fb      	strb	r3, [r7, #31]
 80043e4:	e098      	b.n	8004518 <UART_SetConfig+0x348>
 80043e6:	2310      	movs	r3, #16
 80043e8:	77fb      	strb	r3, [r7, #31]
 80043ea:	e095      	b.n	8004518 <UART_SetConfig+0x348>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a2f      	ldr	r2, [pc, #188]	; (80044b0 <UART_SetConfig+0x2e0>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d125      	bne.n	8004442 <UART_SetConfig+0x272>
 80043f6:	4b29      	ldr	r3, [pc, #164]	; (800449c <UART_SetConfig+0x2cc>)
 80043f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043fc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004400:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004404:	d017      	beq.n	8004436 <UART_SetConfig+0x266>
 8004406:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800440a:	d817      	bhi.n	800443c <UART_SetConfig+0x26c>
 800440c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004410:	d00b      	beq.n	800442a <UART_SetConfig+0x25a>
 8004412:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004416:	d811      	bhi.n	800443c <UART_SetConfig+0x26c>
 8004418:	2b00      	cmp	r3, #0
 800441a:	d003      	beq.n	8004424 <UART_SetConfig+0x254>
 800441c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004420:	d006      	beq.n	8004430 <UART_SetConfig+0x260>
 8004422:	e00b      	b.n	800443c <UART_SetConfig+0x26c>
 8004424:	2301      	movs	r3, #1
 8004426:	77fb      	strb	r3, [r7, #31]
 8004428:	e076      	b.n	8004518 <UART_SetConfig+0x348>
 800442a:	2302      	movs	r3, #2
 800442c:	77fb      	strb	r3, [r7, #31]
 800442e:	e073      	b.n	8004518 <UART_SetConfig+0x348>
 8004430:	2304      	movs	r3, #4
 8004432:	77fb      	strb	r3, [r7, #31]
 8004434:	e070      	b.n	8004518 <UART_SetConfig+0x348>
 8004436:	2308      	movs	r3, #8
 8004438:	77fb      	strb	r3, [r7, #31]
 800443a:	e06d      	b.n	8004518 <UART_SetConfig+0x348>
 800443c:	2310      	movs	r3, #16
 800443e:	77fb      	strb	r3, [r7, #31]
 8004440:	e06a      	b.n	8004518 <UART_SetConfig+0x348>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a1b      	ldr	r2, [pc, #108]	; (80044b4 <UART_SetConfig+0x2e4>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d138      	bne.n	80044be <UART_SetConfig+0x2ee>
 800444c:	4b13      	ldr	r3, [pc, #76]	; (800449c <UART_SetConfig+0x2cc>)
 800444e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004452:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004456:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800445a:	d017      	beq.n	800448c <UART_SetConfig+0x2bc>
 800445c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004460:	d82a      	bhi.n	80044b8 <UART_SetConfig+0x2e8>
 8004462:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004466:	d00b      	beq.n	8004480 <UART_SetConfig+0x2b0>
 8004468:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800446c:	d824      	bhi.n	80044b8 <UART_SetConfig+0x2e8>
 800446e:	2b00      	cmp	r3, #0
 8004470:	d003      	beq.n	800447a <UART_SetConfig+0x2aa>
 8004472:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004476:	d006      	beq.n	8004486 <UART_SetConfig+0x2b6>
 8004478:	e01e      	b.n	80044b8 <UART_SetConfig+0x2e8>
 800447a:	2300      	movs	r3, #0
 800447c:	77fb      	strb	r3, [r7, #31]
 800447e:	e04b      	b.n	8004518 <UART_SetConfig+0x348>
 8004480:	2302      	movs	r3, #2
 8004482:	77fb      	strb	r3, [r7, #31]
 8004484:	e048      	b.n	8004518 <UART_SetConfig+0x348>
 8004486:	2304      	movs	r3, #4
 8004488:	77fb      	strb	r3, [r7, #31]
 800448a:	e045      	b.n	8004518 <UART_SetConfig+0x348>
 800448c:	2308      	movs	r3, #8
 800448e:	77fb      	strb	r3, [r7, #31]
 8004490:	e042      	b.n	8004518 <UART_SetConfig+0x348>
 8004492:	bf00      	nop
 8004494:	efff69f3 	.word	0xefff69f3
 8004498:	40011000 	.word	0x40011000
 800449c:	40023800 	.word	0x40023800
 80044a0:	40004400 	.word	0x40004400
 80044a4:	40004800 	.word	0x40004800
 80044a8:	40004c00 	.word	0x40004c00
 80044ac:	40005000 	.word	0x40005000
 80044b0:	40011400 	.word	0x40011400
 80044b4:	40007800 	.word	0x40007800
 80044b8:	2310      	movs	r3, #16
 80044ba:	77fb      	strb	r3, [r7, #31]
 80044bc:	e02c      	b.n	8004518 <UART_SetConfig+0x348>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a72      	ldr	r2, [pc, #456]	; (800468c <UART_SetConfig+0x4bc>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d125      	bne.n	8004514 <UART_SetConfig+0x344>
 80044c8:	4b71      	ldr	r3, [pc, #452]	; (8004690 <UART_SetConfig+0x4c0>)
 80044ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044ce:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80044d2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80044d6:	d017      	beq.n	8004508 <UART_SetConfig+0x338>
 80044d8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80044dc:	d817      	bhi.n	800450e <UART_SetConfig+0x33e>
 80044de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044e2:	d00b      	beq.n	80044fc <UART_SetConfig+0x32c>
 80044e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044e8:	d811      	bhi.n	800450e <UART_SetConfig+0x33e>
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d003      	beq.n	80044f6 <UART_SetConfig+0x326>
 80044ee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80044f2:	d006      	beq.n	8004502 <UART_SetConfig+0x332>
 80044f4:	e00b      	b.n	800450e <UART_SetConfig+0x33e>
 80044f6:	2300      	movs	r3, #0
 80044f8:	77fb      	strb	r3, [r7, #31]
 80044fa:	e00d      	b.n	8004518 <UART_SetConfig+0x348>
 80044fc:	2302      	movs	r3, #2
 80044fe:	77fb      	strb	r3, [r7, #31]
 8004500:	e00a      	b.n	8004518 <UART_SetConfig+0x348>
 8004502:	2304      	movs	r3, #4
 8004504:	77fb      	strb	r3, [r7, #31]
 8004506:	e007      	b.n	8004518 <UART_SetConfig+0x348>
 8004508:	2308      	movs	r3, #8
 800450a:	77fb      	strb	r3, [r7, #31]
 800450c:	e004      	b.n	8004518 <UART_SetConfig+0x348>
 800450e:	2310      	movs	r3, #16
 8004510:	77fb      	strb	r3, [r7, #31]
 8004512:	e001      	b.n	8004518 <UART_SetConfig+0x348>
 8004514:	2310      	movs	r3, #16
 8004516:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	69db      	ldr	r3, [r3, #28]
 800451c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004520:	d15b      	bne.n	80045da <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8004522:	7ffb      	ldrb	r3, [r7, #31]
 8004524:	2b08      	cmp	r3, #8
 8004526:	d828      	bhi.n	800457a <UART_SetConfig+0x3aa>
 8004528:	a201      	add	r2, pc, #4	; (adr r2, 8004530 <UART_SetConfig+0x360>)
 800452a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800452e:	bf00      	nop
 8004530:	08004555 	.word	0x08004555
 8004534:	0800455d 	.word	0x0800455d
 8004538:	08004565 	.word	0x08004565
 800453c:	0800457b 	.word	0x0800457b
 8004540:	0800456b 	.word	0x0800456b
 8004544:	0800457b 	.word	0x0800457b
 8004548:	0800457b 	.word	0x0800457b
 800454c:	0800457b 	.word	0x0800457b
 8004550:	08004573 	.word	0x08004573
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004554:	f7fd fe08 	bl	8002168 <HAL_RCC_GetPCLK1Freq>
 8004558:	61b8      	str	r0, [r7, #24]
        break;
 800455a:	e013      	b.n	8004584 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800455c:	f7fd fe18 	bl	8002190 <HAL_RCC_GetPCLK2Freq>
 8004560:	61b8      	str	r0, [r7, #24]
        break;
 8004562:	e00f      	b.n	8004584 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004564:	4b4b      	ldr	r3, [pc, #300]	; (8004694 <UART_SetConfig+0x4c4>)
 8004566:	61bb      	str	r3, [r7, #24]
        break;
 8004568:	e00c      	b.n	8004584 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800456a:	f7fd fd2b 	bl	8001fc4 <HAL_RCC_GetSysClockFreq>
 800456e:	61b8      	str	r0, [r7, #24]
        break;
 8004570:	e008      	b.n	8004584 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004572:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004576:	61bb      	str	r3, [r7, #24]
        break;
 8004578:	e004      	b.n	8004584 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800457a:	2300      	movs	r3, #0
 800457c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800457e:	2301      	movs	r3, #1
 8004580:	77bb      	strb	r3, [r7, #30]
        break;
 8004582:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004584:	69bb      	ldr	r3, [r7, #24]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d074      	beq.n	8004674 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800458a:	69bb      	ldr	r3, [r7, #24]
 800458c:	005a      	lsls	r2, r3, #1
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	085b      	lsrs	r3, r3, #1
 8004594:	441a      	add	r2, r3
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	fbb2 f3f3 	udiv	r3, r2, r3
 800459e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80045a0:	693b      	ldr	r3, [r7, #16]
 80045a2:	2b0f      	cmp	r3, #15
 80045a4:	d916      	bls.n	80045d4 <UART_SetConfig+0x404>
 80045a6:	693b      	ldr	r3, [r7, #16]
 80045a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045ac:	d212      	bcs.n	80045d4 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80045ae:	693b      	ldr	r3, [r7, #16]
 80045b0:	b29b      	uxth	r3, r3
 80045b2:	f023 030f 	bic.w	r3, r3, #15
 80045b6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80045b8:	693b      	ldr	r3, [r7, #16]
 80045ba:	085b      	lsrs	r3, r3, #1
 80045bc:	b29b      	uxth	r3, r3
 80045be:	f003 0307 	and.w	r3, r3, #7
 80045c2:	b29a      	uxth	r2, r3
 80045c4:	89fb      	ldrh	r3, [r7, #14]
 80045c6:	4313      	orrs	r3, r2
 80045c8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	89fa      	ldrh	r2, [r7, #14]
 80045d0:	60da      	str	r2, [r3, #12]
 80045d2:	e04f      	b.n	8004674 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80045d4:	2301      	movs	r3, #1
 80045d6:	77bb      	strb	r3, [r7, #30]
 80045d8:	e04c      	b.n	8004674 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80045da:	7ffb      	ldrb	r3, [r7, #31]
 80045dc:	2b08      	cmp	r3, #8
 80045de:	d828      	bhi.n	8004632 <UART_SetConfig+0x462>
 80045e0:	a201      	add	r2, pc, #4	; (adr r2, 80045e8 <UART_SetConfig+0x418>)
 80045e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045e6:	bf00      	nop
 80045e8:	0800460d 	.word	0x0800460d
 80045ec:	08004615 	.word	0x08004615
 80045f0:	0800461d 	.word	0x0800461d
 80045f4:	08004633 	.word	0x08004633
 80045f8:	08004623 	.word	0x08004623
 80045fc:	08004633 	.word	0x08004633
 8004600:	08004633 	.word	0x08004633
 8004604:	08004633 	.word	0x08004633
 8004608:	0800462b 	.word	0x0800462b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800460c:	f7fd fdac 	bl	8002168 <HAL_RCC_GetPCLK1Freq>
 8004610:	61b8      	str	r0, [r7, #24]
        break;
 8004612:	e013      	b.n	800463c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004614:	f7fd fdbc 	bl	8002190 <HAL_RCC_GetPCLK2Freq>
 8004618:	61b8      	str	r0, [r7, #24]
        break;
 800461a:	e00f      	b.n	800463c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800461c:	4b1d      	ldr	r3, [pc, #116]	; (8004694 <UART_SetConfig+0x4c4>)
 800461e:	61bb      	str	r3, [r7, #24]
        break;
 8004620:	e00c      	b.n	800463c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004622:	f7fd fccf 	bl	8001fc4 <HAL_RCC_GetSysClockFreq>
 8004626:	61b8      	str	r0, [r7, #24]
        break;
 8004628:	e008      	b.n	800463c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800462a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800462e:	61bb      	str	r3, [r7, #24]
        break;
 8004630:	e004      	b.n	800463c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8004632:	2300      	movs	r3, #0
 8004634:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004636:	2301      	movs	r3, #1
 8004638:	77bb      	strb	r3, [r7, #30]
        break;
 800463a:	bf00      	nop
    }

    if (pclk != 0U)
 800463c:	69bb      	ldr	r3, [r7, #24]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d018      	beq.n	8004674 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	085a      	lsrs	r2, r3, #1
 8004648:	69bb      	ldr	r3, [r7, #24]
 800464a:	441a      	add	r2, r3
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	fbb2 f3f3 	udiv	r3, r2, r3
 8004654:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004656:	693b      	ldr	r3, [r7, #16]
 8004658:	2b0f      	cmp	r3, #15
 800465a:	d909      	bls.n	8004670 <UART_SetConfig+0x4a0>
 800465c:	693b      	ldr	r3, [r7, #16]
 800465e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004662:	d205      	bcs.n	8004670 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004664:	693b      	ldr	r3, [r7, #16]
 8004666:	b29a      	uxth	r2, r3
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	60da      	str	r2, [r3, #12]
 800466e:	e001      	b.n	8004674 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004670:	2301      	movs	r3, #1
 8004672:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2200      	movs	r2, #0
 8004678:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2200      	movs	r2, #0
 800467e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004680:	7fbb      	ldrb	r3, [r7, #30]
}
 8004682:	4618      	mov	r0, r3
 8004684:	3720      	adds	r7, #32
 8004686:	46bd      	mov	sp, r7
 8004688:	bd80      	pop	{r7, pc}
 800468a:	bf00      	nop
 800468c:	40007c00 	.word	0x40007c00
 8004690:	40023800 	.word	0x40023800
 8004694:	00f42400 	.word	0x00f42400

08004698 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004698:	b480      	push	{r7}
 800469a:	b083      	sub	sp, #12
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a4:	f003 0301 	and.w	r3, r3, #1
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d00a      	beq.n	80046c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	430a      	orrs	r2, r1
 80046c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c6:	f003 0302 	and.w	r3, r3, #2
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d00a      	beq.n	80046e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	430a      	orrs	r2, r1
 80046e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e8:	f003 0304 	and.w	r3, r3, #4
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d00a      	beq.n	8004706 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	430a      	orrs	r2, r1
 8004704:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800470a:	f003 0308 	and.w	r3, r3, #8
 800470e:	2b00      	cmp	r3, #0
 8004710:	d00a      	beq.n	8004728 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	430a      	orrs	r2, r1
 8004726:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800472c:	f003 0310 	and.w	r3, r3, #16
 8004730:	2b00      	cmp	r3, #0
 8004732:	d00a      	beq.n	800474a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	689b      	ldr	r3, [r3, #8]
 800473a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	430a      	orrs	r2, r1
 8004748:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800474e:	f003 0320 	and.w	r3, r3, #32
 8004752:	2b00      	cmp	r3, #0
 8004754:	d00a      	beq.n	800476c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	689b      	ldr	r3, [r3, #8]
 800475c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	430a      	orrs	r2, r1
 800476a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004770:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004774:	2b00      	cmp	r3, #0
 8004776:	d01a      	beq.n	80047ae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	430a      	orrs	r2, r1
 800478c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004792:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004796:	d10a      	bne.n	80047ae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	430a      	orrs	r2, r1
 80047ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d00a      	beq.n	80047d0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	430a      	orrs	r2, r1
 80047ce:	605a      	str	r2, [r3, #4]
  }
}
 80047d0:	bf00      	nop
 80047d2:	370c      	adds	r7, #12
 80047d4:	46bd      	mov	sp, r7
 80047d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047da:	4770      	bx	lr

080047dc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b086      	sub	sp, #24
 80047e0:	af02      	add	r7, sp, #8
 80047e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2200      	movs	r2, #0
 80047e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80047ec:	f7fc fcd0 	bl	8001190 <HAL_GetTick>
 80047f0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f003 0308 	and.w	r3, r3, #8
 80047fc:	2b08      	cmp	r3, #8
 80047fe:	d10e      	bne.n	800481e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004800:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004804:	9300      	str	r3, [sp, #0]
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	2200      	movs	r2, #0
 800480a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800480e:	6878      	ldr	r0, [r7, #4]
 8004810:	f000 f831 	bl	8004876 <UART_WaitOnFlagUntilTimeout>
 8004814:	4603      	mov	r3, r0
 8004816:	2b00      	cmp	r3, #0
 8004818:	d001      	beq.n	800481e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800481a:	2303      	movs	r3, #3
 800481c:	e027      	b.n	800486e <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f003 0304 	and.w	r3, r3, #4
 8004828:	2b04      	cmp	r3, #4
 800482a:	d10e      	bne.n	800484a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800482c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004830:	9300      	str	r3, [sp, #0]
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	2200      	movs	r2, #0
 8004836:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800483a:	6878      	ldr	r0, [r7, #4]
 800483c:	f000 f81b 	bl	8004876 <UART_WaitOnFlagUntilTimeout>
 8004840:	4603      	mov	r3, r0
 8004842:	2b00      	cmp	r3, #0
 8004844:	d001      	beq.n	800484a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004846:	2303      	movs	r3, #3
 8004848:	e011      	b.n	800486e <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2220      	movs	r2, #32
 800484e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2220      	movs	r2, #32
 8004854:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2200      	movs	r2, #0
 800485c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2200      	movs	r2, #0
 8004862:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2200      	movs	r2, #0
 8004868:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800486c:	2300      	movs	r3, #0
}
 800486e:	4618      	mov	r0, r3
 8004870:	3710      	adds	r7, #16
 8004872:	46bd      	mov	sp, r7
 8004874:	bd80      	pop	{r7, pc}

08004876 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004876:	b580      	push	{r7, lr}
 8004878:	b09c      	sub	sp, #112	; 0x70
 800487a:	af00      	add	r7, sp, #0
 800487c:	60f8      	str	r0, [r7, #12]
 800487e:	60b9      	str	r1, [r7, #8]
 8004880:	603b      	str	r3, [r7, #0]
 8004882:	4613      	mov	r3, r2
 8004884:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004886:	e0a7      	b.n	80049d8 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004888:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800488a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800488e:	f000 80a3 	beq.w	80049d8 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004892:	f7fc fc7d 	bl	8001190 <HAL_GetTick>
 8004896:	4602      	mov	r2, r0
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	1ad3      	subs	r3, r2, r3
 800489c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800489e:	429a      	cmp	r2, r3
 80048a0:	d302      	bcc.n	80048a8 <UART_WaitOnFlagUntilTimeout+0x32>
 80048a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d13f      	bne.n	8004928 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80048b0:	e853 3f00 	ldrex	r3, [r3]
 80048b4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80048b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048b8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80048bc:	667b      	str	r3, [r7, #100]	; 0x64
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	461a      	mov	r2, r3
 80048c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80048c6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80048c8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048ca:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80048cc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80048ce:	e841 2300 	strex	r3, r2, [r1]
 80048d2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80048d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d1e6      	bne.n	80048a8 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	3308      	adds	r3, #8
 80048e0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048e4:	e853 3f00 	ldrex	r3, [r3]
 80048e8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80048ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048ec:	f023 0301 	bic.w	r3, r3, #1
 80048f0:	663b      	str	r3, [r7, #96]	; 0x60
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	3308      	adds	r3, #8
 80048f8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80048fa:	64ba      	str	r2, [r7, #72]	; 0x48
 80048fc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048fe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004900:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004902:	e841 2300 	strex	r3, r2, [r1]
 8004906:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004908:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800490a:	2b00      	cmp	r3, #0
 800490c:	d1e5      	bne.n	80048da <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	2220      	movs	r2, #32
 8004912:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	2220      	movs	r2, #32
 8004918:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	2200      	movs	r2, #0
 8004920:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8004924:	2303      	movs	r3, #3
 8004926:	e068      	b.n	80049fa <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f003 0304 	and.w	r3, r3, #4
 8004932:	2b00      	cmp	r3, #0
 8004934:	d050      	beq.n	80049d8 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	69db      	ldr	r3, [r3, #28]
 800493c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004940:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004944:	d148      	bne.n	80049d8 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800494e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004958:	e853 3f00 	ldrex	r3, [r3]
 800495c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800495e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004960:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004964:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	461a      	mov	r2, r3
 800496c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800496e:	637b      	str	r3, [r7, #52]	; 0x34
 8004970:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004972:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004974:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004976:	e841 2300 	strex	r3, r2, [r1]
 800497a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800497c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800497e:	2b00      	cmp	r3, #0
 8004980:	d1e6      	bne.n	8004950 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	3308      	adds	r3, #8
 8004988:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800498a:	697b      	ldr	r3, [r7, #20]
 800498c:	e853 3f00 	ldrex	r3, [r3]
 8004990:	613b      	str	r3, [r7, #16]
   return(result);
 8004992:	693b      	ldr	r3, [r7, #16]
 8004994:	f023 0301 	bic.w	r3, r3, #1
 8004998:	66bb      	str	r3, [r7, #104]	; 0x68
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	3308      	adds	r3, #8
 80049a0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80049a2:	623a      	str	r2, [r7, #32]
 80049a4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049a6:	69f9      	ldr	r1, [r7, #28]
 80049a8:	6a3a      	ldr	r2, [r7, #32]
 80049aa:	e841 2300 	strex	r3, r2, [r1]
 80049ae:	61bb      	str	r3, [r7, #24]
   return(result);
 80049b0:	69bb      	ldr	r3, [r7, #24]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d1e5      	bne.n	8004982 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	2220      	movs	r2, #32
 80049ba:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	2220      	movs	r2, #32
 80049c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	2220      	movs	r2, #32
 80049c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	2200      	movs	r2, #0
 80049d0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80049d4:	2303      	movs	r3, #3
 80049d6:	e010      	b.n	80049fa <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	69da      	ldr	r2, [r3, #28]
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	4013      	ands	r3, r2
 80049e2:	68ba      	ldr	r2, [r7, #8]
 80049e4:	429a      	cmp	r2, r3
 80049e6:	bf0c      	ite	eq
 80049e8:	2301      	moveq	r3, #1
 80049ea:	2300      	movne	r3, #0
 80049ec:	b2db      	uxtb	r3, r3
 80049ee:	461a      	mov	r2, r3
 80049f0:	79fb      	ldrb	r3, [r7, #7]
 80049f2:	429a      	cmp	r2, r3
 80049f4:	f43f af48 	beq.w	8004888 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80049f8:	2300      	movs	r3, #0
}
 80049fa:	4618      	mov	r0, r3
 80049fc:	3770      	adds	r7, #112	; 0x70
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bd80      	pop	{r7, pc}

08004a02 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004a02:	b480      	push	{r7}
 8004a04:	b095      	sub	sp, #84	; 0x54
 8004a06:	af00      	add	r7, sp, #0
 8004a08:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a12:	e853 3f00 	ldrex	r3, [r3]
 8004a16:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004a18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a1a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004a1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	461a      	mov	r2, r3
 8004a26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a28:	643b      	str	r3, [r7, #64]	; 0x40
 8004a2a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a2c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004a2e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004a30:	e841 2300 	strex	r3, r2, [r1]
 8004a34:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004a36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d1e6      	bne.n	8004a0a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	3308      	adds	r3, #8
 8004a42:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a44:	6a3b      	ldr	r3, [r7, #32]
 8004a46:	e853 3f00 	ldrex	r3, [r3]
 8004a4a:	61fb      	str	r3, [r7, #28]
   return(result);
 8004a4c:	69fb      	ldr	r3, [r7, #28]
 8004a4e:	f023 0301 	bic.w	r3, r3, #1
 8004a52:	64bb      	str	r3, [r7, #72]	; 0x48
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	3308      	adds	r3, #8
 8004a5a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004a5c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004a5e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a60:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004a62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a64:	e841 2300 	strex	r3, r2, [r1]
 8004a68:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d1e5      	bne.n	8004a3c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a74:	2b01      	cmp	r3, #1
 8004a76:	d118      	bne.n	8004aaa <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	e853 3f00 	ldrex	r3, [r3]
 8004a84:	60bb      	str	r3, [r7, #8]
   return(result);
 8004a86:	68bb      	ldr	r3, [r7, #8]
 8004a88:	f023 0310 	bic.w	r3, r3, #16
 8004a8c:	647b      	str	r3, [r7, #68]	; 0x44
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	461a      	mov	r2, r3
 8004a94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a96:	61bb      	str	r3, [r7, #24]
 8004a98:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a9a:	6979      	ldr	r1, [r7, #20]
 8004a9c:	69ba      	ldr	r2, [r7, #24]
 8004a9e:	e841 2300 	strex	r3, r2, [r1]
 8004aa2:	613b      	str	r3, [r7, #16]
   return(result);
 8004aa4:	693b      	ldr	r3, [r7, #16]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d1e6      	bne.n	8004a78 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2220      	movs	r2, #32
 8004aae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2200      	movs	r2, #0
 8004abc:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004abe:	bf00      	nop
 8004ac0:	3754      	adds	r7, #84	; 0x54
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac8:	4770      	bx	lr

08004aca <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004aca:	b580      	push	{r7, lr}
 8004acc:	b084      	sub	sp, #16
 8004ace:	af00      	add	r7, sp, #0
 8004ad0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ad6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	2200      	movs	r2, #0
 8004adc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004ae8:	68f8      	ldr	r0, [r7, #12]
 8004aea:	f7ff fb51 	bl	8004190 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004aee:	bf00      	nop
 8004af0:	3710      	adds	r7, #16
 8004af2:	46bd      	mov	sp, r7
 8004af4:	bd80      	pop	{r7, pc}

08004af6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004af6:	b580      	push	{r7, lr}
 8004af8:	b088      	sub	sp, #32
 8004afa:	af00      	add	r7, sp, #0
 8004afc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	e853 3f00 	ldrex	r3, [r3]
 8004b0a:	60bb      	str	r3, [r7, #8]
   return(result);
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b12:	61fb      	str	r3, [r7, #28]
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	461a      	mov	r2, r3
 8004b1a:	69fb      	ldr	r3, [r7, #28]
 8004b1c:	61bb      	str	r3, [r7, #24]
 8004b1e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b20:	6979      	ldr	r1, [r7, #20]
 8004b22:	69ba      	ldr	r2, [r7, #24]
 8004b24:	e841 2300 	strex	r3, r2, [r1]
 8004b28:	613b      	str	r3, [r7, #16]
   return(result);
 8004b2a:	693b      	ldr	r3, [r7, #16]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d1e6      	bne.n	8004afe <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2220      	movs	r2, #32
 8004b34:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004b3c:	6878      	ldr	r0, [r7, #4]
 8004b3e:	f7ff fb1d 	bl	800417c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004b42:	bf00      	nop
 8004b44:	3720      	adds	r7, #32
 8004b46:	46bd      	mov	sp, r7
 8004b48:	bd80      	pop	{r7, pc}
	...

08004b4c <std>:
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	b510      	push	{r4, lr}
 8004b50:	4604      	mov	r4, r0
 8004b52:	e9c0 3300 	strd	r3, r3, [r0]
 8004b56:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004b5a:	6083      	str	r3, [r0, #8]
 8004b5c:	8181      	strh	r1, [r0, #12]
 8004b5e:	6643      	str	r3, [r0, #100]	; 0x64
 8004b60:	81c2      	strh	r2, [r0, #14]
 8004b62:	6183      	str	r3, [r0, #24]
 8004b64:	4619      	mov	r1, r3
 8004b66:	2208      	movs	r2, #8
 8004b68:	305c      	adds	r0, #92	; 0x5c
 8004b6a:	f000 f9f7 	bl	8004f5c <memset>
 8004b6e:	4b0d      	ldr	r3, [pc, #52]	; (8004ba4 <std+0x58>)
 8004b70:	6263      	str	r3, [r4, #36]	; 0x24
 8004b72:	4b0d      	ldr	r3, [pc, #52]	; (8004ba8 <std+0x5c>)
 8004b74:	62a3      	str	r3, [r4, #40]	; 0x28
 8004b76:	4b0d      	ldr	r3, [pc, #52]	; (8004bac <std+0x60>)
 8004b78:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004b7a:	4b0d      	ldr	r3, [pc, #52]	; (8004bb0 <std+0x64>)
 8004b7c:	6323      	str	r3, [r4, #48]	; 0x30
 8004b7e:	4b0d      	ldr	r3, [pc, #52]	; (8004bb4 <std+0x68>)
 8004b80:	6224      	str	r4, [r4, #32]
 8004b82:	429c      	cmp	r4, r3
 8004b84:	d006      	beq.n	8004b94 <std+0x48>
 8004b86:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8004b8a:	4294      	cmp	r4, r2
 8004b8c:	d002      	beq.n	8004b94 <std+0x48>
 8004b8e:	33d0      	adds	r3, #208	; 0xd0
 8004b90:	429c      	cmp	r4, r3
 8004b92:	d105      	bne.n	8004ba0 <std+0x54>
 8004b94:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004b98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b9c:	f000 ba56 	b.w	800504c <__retarget_lock_init_recursive>
 8004ba0:	bd10      	pop	{r4, pc}
 8004ba2:	bf00      	nop
 8004ba4:	08004dad 	.word	0x08004dad
 8004ba8:	08004dcf 	.word	0x08004dcf
 8004bac:	08004e07 	.word	0x08004e07
 8004bb0:	08004e2b 	.word	0x08004e2b
 8004bb4:	20000204 	.word	0x20000204

08004bb8 <stdio_exit_handler>:
 8004bb8:	4a02      	ldr	r2, [pc, #8]	; (8004bc4 <stdio_exit_handler+0xc>)
 8004bba:	4903      	ldr	r1, [pc, #12]	; (8004bc8 <stdio_exit_handler+0x10>)
 8004bbc:	4803      	ldr	r0, [pc, #12]	; (8004bcc <stdio_exit_handler+0x14>)
 8004bbe:	f000 b869 	b.w	8004c94 <_fwalk_sglue>
 8004bc2:	bf00      	nop
 8004bc4:	20000030 	.word	0x20000030
 8004bc8:	080058f9 	.word	0x080058f9
 8004bcc:	2000003c 	.word	0x2000003c

08004bd0 <cleanup_stdio>:
 8004bd0:	6841      	ldr	r1, [r0, #4]
 8004bd2:	4b0c      	ldr	r3, [pc, #48]	; (8004c04 <cleanup_stdio+0x34>)
 8004bd4:	4299      	cmp	r1, r3
 8004bd6:	b510      	push	{r4, lr}
 8004bd8:	4604      	mov	r4, r0
 8004bda:	d001      	beq.n	8004be0 <cleanup_stdio+0x10>
 8004bdc:	f000 fe8c 	bl	80058f8 <_fflush_r>
 8004be0:	68a1      	ldr	r1, [r4, #8]
 8004be2:	4b09      	ldr	r3, [pc, #36]	; (8004c08 <cleanup_stdio+0x38>)
 8004be4:	4299      	cmp	r1, r3
 8004be6:	d002      	beq.n	8004bee <cleanup_stdio+0x1e>
 8004be8:	4620      	mov	r0, r4
 8004bea:	f000 fe85 	bl	80058f8 <_fflush_r>
 8004bee:	68e1      	ldr	r1, [r4, #12]
 8004bf0:	4b06      	ldr	r3, [pc, #24]	; (8004c0c <cleanup_stdio+0x3c>)
 8004bf2:	4299      	cmp	r1, r3
 8004bf4:	d004      	beq.n	8004c00 <cleanup_stdio+0x30>
 8004bf6:	4620      	mov	r0, r4
 8004bf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004bfc:	f000 be7c 	b.w	80058f8 <_fflush_r>
 8004c00:	bd10      	pop	{r4, pc}
 8004c02:	bf00      	nop
 8004c04:	20000204 	.word	0x20000204
 8004c08:	2000026c 	.word	0x2000026c
 8004c0c:	200002d4 	.word	0x200002d4

08004c10 <global_stdio_init.part.0>:
 8004c10:	b510      	push	{r4, lr}
 8004c12:	4b0b      	ldr	r3, [pc, #44]	; (8004c40 <global_stdio_init.part.0+0x30>)
 8004c14:	4c0b      	ldr	r4, [pc, #44]	; (8004c44 <global_stdio_init.part.0+0x34>)
 8004c16:	4a0c      	ldr	r2, [pc, #48]	; (8004c48 <global_stdio_init.part.0+0x38>)
 8004c18:	601a      	str	r2, [r3, #0]
 8004c1a:	4620      	mov	r0, r4
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	2104      	movs	r1, #4
 8004c20:	f7ff ff94 	bl	8004b4c <std>
 8004c24:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004c28:	2201      	movs	r2, #1
 8004c2a:	2109      	movs	r1, #9
 8004c2c:	f7ff ff8e 	bl	8004b4c <std>
 8004c30:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004c34:	2202      	movs	r2, #2
 8004c36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c3a:	2112      	movs	r1, #18
 8004c3c:	f7ff bf86 	b.w	8004b4c <std>
 8004c40:	2000033c 	.word	0x2000033c
 8004c44:	20000204 	.word	0x20000204
 8004c48:	08004bb9 	.word	0x08004bb9

08004c4c <__sfp_lock_acquire>:
 8004c4c:	4801      	ldr	r0, [pc, #4]	; (8004c54 <__sfp_lock_acquire+0x8>)
 8004c4e:	f000 b9fe 	b.w	800504e <__retarget_lock_acquire_recursive>
 8004c52:	bf00      	nop
 8004c54:	20000345 	.word	0x20000345

08004c58 <__sfp_lock_release>:
 8004c58:	4801      	ldr	r0, [pc, #4]	; (8004c60 <__sfp_lock_release+0x8>)
 8004c5a:	f000 b9f9 	b.w	8005050 <__retarget_lock_release_recursive>
 8004c5e:	bf00      	nop
 8004c60:	20000345 	.word	0x20000345

08004c64 <__sinit>:
 8004c64:	b510      	push	{r4, lr}
 8004c66:	4604      	mov	r4, r0
 8004c68:	f7ff fff0 	bl	8004c4c <__sfp_lock_acquire>
 8004c6c:	6a23      	ldr	r3, [r4, #32]
 8004c6e:	b11b      	cbz	r3, 8004c78 <__sinit+0x14>
 8004c70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c74:	f7ff bff0 	b.w	8004c58 <__sfp_lock_release>
 8004c78:	4b04      	ldr	r3, [pc, #16]	; (8004c8c <__sinit+0x28>)
 8004c7a:	6223      	str	r3, [r4, #32]
 8004c7c:	4b04      	ldr	r3, [pc, #16]	; (8004c90 <__sinit+0x2c>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d1f5      	bne.n	8004c70 <__sinit+0xc>
 8004c84:	f7ff ffc4 	bl	8004c10 <global_stdio_init.part.0>
 8004c88:	e7f2      	b.n	8004c70 <__sinit+0xc>
 8004c8a:	bf00      	nop
 8004c8c:	08004bd1 	.word	0x08004bd1
 8004c90:	2000033c 	.word	0x2000033c

08004c94 <_fwalk_sglue>:
 8004c94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004c98:	4607      	mov	r7, r0
 8004c9a:	4688      	mov	r8, r1
 8004c9c:	4614      	mov	r4, r2
 8004c9e:	2600      	movs	r6, #0
 8004ca0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004ca4:	f1b9 0901 	subs.w	r9, r9, #1
 8004ca8:	d505      	bpl.n	8004cb6 <_fwalk_sglue+0x22>
 8004caa:	6824      	ldr	r4, [r4, #0]
 8004cac:	2c00      	cmp	r4, #0
 8004cae:	d1f7      	bne.n	8004ca0 <_fwalk_sglue+0xc>
 8004cb0:	4630      	mov	r0, r6
 8004cb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004cb6:	89ab      	ldrh	r3, [r5, #12]
 8004cb8:	2b01      	cmp	r3, #1
 8004cba:	d907      	bls.n	8004ccc <_fwalk_sglue+0x38>
 8004cbc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004cc0:	3301      	adds	r3, #1
 8004cc2:	d003      	beq.n	8004ccc <_fwalk_sglue+0x38>
 8004cc4:	4629      	mov	r1, r5
 8004cc6:	4638      	mov	r0, r7
 8004cc8:	47c0      	blx	r8
 8004cca:	4306      	orrs	r6, r0
 8004ccc:	3568      	adds	r5, #104	; 0x68
 8004cce:	e7e9      	b.n	8004ca4 <_fwalk_sglue+0x10>

08004cd0 <iprintf>:
 8004cd0:	b40f      	push	{r0, r1, r2, r3}
 8004cd2:	b507      	push	{r0, r1, r2, lr}
 8004cd4:	4906      	ldr	r1, [pc, #24]	; (8004cf0 <iprintf+0x20>)
 8004cd6:	ab04      	add	r3, sp, #16
 8004cd8:	6808      	ldr	r0, [r1, #0]
 8004cda:	f853 2b04 	ldr.w	r2, [r3], #4
 8004cde:	6881      	ldr	r1, [r0, #8]
 8004ce0:	9301      	str	r3, [sp, #4]
 8004ce2:	f000 fad9 	bl	8005298 <_vfiprintf_r>
 8004ce6:	b003      	add	sp, #12
 8004ce8:	f85d eb04 	ldr.w	lr, [sp], #4
 8004cec:	b004      	add	sp, #16
 8004cee:	4770      	bx	lr
 8004cf0:	20000088 	.word	0x20000088

08004cf4 <_puts_r>:
 8004cf4:	6a03      	ldr	r3, [r0, #32]
 8004cf6:	b570      	push	{r4, r5, r6, lr}
 8004cf8:	6884      	ldr	r4, [r0, #8]
 8004cfa:	4605      	mov	r5, r0
 8004cfc:	460e      	mov	r6, r1
 8004cfe:	b90b      	cbnz	r3, 8004d04 <_puts_r+0x10>
 8004d00:	f7ff ffb0 	bl	8004c64 <__sinit>
 8004d04:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004d06:	07db      	lsls	r3, r3, #31
 8004d08:	d405      	bmi.n	8004d16 <_puts_r+0x22>
 8004d0a:	89a3      	ldrh	r3, [r4, #12]
 8004d0c:	0598      	lsls	r0, r3, #22
 8004d0e:	d402      	bmi.n	8004d16 <_puts_r+0x22>
 8004d10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004d12:	f000 f99c 	bl	800504e <__retarget_lock_acquire_recursive>
 8004d16:	89a3      	ldrh	r3, [r4, #12]
 8004d18:	0719      	lsls	r1, r3, #28
 8004d1a:	d513      	bpl.n	8004d44 <_puts_r+0x50>
 8004d1c:	6923      	ldr	r3, [r4, #16]
 8004d1e:	b18b      	cbz	r3, 8004d44 <_puts_r+0x50>
 8004d20:	3e01      	subs	r6, #1
 8004d22:	68a3      	ldr	r3, [r4, #8]
 8004d24:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004d28:	3b01      	subs	r3, #1
 8004d2a:	60a3      	str	r3, [r4, #8]
 8004d2c:	b9e9      	cbnz	r1, 8004d6a <_puts_r+0x76>
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	da2e      	bge.n	8004d90 <_puts_r+0x9c>
 8004d32:	4622      	mov	r2, r4
 8004d34:	210a      	movs	r1, #10
 8004d36:	4628      	mov	r0, r5
 8004d38:	f000 f87b 	bl	8004e32 <__swbuf_r>
 8004d3c:	3001      	adds	r0, #1
 8004d3e:	d007      	beq.n	8004d50 <_puts_r+0x5c>
 8004d40:	250a      	movs	r5, #10
 8004d42:	e007      	b.n	8004d54 <_puts_r+0x60>
 8004d44:	4621      	mov	r1, r4
 8004d46:	4628      	mov	r0, r5
 8004d48:	f000 f8b0 	bl	8004eac <__swsetup_r>
 8004d4c:	2800      	cmp	r0, #0
 8004d4e:	d0e7      	beq.n	8004d20 <_puts_r+0x2c>
 8004d50:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8004d54:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004d56:	07da      	lsls	r2, r3, #31
 8004d58:	d405      	bmi.n	8004d66 <_puts_r+0x72>
 8004d5a:	89a3      	ldrh	r3, [r4, #12]
 8004d5c:	059b      	lsls	r3, r3, #22
 8004d5e:	d402      	bmi.n	8004d66 <_puts_r+0x72>
 8004d60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004d62:	f000 f975 	bl	8005050 <__retarget_lock_release_recursive>
 8004d66:	4628      	mov	r0, r5
 8004d68:	bd70      	pop	{r4, r5, r6, pc}
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	da04      	bge.n	8004d78 <_puts_r+0x84>
 8004d6e:	69a2      	ldr	r2, [r4, #24]
 8004d70:	429a      	cmp	r2, r3
 8004d72:	dc06      	bgt.n	8004d82 <_puts_r+0x8e>
 8004d74:	290a      	cmp	r1, #10
 8004d76:	d004      	beq.n	8004d82 <_puts_r+0x8e>
 8004d78:	6823      	ldr	r3, [r4, #0]
 8004d7a:	1c5a      	adds	r2, r3, #1
 8004d7c:	6022      	str	r2, [r4, #0]
 8004d7e:	7019      	strb	r1, [r3, #0]
 8004d80:	e7cf      	b.n	8004d22 <_puts_r+0x2e>
 8004d82:	4622      	mov	r2, r4
 8004d84:	4628      	mov	r0, r5
 8004d86:	f000 f854 	bl	8004e32 <__swbuf_r>
 8004d8a:	3001      	adds	r0, #1
 8004d8c:	d1c9      	bne.n	8004d22 <_puts_r+0x2e>
 8004d8e:	e7df      	b.n	8004d50 <_puts_r+0x5c>
 8004d90:	6823      	ldr	r3, [r4, #0]
 8004d92:	250a      	movs	r5, #10
 8004d94:	1c5a      	adds	r2, r3, #1
 8004d96:	6022      	str	r2, [r4, #0]
 8004d98:	701d      	strb	r5, [r3, #0]
 8004d9a:	e7db      	b.n	8004d54 <_puts_r+0x60>

08004d9c <puts>:
 8004d9c:	4b02      	ldr	r3, [pc, #8]	; (8004da8 <puts+0xc>)
 8004d9e:	4601      	mov	r1, r0
 8004da0:	6818      	ldr	r0, [r3, #0]
 8004da2:	f7ff bfa7 	b.w	8004cf4 <_puts_r>
 8004da6:	bf00      	nop
 8004da8:	20000088 	.word	0x20000088

08004dac <__sread>:
 8004dac:	b510      	push	{r4, lr}
 8004dae:	460c      	mov	r4, r1
 8004db0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004db4:	f000 f8fc 	bl	8004fb0 <_read_r>
 8004db8:	2800      	cmp	r0, #0
 8004dba:	bfab      	itete	ge
 8004dbc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004dbe:	89a3      	ldrhlt	r3, [r4, #12]
 8004dc0:	181b      	addge	r3, r3, r0
 8004dc2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004dc6:	bfac      	ite	ge
 8004dc8:	6563      	strge	r3, [r4, #84]	; 0x54
 8004dca:	81a3      	strhlt	r3, [r4, #12]
 8004dcc:	bd10      	pop	{r4, pc}

08004dce <__swrite>:
 8004dce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004dd2:	461f      	mov	r7, r3
 8004dd4:	898b      	ldrh	r3, [r1, #12]
 8004dd6:	05db      	lsls	r3, r3, #23
 8004dd8:	4605      	mov	r5, r0
 8004dda:	460c      	mov	r4, r1
 8004ddc:	4616      	mov	r6, r2
 8004dde:	d505      	bpl.n	8004dec <__swrite+0x1e>
 8004de0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004de4:	2302      	movs	r3, #2
 8004de6:	2200      	movs	r2, #0
 8004de8:	f000 f8d0 	bl	8004f8c <_lseek_r>
 8004dec:	89a3      	ldrh	r3, [r4, #12]
 8004dee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004df2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004df6:	81a3      	strh	r3, [r4, #12]
 8004df8:	4632      	mov	r2, r6
 8004dfa:	463b      	mov	r3, r7
 8004dfc:	4628      	mov	r0, r5
 8004dfe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004e02:	f000 b8e7 	b.w	8004fd4 <_write_r>

08004e06 <__sseek>:
 8004e06:	b510      	push	{r4, lr}
 8004e08:	460c      	mov	r4, r1
 8004e0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e0e:	f000 f8bd 	bl	8004f8c <_lseek_r>
 8004e12:	1c43      	adds	r3, r0, #1
 8004e14:	89a3      	ldrh	r3, [r4, #12]
 8004e16:	bf15      	itete	ne
 8004e18:	6560      	strne	r0, [r4, #84]	; 0x54
 8004e1a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004e1e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004e22:	81a3      	strheq	r3, [r4, #12]
 8004e24:	bf18      	it	ne
 8004e26:	81a3      	strhne	r3, [r4, #12]
 8004e28:	bd10      	pop	{r4, pc}

08004e2a <__sclose>:
 8004e2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e2e:	f000 b89d 	b.w	8004f6c <_close_r>

08004e32 <__swbuf_r>:
 8004e32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e34:	460e      	mov	r6, r1
 8004e36:	4614      	mov	r4, r2
 8004e38:	4605      	mov	r5, r0
 8004e3a:	b118      	cbz	r0, 8004e44 <__swbuf_r+0x12>
 8004e3c:	6a03      	ldr	r3, [r0, #32]
 8004e3e:	b90b      	cbnz	r3, 8004e44 <__swbuf_r+0x12>
 8004e40:	f7ff ff10 	bl	8004c64 <__sinit>
 8004e44:	69a3      	ldr	r3, [r4, #24]
 8004e46:	60a3      	str	r3, [r4, #8]
 8004e48:	89a3      	ldrh	r3, [r4, #12]
 8004e4a:	071a      	lsls	r2, r3, #28
 8004e4c:	d525      	bpl.n	8004e9a <__swbuf_r+0x68>
 8004e4e:	6923      	ldr	r3, [r4, #16]
 8004e50:	b31b      	cbz	r3, 8004e9a <__swbuf_r+0x68>
 8004e52:	6823      	ldr	r3, [r4, #0]
 8004e54:	6922      	ldr	r2, [r4, #16]
 8004e56:	1a98      	subs	r0, r3, r2
 8004e58:	6963      	ldr	r3, [r4, #20]
 8004e5a:	b2f6      	uxtb	r6, r6
 8004e5c:	4283      	cmp	r3, r0
 8004e5e:	4637      	mov	r7, r6
 8004e60:	dc04      	bgt.n	8004e6c <__swbuf_r+0x3a>
 8004e62:	4621      	mov	r1, r4
 8004e64:	4628      	mov	r0, r5
 8004e66:	f000 fd47 	bl	80058f8 <_fflush_r>
 8004e6a:	b9e0      	cbnz	r0, 8004ea6 <__swbuf_r+0x74>
 8004e6c:	68a3      	ldr	r3, [r4, #8]
 8004e6e:	3b01      	subs	r3, #1
 8004e70:	60a3      	str	r3, [r4, #8]
 8004e72:	6823      	ldr	r3, [r4, #0]
 8004e74:	1c5a      	adds	r2, r3, #1
 8004e76:	6022      	str	r2, [r4, #0]
 8004e78:	701e      	strb	r6, [r3, #0]
 8004e7a:	6962      	ldr	r2, [r4, #20]
 8004e7c:	1c43      	adds	r3, r0, #1
 8004e7e:	429a      	cmp	r2, r3
 8004e80:	d004      	beq.n	8004e8c <__swbuf_r+0x5a>
 8004e82:	89a3      	ldrh	r3, [r4, #12]
 8004e84:	07db      	lsls	r3, r3, #31
 8004e86:	d506      	bpl.n	8004e96 <__swbuf_r+0x64>
 8004e88:	2e0a      	cmp	r6, #10
 8004e8a:	d104      	bne.n	8004e96 <__swbuf_r+0x64>
 8004e8c:	4621      	mov	r1, r4
 8004e8e:	4628      	mov	r0, r5
 8004e90:	f000 fd32 	bl	80058f8 <_fflush_r>
 8004e94:	b938      	cbnz	r0, 8004ea6 <__swbuf_r+0x74>
 8004e96:	4638      	mov	r0, r7
 8004e98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e9a:	4621      	mov	r1, r4
 8004e9c:	4628      	mov	r0, r5
 8004e9e:	f000 f805 	bl	8004eac <__swsetup_r>
 8004ea2:	2800      	cmp	r0, #0
 8004ea4:	d0d5      	beq.n	8004e52 <__swbuf_r+0x20>
 8004ea6:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8004eaa:	e7f4      	b.n	8004e96 <__swbuf_r+0x64>

08004eac <__swsetup_r>:
 8004eac:	b538      	push	{r3, r4, r5, lr}
 8004eae:	4b2a      	ldr	r3, [pc, #168]	; (8004f58 <__swsetup_r+0xac>)
 8004eb0:	4605      	mov	r5, r0
 8004eb2:	6818      	ldr	r0, [r3, #0]
 8004eb4:	460c      	mov	r4, r1
 8004eb6:	b118      	cbz	r0, 8004ec0 <__swsetup_r+0x14>
 8004eb8:	6a03      	ldr	r3, [r0, #32]
 8004eba:	b90b      	cbnz	r3, 8004ec0 <__swsetup_r+0x14>
 8004ebc:	f7ff fed2 	bl	8004c64 <__sinit>
 8004ec0:	89a3      	ldrh	r3, [r4, #12]
 8004ec2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004ec6:	0718      	lsls	r0, r3, #28
 8004ec8:	d422      	bmi.n	8004f10 <__swsetup_r+0x64>
 8004eca:	06d9      	lsls	r1, r3, #27
 8004ecc:	d407      	bmi.n	8004ede <__swsetup_r+0x32>
 8004ece:	2309      	movs	r3, #9
 8004ed0:	602b      	str	r3, [r5, #0]
 8004ed2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004ed6:	81a3      	strh	r3, [r4, #12]
 8004ed8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004edc:	e034      	b.n	8004f48 <__swsetup_r+0x9c>
 8004ede:	0758      	lsls	r0, r3, #29
 8004ee0:	d512      	bpl.n	8004f08 <__swsetup_r+0x5c>
 8004ee2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004ee4:	b141      	cbz	r1, 8004ef8 <__swsetup_r+0x4c>
 8004ee6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004eea:	4299      	cmp	r1, r3
 8004eec:	d002      	beq.n	8004ef4 <__swsetup_r+0x48>
 8004eee:	4628      	mov	r0, r5
 8004ef0:	f000 f8b0 	bl	8005054 <_free_r>
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	6363      	str	r3, [r4, #52]	; 0x34
 8004ef8:	89a3      	ldrh	r3, [r4, #12]
 8004efa:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004efe:	81a3      	strh	r3, [r4, #12]
 8004f00:	2300      	movs	r3, #0
 8004f02:	6063      	str	r3, [r4, #4]
 8004f04:	6923      	ldr	r3, [r4, #16]
 8004f06:	6023      	str	r3, [r4, #0]
 8004f08:	89a3      	ldrh	r3, [r4, #12]
 8004f0a:	f043 0308 	orr.w	r3, r3, #8
 8004f0e:	81a3      	strh	r3, [r4, #12]
 8004f10:	6923      	ldr	r3, [r4, #16]
 8004f12:	b94b      	cbnz	r3, 8004f28 <__swsetup_r+0x7c>
 8004f14:	89a3      	ldrh	r3, [r4, #12]
 8004f16:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004f1a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f1e:	d003      	beq.n	8004f28 <__swsetup_r+0x7c>
 8004f20:	4621      	mov	r1, r4
 8004f22:	4628      	mov	r0, r5
 8004f24:	f000 fd36 	bl	8005994 <__smakebuf_r>
 8004f28:	89a0      	ldrh	r0, [r4, #12]
 8004f2a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004f2e:	f010 0301 	ands.w	r3, r0, #1
 8004f32:	d00a      	beq.n	8004f4a <__swsetup_r+0x9e>
 8004f34:	2300      	movs	r3, #0
 8004f36:	60a3      	str	r3, [r4, #8]
 8004f38:	6963      	ldr	r3, [r4, #20]
 8004f3a:	425b      	negs	r3, r3
 8004f3c:	61a3      	str	r3, [r4, #24]
 8004f3e:	6923      	ldr	r3, [r4, #16]
 8004f40:	b943      	cbnz	r3, 8004f54 <__swsetup_r+0xa8>
 8004f42:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004f46:	d1c4      	bne.n	8004ed2 <__swsetup_r+0x26>
 8004f48:	bd38      	pop	{r3, r4, r5, pc}
 8004f4a:	0781      	lsls	r1, r0, #30
 8004f4c:	bf58      	it	pl
 8004f4e:	6963      	ldrpl	r3, [r4, #20]
 8004f50:	60a3      	str	r3, [r4, #8]
 8004f52:	e7f4      	b.n	8004f3e <__swsetup_r+0x92>
 8004f54:	2000      	movs	r0, #0
 8004f56:	e7f7      	b.n	8004f48 <__swsetup_r+0x9c>
 8004f58:	20000088 	.word	0x20000088

08004f5c <memset>:
 8004f5c:	4402      	add	r2, r0
 8004f5e:	4603      	mov	r3, r0
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d100      	bne.n	8004f66 <memset+0xa>
 8004f64:	4770      	bx	lr
 8004f66:	f803 1b01 	strb.w	r1, [r3], #1
 8004f6a:	e7f9      	b.n	8004f60 <memset+0x4>

08004f6c <_close_r>:
 8004f6c:	b538      	push	{r3, r4, r5, lr}
 8004f6e:	4d06      	ldr	r5, [pc, #24]	; (8004f88 <_close_r+0x1c>)
 8004f70:	2300      	movs	r3, #0
 8004f72:	4604      	mov	r4, r0
 8004f74:	4608      	mov	r0, r1
 8004f76:	602b      	str	r3, [r5, #0]
 8004f78:	f7fc f813 	bl	8000fa2 <_close>
 8004f7c:	1c43      	adds	r3, r0, #1
 8004f7e:	d102      	bne.n	8004f86 <_close_r+0x1a>
 8004f80:	682b      	ldr	r3, [r5, #0]
 8004f82:	b103      	cbz	r3, 8004f86 <_close_r+0x1a>
 8004f84:	6023      	str	r3, [r4, #0]
 8004f86:	bd38      	pop	{r3, r4, r5, pc}
 8004f88:	20000340 	.word	0x20000340

08004f8c <_lseek_r>:
 8004f8c:	b538      	push	{r3, r4, r5, lr}
 8004f8e:	4d07      	ldr	r5, [pc, #28]	; (8004fac <_lseek_r+0x20>)
 8004f90:	4604      	mov	r4, r0
 8004f92:	4608      	mov	r0, r1
 8004f94:	4611      	mov	r1, r2
 8004f96:	2200      	movs	r2, #0
 8004f98:	602a      	str	r2, [r5, #0]
 8004f9a:	461a      	mov	r2, r3
 8004f9c:	f7fc f828 	bl	8000ff0 <_lseek>
 8004fa0:	1c43      	adds	r3, r0, #1
 8004fa2:	d102      	bne.n	8004faa <_lseek_r+0x1e>
 8004fa4:	682b      	ldr	r3, [r5, #0]
 8004fa6:	b103      	cbz	r3, 8004faa <_lseek_r+0x1e>
 8004fa8:	6023      	str	r3, [r4, #0]
 8004faa:	bd38      	pop	{r3, r4, r5, pc}
 8004fac:	20000340 	.word	0x20000340

08004fb0 <_read_r>:
 8004fb0:	b538      	push	{r3, r4, r5, lr}
 8004fb2:	4d07      	ldr	r5, [pc, #28]	; (8004fd0 <_read_r+0x20>)
 8004fb4:	4604      	mov	r4, r0
 8004fb6:	4608      	mov	r0, r1
 8004fb8:	4611      	mov	r1, r2
 8004fba:	2200      	movs	r2, #0
 8004fbc:	602a      	str	r2, [r5, #0]
 8004fbe:	461a      	mov	r2, r3
 8004fc0:	f7fb ffd2 	bl	8000f68 <_read>
 8004fc4:	1c43      	adds	r3, r0, #1
 8004fc6:	d102      	bne.n	8004fce <_read_r+0x1e>
 8004fc8:	682b      	ldr	r3, [r5, #0]
 8004fca:	b103      	cbz	r3, 8004fce <_read_r+0x1e>
 8004fcc:	6023      	str	r3, [r4, #0]
 8004fce:	bd38      	pop	{r3, r4, r5, pc}
 8004fd0:	20000340 	.word	0x20000340

08004fd4 <_write_r>:
 8004fd4:	b538      	push	{r3, r4, r5, lr}
 8004fd6:	4d07      	ldr	r5, [pc, #28]	; (8004ff4 <_write_r+0x20>)
 8004fd8:	4604      	mov	r4, r0
 8004fda:	4608      	mov	r0, r1
 8004fdc:	4611      	mov	r1, r2
 8004fde:	2200      	movs	r2, #0
 8004fe0:	602a      	str	r2, [r5, #0]
 8004fe2:	461a      	mov	r2, r3
 8004fe4:	f7fb fafa 	bl	80005dc <_write>
 8004fe8:	1c43      	adds	r3, r0, #1
 8004fea:	d102      	bne.n	8004ff2 <_write_r+0x1e>
 8004fec:	682b      	ldr	r3, [r5, #0]
 8004fee:	b103      	cbz	r3, 8004ff2 <_write_r+0x1e>
 8004ff0:	6023      	str	r3, [r4, #0]
 8004ff2:	bd38      	pop	{r3, r4, r5, pc}
 8004ff4:	20000340 	.word	0x20000340

08004ff8 <__errno>:
 8004ff8:	4b01      	ldr	r3, [pc, #4]	; (8005000 <__errno+0x8>)
 8004ffa:	6818      	ldr	r0, [r3, #0]
 8004ffc:	4770      	bx	lr
 8004ffe:	bf00      	nop
 8005000:	20000088 	.word	0x20000088

08005004 <__libc_init_array>:
 8005004:	b570      	push	{r4, r5, r6, lr}
 8005006:	4d0d      	ldr	r5, [pc, #52]	; (800503c <__libc_init_array+0x38>)
 8005008:	4c0d      	ldr	r4, [pc, #52]	; (8005040 <__libc_init_array+0x3c>)
 800500a:	1b64      	subs	r4, r4, r5
 800500c:	10a4      	asrs	r4, r4, #2
 800500e:	2600      	movs	r6, #0
 8005010:	42a6      	cmp	r6, r4
 8005012:	d109      	bne.n	8005028 <__libc_init_array+0x24>
 8005014:	4d0b      	ldr	r5, [pc, #44]	; (8005044 <__libc_init_array+0x40>)
 8005016:	4c0c      	ldr	r4, [pc, #48]	; (8005048 <__libc_init_array+0x44>)
 8005018:	f000 fd2a 	bl	8005a70 <_init>
 800501c:	1b64      	subs	r4, r4, r5
 800501e:	10a4      	asrs	r4, r4, #2
 8005020:	2600      	movs	r6, #0
 8005022:	42a6      	cmp	r6, r4
 8005024:	d105      	bne.n	8005032 <__libc_init_array+0x2e>
 8005026:	bd70      	pop	{r4, r5, r6, pc}
 8005028:	f855 3b04 	ldr.w	r3, [r5], #4
 800502c:	4798      	blx	r3
 800502e:	3601      	adds	r6, #1
 8005030:	e7ee      	b.n	8005010 <__libc_init_array+0xc>
 8005032:	f855 3b04 	ldr.w	r3, [r5], #4
 8005036:	4798      	blx	r3
 8005038:	3601      	adds	r6, #1
 800503a:	e7f2      	b.n	8005022 <__libc_init_array+0x1e>
 800503c:	08005b74 	.word	0x08005b74
 8005040:	08005b74 	.word	0x08005b74
 8005044:	08005b74 	.word	0x08005b74
 8005048:	08005b78 	.word	0x08005b78

0800504c <__retarget_lock_init_recursive>:
 800504c:	4770      	bx	lr

0800504e <__retarget_lock_acquire_recursive>:
 800504e:	4770      	bx	lr

08005050 <__retarget_lock_release_recursive>:
 8005050:	4770      	bx	lr
	...

08005054 <_free_r>:
 8005054:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005056:	2900      	cmp	r1, #0
 8005058:	d044      	beq.n	80050e4 <_free_r+0x90>
 800505a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800505e:	9001      	str	r0, [sp, #4]
 8005060:	2b00      	cmp	r3, #0
 8005062:	f1a1 0404 	sub.w	r4, r1, #4
 8005066:	bfb8      	it	lt
 8005068:	18e4      	addlt	r4, r4, r3
 800506a:	f000 f8df 	bl	800522c <__malloc_lock>
 800506e:	4a1e      	ldr	r2, [pc, #120]	; (80050e8 <_free_r+0x94>)
 8005070:	9801      	ldr	r0, [sp, #4]
 8005072:	6813      	ldr	r3, [r2, #0]
 8005074:	b933      	cbnz	r3, 8005084 <_free_r+0x30>
 8005076:	6063      	str	r3, [r4, #4]
 8005078:	6014      	str	r4, [r2, #0]
 800507a:	b003      	add	sp, #12
 800507c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005080:	f000 b8da 	b.w	8005238 <__malloc_unlock>
 8005084:	42a3      	cmp	r3, r4
 8005086:	d908      	bls.n	800509a <_free_r+0x46>
 8005088:	6825      	ldr	r5, [r4, #0]
 800508a:	1961      	adds	r1, r4, r5
 800508c:	428b      	cmp	r3, r1
 800508e:	bf01      	itttt	eq
 8005090:	6819      	ldreq	r1, [r3, #0]
 8005092:	685b      	ldreq	r3, [r3, #4]
 8005094:	1949      	addeq	r1, r1, r5
 8005096:	6021      	streq	r1, [r4, #0]
 8005098:	e7ed      	b.n	8005076 <_free_r+0x22>
 800509a:	461a      	mov	r2, r3
 800509c:	685b      	ldr	r3, [r3, #4]
 800509e:	b10b      	cbz	r3, 80050a4 <_free_r+0x50>
 80050a0:	42a3      	cmp	r3, r4
 80050a2:	d9fa      	bls.n	800509a <_free_r+0x46>
 80050a4:	6811      	ldr	r1, [r2, #0]
 80050a6:	1855      	adds	r5, r2, r1
 80050a8:	42a5      	cmp	r5, r4
 80050aa:	d10b      	bne.n	80050c4 <_free_r+0x70>
 80050ac:	6824      	ldr	r4, [r4, #0]
 80050ae:	4421      	add	r1, r4
 80050b0:	1854      	adds	r4, r2, r1
 80050b2:	42a3      	cmp	r3, r4
 80050b4:	6011      	str	r1, [r2, #0]
 80050b6:	d1e0      	bne.n	800507a <_free_r+0x26>
 80050b8:	681c      	ldr	r4, [r3, #0]
 80050ba:	685b      	ldr	r3, [r3, #4]
 80050bc:	6053      	str	r3, [r2, #4]
 80050be:	440c      	add	r4, r1
 80050c0:	6014      	str	r4, [r2, #0]
 80050c2:	e7da      	b.n	800507a <_free_r+0x26>
 80050c4:	d902      	bls.n	80050cc <_free_r+0x78>
 80050c6:	230c      	movs	r3, #12
 80050c8:	6003      	str	r3, [r0, #0]
 80050ca:	e7d6      	b.n	800507a <_free_r+0x26>
 80050cc:	6825      	ldr	r5, [r4, #0]
 80050ce:	1961      	adds	r1, r4, r5
 80050d0:	428b      	cmp	r3, r1
 80050d2:	bf04      	itt	eq
 80050d4:	6819      	ldreq	r1, [r3, #0]
 80050d6:	685b      	ldreq	r3, [r3, #4]
 80050d8:	6063      	str	r3, [r4, #4]
 80050da:	bf04      	itt	eq
 80050dc:	1949      	addeq	r1, r1, r5
 80050de:	6021      	streq	r1, [r4, #0]
 80050e0:	6054      	str	r4, [r2, #4]
 80050e2:	e7ca      	b.n	800507a <_free_r+0x26>
 80050e4:	b003      	add	sp, #12
 80050e6:	bd30      	pop	{r4, r5, pc}
 80050e8:	20000348 	.word	0x20000348

080050ec <sbrk_aligned>:
 80050ec:	b570      	push	{r4, r5, r6, lr}
 80050ee:	4e0e      	ldr	r6, [pc, #56]	; (8005128 <sbrk_aligned+0x3c>)
 80050f0:	460c      	mov	r4, r1
 80050f2:	6831      	ldr	r1, [r6, #0]
 80050f4:	4605      	mov	r5, r0
 80050f6:	b911      	cbnz	r1, 80050fe <sbrk_aligned+0x12>
 80050f8:	f000 fcaa 	bl	8005a50 <_sbrk_r>
 80050fc:	6030      	str	r0, [r6, #0]
 80050fe:	4621      	mov	r1, r4
 8005100:	4628      	mov	r0, r5
 8005102:	f000 fca5 	bl	8005a50 <_sbrk_r>
 8005106:	1c43      	adds	r3, r0, #1
 8005108:	d00a      	beq.n	8005120 <sbrk_aligned+0x34>
 800510a:	1cc4      	adds	r4, r0, #3
 800510c:	f024 0403 	bic.w	r4, r4, #3
 8005110:	42a0      	cmp	r0, r4
 8005112:	d007      	beq.n	8005124 <sbrk_aligned+0x38>
 8005114:	1a21      	subs	r1, r4, r0
 8005116:	4628      	mov	r0, r5
 8005118:	f000 fc9a 	bl	8005a50 <_sbrk_r>
 800511c:	3001      	adds	r0, #1
 800511e:	d101      	bne.n	8005124 <sbrk_aligned+0x38>
 8005120:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8005124:	4620      	mov	r0, r4
 8005126:	bd70      	pop	{r4, r5, r6, pc}
 8005128:	2000034c 	.word	0x2000034c

0800512c <_malloc_r>:
 800512c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005130:	1ccd      	adds	r5, r1, #3
 8005132:	f025 0503 	bic.w	r5, r5, #3
 8005136:	3508      	adds	r5, #8
 8005138:	2d0c      	cmp	r5, #12
 800513a:	bf38      	it	cc
 800513c:	250c      	movcc	r5, #12
 800513e:	2d00      	cmp	r5, #0
 8005140:	4607      	mov	r7, r0
 8005142:	db01      	blt.n	8005148 <_malloc_r+0x1c>
 8005144:	42a9      	cmp	r1, r5
 8005146:	d905      	bls.n	8005154 <_malloc_r+0x28>
 8005148:	230c      	movs	r3, #12
 800514a:	603b      	str	r3, [r7, #0]
 800514c:	2600      	movs	r6, #0
 800514e:	4630      	mov	r0, r6
 8005150:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005154:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005228 <_malloc_r+0xfc>
 8005158:	f000 f868 	bl	800522c <__malloc_lock>
 800515c:	f8d8 3000 	ldr.w	r3, [r8]
 8005160:	461c      	mov	r4, r3
 8005162:	bb5c      	cbnz	r4, 80051bc <_malloc_r+0x90>
 8005164:	4629      	mov	r1, r5
 8005166:	4638      	mov	r0, r7
 8005168:	f7ff ffc0 	bl	80050ec <sbrk_aligned>
 800516c:	1c43      	adds	r3, r0, #1
 800516e:	4604      	mov	r4, r0
 8005170:	d155      	bne.n	800521e <_malloc_r+0xf2>
 8005172:	f8d8 4000 	ldr.w	r4, [r8]
 8005176:	4626      	mov	r6, r4
 8005178:	2e00      	cmp	r6, #0
 800517a:	d145      	bne.n	8005208 <_malloc_r+0xdc>
 800517c:	2c00      	cmp	r4, #0
 800517e:	d048      	beq.n	8005212 <_malloc_r+0xe6>
 8005180:	6823      	ldr	r3, [r4, #0]
 8005182:	4631      	mov	r1, r6
 8005184:	4638      	mov	r0, r7
 8005186:	eb04 0903 	add.w	r9, r4, r3
 800518a:	f000 fc61 	bl	8005a50 <_sbrk_r>
 800518e:	4581      	cmp	r9, r0
 8005190:	d13f      	bne.n	8005212 <_malloc_r+0xe6>
 8005192:	6821      	ldr	r1, [r4, #0]
 8005194:	1a6d      	subs	r5, r5, r1
 8005196:	4629      	mov	r1, r5
 8005198:	4638      	mov	r0, r7
 800519a:	f7ff ffa7 	bl	80050ec <sbrk_aligned>
 800519e:	3001      	adds	r0, #1
 80051a0:	d037      	beq.n	8005212 <_malloc_r+0xe6>
 80051a2:	6823      	ldr	r3, [r4, #0]
 80051a4:	442b      	add	r3, r5
 80051a6:	6023      	str	r3, [r4, #0]
 80051a8:	f8d8 3000 	ldr.w	r3, [r8]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d038      	beq.n	8005222 <_malloc_r+0xf6>
 80051b0:	685a      	ldr	r2, [r3, #4]
 80051b2:	42a2      	cmp	r2, r4
 80051b4:	d12b      	bne.n	800520e <_malloc_r+0xe2>
 80051b6:	2200      	movs	r2, #0
 80051b8:	605a      	str	r2, [r3, #4]
 80051ba:	e00f      	b.n	80051dc <_malloc_r+0xb0>
 80051bc:	6822      	ldr	r2, [r4, #0]
 80051be:	1b52      	subs	r2, r2, r5
 80051c0:	d41f      	bmi.n	8005202 <_malloc_r+0xd6>
 80051c2:	2a0b      	cmp	r2, #11
 80051c4:	d917      	bls.n	80051f6 <_malloc_r+0xca>
 80051c6:	1961      	adds	r1, r4, r5
 80051c8:	42a3      	cmp	r3, r4
 80051ca:	6025      	str	r5, [r4, #0]
 80051cc:	bf18      	it	ne
 80051ce:	6059      	strne	r1, [r3, #4]
 80051d0:	6863      	ldr	r3, [r4, #4]
 80051d2:	bf08      	it	eq
 80051d4:	f8c8 1000 	streq.w	r1, [r8]
 80051d8:	5162      	str	r2, [r4, r5]
 80051da:	604b      	str	r3, [r1, #4]
 80051dc:	4638      	mov	r0, r7
 80051de:	f104 060b 	add.w	r6, r4, #11
 80051e2:	f000 f829 	bl	8005238 <__malloc_unlock>
 80051e6:	f026 0607 	bic.w	r6, r6, #7
 80051ea:	1d23      	adds	r3, r4, #4
 80051ec:	1af2      	subs	r2, r6, r3
 80051ee:	d0ae      	beq.n	800514e <_malloc_r+0x22>
 80051f0:	1b9b      	subs	r3, r3, r6
 80051f2:	50a3      	str	r3, [r4, r2]
 80051f4:	e7ab      	b.n	800514e <_malloc_r+0x22>
 80051f6:	42a3      	cmp	r3, r4
 80051f8:	6862      	ldr	r2, [r4, #4]
 80051fa:	d1dd      	bne.n	80051b8 <_malloc_r+0x8c>
 80051fc:	f8c8 2000 	str.w	r2, [r8]
 8005200:	e7ec      	b.n	80051dc <_malloc_r+0xb0>
 8005202:	4623      	mov	r3, r4
 8005204:	6864      	ldr	r4, [r4, #4]
 8005206:	e7ac      	b.n	8005162 <_malloc_r+0x36>
 8005208:	4634      	mov	r4, r6
 800520a:	6876      	ldr	r6, [r6, #4]
 800520c:	e7b4      	b.n	8005178 <_malloc_r+0x4c>
 800520e:	4613      	mov	r3, r2
 8005210:	e7cc      	b.n	80051ac <_malloc_r+0x80>
 8005212:	230c      	movs	r3, #12
 8005214:	603b      	str	r3, [r7, #0]
 8005216:	4638      	mov	r0, r7
 8005218:	f000 f80e 	bl	8005238 <__malloc_unlock>
 800521c:	e797      	b.n	800514e <_malloc_r+0x22>
 800521e:	6025      	str	r5, [r4, #0]
 8005220:	e7dc      	b.n	80051dc <_malloc_r+0xb0>
 8005222:	605b      	str	r3, [r3, #4]
 8005224:	deff      	udf	#255	; 0xff
 8005226:	bf00      	nop
 8005228:	20000348 	.word	0x20000348

0800522c <__malloc_lock>:
 800522c:	4801      	ldr	r0, [pc, #4]	; (8005234 <__malloc_lock+0x8>)
 800522e:	f7ff bf0e 	b.w	800504e <__retarget_lock_acquire_recursive>
 8005232:	bf00      	nop
 8005234:	20000344 	.word	0x20000344

08005238 <__malloc_unlock>:
 8005238:	4801      	ldr	r0, [pc, #4]	; (8005240 <__malloc_unlock+0x8>)
 800523a:	f7ff bf09 	b.w	8005050 <__retarget_lock_release_recursive>
 800523e:	bf00      	nop
 8005240:	20000344 	.word	0x20000344

08005244 <__sfputc_r>:
 8005244:	6893      	ldr	r3, [r2, #8]
 8005246:	3b01      	subs	r3, #1
 8005248:	2b00      	cmp	r3, #0
 800524a:	b410      	push	{r4}
 800524c:	6093      	str	r3, [r2, #8]
 800524e:	da08      	bge.n	8005262 <__sfputc_r+0x1e>
 8005250:	6994      	ldr	r4, [r2, #24]
 8005252:	42a3      	cmp	r3, r4
 8005254:	db01      	blt.n	800525a <__sfputc_r+0x16>
 8005256:	290a      	cmp	r1, #10
 8005258:	d103      	bne.n	8005262 <__sfputc_r+0x1e>
 800525a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800525e:	f7ff bde8 	b.w	8004e32 <__swbuf_r>
 8005262:	6813      	ldr	r3, [r2, #0]
 8005264:	1c58      	adds	r0, r3, #1
 8005266:	6010      	str	r0, [r2, #0]
 8005268:	7019      	strb	r1, [r3, #0]
 800526a:	4608      	mov	r0, r1
 800526c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005270:	4770      	bx	lr

08005272 <__sfputs_r>:
 8005272:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005274:	4606      	mov	r6, r0
 8005276:	460f      	mov	r7, r1
 8005278:	4614      	mov	r4, r2
 800527a:	18d5      	adds	r5, r2, r3
 800527c:	42ac      	cmp	r4, r5
 800527e:	d101      	bne.n	8005284 <__sfputs_r+0x12>
 8005280:	2000      	movs	r0, #0
 8005282:	e007      	b.n	8005294 <__sfputs_r+0x22>
 8005284:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005288:	463a      	mov	r2, r7
 800528a:	4630      	mov	r0, r6
 800528c:	f7ff ffda 	bl	8005244 <__sfputc_r>
 8005290:	1c43      	adds	r3, r0, #1
 8005292:	d1f3      	bne.n	800527c <__sfputs_r+0xa>
 8005294:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005298 <_vfiprintf_r>:
 8005298:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800529c:	460d      	mov	r5, r1
 800529e:	b09d      	sub	sp, #116	; 0x74
 80052a0:	4614      	mov	r4, r2
 80052a2:	4698      	mov	r8, r3
 80052a4:	4606      	mov	r6, r0
 80052a6:	b118      	cbz	r0, 80052b0 <_vfiprintf_r+0x18>
 80052a8:	6a03      	ldr	r3, [r0, #32]
 80052aa:	b90b      	cbnz	r3, 80052b0 <_vfiprintf_r+0x18>
 80052ac:	f7ff fcda 	bl	8004c64 <__sinit>
 80052b0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80052b2:	07d9      	lsls	r1, r3, #31
 80052b4:	d405      	bmi.n	80052c2 <_vfiprintf_r+0x2a>
 80052b6:	89ab      	ldrh	r3, [r5, #12]
 80052b8:	059a      	lsls	r2, r3, #22
 80052ba:	d402      	bmi.n	80052c2 <_vfiprintf_r+0x2a>
 80052bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80052be:	f7ff fec6 	bl	800504e <__retarget_lock_acquire_recursive>
 80052c2:	89ab      	ldrh	r3, [r5, #12]
 80052c4:	071b      	lsls	r3, r3, #28
 80052c6:	d501      	bpl.n	80052cc <_vfiprintf_r+0x34>
 80052c8:	692b      	ldr	r3, [r5, #16]
 80052ca:	b99b      	cbnz	r3, 80052f4 <_vfiprintf_r+0x5c>
 80052cc:	4629      	mov	r1, r5
 80052ce:	4630      	mov	r0, r6
 80052d0:	f7ff fdec 	bl	8004eac <__swsetup_r>
 80052d4:	b170      	cbz	r0, 80052f4 <_vfiprintf_r+0x5c>
 80052d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80052d8:	07dc      	lsls	r4, r3, #31
 80052da:	d504      	bpl.n	80052e6 <_vfiprintf_r+0x4e>
 80052dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80052e0:	b01d      	add	sp, #116	; 0x74
 80052e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052e6:	89ab      	ldrh	r3, [r5, #12]
 80052e8:	0598      	lsls	r0, r3, #22
 80052ea:	d4f7      	bmi.n	80052dc <_vfiprintf_r+0x44>
 80052ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80052ee:	f7ff feaf 	bl	8005050 <__retarget_lock_release_recursive>
 80052f2:	e7f3      	b.n	80052dc <_vfiprintf_r+0x44>
 80052f4:	2300      	movs	r3, #0
 80052f6:	9309      	str	r3, [sp, #36]	; 0x24
 80052f8:	2320      	movs	r3, #32
 80052fa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80052fe:	f8cd 800c 	str.w	r8, [sp, #12]
 8005302:	2330      	movs	r3, #48	; 0x30
 8005304:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80054b8 <_vfiprintf_r+0x220>
 8005308:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800530c:	f04f 0901 	mov.w	r9, #1
 8005310:	4623      	mov	r3, r4
 8005312:	469a      	mov	sl, r3
 8005314:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005318:	b10a      	cbz	r2, 800531e <_vfiprintf_r+0x86>
 800531a:	2a25      	cmp	r2, #37	; 0x25
 800531c:	d1f9      	bne.n	8005312 <_vfiprintf_r+0x7a>
 800531e:	ebba 0b04 	subs.w	fp, sl, r4
 8005322:	d00b      	beq.n	800533c <_vfiprintf_r+0xa4>
 8005324:	465b      	mov	r3, fp
 8005326:	4622      	mov	r2, r4
 8005328:	4629      	mov	r1, r5
 800532a:	4630      	mov	r0, r6
 800532c:	f7ff ffa1 	bl	8005272 <__sfputs_r>
 8005330:	3001      	adds	r0, #1
 8005332:	f000 80a9 	beq.w	8005488 <_vfiprintf_r+0x1f0>
 8005336:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005338:	445a      	add	r2, fp
 800533a:	9209      	str	r2, [sp, #36]	; 0x24
 800533c:	f89a 3000 	ldrb.w	r3, [sl]
 8005340:	2b00      	cmp	r3, #0
 8005342:	f000 80a1 	beq.w	8005488 <_vfiprintf_r+0x1f0>
 8005346:	2300      	movs	r3, #0
 8005348:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800534c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005350:	f10a 0a01 	add.w	sl, sl, #1
 8005354:	9304      	str	r3, [sp, #16]
 8005356:	9307      	str	r3, [sp, #28]
 8005358:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800535c:	931a      	str	r3, [sp, #104]	; 0x68
 800535e:	4654      	mov	r4, sl
 8005360:	2205      	movs	r2, #5
 8005362:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005366:	4854      	ldr	r0, [pc, #336]	; (80054b8 <_vfiprintf_r+0x220>)
 8005368:	f7fa ff6a 	bl	8000240 <memchr>
 800536c:	9a04      	ldr	r2, [sp, #16]
 800536e:	b9d8      	cbnz	r0, 80053a8 <_vfiprintf_r+0x110>
 8005370:	06d1      	lsls	r1, r2, #27
 8005372:	bf44      	itt	mi
 8005374:	2320      	movmi	r3, #32
 8005376:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800537a:	0713      	lsls	r3, r2, #28
 800537c:	bf44      	itt	mi
 800537e:	232b      	movmi	r3, #43	; 0x2b
 8005380:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005384:	f89a 3000 	ldrb.w	r3, [sl]
 8005388:	2b2a      	cmp	r3, #42	; 0x2a
 800538a:	d015      	beq.n	80053b8 <_vfiprintf_r+0x120>
 800538c:	9a07      	ldr	r2, [sp, #28]
 800538e:	4654      	mov	r4, sl
 8005390:	2000      	movs	r0, #0
 8005392:	f04f 0c0a 	mov.w	ip, #10
 8005396:	4621      	mov	r1, r4
 8005398:	f811 3b01 	ldrb.w	r3, [r1], #1
 800539c:	3b30      	subs	r3, #48	; 0x30
 800539e:	2b09      	cmp	r3, #9
 80053a0:	d94d      	bls.n	800543e <_vfiprintf_r+0x1a6>
 80053a2:	b1b0      	cbz	r0, 80053d2 <_vfiprintf_r+0x13a>
 80053a4:	9207      	str	r2, [sp, #28]
 80053a6:	e014      	b.n	80053d2 <_vfiprintf_r+0x13a>
 80053a8:	eba0 0308 	sub.w	r3, r0, r8
 80053ac:	fa09 f303 	lsl.w	r3, r9, r3
 80053b0:	4313      	orrs	r3, r2
 80053b2:	9304      	str	r3, [sp, #16]
 80053b4:	46a2      	mov	sl, r4
 80053b6:	e7d2      	b.n	800535e <_vfiprintf_r+0xc6>
 80053b8:	9b03      	ldr	r3, [sp, #12]
 80053ba:	1d19      	adds	r1, r3, #4
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	9103      	str	r1, [sp, #12]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	bfbb      	ittet	lt
 80053c4:	425b      	neglt	r3, r3
 80053c6:	f042 0202 	orrlt.w	r2, r2, #2
 80053ca:	9307      	strge	r3, [sp, #28]
 80053cc:	9307      	strlt	r3, [sp, #28]
 80053ce:	bfb8      	it	lt
 80053d0:	9204      	strlt	r2, [sp, #16]
 80053d2:	7823      	ldrb	r3, [r4, #0]
 80053d4:	2b2e      	cmp	r3, #46	; 0x2e
 80053d6:	d10c      	bne.n	80053f2 <_vfiprintf_r+0x15a>
 80053d8:	7863      	ldrb	r3, [r4, #1]
 80053da:	2b2a      	cmp	r3, #42	; 0x2a
 80053dc:	d134      	bne.n	8005448 <_vfiprintf_r+0x1b0>
 80053de:	9b03      	ldr	r3, [sp, #12]
 80053e0:	1d1a      	adds	r2, r3, #4
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	9203      	str	r2, [sp, #12]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	bfb8      	it	lt
 80053ea:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80053ee:	3402      	adds	r4, #2
 80053f0:	9305      	str	r3, [sp, #20]
 80053f2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80054c8 <_vfiprintf_r+0x230>
 80053f6:	7821      	ldrb	r1, [r4, #0]
 80053f8:	2203      	movs	r2, #3
 80053fa:	4650      	mov	r0, sl
 80053fc:	f7fa ff20 	bl	8000240 <memchr>
 8005400:	b138      	cbz	r0, 8005412 <_vfiprintf_r+0x17a>
 8005402:	9b04      	ldr	r3, [sp, #16]
 8005404:	eba0 000a 	sub.w	r0, r0, sl
 8005408:	2240      	movs	r2, #64	; 0x40
 800540a:	4082      	lsls	r2, r0
 800540c:	4313      	orrs	r3, r2
 800540e:	3401      	adds	r4, #1
 8005410:	9304      	str	r3, [sp, #16]
 8005412:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005416:	4829      	ldr	r0, [pc, #164]	; (80054bc <_vfiprintf_r+0x224>)
 8005418:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800541c:	2206      	movs	r2, #6
 800541e:	f7fa ff0f 	bl	8000240 <memchr>
 8005422:	2800      	cmp	r0, #0
 8005424:	d03f      	beq.n	80054a6 <_vfiprintf_r+0x20e>
 8005426:	4b26      	ldr	r3, [pc, #152]	; (80054c0 <_vfiprintf_r+0x228>)
 8005428:	bb1b      	cbnz	r3, 8005472 <_vfiprintf_r+0x1da>
 800542a:	9b03      	ldr	r3, [sp, #12]
 800542c:	3307      	adds	r3, #7
 800542e:	f023 0307 	bic.w	r3, r3, #7
 8005432:	3308      	adds	r3, #8
 8005434:	9303      	str	r3, [sp, #12]
 8005436:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005438:	443b      	add	r3, r7
 800543a:	9309      	str	r3, [sp, #36]	; 0x24
 800543c:	e768      	b.n	8005310 <_vfiprintf_r+0x78>
 800543e:	fb0c 3202 	mla	r2, ip, r2, r3
 8005442:	460c      	mov	r4, r1
 8005444:	2001      	movs	r0, #1
 8005446:	e7a6      	b.n	8005396 <_vfiprintf_r+0xfe>
 8005448:	2300      	movs	r3, #0
 800544a:	3401      	adds	r4, #1
 800544c:	9305      	str	r3, [sp, #20]
 800544e:	4619      	mov	r1, r3
 8005450:	f04f 0c0a 	mov.w	ip, #10
 8005454:	4620      	mov	r0, r4
 8005456:	f810 2b01 	ldrb.w	r2, [r0], #1
 800545a:	3a30      	subs	r2, #48	; 0x30
 800545c:	2a09      	cmp	r2, #9
 800545e:	d903      	bls.n	8005468 <_vfiprintf_r+0x1d0>
 8005460:	2b00      	cmp	r3, #0
 8005462:	d0c6      	beq.n	80053f2 <_vfiprintf_r+0x15a>
 8005464:	9105      	str	r1, [sp, #20]
 8005466:	e7c4      	b.n	80053f2 <_vfiprintf_r+0x15a>
 8005468:	fb0c 2101 	mla	r1, ip, r1, r2
 800546c:	4604      	mov	r4, r0
 800546e:	2301      	movs	r3, #1
 8005470:	e7f0      	b.n	8005454 <_vfiprintf_r+0x1bc>
 8005472:	ab03      	add	r3, sp, #12
 8005474:	9300      	str	r3, [sp, #0]
 8005476:	462a      	mov	r2, r5
 8005478:	4b12      	ldr	r3, [pc, #72]	; (80054c4 <_vfiprintf_r+0x22c>)
 800547a:	a904      	add	r1, sp, #16
 800547c:	4630      	mov	r0, r6
 800547e:	f3af 8000 	nop.w
 8005482:	4607      	mov	r7, r0
 8005484:	1c78      	adds	r0, r7, #1
 8005486:	d1d6      	bne.n	8005436 <_vfiprintf_r+0x19e>
 8005488:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800548a:	07d9      	lsls	r1, r3, #31
 800548c:	d405      	bmi.n	800549a <_vfiprintf_r+0x202>
 800548e:	89ab      	ldrh	r3, [r5, #12]
 8005490:	059a      	lsls	r2, r3, #22
 8005492:	d402      	bmi.n	800549a <_vfiprintf_r+0x202>
 8005494:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005496:	f7ff fddb 	bl	8005050 <__retarget_lock_release_recursive>
 800549a:	89ab      	ldrh	r3, [r5, #12]
 800549c:	065b      	lsls	r3, r3, #25
 800549e:	f53f af1d 	bmi.w	80052dc <_vfiprintf_r+0x44>
 80054a2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80054a4:	e71c      	b.n	80052e0 <_vfiprintf_r+0x48>
 80054a6:	ab03      	add	r3, sp, #12
 80054a8:	9300      	str	r3, [sp, #0]
 80054aa:	462a      	mov	r2, r5
 80054ac:	4b05      	ldr	r3, [pc, #20]	; (80054c4 <_vfiprintf_r+0x22c>)
 80054ae:	a904      	add	r1, sp, #16
 80054b0:	4630      	mov	r0, r6
 80054b2:	f000 f879 	bl	80055a8 <_printf_i>
 80054b6:	e7e4      	b.n	8005482 <_vfiprintf_r+0x1ea>
 80054b8:	08005b38 	.word	0x08005b38
 80054bc:	08005b42 	.word	0x08005b42
 80054c0:	00000000 	.word	0x00000000
 80054c4:	08005273 	.word	0x08005273
 80054c8:	08005b3e 	.word	0x08005b3e

080054cc <_printf_common>:
 80054cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80054d0:	4616      	mov	r6, r2
 80054d2:	4699      	mov	r9, r3
 80054d4:	688a      	ldr	r2, [r1, #8]
 80054d6:	690b      	ldr	r3, [r1, #16]
 80054d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80054dc:	4293      	cmp	r3, r2
 80054de:	bfb8      	it	lt
 80054e0:	4613      	movlt	r3, r2
 80054e2:	6033      	str	r3, [r6, #0]
 80054e4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80054e8:	4607      	mov	r7, r0
 80054ea:	460c      	mov	r4, r1
 80054ec:	b10a      	cbz	r2, 80054f2 <_printf_common+0x26>
 80054ee:	3301      	adds	r3, #1
 80054f0:	6033      	str	r3, [r6, #0]
 80054f2:	6823      	ldr	r3, [r4, #0]
 80054f4:	0699      	lsls	r1, r3, #26
 80054f6:	bf42      	ittt	mi
 80054f8:	6833      	ldrmi	r3, [r6, #0]
 80054fa:	3302      	addmi	r3, #2
 80054fc:	6033      	strmi	r3, [r6, #0]
 80054fe:	6825      	ldr	r5, [r4, #0]
 8005500:	f015 0506 	ands.w	r5, r5, #6
 8005504:	d106      	bne.n	8005514 <_printf_common+0x48>
 8005506:	f104 0a19 	add.w	sl, r4, #25
 800550a:	68e3      	ldr	r3, [r4, #12]
 800550c:	6832      	ldr	r2, [r6, #0]
 800550e:	1a9b      	subs	r3, r3, r2
 8005510:	42ab      	cmp	r3, r5
 8005512:	dc26      	bgt.n	8005562 <_printf_common+0x96>
 8005514:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005518:	1e13      	subs	r3, r2, #0
 800551a:	6822      	ldr	r2, [r4, #0]
 800551c:	bf18      	it	ne
 800551e:	2301      	movne	r3, #1
 8005520:	0692      	lsls	r2, r2, #26
 8005522:	d42b      	bmi.n	800557c <_printf_common+0xb0>
 8005524:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005528:	4649      	mov	r1, r9
 800552a:	4638      	mov	r0, r7
 800552c:	47c0      	blx	r8
 800552e:	3001      	adds	r0, #1
 8005530:	d01e      	beq.n	8005570 <_printf_common+0xa4>
 8005532:	6823      	ldr	r3, [r4, #0]
 8005534:	6922      	ldr	r2, [r4, #16]
 8005536:	f003 0306 	and.w	r3, r3, #6
 800553a:	2b04      	cmp	r3, #4
 800553c:	bf02      	ittt	eq
 800553e:	68e5      	ldreq	r5, [r4, #12]
 8005540:	6833      	ldreq	r3, [r6, #0]
 8005542:	1aed      	subeq	r5, r5, r3
 8005544:	68a3      	ldr	r3, [r4, #8]
 8005546:	bf0c      	ite	eq
 8005548:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800554c:	2500      	movne	r5, #0
 800554e:	4293      	cmp	r3, r2
 8005550:	bfc4      	itt	gt
 8005552:	1a9b      	subgt	r3, r3, r2
 8005554:	18ed      	addgt	r5, r5, r3
 8005556:	2600      	movs	r6, #0
 8005558:	341a      	adds	r4, #26
 800555a:	42b5      	cmp	r5, r6
 800555c:	d11a      	bne.n	8005594 <_printf_common+0xc8>
 800555e:	2000      	movs	r0, #0
 8005560:	e008      	b.n	8005574 <_printf_common+0xa8>
 8005562:	2301      	movs	r3, #1
 8005564:	4652      	mov	r2, sl
 8005566:	4649      	mov	r1, r9
 8005568:	4638      	mov	r0, r7
 800556a:	47c0      	blx	r8
 800556c:	3001      	adds	r0, #1
 800556e:	d103      	bne.n	8005578 <_printf_common+0xac>
 8005570:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005574:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005578:	3501      	adds	r5, #1
 800557a:	e7c6      	b.n	800550a <_printf_common+0x3e>
 800557c:	18e1      	adds	r1, r4, r3
 800557e:	1c5a      	adds	r2, r3, #1
 8005580:	2030      	movs	r0, #48	; 0x30
 8005582:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005586:	4422      	add	r2, r4
 8005588:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800558c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005590:	3302      	adds	r3, #2
 8005592:	e7c7      	b.n	8005524 <_printf_common+0x58>
 8005594:	2301      	movs	r3, #1
 8005596:	4622      	mov	r2, r4
 8005598:	4649      	mov	r1, r9
 800559a:	4638      	mov	r0, r7
 800559c:	47c0      	blx	r8
 800559e:	3001      	adds	r0, #1
 80055a0:	d0e6      	beq.n	8005570 <_printf_common+0xa4>
 80055a2:	3601      	adds	r6, #1
 80055a4:	e7d9      	b.n	800555a <_printf_common+0x8e>
	...

080055a8 <_printf_i>:
 80055a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80055ac:	7e0f      	ldrb	r7, [r1, #24]
 80055ae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80055b0:	2f78      	cmp	r7, #120	; 0x78
 80055b2:	4691      	mov	r9, r2
 80055b4:	4680      	mov	r8, r0
 80055b6:	460c      	mov	r4, r1
 80055b8:	469a      	mov	sl, r3
 80055ba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80055be:	d807      	bhi.n	80055d0 <_printf_i+0x28>
 80055c0:	2f62      	cmp	r7, #98	; 0x62
 80055c2:	d80a      	bhi.n	80055da <_printf_i+0x32>
 80055c4:	2f00      	cmp	r7, #0
 80055c6:	f000 80d4 	beq.w	8005772 <_printf_i+0x1ca>
 80055ca:	2f58      	cmp	r7, #88	; 0x58
 80055cc:	f000 80c0 	beq.w	8005750 <_printf_i+0x1a8>
 80055d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80055d4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80055d8:	e03a      	b.n	8005650 <_printf_i+0xa8>
 80055da:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80055de:	2b15      	cmp	r3, #21
 80055e0:	d8f6      	bhi.n	80055d0 <_printf_i+0x28>
 80055e2:	a101      	add	r1, pc, #4	; (adr r1, 80055e8 <_printf_i+0x40>)
 80055e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80055e8:	08005641 	.word	0x08005641
 80055ec:	08005655 	.word	0x08005655
 80055f0:	080055d1 	.word	0x080055d1
 80055f4:	080055d1 	.word	0x080055d1
 80055f8:	080055d1 	.word	0x080055d1
 80055fc:	080055d1 	.word	0x080055d1
 8005600:	08005655 	.word	0x08005655
 8005604:	080055d1 	.word	0x080055d1
 8005608:	080055d1 	.word	0x080055d1
 800560c:	080055d1 	.word	0x080055d1
 8005610:	080055d1 	.word	0x080055d1
 8005614:	08005759 	.word	0x08005759
 8005618:	08005681 	.word	0x08005681
 800561c:	08005713 	.word	0x08005713
 8005620:	080055d1 	.word	0x080055d1
 8005624:	080055d1 	.word	0x080055d1
 8005628:	0800577b 	.word	0x0800577b
 800562c:	080055d1 	.word	0x080055d1
 8005630:	08005681 	.word	0x08005681
 8005634:	080055d1 	.word	0x080055d1
 8005638:	080055d1 	.word	0x080055d1
 800563c:	0800571b 	.word	0x0800571b
 8005640:	682b      	ldr	r3, [r5, #0]
 8005642:	1d1a      	adds	r2, r3, #4
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	602a      	str	r2, [r5, #0]
 8005648:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800564c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005650:	2301      	movs	r3, #1
 8005652:	e09f      	b.n	8005794 <_printf_i+0x1ec>
 8005654:	6820      	ldr	r0, [r4, #0]
 8005656:	682b      	ldr	r3, [r5, #0]
 8005658:	0607      	lsls	r7, r0, #24
 800565a:	f103 0104 	add.w	r1, r3, #4
 800565e:	6029      	str	r1, [r5, #0]
 8005660:	d501      	bpl.n	8005666 <_printf_i+0xbe>
 8005662:	681e      	ldr	r6, [r3, #0]
 8005664:	e003      	b.n	800566e <_printf_i+0xc6>
 8005666:	0646      	lsls	r6, r0, #25
 8005668:	d5fb      	bpl.n	8005662 <_printf_i+0xba>
 800566a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800566e:	2e00      	cmp	r6, #0
 8005670:	da03      	bge.n	800567a <_printf_i+0xd2>
 8005672:	232d      	movs	r3, #45	; 0x2d
 8005674:	4276      	negs	r6, r6
 8005676:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800567a:	485a      	ldr	r0, [pc, #360]	; (80057e4 <_printf_i+0x23c>)
 800567c:	230a      	movs	r3, #10
 800567e:	e012      	b.n	80056a6 <_printf_i+0xfe>
 8005680:	682b      	ldr	r3, [r5, #0]
 8005682:	6820      	ldr	r0, [r4, #0]
 8005684:	1d19      	adds	r1, r3, #4
 8005686:	6029      	str	r1, [r5, #0]
 8005688:	0605      	lsls	r5, r0, #24
 800568a:	d501      	bpl.n	8005690 <_printf_i+0xe8>
 800568c:	681e      	ldr	r6, [r3, #0]
 800568e:	e002      	b.n	8005696 <_printf_i+0xee>
 8005690:	0641      	lsls	r1, r0, #25
 8005692:	d5fb      	bpl.n	800568c <_printf_i+0xe4>
 8005694:	881e      	ldrh	r6, [r3, #0]
 8005696:	4853      	ldr	r0, [pc, #332]	; (80057e4 <_printf_i+0x23c>)
 8005698:	2f6f      	cmp	r7, #111	; 0x6f
 800569a:	bf0c      	ite	eq
 800569c:	2308      	moveq	r3, #8
 800569e:	230a      	movne	r3, #10
 80056a0:	2100      	movs	r1, #0
 80056a2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80056a6:	6865      	ldr	r5, [r4, #4]
 80056a8:	60a5      	str	r5, [r4, #8]
 80056aa:	2d00      	cmp	r5, #0
 80056ac:	bfa2      	ittt	ge
 80056ae:	6821      	ldrge	r1, [r4, #0]
 80056b0:	f021 0104 	bicge.w	r1, r1, #4
 80056b4:	6021      	strge	r1, [r4, #0]
 80056b6:	b90e      	cbnz	r6, 80056bc <_printf_i+0x114>
 80056b8:	2d00      	cmp	r5, #0
 80056ba:	d04b      	beq.n	8005754 <_printf_i+0x1ac>
 80056bc:	4615      	mov	r5, r2
 80056be:	fbb6 f1f3 	udiv	r1, r6, r3
 80056c2:	fb03 6711 	mls	r7, r3, r1, r6
 80056c6:	5dc7      	ldrb	r7, [r0, r7]
 80056c8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80056cc:	4637      	mov	r7, r6
 80056ce:	42bb      	cmp	r3, r7
 80056d0:	460e      	mov	r6, r1
 80056d2:	d9f4      	bls.n	80056be <_printf_i+0x116>
 80056d4:	2b08      	cmp	r3, #8
 80056d6:	d10b      	bne.n	80056f0 <_printf_i+0x148>
 80056d8:	6823      	ldr	r3, [r4, #0]
 80056da:	07de      	lsls	r6, r3, #31
 80056dc:	d508      	bpl.n	80056f0 <_printf_i+0x148>
 80056de:	6923      	ldr	r3, [r4, #16]
 80056e0:	6861      	ldr	r1, [r4, #4]
 80056e2:	4299      	cmp	r1, r3
 80056e4:	bfde      	ittt	le
 80056e6:	2330      	movle	r3, #48	; 0x30
 80056e8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80056ec:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80056f0:	1b52      	subs	r2, r2, r5
 80056f2:	6122      	str	r2, [r4, #16]
 80056f4:	f8cd a000 	str.w	sl, [sp]
 80056f8:	464b      	mov	r3, r9
 80056fa:	aa03      	add	r2, sp, #12
 80056fc:	4621      	mov	r1, r4
 80056fe:	4640      	mov	r0, r8
 8005700:	f7ff fee4 	bl	80054cc <_printf_common>
 8005704:	3001      	adds	r0, #1
 8005706:	d14a      	bne.n	800579e <_printf_i+0x1f6>
 8005708:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800570c:	b004      	add	sp, #16
 800570e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005712:	6823      	ldr	r3, [r4, #0]
 8005714:	f043 0320 	orr.w	r3, r3, #32
 8005718:	6023      	str	r3, [r4, #0]
 800571a:	4833      	ldr	r0, [pc, #204]	; (80057e8 <_printf_i+0x240>)
 800571c:	2778      	movs	r7, #120	; 0x78
 800571e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005722:	6823      	ldr	r3, [r4, #0]
 8005724:	6829      	ldr	r1, [r5, #0]
 8005726:	061f      	lsls	r7, r3, #24
 8005728:	f851 6b04 	ldr.w	r6, [r1], #4
 800572c:	d402      	bmi.n	8005734 <_printf_i+0x18c>
 800572e:	065f      	lsls	r7, r3, #25
 8005730:	bf48      	it	mi
 8005732:	b2b6      	uxthmi	r6, r6
 8005734:	07df      	lsls	r7, r3, #31
 8005736:	bf48      	it	mi
 8005738:	f043 0320 	orrmi.w	r3, r3, #32
 800573c:	6029      	str	r1, [r5, #0]
 800573e:	bf48      	it	mi
 8005740:	6023      	strmi	r3, [r4, #0]
 8005742:	b91e      	cbnz	r6, 800574c <_printf_i+0x1a4>
 8005744:	6823      	ldr	r3, [r4, #0]
 8005746:	f023 0320 	bic.w	r3, r3, #32
 800574a:	6023      	str	r3, [r4, #0]
 800574c:	2310      	movs	r3, #16
 800574e:	e7a7      	b.n	80056a0 <_printf_i+0xf8>
 8005750:	4824      	ldr	r0, [pc, #144]	; (80057e4 <_printf_i+0x23c>)
 8005752:	e7e4      	b.n	800571e <_printf_i+0x176>
 8005754:	4615      	mov	r5, r2
 8005756:	e7bd      	b.n	80056d4 <_printf_i+0x12c>
 8005758:	682b      	ldr	r3, [r5, #0]
 800575a:	6826      	ldr	r6, [r4, #0]
 800575c:	6961      	ldr	r1, [r4, #20]
 800575e:	1d18      	adds	r0, r3, #4
 8005760:	6028      	str	r0, [r5, #0]
 8005762:	0635      	lsls	r5, r6, #24
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	d501      	bpl.n	800576c <_printf_i+0x1c4>
 8005768:	6019      	str	r1, [r3, #0]
 800576a:	e002      	b.n	8005772 <_printf_i+0x1ca>
 800576c:	0670      	lsls	r0, r6, #25
 800576e:	d5fb      	bpl.n	8005768 <_printf_i+0x1c0>
 8005770:	8019      	strh	r1, [r3, #0]
 8005772:	2300      	movs	r3, #0
 8005774:	6123      	str	r3, [r4, #16]
 8005776:	4615      	mov	r5, r2
 8005778:	e7bc      	b.n	80056f4 <_printf_i+0x14c>
 800577a:	682b      	ldr	r3, [r5, #0]
 800577c:	1d1a      	adds	r2, r3, #4
 800577e:	602a      	str	r2, [r5, #0]
 8005780:	681d      	ldr	r5, [r3, #0]
 8005782:	6862      	ldr	r2, [r4, #4]
 8005784:	2100      	movs	r1, #0
 8005786:	4628      	mov	r0, r5
 8005788:	f7fa fd5a 	bl	8000240 <memchr>
 800578c:	b108      	cbz	r0, 8005792 <_printf_i+0x1ea>
 800578e:	1b40      	subs	r0, r0, r5
 8005790:	6060      	str	r0, [r4, #4]
 8005792:	6863      	ldr	r3, [r4, #4]
 8005794:	6123      	str	r3, [r4, #16]
 8005796:	2300      	movs	r3, #0
 8005798:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800579c:	e7aa      	b.n	80056f4 <_printf_i+0x14c>
 800579e:	6923      	ldr	r3, [r4, #16]
 80057a0:	462a      	mov	r2, r5
 80057a2:	4649      	mov	r1, r9
 80057a4:	4640      	mov	r0, r8
 80057a6:	47d0      	blx	sl
 80057a8:	3001      	adds	r0, #1
 80057aa:	d0ad      	beq.n	8005708 <_printf_i+0x160>
 80057ac:	6823      	ldr	r3, [r4, #0]
 80057ae:	079b      	lsls	r3, r3, #30
 80057b0:	d413      	bmi.n	80057da <_printf_i+0x232>
 80057b2:	68e0      	ldr	r0, [r4, #12]
 80057b4:	9b03      	ldr	r3, [sp, #12]
 80057b6:	4298      	cmp	r0, r3
 80057b8:	bfb8      	it	lt
 80057ba:	4618      	movlt	r0, r3
 80057bc:	e7a6      	b.n	800570c <_printf_i+0x164>
 80057be:	2301      	movs	r3, #1
 80057c0:	4632      	mov	r2, r6
 80057c2:	4649      	mov	r1, r9
 80057c4:	4640      	mov	r0, r8
 80057c6:	47d0      	blx	sl
 80057c8:	3001      	adds	r0, #1
 80057ca:	d09d      	beq.n	8005708 <_printf_i+0x160>
 80057cc:	3501      	adds	r5, #1
 80057ce:	68e3      	ldr	r3, [r4, #12]
 80057d0:	9903      	ldr	r1, [sp, #12]
 80057d2:	1a5b      	subs	r3, r3, r1
 80057d4:	42ab      	cmp	r3, r5
 80057d6:	dcf2      	bgt.n	80057be <_printf_i+0x216>
 80057d8:	e7eb      	b.n	80057b2 <_printf_i+0x20a>
 80057da:	2500      	movs	r5, #0
 80057dc:	f104 0619 	add.w	r6, r4, #25
 80057e0:	e7f5      	b.n	80057ce <_printf_i+0x226>
 80057e2:	bf00      	nop
 80057e4:	08005b49 	.word	0x08005b49
 80057e8:	08005b5a 	.word	0x08005b5a

080057ec <__sflush_r>:
 80057ec:	898a      	ldrh	r2, [r1, #12]
 80057ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057f2:	4605      	mov	r5, r0
 80057f4:	0710      	lsls	r0, r2, #28
 80057f6:	460c      	mov	r4, r1
 80057f8:	d458      	bmi.n	80058ac <__sflush_r+0xc0>
 80057fa:	684b      	ldr	r3, [r1, #4]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	dc05      	bgt.n	800580c <__sflush_r+0x20>
 8005800:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005802:	2b00      	cmp	r3, #0
 8005804:	dc02      	bgt.n	800580c <__sflush_r+0x20>
 8005806:	2000      	movs	r0, #0
 8005808:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800580c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800580e:	2e00      	cmp	r6, #0
 8005810:	d0f9      	beq.n	8005806 <__sflush_r+0x1a>
 8005812:	2300      	movs	r3, #0
 8005814:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005818:	682f      	ldr	r7, [r5, #0]
 800581a:	6a21      	ldr	r1, [r4, #32]
 800581c:	602b      	str	r3, [r5, #0]
 800581e:	d032      	beq.n	8005886 <__sflush_r+0x9a>
 8005820:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005822:	89a3      	ldrh	r3, [r4, #12]
 8005824:	075a      	lsls	r2, r3, #29
 8005826:	d505      	bpl.n	8005834 <__sflush_r+0x48>
 8005828:	6863      	ldr	r3, [r4, #4]
 800582a:	1ac0      	subs	r0, r0, r3
 800582c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800582e:	b10b      	cbz	r3, 8005834 <__sflush_r+0x48>
 8005830:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005832:	1ac0      	subs	r0, r0, r3
 8005834:	2300      	movs	r3, #0
 8005836:	4602      	mov	r2, r0
 8005838:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800583a:	6a21      	ldr	r1, [r4, #32]
 800583c:	4628      	mov	r0, r5
 800583e:	47b0      	blx	r6
 8005840:	1c43      	adds	r3, r0, #1
 8005842:	89a3      	ldrh	r3, [r4, #12]
 8005844:	d106      	bne.n	8005854 <__sflush_r+0x68>
 8005846:	6829      	ldr	r1, [r5, #0]
 8005848:	291d      	cmp	r1, #29
 800584a:	d82b      	bhi.n	80058a4 <__sflush_r+0xb8>
 800584c:	4a29      	ldr	r2, [pc, #164]	; (80058f4 <__sflush_r+0x108>)
 800584e:	410a      	asrs	r2, r1
 8005850:	07d6      	lsls	r6, r2, #31
 8005852:	d427      	bmi.n	80058a4 <__sflush_r+0xb8>
 8005854:	2200      	movs	r2, #0
 8005856:	6062      	str	r2, [r4, #4]
 8005858:	04d9      	lsls	r1, r3, #19
 800585a:	6922      	ldr	r2, [r4, #16]
 800585c:	6022      	str	r2, [r4, #0]
 800585e:	d504      	bpl.n	800586a <__sflush_r+0x7e>
 8005860:	1c42      	adds	r2, r0, #1
 8005862:	d101      	bne.n	8005868 <__sflush_r+0x7c>
 8005864:	682b      	ldr	r3, [r5, #0]
 8005866:	b903      	cbnz	r3, 800586a <__sflush_r+0x7e>
 8005868:	6560      	str	r0, [r4, #84]	; 0x54
 800586a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800586c:	602f      	str	r7, [r5, #0]
 800586e:	2900      	cmp	r1, #0
 8005870:	d0c9      	beq.n	8005806 <__sflush_r+0x1a>
 8005872:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005876:	4299      	cmp	r1, r3
 8005878:	d002      	beq.n	8005880 <__sflush_r+0x94>
 800587a:	4628      	mov	r0, r5
 800587c:	f7ff fbea 	bl	8005054 <_free_r>
 8005880:	2000      	movs	r0, #0
 8005882:	6360      	str	r0, [r4, #52]	; 0x34
 8005884:	e7c0      	b.n	8005808 <__sflush_r+0x1c>
 8005886:	2301      	movs	r3, #1
 8005888:	4628      	mov	r0, r5
 800588a:	47b0      	blx	r6
 800588c:	1c41      	adds	r1, r0, #1
 800588e:	d1c8      	bne.n	8005822 <__sflush_r+0x36>
 8005890:	682b      	ldr	r3, [r5, #0]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d0c5      	beq.n	8005822 <__sflush_r+0x36>
 8005896:	2b1d      	cmp	r3, #29
 8005898:	d001      	beq.n	800589e <__sflush_r+0xb2>
 800589a:	2b16      	cmp	r3, #22
 800589c:	d101      	bne.n	80058a2 <__sflush_r+0xb6>
 800589e:	602f      	str	r7, [r5, #0]
 80058a0:	e7b1      	b.n	8005806 <__sflush_r+0x1a>
 80058a2:	89a3      	ldrh	r3, [r4, #12]
 80058a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80058a8:	81a3      	strh	r3, [r4, #12]
 80058aa:	e7ad      	b.n	8005808 <__sflush_r+0x1c>
 80058ac:	690f      	ldr	r7, [r1, #16]
 80058ae:	2f00      	cmp	r7, #0
 80058b0:	d0a9      	beq.n	8005806 <__sflush_r+0x1a>
 80058b2:	0793      	lsls	r3, r2, #30
 80058b4:	680e      	ldr	r6, [r1, #0]
 80058b6:	bf08      	it	eq
 80058b8:	694b      	ldreq	r3, [r1, #20]
 80058ba:	600f      	str	r7, [r1, #0]
 80058bc:	bf18      	it	ne
 80058be:	2300      	movne	r3, #0
 80058c0:	eba6 0807 	sub.w	r8, r6, r7
 80058c4:	608b      	str	r3, [r1, #8]
 80058c6:	f1b8 0f00 	cmp.w	r8, #0
 80058ca:	dd9c      	ble.n	8005806 <__sflush_r+0x1a>
 80058cc:	6a21      	ldr	r1, [r4, #32]
 80058ce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80058d0:	4643      	mov	r3, r8
 80058d2:	463a      	mov	r2, r7
 80058d4:	4628      	mov	r0, r5
 80058d6:	47b0      	blx	r6
 80058d8:	2800      	cmp	r0, #0
 80058da:	dc06      	bgt.n	80058ea <__sflush_r+0xfe>
 80058dc:	89a3      	ldrh	r3, [r4, #12]
 80058de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80058e2:	81a3      	strh	r3, [r4, #12]
 80058e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80058e8:	e78e      	b.n	8005808 <__sflush_r+0x1c>
 80058ea:	4407      	add	r7, r0
 80058ec:	eba8 0800 	sub.w	r8, r8, r0
 80058f0:	e7e9      	b.n	80058c6 <__sflush_r+0xda>
 80058f2:	bf00      	nop
 80058f4:	dfbffffe 	.word	0xdfbffffe

080058f8 <_fflush_r>:
 80058f8:	b538      	push	{r3, r4, r5, lr}
 80058fa:	690b      	ldr	r3, [r1, #16]
 80058fc:	4605      	mov	r5, r0
 80058fe:	460c      	mov	r4, r1
 8005900:	b913      	cbnz	r3, 8005908 <_fflush_r+0x10>
 8005902:	2500      	movs	r5, #0
 8005904:	4628      	mov	r0, r5
 8005906:	bd38      	pop	{r3, r4, r5, pc}
 8005908:	b118      	cbz	r0, 8005912 <_fflush_r+0x1a>
 800590a:	6a03      	ldr	r3, [r0, #32]
 800590c:	b90b      	cbnz	r3, 8005912 <_fflush_r+0x1a>
 800590e:	f7ff f9a9 	bl	8004c64 <__sinit>
 8005912:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d0f3      	beq.n	8005902 <_fflush_r+0xa>
 800591a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800591c:	07d0      	lsls	r0, r2, #31
 800591e:	d404      	bmi.n	800592a <_fflush_r+0x32>
 8005920:	0599      	lsls	r1, r3, #22
 8005922:	d402      	bmi.n	800592a <_fflush_r+0x32>
 8005924:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005926:	f7ff fb92 	bl	800504e <__retarget_lock_acquire_recursive>
 800592a:	4628      	mov	r0, r5
 800592c:	4621      	mov	r1, r4
 800592e:	f7ff ff5d 	bl	80057ec <__sflush_r>
 8005932:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005934:	07da      	lsls	r2, r3, #31
 8005936:	4605      	mov	r5, r0
 8005938:	d4e4      	bmi.n	8005904 <_fflush_r+0xc>
 800593a:	89a3      	ldrh	r3, [r4, #12]
 800593c:	059b      	lsls	r3, r3, #22
 800593e:	d4e1      	bmi.n	8005904 <_fflush_r+0xc>
 8005940:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005942:	f7ff fb85 	bl	8005050 <__retarget_lock_release_recursive>
 8005946:	e7dd      	b.n	8005904 <_fflush_r+0xc>

08005948 <__swhatbuf_r>:
 8005948:	b570      	push	{r4, r5, r6, lr}
 800594a:	460c      	mov	r4, r1
 800594c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005950:	2900      	cmp	r1, #0
 8005952:	b096      	sub	sp, #88	; 0x58
 8005954:	4615      	mov	r5, r2
 8005956:	461e      	mov	r6, r3
 8005958:	da0d      	bge.n	8005976 <__swhatbuf_r+0x2e>
 800595a:	89a3      	ldrh	r3, [r4, #12]
 800595c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005960:	f04f 0100 	mov.w	r1, #0
 8005964:	bf0c      	ite	eq
 8005966:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800596a:	2340      	movne	r3, #64	; 0x40
 800596c:	2000      	movs	r0, #0
 800596e:	6031      	str	r1, [r6, #0]
 8005970:	602b      	str	r3, [r5, #0]
 8005972:	b016      	add	sp, #88	; 0x58
 8005974:	bd70      	pop	{r4, r5, r6, pc}
 8005976:	466a      	mov	r2, sp
 8005978:	f000 f848 	bl	8005a0c <_fstat_r>
 800597c:	2800      	cmp	r0, #0
 800597e:	dbec      	blt.n	800595a <__swhatbuf_r+0x12>
 8005980:	9901      	ldr	r1, [sp, #4]
 8005982:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8005986:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800598a:	4259      	negs	r1, r3
 800598c:	4159      	adcs	r1, r3
 800598e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005992:	e7eb      	b.n	800596c <__swhatbuf_r+0x24>

08005994 <__smakebuf_r>:
 8005994:	898b      	ldrh	r3, [r1, #12]
 8005996:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005998:	079d      	lsls	r5, r3, #30
 800599a:	4606      	mov	r6, r0
 800599c:	460c      	mov	r4, r1
 800599e:	d507      	bpl.n	80059b0 <__smakebuf_r+0x1c>
 80059a0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80059a4:	6023      	str	r3, [r4, #0]
 80059a6:	6123      	str	r3, [r4, #16]
 80059a8:	2301      	movs	r3, #1
 80059aa:	6163      	str	r3, [r4, #20]
 80059ac:	b002      	add	sp, #8
 80059ae:	bd70      	pop	{r4, r5, r6, pc}
 80059b0:	ab01      	add	r3, sp, #4
 80059b2:	466a      	mov	r2, sp
 80059b4:	f7ff ffc8 	bl	8005948 <__swhatbuf_r>
 80059b8:	9900      	ldr	r1, [sp, #0]
 80059ba:	4605      	mov	r5, r0
 80059bc:	4630      	mov	r0, r6
 80059be:	f7ff fbb5 	bl	800512c <_malloc_r>
 80059c2:	b948      	cbnz	r0, 80059d8 <__smakebuf_r+0x44>
 80059c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80059c8:	059a      	lsls	r2, r3, #22
 80059ca:	d4ef      	bmi.n	80059ac <__smakebuf_r+0x18>
 80059cc:	f023 0303 	bic.w	r3, r3, #3
 80059d0:	f043 0302 	orr.w	r3, r3, #2
 80059d4:	81a3      	strh	r3, [r4, #12]
 80059d6:	e7e3      	b.n	80059a0 <__smakebuf_r+0xc>
 80059d8:	89a3      	ldrh	r3, [r4, #12]
 80059da:	6020      	str	r0, [r4, #0]
 80059dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059e0:	81a3      	strh	r3, [r4, #12]
 80059e2:	9b00      	ldr	r3, [sp, #0]
 80059e4:	6163      	str	r3, [r4, #20]
 80059e6:	9b01      	ldr	r3, [sp, #4]
 80059e8:	6120      	str	r0, [r4, #16]
 80059ea:	b15b      	cbz	r3, 8005a04 <__smakebuf_r+0x70>
 80059ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80059f0:	4630      	mov	r0, r6
 80059f2:	f000 f81d 	bl	8005a30 <_isatty_r>
 80059f6:	b128      	cbz	r0, 8005a04 <__smakebuf_r+0x70>
 80059f8:	89a3      	ldrh	r3, [r4, #12]
 80059fa:	f023 0303 	bic.w	r3, r3, #3
 80059fe:	f043 0301 	orr.w	r3, r3, #1
 8005a02:	81a3      	strh	r3, [r4, #12]
 8005a04:	89a3      	ldrh	r3, [r4, #12]
 8005a06:	431d      	orrs	r5, r3
 8005a08:	81a5      	strh	r5, [r4, #12]
 8005a0a:	e7cf      	b.n	80059ac <__smakebuf_r+0x18>

08005a0c <_fstat_r>:
 8005a0c:	b538      	push	{r3, r4, r5, lr}
 8005a0e:	4d07      	ldr	r5, [pc, #28]	; (8005a2c <_fstat_r+0x20>)
 8005a10:	2300      	movs	r3, #0
 8005a12:	4604      	mov	r4, r0
 8005a14:	4608      	mov	r0, r1
 8005a16:	4611      	mov	r1, r2
 8005a18:	602b      	str	r3, [r5, #0]
 8005a1a:	f7fb face 	bl	8000fba <_fstat>
 8005a1e:	1c43      	adds	r3, r0, #1
 8005a20:	d102      	bne.n	8005a28 <_fstat_r+0x1c>
 8005a22:	682b      	ldr	r3, [r5, #0]
 8005a24:	b103      	cbz	r3, 8005a28 <_fstat_r+0x1c>
 8005a26:	6023      	str	r3, [r4, #0]
 8005a28:	bd38      	pop	{r3, r4, r5, pc}
 8005a2a:	bf00      	nop
 8005a2c:	20000340 	.word	0x20000340

08005a30 <_isatty_r>:
 8005a30:	b538      	push	{r3, r4, r5, lr}
 8005a32:	4d06      	ldr	r5, [pc, #24]	; (8005a4c <_isatty_r+0x1c>)
 8005a34:	2300      	movs	r3, #0
 8005a36:	4604      	mov	r4, r0
 8005a38:	4608      	mov	r0, r1
 8005a3a:	602b      	str	r3, [r5, #0]
 8005a3c:	f7fb facd 	bl	8000fda <_isatty>
 8005a40:	1c43      	adds	r3, r0, #1
 8005a42:	d102      	bne.n	8005a4a <_isatty_r+0x1a>
 8005a44:	682b      	ldr	r3, [r5, #0]
 8005a46:	b103      	cbz	r3, 8005a4a <_isatty_r+0x1a>
 8005a48:	6023      	str	r3, [r4, #0]
 8005a4a:	bd38      	pop	{r3, r4, r5, pc}
 8005a4c:	20000340 	.word	0x20000340

08005a50 <_sbrk_r>:
 8005a50:	b538      	push	{r3, r4, r5, lr}
 8005a52:	4d06      	ldr	r5, [pc, #24]	; (8005a6c <_sbrk_r+0x1c>)
 8005a54:	2300      	movs	r3, #0
 8005a56:	4604      	mov	r4, r0
 8005a58:	4608      	mov	r0, r1
 8005a5a:	602b      	str	r3, [r5, #0]
 8005a5c:	f7fb fad6 	bl	800100c <_sbrk>
 8005a60:	1c43      	adds	r3, r0, #1
 8005a62:	d102      	bne.n	8005a6a <_sbrk_r+0x1a>
 8005a64:	682b      	ldr	r3, [r5, #0]
 8005a66:	b103      	cbz	r3, 8005a6a <_sbrk_r+0x1a>
 8005a68:	6023      	str	r3, [r4, #0]
 8005a6a:	bd38      	pop	{r3, r4, r5, pc}
 8005a6c:	20000340 	.word	0x20000340

08005a70 <_init>:
 8005a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a72:	bf00      	nop
 8005a74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a76:	bc08      	pop	{r3}
 8005a78:	469e      	mov	lr, r3
 8005a7a:	4770      	bx	lr

08005a7c <_fini>:
 8005a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a7e:	bf00      	nop
 8005a80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a82:	bc08      	pop	{r3}
 8005a84:	469e      	mov	lr, r3
 8005a86:	4770      	bx	lr
