
stm_spi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000057d0  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  080059d0  080059d0  000159d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005aa8  08005aa8  0002008c  2**0
                  CONTENTS
  4 .ARM          00000008  08005aa8  08005aa8  00015aa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005ab0  08005ab0  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005ab0  08005ab0  00015ab0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005ab4  08005ab4  00015ab4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  08005ab8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002c4  2000008c  08005b44  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000350  08005b44  00020350  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200ba  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d60b  00000000  00000000  000200fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000214b  00000000  00000000  0002d708  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000aa8  00000000  00000000  0002f858  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000822  00000000  00000000  00030300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002deb4  00000000  00000000  00030b22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000daca  00000000  00000000  0005e9d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00111d23  00000000  00000000  0006c4a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003258  00000000  00000000  0017e1c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  0018141c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	2000008c 	.word	0x2000008c
 800021c:	00000000 	.word	0x00000000
 8000220:	080059b8 	.word	0x080059b8

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000090 	.word	0x20000090
 800023c:	080059b8 	.word	0x080059b8

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002f4:	f000 b970 	b.w	80005d8 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9e08      	ldr	r6, [sp, #32]
 8000316:	460d      	mov	r5, r1
 8000318:	4604      	mov	r4, r0
 800031a:	460f      	mov	r7, r1
 800031c:	2b00      	cmp	r3, #0
 800031e:	d14a      	bne.n	80003b6 <__udivmoddi4+0xa6>
 8000320:	428a      	cmp	r2, r1
 8000322:	4694      	mov	ip, r2
 8000324:	d965      	bls.n	80003f2 <__udivmoddi4+0xe2>
 8000326:	fab2 f382 	clz	r3, r2
 800032a:	b143      	cbz	r3, 800033e <__udivmoddi4+0x2e>
 800032c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000330:	f1c3 0220 	rsb	r2, r3, #32
 8000334:	409f      	lsls	r7, r3
 8000336:	fa20 f202 	lsr.w	r2, r0, r2
 800033a:	4317      	orrs	r7, r2
 800033c:	409c      	lsls	r4, r3
 800033e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000342:	fa1f f58c 	uxth.w	r5, ip
 8000346:	fbb7 f1fe 	udiv	r1, r7, lr
 800034a:	0c22      	lsrs	r2, r4, #16
 800034c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000350:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000354:	fb01 f005 	mul.w	r0, r1, r5
 8000358:	4290      	cmp	r0, r2
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x62>
 800035c:	eb1c 0202 	adds.w	r2, ip, r2
 8000360:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000364:	f080 811c 	bcs.w	80005a0 <__udivmoddi4+0x290>
 8000368:	4290      	cmp	r0, r2
 800036a:	f240 8119 	bls.w	80005a0 <__udivmoddi4+0x290>
 800036e:	3902      	subs	r1, #2
 8000370:	4462      	add	r2, ip
 8000372:	1a12      	subs	r2, r2, r0
 8000374:	b2a4      	uxth	r4, r4
 8000376:	fbb2 f0fe 	udiv	r0, r2, lr
 800037a:	fb0e 2210 	mls	r2, lr, r0, r2
 800037e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000382:	fb00 f505 	mul.w	r5, r0, r5
 8000386:	42a5      	cmp	r5, r4
 8000388:	d90a      	bls.n	80003a0 <__udivmoddi4+0x90>
 800038a:	eb1c 0404 	adds.w	r4, ip, r4
 800038e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000392:	f080 8107 	bcs.w	80005a4 <__udivmoddi4+0x294>
 8000396:	42a5      	cmp	r5, r4
 8000398:	f240 8104 	bls.w	80005a4 <__udivmoddi4+0x294>
 800039c:	4464      	add	r4, ip
 800039e:	3802      	subs	r0, #2
 80003a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003a4:	1b64      	subs	r4, r4, r5
 80003a6:	2100      	movs	r1, #0
 80003a8:	b11e      	cbz	r6, 80003b2 <__udivmoddi4+0xa2>
 80003aa:	40dc      	lsrs	r4, r3
 80003ac:	2300      	movs	r3, #0
 80003ae:	e9c6 4300 	strd	r4, r3, [r6]
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0xbc>
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	f000 80ed 	beq.w	800059a <__udivmoddi4+0x28a>
 80003c0:	2100      	movs	r1, #0
 80003c2:	e9c6 0500 	strd	r0, r5, [r6]
 80003c6:	4608      	mov	r0, r1
 80003c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003cc:	fab3 f183 	clz	r1, r3
 80003d0:	2900      	cmp	r1, #0
 80003d2:	d149      	bne.n	8000468 <__udivmoddi4+0x158>
 80003d4:	42ab      	cmp	r3, r5
 80003d6:	d302      	bcc.n	80003de <__udivmoddi4+0xce>
 80003d8:	4282      	cmp	r2, r0
 80003da:	f200 80f8 	bhi.w	80005ce <__udivmoddi4+0x2be>
 80003de:	1a84      	subs	r4, r0, r2
 80003e0:	eb65 0203 	sbc.w	r2, r5, r3
 80003e4:	2001      	movs	r0, #1
 80003e6:	4617      	mov	r7, r2
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d0e2      	beq.n	80003b2 <__udivmoddi4+0xa2>
 80003ec:	e9c6 4700 	strd	r4, r7, [r6]
 80003f0:	e7df      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003f2:	b902      	cbnz	r2, 80003f6 <__udivmoddi4+0xe6>
 80003f4:	deff      	udf	#255	; 0xff
 80003f6:	fab2 f382 	clz	r3, r2
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	f040 8090 	bne.w	8000520 <__udivmoddi4+0x210>
 8000400:	1a8a      	subs	r2, r1, r2
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2101      	movs	r1, #1
 800040c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000410:	fb07 2015 	mls	r0, r7, r5, r2
 8000414:	0c22      	lsrs	r2, r4, #16
 8000416:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800041a:	fb0e f005 	mul.w	r0, lr, r5
 800041e:	4290      	cmp	r0, r2
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x124>
 8000422:	eb1c 0202 	adds.w	r2, ip, r2
 8000426:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x122>
 800042c:	4290      	cmp	r0, r2
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2b8>
 8000432:	4645      	mov	r5, r8
 8000434:	1a12      	subs	r2, r2, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb2 f0f7 	udiv	r0, r2, r7
 800043c:	fb07 2210 	mls	r2, r7, r0, r2
 8000440:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x14e>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x14c>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2c2>
 800045c:	4610      	mov	r0, r2
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000466:	e79f      	b.n	80003a8 <__udivmoddi4+0x98>
 8000468:	f1c1 0720 	rsb	r7, r1, #32
 800046c:	408b      	lsls	r3, r1
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa05 f401 	lsl.w	r4, r5, r1
 800047a:	fa20 f307 	lsr.w	r3, r0, r7
 800047e:	40fd      	lsrs	r5, r7
 8000480:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000484:	4323      	orrs	r3, r4
 8000486:	fbb5 f8f9 	udiv	r8, r5, r9
 800048a:	fa1f fe8c 	uxth.w	lr, ip
 800048e:	fb09 5518 	mls	r5, r9, r8, r5
 8000492:	0c1c      	lsrs	r4, r3, #16
 8000494:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000498:	fb08 f50e 	mul.w	r5, r8, lr
 800049c:	42a5      	cmp	r5, r4
 800049e:	fa02 f201 	lsl.w	r2, r2, r1
 80004a2:	fa00 f001 	lsl.w	r0, r0, r1
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b0>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2b4>
 80004b4:	42a5      	cmp	r5, r4
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2b4>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4464      	add	r4, ip
 80004c0:	1b64      	subs	r4, r4, r5
 80004c2:	b29d      	uxth	r5, r3
 80004c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004c8:	fb09 4413 	mls	r4, r9, r3, r4
 80004cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004d4:	45a6      	cmp	lr, r4
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1da>
 80004d8:	eb1c 0404 	adds.w	r4, ip, r4
 80004dc:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2ac>
 80004e2:	45a6      	cmp	lr, r4
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2ac>
 80004e6:	3b02      	subs	r3, #2
 80004e8:	4464      	add	r4, ip
 80004ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ee:	fba3 9502 	umull	r9, r5, r3, r2
 80004f2:	eba4 040e 	sub.w	r4, r4, lr
 80004f6:	42ac      	cmp	r4, r5
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46ae      	mov	lr, r5
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x29c>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x298>
 8000500:	b156      	cbz	r6, 8000518 <__udivmoddi4+0x208>
 8000502:	ebb0 0208 	subs.w	r2, r0, r8
 8000506:	eb64 040e 	sbc.w	r4, r4, lr
 800050a:	fa04 f707 	lsl.w	r7, r4, r7
 800050e:	40ca      	lsrs	r2, r1
 8000510:	40cc      	lsrs	r4, r1
 8000512:	4317      	orrs	r7, r2
 8000514:	e9c6 7400 	strd	r7, r4, [r6]
 8000518:	4618      	mov	r0, r3
 800051a:	2100      	movs	r1, #0
 800051c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000520:	f1c3 0120 	rsb	r1, r3, #32
 8000524:	fa02 fc03 	lsl.w	ip, r2, r3
 8000528:	fa20 f201 	lsr.w	r2, r0, r1
 800052c:	fa25 f101 	lsr.w	r1, r5, r1
 8000530:	409d      	lsls	r5, r3
 8000532:	432a      	orrs	r2, r5
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000540:	fb07 1510 	mls	r5, r7, r0, r1
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800054a:	fb00 f50e 	mul.w	r5, r0, lr
 800054e:	428d      	cmp	r5, r1
 8000550:	fa04 f403 	lsl.w	r4, r4, r3
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x258>
 8000556:	eb1c 0101 	adds.w	r1, ip, r1
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000560:	428d      	cmp	r5, r1
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000564:	3802      	subs	r0, #2
 8000566:	4461      	add	r1, ip
 8000568:	1b49      	subs	r1, r1, r5
 800056a:	b292      	uxth	r2, r2
 800056c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000570:	fb07 1115 	mls	r1, r7, r5, r1
 8000574:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000578:	fb05 f10e 	mul.w	r1, r5, lr
 800057c:	4291      	cmp	r1, r2
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x282>
 8000580:	eb1c 0202 	adds.w	r2, ip, r2
 8000584:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 800058a:	4291      	cmp	r1, r2
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800058e:	3d02      	subs	r5, #2
 8000590:	4462      	add	r2, ip
 8000592:	1a52      	subs	r2, r2, r1
 8000594:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0xfc>
 800059a:	4631      	mov	r1, r6
 800059c:	4630      	mov	r0, r6
 800059e:	e708      	b.n	80003b2 <__udivmoddi4+0xa2>
 80005a0:	4639      	mov	r1, r7
 80005a2:	e6e6      	b.n	8000372 <__udivmoddi4+0x62>
 80005a4:	4610      	mov	r0, r2
 80005a6:	e6fb      	b.n	80003a0 <__udivmoddi4+0x90>
 80005a8:	4548      	cmp	r0, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f0>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005b4:	3b01      	subs	r3, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f0>
 80005b8:	4645      	mov	r5, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x282>
 80005bc:	462b      	mov	r3, r5
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1da>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x258>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b0>
 80005c8:	3d02      	subs	r5, #2
 80005ca:	4462      	add	r2, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x124>
 80005ce:	4608      	mov	r0, r1
 80005d0:	e70a      	b.n	80003e8 <__udivmoddi4+0xd8>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x14e>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b084      	sub	sp, #16
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	60f8      	str	r0, [r7, #12]
 80005e4:	60b9      	str	r1, [r7, #8]
 80005e6:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)ptr, len, 100);
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	b29a      	uxth	r2, r3
 80005ec:	2364      	movs	r3, #100	; 0x64
 80005ee:	68b9      	ldr	r1, [r7, #8]
 80005f0:	4803      	ldr	r0, [pc, #12]	; (8000600 <_write+0x24>)
 80005f2:	f003 f9fc 	bl	80039ee <HAL_UART_Transmit>
	return len;
 80005f6:	687b      	ldr	r3, [r7, #4]
}
 80005f8:	4618      	mov	r0, r3
 80005fa:	3710      	adds	r7, #16
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	20000170 	.word	0x20000170

08000604 <HAL_SPI_TxCpltCallback>:

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b082      	sub	sp, #8
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
	if (hspi->Instance == hspi5.Instance) {
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	681a      	ldr	r2, [r3, #0]
 8000610:	4b0d      	ldr	r3, [pc, #52]	; (8000648 <HAL_SPI_TxCpltCallback+0x44>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	429a      	cmp	r2, r3
 8000616:	d109      	bne.n	800062c <HAL_SPI_TxCpltCallback+0x28>
		master_transmit = 1;
 8000618:	4b0c      	ldr	r3, [pc, #48]	; (800064c <HAL_SPI_TxCpltCallback+0x48>)
 800061a:	2201      	movs	r2, #1
 800061c:	701a      	strb	r2, [r3, #0]
		slave_transmit = 0;
 800061e:	4b0c      	ldr	r3, [pc, #48]	; (8000650 <HAL_SPI_TxCpltCallback+0x4c>)
 8000620:	2200      	movs	r2, #0
 8000622:	701a      	strb	r2, [r3, #0]
		printf("Master T callback\r\n");
 8000624:	480b      	ldr	r0, [pc, #44]	; (8000654 <HAL_SPI_TxCpltCallback+0x50>)
 8000626:	f004 fb5d 	bl	8004ce4 <puts>
	} else {
		slave_transmit = 1;
		master_transmit = 0;
		printf("Slave T callback\r\n");
	}
}
 800062a:	e008      	b.n	800063e <HAL_SPI_TxCpltCallback+0x3a>
		slave_transmit = 1;
 800062c:	4b08      	ldr	r3, [pc, #32]	; (8000650 <HAL_SPI_TxCpltCallback+0x4c>)
 800062e:	2201      	movs	r2, #1
 8000630:	701a      	strb	r2, [r3, #0]
		master_transmit = 0;
 8000632:	4b06      	ldr	r3, [pc, #24]	; (800064c <HAL_SPI_TxCpltCallback+0x48>)
 8000634:	2200      	movs	r2, #0
 8000636:	701a      	strb	r2, [r3, #0]
		printf("Slave T callback\r\n");
 8000638:	4807      	ldr	r0, [pc, #28]	; (8000658 <HAL_SPI_TxCpltCallback+0x54>)
 800063a:	f004 fb53 	bl	8004ce4 <puts>
}
 800063e:	bf00      	nop
 8000640:	3708      	adds	r7, #8
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	2000010c 	.word	0x2000010c
 800064c:	200001f8 	.word	0x200001f8
 8000650:	200001f9 	.word	0x200001f9
 8000654:	080059d0 	.word	0x080059d0
 8000658:	080059e4 	.word	0x080059e4

0800065c <HAL_SPI_ErrorCallback>:
		printf("Slave R callback\r\n");
	}
}

void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b082      	sub	sp, #8
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
	if (hspi->Instance == hspi5.Instance) {
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	681a      	ldr	r2, [r3, #0]
 8000668:	4b07      	ldr	r3, [pc, #28]	; (8000688 <HAL_SPI_ErrorCallback+0x2c>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	429a      	cmp	r2, r3
 800066e:	d103      	bne.n	8000678 <HAL_SPI_ErrorCallback+0x1c>
			printf("Master er callback\r\n");
 8000670:	4806      	ldr	r0, [pc, #24]	; (800068c <HAL_SPI_ErrorCallback+0x30>)
 8000672:	f004 fb37 	bl	8004ce4 <puts>
	} else {
			printf("Slave er callback\r\n");
	}
}
 8000676:	e002      	b.n	800067e <HAL_SPI_ErrorCallback+0x22>
			printf("Slave er callback\r\n");
 8000678:	4805      	ldr	r0, [pc, #20]	; (8000690 <HAL_SPI_ErrorCallback+0x34>)
 800067a:	f004 fb33 	bl	8004ce4 <puts>
}
 800067e:	bf00      	nop
 8000680:	3708      	adds	r7, #8
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	2000010c 	.word	0x2000010c
 800068c:	08005a20 	.word	0x08005a20
 8000690:	08005a34 	.word	0x08005a34

08000694 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b082      	sub	sp, #8
 8000698:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800069a:	f000 fce4 	bl	8001066 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800069e:	f000 f883 	bl	80007a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006a2:	f000 f985 	bl	80009b0 <MX_GPIO_Init>
  MX_SPI2_Init();
 80006a6:	f000 f8db 	bl	8000860 <MX_SPI2_Init>
  MX_SPI5_Init();
 80006aa:	f000 f917 	bl	80008dc <MX_SPI5_Init>
  MX_USART1_UART_Init();
 80006ae:	f000 f94f 	bl	8000950 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  uint16_t data = 123;
 80006b2:	237b      	movs	r3, #123	; 0x7b
 80006b4:	80fb      	strh	r3, [r7, #6]
  uint16_t sdata;
  uint8_t adress = HYSTERESIS;
 80006b6:	2305      	movs	r3, #5
 80006b8:	717b      	strb	r3, [r7, #5]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (!master_transmit && !slave_transmit) {
 80006ba:	4b36      	ldr	r3, [pc, #216]	; (8000794 <main+0x100>)
 80006bc:	781b      	ldrb	r3, [r3, #0]
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d116      	bne.n	80006f0 <main+0x5c>
 80006c2:	4b35      	ldr	r3, [pc, #212]	; (8000798 <main+0x104>)
 80006c4:	781b      	ldrb	r3, [r3, #0]
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d112      	bne.n	80006f0 <main+0x5c>
		  //master first transmit
		  my_spi_set_reg_adr(&hspi2, &adress);
 80006ca:	1d7b      	adds	r3, r7, #5
 80006cc:	4619      	mov	r1, r3
 80006ce:	4833      	ldr	r0, [pc, #204]	; (800079c <main+0x108>)
 80006d0:	f000 f9a3 	bl	8000a1a <my_spi_set_reg_adr>
		  slave_resive_reg_adress(&hspi5);
 80006d4:	4832      	ldr	r0, [pc, #200]	; (80007a0 <main+0x10c>)
 80006d6:	f000 f9d7 	bl	8000a88 <slave_resive_reg_adress>
		  my_spi_read_reg(&hspi2, &data);
 80006da:	1dbb      	adds	r3, r7, #6
 80006dc:	4619      	mov	r1, r3
 80006de:	482f      	ldr	r0, [pc, #188]	; (800079c <main+0x108>)
 80006e0:	f000 f9ad 	bl	8000a3e <my_spi_read_reg>
		  printf("Data value: %d\r\n", data);
 80006e4:	88fb      	ldrh	r3, [r7, #6]
 80006e6:	4619      	mov	r1, r3
 80006e8:	482e      	ldr	r0, [pc, #184]	; (80007a4 <main+0x110>)
 80006ea:	f004 fa95 	bl	8004c18 <iprintf>
 80006ee:	e04f      	b.n	8000790 <main+0xfc>
  	  } else if (master_transmit && !slave_transmit){
 80006f0:	4b28      	ldr	r3, [pc, #160]	; (8000794 <main+0x100>)
 80006f2:	781b      	ldrb	r3, [r3, #0]
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d007      	beq.n	8000708 <main+0x74>
 80006f8:	4b27      	ldr	r3, [pc, #156]	; (8000798 <main+0x104>)
 80006fa:	781b      	ldrb	r3, [r3, #0]
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d103      	bne.n	8000708 <main+0x74>
		  //slave respond
  		  slave_respond_to_master(&hspi5);
 8000700:	4827      	ldr	r0, [pc, #156]	; (80007a0 <main+0x10c>)
 8000702:	f000 fa1f 	bl	8000b44 <slave_respond_to_master>
 8000706:	e043      	b.n	8000790 <main+0xfc>
	  } else if(!master_transmit && slave_transmit && !(adress & MY_SPI_WRITE_MOD)) {
 8000708:	4b22      	ldr	r3, [pc, #136]	; (8000794 <main+0x100>)
 800070a:	781b      	ldrb	r3, [r3, #0]
 800070c:	2b00      	cmp	r3, #0
 800070e:	d127      	bne.n	8000760 <main+0xcc>
 8000710:	4b21      	ldr	r3, [pc, #132]	; (8000798 <main+0x104>)
 8000712:	781b      	ldrb	r3, [r3, #0]
 8000714:	2b00      	cmp	r3, #0
 8000716:	d023      	beq.n	8000760 <main+0xcc>
 8000718:	797b      	ldrb	r3, [r7, #5]
 800071a:	f003 0301 	and.w	r3, r3, #1
 800071e:	2b00      	cmp	r3, #0
 8000720:	d11e      	bne.n	8000760 <main+0xcc>
		  //master respond
		  adress |= MY_SPI_WRITE_MOD;
 8000722:	797b      	ldrb	r3, [r7, #5]
 8000724:	f043 0301 	orr.w	r3, r3, #1
 8000728:	b2db      	uxtb	r3, r3
 800072a:	717b      	strb	r3, [r7, #5]
		  my_spi_set_reg_adr(&hspi2, &adress);
 800072c:	1d7b      	adds	r3, r7, #5
 800072e:	4619      	mov	r1, r3
 8000730:	481a      	ldr	r0, [pc, #104]	; (800079c <main+0x108>)
 8000732:	f000 f972 	bl	8000a1a <my_spi_set_reg_adr>
		  slave_resive_reg_adress(&hspi5);
 8000736:	481a      	ldr	r0, [pc, #104]	; (80007a0 <main+0x10c>)
 8000738:	f000 f9a6 	bl	8000a88 <slave_resive_reg_adress>
		  data = (data + 2) & HYSTERESIS_MASK;
 800073c:	88fb      	ldrh	r3, [r7, #6]
 800073e:	3302      	adds	r3, #2
 8000740:	b29b      	uxth	r3, r3
 8000742:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000746:	b29b      	uxth	r3, r3
 8000748:	80fb      	strh	r3, [r7, #6]
		  my_spi_set_reg(&hspi2, &data);
 800074a:	1dbb      	adds	r3, r7, #6
 800074c:	4619      	mov	r1, r3
 800074e:	4813      	ldr	r0, [pc, #76]	; (800079c <main+0x108>)
 8000750:	f000 f988 	bl	8000a64 <my_spi_set_reg>
		  printf("Data value: %d\r\n", data);
 8000754:	88fb      	ldrh	r3, [r7, #6]
 8000756:	4619      	mov	r1, r3
 8000758:	4812      	ldr	r0, [pc, #72]	; (80007a4 <main+0x110>)
 800075a:	f004 fa5d 	bl	8004c18 <iprintf>
 800075e:	e017      	b.n	8000790 <main+0xfc>
	  } else {
		  adress = (adress >> 1) << 1;
 8000760:	797b      	ldrb	r3, [r7, #5]
 8000762:	085b      	lsrs	r3, r3, #1
 8000764:	b2db      	uxtb	r3, r3
 8000766:	005b      	lsls	r3, r3, #1
 8000768:	b2db      	uxtb	r3, r3
 800076a:	717b      	strb	r3, [r7, #5]
		  my_spi_set_reg_adr(&hspi2, &adress);
 800076c:	1d7b      	adds	r3, r7, #5
 800076e:	4619      	mov	r1, r3
 8000770:	480a      	ldr	r0, [pc, #40]	; (800079c <main+0x108>)
 8000772:	f000 f952 	bl	8000a1a <my_spi_set_reg_adr>
		  slave_resive_reg_adress(&hspi5);
 8000776:	480a      	ldr	r0, [pc, #40]	; (80007a0 <main+0x10c>)
 8000778:	f000 f986 	bl	8000a88 <slave_resive_reg_adress>
		  my_spi_read_reg(&hspi2, &data);
 800077c:	1dbb      	adds	r3, r7, #6
 800077e:	4619      	mov	r1, r3
 8000780:	4806      	ldr	r0, [pc, #24]	; (800079c <main+0x108>)
 8000782:	f000 f95c 	bl	8000a3e <my_spi_read_reg>
		  printf("Data value: %d\r\n", data);
 8000786:	88fb      	ldrh	r3, [r7, #6]
 8000788:	4619      	mov	r1, r3
 800078a:	4806      	ldr	r0, [pc, #24]	; (80007a4 <main+0x110>)
 800078c:	f004 fa44 	bl	8004c18 <iprintf>
	  if (!master_transmit && !slave_transmit) {
 8000790:	e793      	b.n	80006ba <main+0x26>
 8000792:	bf00      	nop
 8000794:	200001f8 	.word	0x200001f8
 8000798:	200001f9 	.word	0x200001f9
 800079c:	200000a8 	.word	0x200000a8
 80007a0:	2000010c 	.word	0x2000010c
 80007a4:	08005a48 	.word	0x08005a48

080007a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b094      	sub	sp, #80	; 0x50
 80007ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ae:	f107 031c 	add.w	r3, r7, #28
 80007b2:	2234      	movs	r2, #52	; 0x34
 80007b4:	2100      	movs	r1, #0
 80007b6:	4618      	mov	r0, r3
 80007b8:	f004 fb74 	bl	8004ea4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007bc:	f107 0308 	add.w	r3, r7, #8
 80007c0:	2200      	movs	r2, #0
 80007c2:	601a      	str	r2, [r3, #0]
 80007c4:	605a      	str	r2, [r3, #4]
 80007c6:	609a      	str	r2, [r3, #8]
 80007c8:	60da      	str	r2, [r3, #12]
 80007ca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007cc:	4b22      	ldr	r3, [pc, #136]	; (8000858 <SystemClock_Config+0xb0>)
 80007ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007d0:	4a21      	ldr	r2, [pc, #132]	; (8000858 <SystemClock_Config+0xb0>)
 80007d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007d6:	6413      	str	r3, [r2, #64]	; 0x40
 80007d8:	4b1f      	ldr	r3, [pc, #124]	; (8000858 <SystemClock_Config+0xb0>)
 80007da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007e0:	607b      	str	r3, [r7, #4]
 80007e2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80007e4:	4b1d      	ldr	r3, [pc, #116]	; (800085c <SystemClock_Config+0xb4>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80007ec:	4a1b      	ldr	r2, [pc, #108]	; (800085c <SystemClock_Config+0xb4>)
 80007ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007f2:	6013      	str	r3, [r2, #0]
 80007f4:	4b19      	ldr	r3, [pc, #100]	; (800085c <SystemClock_Config+0xb4>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007fc:	603b      	str	r3, [r7, #0]
 80007fe:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000800:	2302      	movs	r3, #2
 8000802:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000804:	2301      	movs	r3, #1
 8000806:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000808:	2310      	movs	r3, #16
 800080a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800080c:	2300      	movs	r3, #0
 800080e:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000810:	f107 031c 	add.w	r3, r7, #28
 8000814:	4618      	mov	r0, r3
 8000816:	f000 ffd3 	bl	80017c0 <HAL_RCC_OscConfig>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8000820:	f000 f8f6 	bl	8000a10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000824:	230f      	movs	r3, #15
 8000826:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000828:	2300      	movs	r3, #0
 800082a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800082c:	2300      	movs	r3, #0
 800082e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000830:	2300      	movs	r3, #0
 8000832:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000834:	2300      	movs	r3, #0
 8000836:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000838:	f107 0308 	add.w	r3, r7, #8
 800083c:	2100      	movs	r1, #0
 800083e:	4618      	mov	r0, r3
 8000840:	f001 fa6c 	bl	8001d1c <HAL_RCC_ClockConfig>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800084a:	f000 f8e1 	bl	8000a10 <Error_Handler>
  }
}
 800084e:	bf00      	nop
 8000850:	3750      	adds	r7, #80	; 0x50
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	40023800 	.word	0x40023800
 800085c:	40007000 	.word	0x40007000

08000860 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000864:	4b1b      	ldr	r3, [pc, #108]	; (80008d4 <MX_SPI2_Init+0x74>)
 8000866:	4a1c      	ldr	r2, [pc, #112]	; (80008d8 <MX_SPI2_Init+0x78>)
 8000868:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800086a:	4b1a      	ldr	r3, [pc, #104]	; (80008d4 <MX_SPI2_Init+0x74>)
 800086c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000870:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000872:	4b18      	ldr	r3, [pc, #96]	; (80008d4 <MX_SPI2_Init+0x74>)
 8000874:	2200      	movs	r2, #0
 8000876:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8000878:	4b16      	ldr	r3, [pc, #88]	; (80008d4 <MX_SPI2_Init+0x74>)
 800087a:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 800087e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000880:	4b14      	ldr	r3, [pc, #80]	; (80008d4 <MX_SPI2_Init+0x74>)
 8000882:	2200      	movs	r2, #0
 8000884:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000886:	4b13      	ldr	r3, [pc, #76]	; (80008d4 <MX_SPI2_Init+0x74>)
 8000888:	2200      	movs	r2, #0
 800088a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800088c:	4b11      	ldr	r3, [pc, #68]	; (80008d4 <MX_SPI2_Init+0x74>)
 800088e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000892:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000894:	4b0f      	ldr	r3, [pc, #60]	; (80008d4 <MX_SPI2_Init+0x74>)
 8000896:	2200      	movs	r2, #0
 8000898:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800089a:	4b0e      	ldr	r3, [pc, #56]	; (80008d4 <MX_SPI2_Init+0x74>)
 800089c:	2200      	movs	r2, #0
 800089e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80008a0:	4b0c      	ldr	r3, [pc, #48]	; (80008d4 <MX_SPI2_Init+0x74>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008a6:	4b0b      	ldr	r3, [pc, #44]	; (80008d4 <MX_SPI2_Init+0x74>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80008ac:	4b09      	ldr	r3, [pc, #36]	; (80008d4 <MX_SPI2_Init+0x74>)
 80008ae:	2207      	movs	r2, #7
 80008b0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80008b2:	4b08      	ldr	r3, [pc, #32]	; (80008d4 <MX_SPI2_Init+0x74>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80008b8:	4b06      	ldr	r3, [pc, #24]	; (80008d4 <MX_SPI2_Init+0x74>)
 80008ba:	2208      	movs	r2, #8
 80008bc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80008be:	4805      	ldr	r0, [pc, #20]	; (80008d4 <MX_SPI2_Init+0x74>)
 80008c0:	f002 f83a 	bl	8002938 <HAL_SPI_Init>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80008ca:	f000 f8a1 	bl	8000a10 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80008ce:	bf00      	nop
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	200000a8 	.word	0x200000a8
 80008d8:	40003800 	.word	0x40003800

080008dc <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 80008e0:	4b19      	ldr	r3, [pc, #100]	; (8000948 <MX_SPI5_Init+0x6c>)
 80008e2:	4a1a      	ldr	r2, [pc, #104]	; (800094c <MX_SPI5_Init+0x70>)
 80008e4:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_SLAVE;
 80008e6:	4b18      	ldr	r3, [pc, #96]	; (8000948 <MX_SPI5_Init+0x6c>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80008ec:	4b16      	ldr	r3, [pc, #88]	; (8000948 <MX_SPI5_Init+0x6c>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_16BIT;
 80008f2:	4b15      	ldr	r3, [pc, #84]	; (8000948 <MX_SPI5_Init+0x6c>)
 80008f4:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 80008f8:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008fa:	4b13      	ldr	r3, [pc, #76]	; (8000948 <MX_SPI5_Init+0x6c>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000900:	4b11      	ldr	r3, [pc, #68]	; (8000948 <MX_SPI5_Init+0x6c>)
 8000902:	2200      	movs	r2, #0
 8000904:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8000906:	4b10      	ldr	r3, [pc, #64]	; (8000948 <MX_SPI5_Init+0x6c>)
 8000908:	f44f 7200 	mov.w	r2, #512	; 0x200
 800090c:	619a      	str	r2, [r3, #24]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800090e:	4b0e      	ldr	r3, [pc, #56]	; (8000948 <MX_SPI5_Init+0x6c>)
 8000910:	2200      	movs	r2, #0
 8000912:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8000914:	4b0c      	ldr	r3, [pc, #48]	; (8000948 <MX_SPI5_Init+0x6c>)
 8000916:	2200      	movs	r2, #0
 8000918:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800091a:	4b0b      	ldr	r3, [pc, #44]	; (8000948 <MX_SPI5_Init+0x6c>)
 800091c:	2200      	movs	r2, #0
 800091e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 7;
 8000920:	4b09      	ldr	r3, [pc, #36]	; (8000948 <MX_SPI5_Init+0x6c>)
 8000922:	2207      	movs	r2, #7
 8000924:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi5.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000926:	4b08      	ldr	r3, [pc, #32]	; (8000948 <MX_SPI5_Init+0x6c>)
 8000928:	2200      	movs	r2, #0
 800092a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800092c:	4b06      	ldr	r3, [pc, #24]	; (8000948 <MX_SPI5_Init+0x6c>)
 800092e:	2200      	movs	r2, #0
 8000930:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8000932:	4805      	ldr	r0, [pc, #20]	; (8000948 <MX_SPI5_Init+0x6c>)
 8000934:	f002 f800 	bl	8002938 <HAL_SPI_Init>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <MX_SPI5_Init+0x66>
  {
    Error_Handler();
 800093e:	f000 f867 	bl	8000a10 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8000942:	bf00      	nop
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	2000010c 	.word	0x2000010c
 800094c:	40015000 	.word	0x40015000

08000950 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000954:	4b14      	ldr	r3, [pc, #80]	; (80009a8 <MX_USART1_UART_Init+0x58>)
 8000956:	4a15      	ldr	r2, [pc, #84]	; (80009ac <MX_USART1_UART_Init+0x5c>)
 8000958:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800095a:	4b13      	ldr	r3, [pc, #76]	; (80009a8 <MX_USART1_UART_Init+0x58>)
 800095c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000960:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000962:	4b11      	ldr	r3, [pc, #68]	; (80009a8 <MX_USART1_UART_Init+0x58>)
 8000964:	2200      	movs	r2, #0
 8000966:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000968:	4b0f      	ldr	r3, [pc, #60]	; (80009a8 <MX_USART1_UART_Init+0x58>)
 800096a:	2200      	movs	r2, #0
 800096c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800096e:	4b0e      	ldr	r3, [pc, #56]	; (80009a8 <MX_USART1_UART_Init+0x58>)
 8000970:	2200      	movs	r2, #0
 8000972:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000974:	4b0c      	ldr	r3, [pc, #48]	; (80009a8 <MX_USART1_UART_Init+0x58>)
 8000976:	220c      	movs	r2, #12
 8000978:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800097a:	4b0b      	ldr	r3, [pc, #44]	; (80009a8 <MX_USART1_UART_Init+0x58>)
 800097c:	2200      	movs	r2, #0
 800097e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000980:	4b09      	ldr	r3, [pc, #36]	; (80009a8 <MX_USART1_UART_Init+0x58>)
 8000982:	2200      	movs	r2, #0
 8000984:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000986:	4b08      	ldr	r3, [pc, #32]	; (80009a8 <MX_USART1_UART_Init+0x58>)
 8000988:	2200      	movs	r2, #0
 800098a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800098c:	4b06      	ldr	r3, [pc, #24]	; (80009a8 <MX_USART1_UART_Init+0x58>)
 800098e:	2200      	movs	r2, #0
 8000990:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000992:	4805      	ldr	r0, [pc, #20]	; (80009a8 <MX_USART1_UART_Init+0x58>)
 8000994:	f002 ffdd 	bl	8003952 <HAL_UART_Init>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800099e:	f000 f837 	bl	8000a10 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80009a2:	bf00      	nop
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	20000170 	.word	0x20000170
 80009ac:	40011000 	.word	0x40011000

080009b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	b085      	sub	sp, #20
 80009b4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009b6:	4b15      	ldr	r3, [pc, #84]	; (8000a0c <MX_GPIO_Init+0x5c>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ba:	4a14      	ldr	r2, [pc, #80]	; (8000a0c <MX_GPIO_Init+0x5c>)
 80009bc:	f043 0302 	orr.w	r3, r3, #2
 80009c0:	6313      	str	r3, [r2, #48]	; 0x30
 80009c2:	4b12      	ldr	r3, [pc, #72]	; (8000a0c <MX_GPIO_Init+0x5c>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c6:	f003 0302 	and.w	r3, r3, #2
 80009ca:	60fb      	str	r3, [r7, #12]
 80009cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ce:	4b0f      	ldr	r3, [pc, #60]	; (8000a0c <MX_GPIO_Init+0x5c>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d2:	4a0e      	ldr	r2, [pc, #56]	; (8000a0c <MX_GPIO_Init+0x5c>)
 80009d4:	f043 0301 	orr.w	r3, r3, #1
 80009d8:	6313      	str	r3, [r2, #48]	; 0x30
 80009da:	4b0c      	ldr	r3, [pc, #48]	; (8000a0c <MX_GPIO_Init+0x5c>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009de:	f003 0301 	and.w	r3, r3, #1
 80009e2:	60bb      	str	r3, [r7, #8]
 80009e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009e6:	4b09      	ldr	r3, [pc, #36]	; (8000a0c <MX_GPIO_Init+0x5c>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ea:	4a08      	ldr	r2, [pc, #32]	; (8000a0c <MX_GPIO_Init+0x5c>)
 80009ec:	f043 0320 	orr.w	r3, r3, #32
 80009f0:	6313      	str	r3, [r2, #48]	; 0x30
 80009f2:	4b06      	ldr	r3, [pc, #24]	; (8000a0c <MX_GPIO_Init+0x5c>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f6:	f003 0320 	and.w	r3, r3, #32
 80009fa:	607b      	str	r3, [r7, #4]
 80009fc:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009fe:	bf00      	nop
 8000a00:	3714      	adds	r7, #20
 8000a02:	46bd      	mov	sp, r7
 8000a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop
 8000a0c:	40023800 	.word	0x40023800

08000a10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a14:	b672      	cpsid	i
}
 8000a16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a18:	e7fe      	b.n	8000a18 <Error_Handler+0x8>

08000a1a <my_spi_set_reg_adr>:
//	slave_spi = slave_spi__;
//}

// Function to set register adress
uint16_t my_spi_set_reg_adr(SPI_HandleTypeDef* hspi, uint8_t* adress)
{
 8000a1a:	b580      	push	{r7, lr}
 8000a1c:	b084      	sub	sp, #16
 8000a1e:	af00      	add	r7, sp, #0
 8000a20:	6078      	str	r0, [r7, #4]
 8000a22:	6039      	str	r1, [r7, #0]
	uint16_t error;
	error = HAL_SPI_Transmit_IT(hspi, (uint8_t*) &adress, 1);
 8000a24:	463b      	mov	r3, r7
 8000a26:	2201      	movs	r2, #1
 8000a28:	4619      	mov	r1, r3
 8000a2a:	6878      	ldr	r0, [r7, #4]
 8000a2c:	f002 fb72 	bl	8003114 <HAL_SPI_Transmit_IT>
 8000a30:	4603      	mov	r3, r0
 8000a32:	81fb      	strh	r3, [r7, #14]
	return error;
 8000a34:	89fb      	ldrh	r3, [r7, #14]
}
 8000a36:	4618      	mov	r0, r3
 8000a38:	3710      	adds	r7, #16
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}

08000a3e <my_spi_read_reg>:

// Function to get register data
uint16_t my_spi_read_reg(SPI_HandleTypeDef* hspi, uint16_t* data)
{
 8000a3e:	b580      	push	{r7, lr}
 8000a40:	b084      	sub	sp, #16
 8000a42:	af00      	add	r7, sp, #0
 8000a44:	6078      	str	r0, [r7, #4]
 8000a46:	6039      	str	r1, [r7, #0]
	uint16_t error;
	error = HAL_SPI_Receive(hspi, (uint8_t*) &data, 2, 5000);
 8000a48:	4639      	mov	r1, r7
 8000a4a:	f241 3388 	movw	r3, #5000	; 0x1388
 8000a4e:	2202      	movs	r2, #2
 8000a50:	6878      	ldr	r0, [r7, #4]
 8000a52:	f002 f81c 	bl	8002a8e <HAL_SPI_Receive>
 8000a56:	4603      	mov	r3, r0
 8000a58:	81fb      	strh	r3, [r7, #14]
	return error;
 8000a5a:	89fb      	ldrh	r3, [r7, #14]
}
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	3710      	adds	r7, #16
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}

08000a64 <my_spi_set_reg>:

// Function to set register data
uint16_t my_spi_set_reg(SPI_HandleTypeDef* hspi, uint16_t* data)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b084      	sub	sp, #16
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
 8000a6c:	6039      	str	r1, [r7, #0]
	uint16_t error;
	error = HAL_SPI_Transmit_IT(hspi, (uint8_t*) data, 2);
 8000a6e:	2202      	movs	r2, #2
 8000a70:	6839      	ldr	r1, [r7, #0]
 8000a72:	6878      	ldr	r0, [r7, #4]
 8000a74:	f002 fb4e 	bl	8003114 <HAL_SPI_Transmit_IT>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	81fb      	strh	r3, [r7, #14]
	return error;
 8000a7c:	89fb      	ldrh	r3, [r7, #14]
}
 8000a7e:	4618      	mov	r0, r3
 8000a80:	3710      	adds	r7, #16
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
	...

08000a88 <slave_resive_reg_adress>:


/*----------------FUNCTIONS FOR SPI COMUNICATION-----------------*/
// Resiving address of a register that master want to get/set
uint16_t slave_resive_reg_adress(SPI_HandleTypeDef *hspi)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b084      	sub	sp, #16
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
	uint16_t error;
	HAL_SPI_Receive(hspi, &adress, 1, 5000);
 8000a90:	f241 3388 	movw	r3, #5000	; 0x1388
 8000a94:	2201      	movs	r2, #1
 8000a96:	490b      	ldr	r1, [pc, #44]	; (8000ac4 <slave_resive_reg_adress+0x3c>)
 8000a98:	6878      	ldr	r0, [r7, #4]
 8000a9a:	f001 fff8 	bl	8002a8e <HAL_SPI_Receive>
	mod = adress & MY_SPI_WRITE_MOD;
 8000a9e:	4b09      	ldr	r3, [pc, #36]	; (8000ac4 <slave_resive_reg_adress+0x3c>)
 8000aa0:	781b      	ldrb	r3, [r3, #0]
 8000aa2:	f003 0301 	and.w	r3, r3, #1
 8000aa6:	b2da      	uxtb	r2, r3
 8000aa8:	4b07      	ldr	r3, [pc, #28]	; (8000ac8 <slave_resive_reg_adress+0x40>)
 8000aaa:	701a      	strb	r2, [r3, #0]
	adress = adress >> 1;
 8000aac:	4b05      	ldr	r3, [pc, #20]	; (8000ac4 <slave_resive_reg_adress+0x3c>)
 8000aae:	781b      	ldrb	r3, [r3, #0]
 8000ab0:	085b      	lsrs	r3, r3, #1
 8000ab2:	b2da      	uxtb	r2, r3
 8000ab4:	4b03      	ldr	r3, [pc, #12]	; (8000ac4 <slave_resive_reg_adress+0x3c>)
 8000ab6:	701a      	strb	r2, [r3, #0]
//	if(mod)
//		error = slave_transimt_reg(hspi);
//	else
//		error = slave_resive_reg_data(hspi);
	return error;
 8000ab8:	89fb      	ldrh	r3, [r7, #14]
}
 8000aba:	4618      	mov	r0, r3
 8000abc:	3710      	adds	r7, #16
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	200001fa 	.word	0x200001fa
 8000ac8:	20000020 	.word	0x20000020

08000acc <slave_transimt_reg>:

// Transmitting register to master
uint16_t slave_transimt_reg(SPI_HandleTypeDef *hspi)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b084      	sub	sp, #16
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
	uint16_t data = get_reg(adress);
 8000ad4:	4b09      	ldr	r3, [pc, #36]	; (8000afc <slave_transimt_reg+0x30>)
 8000ad6:	781b      	ldrb	r3, [r3, #0]
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f000 f84b 	bl	8000b74 <get_reg>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	81fb      	strh	r3, [r7, #14]
	return (uint16_t) HAL_SPI_Transmit_IT(hspi, (uint8_t*) &data, 2);
 8000ae2:	f107 030e 	add.w	r3, r7, #14
 8000ae6:	2202      	movs	r2, #2
 8000ae8:	4619      	mov	r1, r3
 8000aea:	6878      	ldr	r0, [r7, #4]
 8000aec:	f002 fb12 	bl	8003114 <HAL_SPI_Transmit_IT>
 8000af0:	4603      	mov	r3, r0
 8000af2:	b29b      	uxth	r3, r3
}
 8000af4:	4618      	mov	r0, r3
 8000af6:	3710      	adds	r7, #16
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	200001fa 	.word	0x200001fa

08000b00 <slave_resive_reg_data>:

// Resiving register value fregister master to set it to desired register
uint16_t slave_resive_reg_data(SPI_HandleTypeDef *hspi)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b084      	sub	sp, #16
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
	uint16_t data;
	HAL_StatusTypeDef err;
	err = HAL_SPI_Receive(hspi, (uint8_t*) &data, 2, 5000);
 8000b08:	f107 010c 	add.w	r1, r7, #12
 8000b0c:	f241 3388 	movw	r3, #5000	; 0x1388
 8000b10:	2202      	movs	r2, #2
 8000b12:	6878      	ldr	r0, [r7, #4]
 8000b14:	f001 ffbb 	bl	8002a8e <HAL_SPI_Receive>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	73fb      	strb	r3, [r7, #15]
	if (!err)
 8000b1c:	7bfb      	ldrb	r3, [r7, #15]
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d108      	bne.n	8000b34 <slave_resive_reg_data+0x34>
		return (uint16_t) set_reg__(adress, data);
 8000b22:	4b07      	ldr	r3, [pc, #28]	; (8000b40 <slave_resive_reg_data+0x40>)
 8000b24:	781b      	ldrb	r3, [r3, #0]
 8000b26:	89ba      	ldrh	r2, [r7, #12]
 8000b28:	4611      	mov	r1, r2
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f000 f83a 	bl	8000ba4 <set_reg__>
 8000b30:	4603      	mov	r3, r0
 8000b32:	e001      	b.n	8000b38 <slave_resive_reg_data+0x38>
	return (uint16_t) err;
 8000b34:	7bfb      	ldrb	r3, [r7, #15]
 8000b36:	b29b      	uxth	r3, r3
}
 8000b38:	4618      	mov	r0, r3
 8000b3a:	3710      	adds	r7, #16
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	200001fa 	.word	0x200001fa

08000b44 <slave_respond_to_master>:

uint16_t slave_respond_to_master(SPI_HandleTypeDef *hspi)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
	if (mod)
 8000b4c:	4b08      	ldr	r3, [pc, #32]	; (8000b70 <slave_respond_to_master+0x2c>)
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d004      	beq.n	8000b5e <slave_respond_to_master+0x1a>
		return slave_resive_reg_data(hspi);
 8000b54:	6878      	ldr	r0, [r7, #4]
 8000b56:	f7ff ffd3 	bl	8000b00 <slave_resive_reg_data>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	e003      	b.n	8000b66 <slave_respond_to_master+0x22>
	else
		return slave_transimt_reg(hspi);
 8000b5e:	6878      	ldr	r0, [r7, #4]
 8000b60:	f7ff ffb4 	bl	8000acc <slave_transimt_reg>
 8000b64:	4603      	mov	r3, r0
}
 8000b66:	4618      	mov	r0, r3
 8000b68:	3708      	adds	r7, #8
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	20000020 	.word	0x20000020

08000b74 <get_reg>:
/*----------------------------------------------------------------*/


/*--------------Function helpers----------------*/
static uint16_t get_reg(uint8_t adress)
{
 8000b74:	b480      	push	{r7}
 8000b76:	b083      	sub	sp, #12
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	71fb      	strb	r3, [r7, #7]
	if (adress >= 0 && adress <= 7)
 8000b7e:	79fb      	ldrb	r3, [r7, #7]
 8000b80:	2b07      	cmp	r3, #7
 8000b82:	d804      	bhi.n	8000b8e <get_reg+0x1a>
		return regs[adress];
 8000b84:	79fb      	ldrb	r3, [r7, #7]
 8000b86:	4a06      	ldr	r2, [pc, #24]	; (8000ba0 <get_reg+0x2c>)
 8000b88:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b8c:	e001      	b.n	8000b92 <get_reg+0x1e>
	return (uint16_t) WRONG_ADRESS;
 8000b8e:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8000b92:	4618      	mov	r0, r3
 8000b94:	370c      	adds	r7, #12
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop
 8000ba0:	20000000 	.word	0x20000000

08000ba4 <set_reg__>:

static uint16_t set_reg__(uint8_t adress, uint16_t data)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	b085      	sub	sp, #20
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	4603      	mov	r3, r0
 8000bac:	460a      	mov	r2, r1
 8000bae:	71fb      	strb	r3, [r7, #7]
 8000bb0:	4613      	mov	r3, r2
 8000bb2:	80bb      	strh	r3, [r7, #4]
	if (data & (~masks[adress])) {
 8000bb4:	88ba      	ldrh	r2, [r7, #4]
 8000bb6:	79fb      	ldrb	r3, [r7, #7]
 8000bb8:	490b      	ldr	r1, [pc, #44]	; (8000be8 <set_reg__+0x44>)
 8000bba:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000bbe:	43db      	mvns	r3, r3
 8000bc0:	4013      	ands	r3, r2
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d004      	beq.n	8000bd0 <set_reg__+0x2c>
		uint16_t err = (uint16_t) WRONG_VAL;
 8000bc6:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8000bca:	81fb      	strh	r3, [r7, #14]
		return err;
 8000bcc:	89fb      	ldrh	r3, [r7, #14]
 8000bce:	e005      	b.n	8000bdc <set_reg__+0x38>
	}
	regs[adress] = data;
 8000bd0:	79fb      	ldrb	r3, [r7, #7]
 8000bd2:	4906      	ldr	r1, [pc, #24]	; (8000bec <set_reg__+0x48>)
 8000bd4:	88ba      	ldrh	r2, [r7, #4]
 8000bd6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	return 0;
 8000bda:	2300      	movs	r3, #0
}
 8000bdc:	4618      	mov	r0, r3
 8000bde:	3714      	adds	r7, #20
 8000be0:	46bd      	mov	sp, r7
 8000be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be6:	4770      	bx	lr
 8000be8:	20000010 	.word	0x20000010
 8000bec:	20000000 	.word	0x20000000

08000bf0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b083      	sub	sp, #12
 8000bf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000bf6:	4b0f      	ldr	r3, [pc, #60]	; (8000c34 <HAL_MspInit+0x44>)
 8000bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bfa:	4a0e      	ldr	r2, [pc, #56]	; (8000c34 <HAL_MspInit+0x44>)
 8000bfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c00:	6413      	str	r3, [r2, #64]	; 0x40
 8000c02:	4b0c      	ldr	r3, [pc, #48]	; (8000c34 <HAL_MspInit+0x44>)
 8000c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c0a:	607b      	str	r3, [r7, #4]
 8000c0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c0e:	4b09      	ldr	r3, [pc, #36]	; (8000c34 <HAL_MspInit+0x44>)
 8000c10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c12:	4a08      	ldr	r2, [pc, #32]	; (8000c34 <HAL_MspInit+0x44>)
 8000c14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c18:	6453      	str	r3, [r2, #68]	; 0x44
 8000c1a:	4b06      	ldr	r3, [pc, #24]	; (8000c34 <HAL_MspInit+0x44>)
 8000c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c22:	603b      	str	r3, [r7, #0]
 8000c24:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c26:	bf00      	nop
 8000c28:	370c      	adds	r7, #12
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr
 8000c32:	bf00      	nop
 8000c34:	40023800 	.word	0x40023800

08000c38 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b08c      	sub	sp, #48	; 0x30
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c40:	f107 031c 	add.w	r3, r7, #28
 8000c44:	2200      	movs	r2, #0
 8000c46:	601a      	str	r2, [r3, #0]
 8000c48:	605a      	str	r2, [r3, #4]
 8000c4a:	609a      	str	r2, [r3, #8]
 8000c4c:	60da      	str	r2, [r3, #12]
 8000c4e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	4a45      	ldr	r2, [pc, #276]	; (8000d6c <HAL_SPI_MspInit+0x134>)
 8000c56:	4293      	cmp	r3, r2
 8000c58:	d14e      	bne.n	8000cf8 <HAL_SPI_MspInit+0xc0>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000c5a:	4b45      	ldr	r3, [pc, #276]	; (8000d70 <HAL_SPI_MspInit+0x138>)
 8000c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c5e:	4a44      	ldr	r2, [pc, #272]	; (8000d70 <HAL_SPI_MspInit+0x138>)
 8000c60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c64:	6413      	str	r3, [r2, #64]	; 0x40
 8000c66:	4b42      	ldr	r3, [pc, #264]	; (8000d70 <HAL_SPI_MspInit+0x138>)
 8000c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c6e:	61bb      	str	r3, [r7, #24]
 8000c70:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c72:	4b3f      	ldr	r3, [pc, #252]	; (8000d70 <HAL_SPI_MspInit+0x138>)
 8000c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c76:	4a3e      	ldr	r2, [pc, #248]	; (8000d70 <HAL_SPI_MspInit+0x138>)
 8000c78:	f043 0301 	orr.w	r3, r3, #1
 8000c7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c7e:	4b3c      	ldr	r3, [pc, #240]	; (8000d70 <HAL_SPI_MspInit+0x138>)
 8000c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c82:	f003 0301 	and.w	r3, r3, #1
 8000c86:	617b      	str	r3, [r7, #20]
 8000c88:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c8a:	4b39      	ldr	r3, [pc, #228]	; (8000d70 <HAL_SPI_MspInit+0x138>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8e:	4a38      	ldr	r2, [pc, #224]	; (8000d70 <HAL_SPI_MspInit+0x138>)
 8000c90:	f043 0302 	orr.w	r3, r3, #2
 8000c94:	6313      	str	r3, [r2, #48]	; 0x30
 8000c96:	4b36      	ldr	r3, [pc, #216]	; (8000d70 <HAL_SPI_MspInit+0x138>)
 8000c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9a:	f003 0302 	and.w	r3, r3, #2
 8000c9e:	613b      	str	r3, [r7, #16]
 8000ca0:	693b      	ldr	r3, [r7, #16]
    /**SPI2 GPIO Configuration
    PA12     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000ca2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ca6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca8:	2302      	movs	r3, #2
 8000caa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cac:	2300      	movs	r3, #0
 8000cae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cb0:	2303      	movs	r3, #3
 8000cb2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000cb4:	2305      	movs	r3, #5
 8000cb6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cb8:	f107 031c 	add.w	r3, r7, #28
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	482d      	ldr	r0, [pc, #180]	; (8000d74 <HAL_SPI_MspInit+0x13c>)
 8000cc0:	f000 fbd2 	bl	8001468 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000cc4:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000cc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cca:	2302      	movs	r3, #2
 8000ccc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cd2:	2303      	movs	r3, #3
 8000cd4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000cd6:	2305      	movs	r3, #5
 8000cd8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cda:	f107 031c 	add.w	r3, r7, #28
 8000cde:	4619      	mov	r1, r3
 8000ce0:	4825      	ldr	r0, [pc, #148]	; (8000d78 <HAL_SPI_MspInit+0x140>)
 8000ce2:	f000 fbc1 	bl	8001468 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	2100      	movs	r1, #0
 8000cea:	2024      	movs	r0, #36	; 0x24
 8000cec:	f000 faf3 	bl	80012d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8000cf0:	2024      	movs	r0, #36	; 0x24
 8000cf2:	f000 fb0c 	bl	800130e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8000cf6:	e035      	b.n	8000d64 <HAL_SPI_MspInit+0x12c>
  else if(hspi->Instance==SPI5)
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4a1f      	ldr	r2, [pc, #124]	; (8000d7c <HAL_SPI_MspInit+0x144>)
 8000cfe:	4293      	cmp	r3, r2
 8000d00:	d130      	bne.n	8000d64 <HAL_SPI_MspInit+0x12c>
    __HAL_RCC_SPI5_CLK_ENABLE();
 8000d02:	4b1b      	ldr	r3, [pc, #108]	; (8000d70 <HAL_SPI_MspInit+0x138>)
 8000d04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d06:	4a1a      	ldr	r2, [pc, #104]	; (8000d70 <HAL_SPI_MspInit+0x138>)
 8000d08:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000d0c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d0e:	4b18      	ldr	r3, [pc, #96]	; (8000d70 <HAL_SPI_MspInit+0x138>)
 8000d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d16:	60fb      	str	r3, [r7, #12]
 8000d18:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d1a:	4b15      	ldr	r3, [pc, #84]	; (8000d70 <HAL_SPI_MspInit+0x138>)
 8000d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1e:	4a14      	ldr	r2, [pc, #80]	; (8000d70 <HAL_SPI_MspInit+0x138>)
 8000d20:	f043 0320 	orr.w	r3, r3, #32
 8000d24:	6313      	str	r3, [r2, #48]	; 0x30
 8000d26:	4b12      	ldr	r3, [pc, #72]	; (8000d70 <HAL_SPI_MspInit+0x138>)
 8000d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2a:	f003 0320 	and.w	r3, r3, #32
 8000d2e:	60bb      	str	r3, [r7, #8]
 8000d30:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_8;
 8000d32:	f44f 7360 	mov.w	r3, #896	; 0x380
 8000d36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d38:	2302      	movs	r3, #2
 8000d3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d40:	2303      	movs	r3, #3
 8000d42:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8000d44:	2305      	movs	r3, #5
 8000d46:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000d48:	f107 031c 	add.w	r3, r7, #28
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	480c      	ldr	r0, [pc, #48]	; (8000d80 <HAL_SPI_MspInit+0x148>)
 8000d50:	f000 fb8a 	bl	8001468 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI5_IRQn, 0, 0);
 8000d54:	2200      	movs	r2, #0
 8000d56:	2100      	movs	r1, #0
 8000d58:	2055      	movs	r0, #85	; 0x55
 8000d5a:	f000 fabc 	bl	80012d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI5_IRQn);
 8000d5e:	2055      	movs	r0, #85	; 0x55
 8000d60:	f000 fad5 	bl	800130e <HAL_NVIC_EnableIRQ>
}
 8000d64:	bf00      	nop
 8000d66:	3730      	adds	r7, #48	; 0x30
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	40003800 	.word	0x40003800
 8000d70:	40023800 	.word	0x40023800
 8000d74:	40020000 	.word	0x40020000
 8000d78:	40020400 	.word	0x40020400
 8000d7c:	40015000 	.word	0x40015000
 8000d80:	40021400 	.word	0x40021400

08000d84 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b0ae      	sub	sp, #184	; 0xb8
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d8c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000d90:	2200      	movs	r2, #0
 8000d92:	601a      	str	r2, [r3, #0]
 8000d94:	605a      	str	r2, [r3, #4]
 8000d96:	609a      	str	r2, [r3, #8]
 8000d98:	60da      	str	r2, [r3, #12]
 8000d9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d9c:	f107 0314 	add.w	r3, r7, #20
 8000da0:	2290      	movs	r2, #144	; 0x90
 8000da2:	2100      	movs	r1, #0
 8000da4:	4618      	mov	r0, r3
 8000da6:	f004 f87d 	bl	8004ea4 <memset>
  if(huart->Instance==USART1)
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	4a25      	ldr	r2, [pc, #148]	; (8000e44 <HAL_UART_MspInit+0xc0>)
 8000db0:	4293      	cmp	r3, r2
 8000db2:	d142      	bne.n	8000e3a <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000db4:	2340      	movs	r3, #64	; 0x40
 8000db6:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000db8:	2300      	movs	r3, #0
 8000dba:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000dbc:	f107 0314 	add.w	r3, r7, #20
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f001 f991 	bl	80020e8 <HAL_RCCEx_PeriphCLKConfig>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d001      	beq.n	8000dd0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000dcc:	f7ff fe20 	bl	8000a10 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000dd0:	4b1d      	ldr	r3, [pc, #116]	; (8000e48 <HAL_UART_MspInit+0xc4>)
 8000dd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dd4:	4a1c      	ldr	r2, [pc, #112]	; (8000e48 <HAL_UART_MspInit+0xc4>)
 8000dd6:	f043 0310 	orr.w	r3, r3, #16
 8000dda:	6453      	str	r3, [r2, #68]	; 0x44
 8000ddc:	4b1a      	ldr	r3, [pc, #104]	; (8000e48 <HAL_UART_MspInit+0xc4>)
 8000dde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000de0:	f003 0310 	and.w	r3, r3, #16
 8000de4:	613b      	str	r3, [r7, #16]
 8000de6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000de8:	4b17      	ldr	r3, [pc, #92]	; (8000e48 <HAL_UART_MspInit+0xc4>)
 8000dea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dec:	4a16      	ldr	r2, [pc, #88]	; (8000e48 <HAL_UART_MspInit+0xc4>)
 8000dee:	f043 0302 	orr.w	r3, r3, #2
 8000df2:	6313      	str	r3, [r2, #48]	; 0x30
 8000df4:	4b14      	ldr	r3, [pc, #80]	; (8000e48 <HAL_UART_MspInit+0xc4>)
 8000df6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df8:	f003 0302 	and.w	r3, r3, #2
 8000dfc:	60fb      	str	r3, [r7, #12]
 8000dfe:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8000e00:	23c0      	movs	r3, #192	; 0xc0
 8000e02:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e06:	2302      	movs	r3, #2
 8000e08:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e12:	2303      	movs	r3, #3
 8000e14:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000e18:	2307      	movs	r3, #7
 8000e1a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e1e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000e22:	4619      	mov	r1, r3
 8000e24:	4809      	ldr	r0, [pc, #36]	; (8000e4c <HAL_UART_MspInit+0xc8>)
 8000e26:	f000 fb1f 	bl	8001468 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	2100      	movs	r1, #0
 8000e2e:	2025      	movs	r0, #37	; 0x25
 8000e30:	f000 fa51 	bl	80012d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000e34:	2025      	movs	r0, #37	; 0x25
 8000e36:	f000 fa6a 	bl	800130e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000e3a:	bf00      	nop
 8000e3c:	37b8      	adds	r7, #184	; 0xb8
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	40011000 	.word	0x40011000
 8000e48:	40023800 	.word	0x40023800
 8000e4c:	40020400 	.word	0x40020400

08000e50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e54:	e7fe      	b.n	8000e54 <NMI_Handler+0x4>

08000e56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e56:	b480      	push	{r7}
 8000e58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e5a:	e7fe      	b.n	8000e5a <HardFault_Handler+0x4>

08000e5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e60:	e7fe      	b.n	8000e60 <MemManage_Handler+0x4>

08000e62 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e62:	b480      	push	{r7}
 8000e64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e66:	e7fe      	b.n	8000e66 <BusFault_Handler+0x4>

08000e68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e6c:	e7fe      	b.n	8000e6c <UsageFault_Handler+0x4>

08000e6e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e6e:	b480      	push	{r7}
 8000e70:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e72:	bf00      	nop
 8000e74:	46bd      	mov	sp, r7
 8000e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7a:	4770      	bx	lr

08000e7c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e80:	bf00      	nop
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr

08000e8a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e8a:	b480      	push	{r7}
 8000e8c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e8e:	bf00      	nop
 8000e90:	46bd      	mov	sp, r7
 8000e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e96:	4770      	bx	lr

08000e98 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e9c:	f000 f920 	bl	80010e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ea0:	bf00      	nop
 8000ea2:	bd80      	pop	{r7, pc}

08000ea4 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8000ea8:	4802      	ldr	r0, [pc, #8]	; (8000eb4 <SPI2_IRQHandler+0x10>)
 8000eaa:	f002 f9c1 	bl	8003230 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8000eae:	bf00      	nop
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	200000a8 	.word	0x200000a8

08000eb8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000ebc:	4802      	ldr	r0, [pc, #8]	; (8000ec8 <USART1_IRQHandler+0x10>)
 8000ebe:	f002 fe19 	bl	8003af4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000ec2:	bf00      	nop
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	20000170 	.word	0x20000170

08000ecc <SPI5_IRQHandler>:

/**
  * @brief This function handles SPI5 global interrupt.
  */
void SPI5_IRQHandler(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI5_IRQn 0 */

  /* USER CODE END SPI5_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi5);
 8000ed0:	4802      	ldr	r0, [pc, #8]	; (8000edc <SPI5_IRQHandler+0x10>)
 8000ed2:	f002 f9ad 	bl	8003230 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI5_IRQn 1 */

  /* USER CODE END SPI5_IRQn 1 */
}
 8000ed6:	bf00      	nop
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	2000010c 	.word	0x2000010c

08000ee0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b086      	sub	sp, #24
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	60f8      	str	r0, [r7, #12]
 8000ee8:	60b9      	str	r1, [r7, #8]
 8000eea:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000eec:	2300      	movs	r3, #0
 8000eee:	617b      	str	r3, [r7, #20]
 8000ef0:	e00a      	b.n	8000f08 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000ef2:	f3af 8000 	nop.w
 8000ef6:	4601      	mov	r1, r0
 8000ef8:	68bb      	ldr	r3, [r7, #8]
 8000efa:	1c5a      	adds	r2, r3, #1
 8000efc:	60ba      	str	r2, [r7, #8]
 8000efe:	b2ca      	uxtb	r2, r1
 8000f00:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f02:	697b      	ldr	r3, [r7, #20]
 8000f04:	3301      	adds	r3, #1
 8000f06:	617b      	str	r3, [r7, #20]
 8000f08:	697a      	ldr	r2, [r7, #20]
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	429a      	cmp	r2, r3
 8000f0e:	dbf0      	blt.n	8000ef2 <_read+0x12>
  }

  return len;
 8000f10:	687b      	ldr	r3, [r7, #4]
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	3718      	adds	r7, #24
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}

08000f1a <_close>:
  }
  return len;
}

int _close(int file)
{
 8000f1a:	b480      	push	{r7}
 8000f1c:	b083      	sub	sp, #12
 8000f1e:	af00      	add	r7, sp, #0
 8000f20:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000f22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	370c      	adds	r7, #12
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr

08000f32 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f32:	b480      	push	{r7}
 8000f34:	b083      	sub	sp, #12
 8000f36:	af00      	add	r7, sp, #0
 8000f38:	6078      	str	r0, [r7, #4]
 8000f3a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f42:	605a      	str	r2, [r3, #4]
  return 0;
 8000f44:	2300      	movs	r3, #0
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	370c      	adds	r7, #12
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr

08000f52 <_isatty>:

int _isatty(int file)
{
 8000f52:	b480      	push	{r7}
 8000f54:	b083      	sub	sp, #12
 8000f56:	af00      	add	r7, sp, #0
 8000f58:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000f5a:	2301      	movs	r3, #1
}
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	370c      	adds	r7, #12
 8000f60:	46bd      	mov	sp, r7
 8000f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f66:	4770      	bx	lr

08000f68 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b085      	sub	sp, #20
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	60f8      	str	r0, [r7, #12]
 8000f70:	60b9      	str	r1, [r7, #8]
 8000f72:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000f74:	2300      	movs	r3, #0
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	3714      	adds	r7, #20
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr
	...

08000f84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b086      	sub	sp, #24
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f8c:	4a14      	ldr	r2, [pc, #80]	; (8000fe0 <_sbrk+0x5c>)
 8000f8e:	4b15      	ldr	r3, [pc, #84]	; (8000fe4 <_sbrk+0x60>)
 8000f90:	1ad3      	subs	r3, r2, r3
 8000f92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f98:	4b13      	ldr	r3, [pc, #76]	; (8000fe8 <_sbrk+0x64>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d102      	bne.n	8000fa6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fa0:	4b11      	ldr	r3, [pc, #68]	; (8000fe8 <_sbrk+0x64>)
 8000fa2:	4a12      	ldr	r2, [pc, #72]	; (8000fec <_sbrk+0x68>)
 8000fa4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fa6:	4b10      	ldr	r3, [pc, #64]	; (8000fe8 <_sbrk+0x64>)
 8000fa8:	681a      	ldr	r2, [r3, #0]
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	4413      	add	r3, r2
 8000fae:	693a      	ldr	r2, [r7, #16]
 8000fb0:	429a      	cmp	r2, r3
 8000fb2:	d207      	bcs.n	8000fc4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fb4:	f003 ffc4 	bl	8004f40 <__errno>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	220c      	movs	r2, #12
 8000fbc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fbe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000fc2:	e009      	b.n	8000fd8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fc4:	4b08      	ldr	r3, [pc, #32]	; (8000fe8 <_sbrk+0x64>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fca:	4b07      	ldr	r3, [pc, #28]	; (8000fe8 <_sbrk+0x64>)
 8000fcc:	681a      	ldr	r2, [r3, #0]
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	4413      	add	r3, r2
 8000fd2:	4a05      	ldr	r2, [pc, #20]	; (8000fe8 <_sbrk+0x64>)
 8000fd4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fd6:	68fb      	ldr	r3, [r7, #12]
}
 8000fd8:	4618      	mov	r0, r3
 8000fda:	3718      	adds	r7, #24
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	20080000 	.word	0x20080000
 8000fe4:	00000400 	.word	0x00000400
 8000fe8:	200001fc 	.word	0x200001fc
 8000fec:	20000350 	.word	0x20000350

08000ff0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ff4:	4b06      	ldr	r3, [pc, #24]	; (8001010 <SystemInit+0x20>)
 8000ff6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ffa:	4a05      	ldr	r2, [pc, #20]	; (8001010 <SystemInit+0x20>)
 8000ffc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001000:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001004:	bf00      	nop
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop
 8001010:	e000ed00 	.word	0xe000ed00

08001014 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001014:	f8df d034 	ldr.w	sp, [pc, #52]	; 800104c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001018:	480d      	ldr	r0, [pc, #52]	; (8001050 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800101a:	490e      	ldr	r1, [pc, #56]	; (8001054 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800101c:	4a0e      	ldr	r2, [pc, #56]	; (8001058 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800101e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001020:	e002      	b.n	8001028 <LoopCopyDataInit>

08001022 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001022:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001024:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001026:	3304      	adds	r3, #4

08001028 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001028:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800102a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800102c:	d3f9      	bcc.n	8001022 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800102e:	4a0b      	ldr	r2, [pc, #44]	; (800105c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001030:	4c0b      	ldr	r4, [pc, #44]	; (8001060 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001032:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001034:	e001      	b.n	800103a <LoopFillZerobss>

08001036 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001036:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001038:	3204      	adds	r2, #4

0800103a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800103a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800103c:	d3fb      	bcc.n	8001036 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800103e:	f7ff ffd7 	bl	8000ff0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001042:	f003 ff83 	bl	8004f4c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001046:	f7ff fb25 	bl	8000694 <main>
  bx  lr    
 800104a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800104c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001050:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001054:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8001058:	08005ab8 	.word	0x08005ab8
  ldr r2, =_sbss
 800105c:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 8001060:	20000350 	.word	0x20000350

08001064 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001064:	e7fe      	b.n	8001064 <ADC_IRQHandler>

08001066 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001066:	b580      	push	{r7, lr}
 8001068:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800106a:	2003      	movs	r0, #3
 800106c:	f000 f928 	bl	80012c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001070:	200f      	movs	r0, #15
 8001072:	f000 f805 	bl	8001080 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001076:	f7ff fdbb 	bl	8000bf0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800107a:	2300      	movs	r3, #0
}
 800107c:	4618      	mov	r0, r3
 800107e:	bd80      	pop	{r7, pc}

08001080 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001088:	4b12      	ldr	r3, [pc, #72]	; (80010d4 <HAL_InitTick+0x54>)
 800108a:	681a      	ldr	r2, [r3, #0]
 800108c:	4b12      	ldr	r3, [pc, #72]	; (80010d8 <HAL_InitTick+0x58>)
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	4619      	mov	r1, r3
 8001092:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001096:	fbb3 f3f1 	udiv	r3, r3, r1
 800109a:	fbb2 f3f3 	udiv	r3, r2, r3
 800109e:	4618      	mov	r0, r3
 80010a0:	f000 f943 	bl	800132a <HAL_SYSTICK_Config>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d001      	beq.n	80010ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010aa:	2301      	movs	r3, #1
 80010ac:	e00e      	b.n	80010cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	2b0f      	cmp	r3, #15
 80010b2:	d80a      	bhi.n	80010ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010b4:	2200      	movs	r2, #0
 80010b6:	6879      	ldr	r1, [r7, #4]
 80010b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80010bc:	f000 f90b 	bl	80012d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010c0:	4a06      	ldr	r2, [pc, #24]	; (80010dc <HAL_InitTick+0x5c>)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010c6:	2300      	movs	r3, #0
 80010c8:	e000      	b.n	80010cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010ca:	2301      	movs	r3, #1
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	3708      	adds	r7, #8
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	20000024 	.word	0x20000024
 80010d8:	2000002c 	.word	0x2000002c
 80010dc:	20000028 	.word	0x20000028

080010e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010e4:	4b06      	ldr	r3, [pc, #24]	; (8001100 <HAL_IncTick+0x20>)
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	461a      	mov	r2, r3
 80010ea:	4b06      	ldr	r3, [pc, #24]	; (8001104 <HAL_IncTick+0x24>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	4413      	add	r3, r2
 80010f0:	4a04      	ldr	r2, [pc, #16]	; (8001104 <HAL_IncTick+0x24>)
 80010f2:	6013      	str	r3, [r2, #0]
}
 80010f4:	bf00      	nop
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr
 80010fe:	bf00      	nop
 8001100:	2000002c 	.word	0x2000002c
 8001104:	20000200 	.word	0x20000200

08001108 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  return uwTick;
 800110c:	4b03      	ldr	r3, [pc, #12]	; (800111c <HAL_GetTick+0x14>)
 800110e:	681b      	ldr	r3, [r3, #0]
}
 8001110:	4618      	mov	r0, r3
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr
 800111a:	bf00      	nop
 800111c:	20000200 	.word	0x20000200

08001120 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001120:	b480      	push	{r7}
 8001122:	b085      	sub	sp, #20
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	f003 0307 	and.w	r3, r3, #7
 800112e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001130:	4b0b      	ldr	r3, [pc, #44]	; (8001160 <__NVIC_SetPriorityGrouping+0x40>)
 8001132:	68db      	ldr	r3, [r3, #12]
 8001134:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001136:	68ba      	ldr	r2, [r7, #8]
 8001138:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800113c:	4013      	ands	r3, r2
 800113e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001144:	68bb      	ldr	r3, [r7, #8]
 8001146:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001148:	4b06      	ldr	r3, [pc, #24]	; (8001164 <__NVIC_SetPriorityGrouping+0x44>)
 800114a:	4313      	orrs	r3, r2
 800114c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800114e:	4a04      	ldr	r2, [pc, #16]	; (8001160 <__NVIC_SetPriorityGrouping+0x40>)
 8001150:	68bb      	ldr	r3, [r7, #8]
 8001152:	60d3      	str	r3, [r2, #12]
}
 8001154:	bf00      	nop
 8001156:	3714      	adds	r7, #20
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr
 8001160:	e000ed00 	.word	0xe000ed00
 8001164:	05fa0000 	.word	0x05fa0000

08001168 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800116c:	4b04      	ldr	r3, [pc, #16]	; (8001180 <__NVIC_GetPriorityGrouping+0x18>)
 800116e:	68db      	ldr	r3, [r3, #12]
 8001170:	0a1b      	lsrs	r3, r3, #8
 8001172:	f003 0307 	and.w	r3, r3, #7
}
 8001176:	4618      	mov	r0, r3
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr
 8001180:	e000ed00 	.word	0xe000ed00

08001184 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001184:	b480      	push	{r7}
 8001186:	b083      	sub	sp, #12
 8001188:	af00      	add	r7, sp, #0
 800118a:	4603      	mov	r3, r0
 800118c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800118e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001192:	2b00      	cmp	r3, #0
 8001194:	db0b      	blt.n	80011ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001196:	79fb      	ldrb	r3, [r7, #7]
 8001198:	f003 021f 	and.w	r2, r3, #31
 800119c:	4907      	ldr	r1, [pc, #28]	; (80011bc <__NVIC_EnableIRQ+0x38>)
 800119e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011a2:	095b      	lsrs	r3, r3, #5
 80011a4:	2001      	movs	r0, #1
 80011a6:	fa00 f202 	lsl.w	r2, r0, r2
 80011aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011ae:	bf00      	nop
 80011b0:	370c      	adds	r7, #12
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr
 80011ba:	bf00      	nop
 80011bc:	e000e100 	.word	0xe000e100

080011c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b083      	sub	sp, #12
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	4603      	mov	r3, r0
 80011c8:	6039      	str	r1, [r7, #0]
 80011ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	db0a      	blt.n	80011ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	b2da      	uxtb	r2, r3
 80011d8:	490c      	ldr	r1, [pc, #48]	; (800120c <__NVIC_SetPriority+0x4c>)
 80011da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011de:	0112      	lsls	r2, r2, #4
 80011e0:	b2d2      	uxtb	r2, r2
 80011e2:	440b      	add	r3, r1
 80011e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011e8:	e00a      	b.n	8001200 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	b2da      	uxtb	r2, r3
 80011ee:	4908      	ldr	r1, [pc, #32]	; (8001210 <__NVIC_SetPriority+0x50>)
 80011f0:	79fb      	ldrb	r3, [r7, #7]
 80011f2:	f003 030f 	and.w	r3, r3, #15
 80011f6:	3b04      	subs	r3, #4
 80011f8:	0112      	lsls	r2, r2, #4
 80011fa:	b2d2      	uxtb	r2, r2
 80011fc:	440b      	add	r3, r1
 80011fe:	761a      	strb	r2, [r3, #24]
}
 8001200:	bf00      	nop
 8001202:	370c      	adds	r7, #12
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr
 800120c:	e000e100 	.word	0xe000e100
 8001210:	e000ed00 	.word	0xe000ed00

08001214 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001214:	b480      	push	{r7}
 8001216:	b089      	sub	sp, #36	; 0x24
 8001218:	af00      	add	r7, sp, #0
 800121a:	60f8      	str	r0, [r7, #12]
 800121c:	60b9      	str	r1, [r7, #8]
 800121e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	f003 0307 	and.w	r3, r3, #7
 8001226:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001228:	69fb      	ldr	r3, [r7, #28]
 800122a:	f1c3 0307 	rsb	r3, r3, #7
 800122e:	2b04      	cmp	r3, #4
 8001230:	bf28      	it	cs
 8001232:	2304      	movcs	r3, #4
 8001234:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001236:	69fb      	ldr	r3, [r7, #28]
 8001238:	3304      	adds	r3, #4
 800123a:	2b06      	cmp	r3, #6
 800123c:	d902      	bls.n	8001244 <NVIC_EncodePriority+0x30>
 800123e:	69fb      	ldr	r3, [r7, #28]
 8001240:	3b03      	subs	r3, #3
 8001242:	e000      	b.n	8001246 <NVIC_EncodePriority+0x32>
 8001244:	2300      	movs	r3, #0
 8001246:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001248:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800124c:	69bb      	ldr	r3, [r7, #24]
 800124e:	fa02 f303 	lsl.w	r3, r2, r3
 8001252:	43da      	mvns	r2, r3
 8001254:	68bb      	ldr	r3, [r7, #8]
 8001256:	401a      	ands	r2, r3
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800125c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	fa01 f303 	lsl.w	r3, r1, r3
 8001266:	43d9      	mvns	r1, r3
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800126c:	4313      	orrs	r3, r2
         );
}
 800126e:	4618      	mov	r0, r3
 8001270:	3724      	adds	r7, #36	; 0x24
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr
	...

0800127c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	3b01      	subs	r3, #1
 8001288:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800128c:	d301      	bcc.n	8001292 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800128e:	2301      	movs	r3, #1
 8001290:	e00f      	b.n	80012b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001292:	4a0a      	ldr	r2, [pc, #40]	; (80012bc <SysTick_Config+0x40>)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	3b01      	subs	r3, #1
 8001298:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800129a:	210f      	movs	r1, #15
 800129c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80012a0:	f7ff ff8e 	bl	80011c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012a4:	4b05      	ldr	r3, [pc, #20]	; (80012bc <SysTick_Config+0x40>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012aa:	4b04      	ldr	r3, [pc, #16]	; (80012bc <SysTick_Config+0x40>)
 80012ac:	2207      	movs	r2, #7
 80012ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012b0:	2300      	movs	r3, #0
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	3708      	adds	r7, #8
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	e000e010 	.word	0xe000e010

080012c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012c8:	6878      	ldr	r0, [r7, #4]
 80012ca:	f7ff ff29 	bl	8001120 <__NVIC_SetPriorityGrouping>
}
 80012ce:	bf00      	nop
 80012d0:	3708      	adds	r7, #8
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}

080012d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012d6:	b580      	push	{r7, lr}
 80012d8:	b086      	sub	sp, #24
 80012da:	af00      	add	r7, sp, #0
 80012dc:	4603      	mov	r3, r0
 80012de:	60b9      	str	r1, [r7, #8]
 80012e0:	607a      	str	r2, [r7, #4]
 80012e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80012e4:	2300      	movs	r3, #0
 80012e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012e8:	f7ff ff3e 	bl	8001168 <__NVIC_GetPriorityGrouping>
 80012ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012ee:	687a      	ldr	r2, [r7, #4]
 80012f0:	68b9      	ldr	r1, [r7, #8]
 80012f2:	6978      	ldr	r0, [r7, #20]
 80012f4:	f7ff ff8e 	bl	8001214 <NVIC_EncodePriority>
 80012f8:	4602      	mov	r2, r0
 80012fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012fe:	4611      	mov	r1, r2
 8001300:	4618      	mov	r0, r3
 8001302:	f7ff ff5d 	bl	80011c0 <__NVIC_SetPriority>
}
 8001306:	bf00      	nop
 8001308:	3718      	adds	r7, #24
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}

0800130e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800130e:	b580      	push	{r7, lr}
 8001310:	b082      	sub	sp, #8
 8001312:	af00      	add	r7, sp, #0
 8001314:	4603      	mov	r3, r0
 8001316:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001318:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800131c:	4618      	mov	r0, r3
 800131e:	f7ff ff31 	bl	8001184 <__NVIC_EnableIRQ>
}
 8001322:	bf00      	nop
 8001324:	3708      	adds	r7, #8
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}

0800132a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800132a:	b580      	push	{r7, lr}
 800132c:	b082      	sub	sp, #8
 800132e:	af00      	add	r7, sp, #0
 8001330:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001332:	6878      	ldr	r0, [r7, #4]
 8001334:	f7ff ffa2 	bl	800127c <SysTick_Config>
 8001338:	4603      	mov	r3, r0
}
 800133a:	4618      	mov	r0, r3
 800133c:	3708      	adds	r7, #8
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}

08001342 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001342:	b580      	push	{r7, lr}
 8001344:	b084      	sub	sp, #16
 8001346:	af00      	add	r7, sp, #0
 8001348:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800134e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001350:	f7ff feda 	bl	8001108 <HAL_GetTick>
 8001354:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800135c:	b2db      	uxtb	r3, r3
 800135e:	2b02      	cmp	r3, #2
 8001360:	d008      	beq.n	8001374 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	2280      	movs	r2, #128	; 0x80
 8001366:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	2200      	movs	r2, #0
 800136c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001370:	2301      	movs	r3, #1
 8001372:	e052      	b.n	800141a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	681a      	ldr	r2, [r3, #0]
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f022 0216 	bic.w	r2, r2, #22
 8001382:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	695a      	ldr	r2, [r3, #20]
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001392:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001398:	2b00      	cmp	r3, #0
 800139a:	d103      	bne.n	80013a4 <HAL_DMA_Abort+0x62>
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d007      	beq.n	80013b4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	681a      	ldr	r2, [r3, #0]
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f022 0208 	bic.w	r2, r2, #8
 80013b2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	681a      	ldr	r2, [r3, #0]
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f022 0201 	bic.w	r2, r2, #1
 80013c2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80013c4:	e013      	b.n	80013ee <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80013c6:	f7ff fe9f 	bl	8001108 <HAL_GetTick>
 80013ca:	4602      	mov	r2, r0
 80013cc:	68bb      	ldr	r3, [r7, #8]
 80013ce:	1ad3      	subs	r3, r2, r3
 80013d0:	2b05      	cmp	r3, #5
 80013d2:	d90c      	bls.n	80013ee <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2220      	movs	r2, #32
 80013d8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	2203      	movs	r2, #3
 80013de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	2200      	movs	r2, #0
 80013e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 80013ea:	2303      	movs	r3, #3
 80013ec:	e015      	b.n	800141a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f003 0301 	and.w	r3, r3, #1
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d1e4      	bne.n	80013c6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001400:	223f      	movs	r2, #63	; 0x3f
 8001402:	409a      	lsls	r2, r3
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2201      	movs	r2, #1
 800140c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2200      	movs	r2, #0
 8001414:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8001418:	2300      	movs	r3, #0
}
 800141a:	4618      	mov	r0, r3
 800141c:	3710      	adds	r7, #16
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}

08001422 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001422:	b480      	push	{r7}
 8001424:	b083      	sub	sp, #12
 8001426:	af00      	add	r7, sp, #0
 8001428:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001430:	b2db      	uxtb	r3, r3
 8001432:	2b02      	cmp	r3, #2
 8001434:	d004      	beq.n	8001440 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	2280      	movs	r2, #128	; 0x80
 800143a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800143c:	2301      	movs	r3, #1
 800143e:	e00c      	b.n	800145a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2205      	movs	r2, #5
 8001444:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	681a      	ldr	r2, [r3, #0]
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f022 0201 	bic.w	r2, r2, #1
 8001456:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001458:	2300      	movs	r3, #0
}
 800145a:	4618      	mov	r0, r3
 800145c:	370c      	adds	r7, #12
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr
	...

08001468 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001468:	b480      	push	{r7}
 800146a:	b089      	sub	sp, #36	; 0x24
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
 8001470:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001472:	2300      	movs	r3, #0
 8001474:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001476:	2300      	movs	r3, #0
 8001478:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800147a:	2300      	movs	r3, #0
 800147c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800147e:	2300      	movs	r3, #0
 8001480:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001482:	2300      	movs	r3, #0
 8001484:	61fb      	str	r3, [r7, #28]
 8001486:	e175      	b.n	8001774 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001488:	2201      	movs	r2, #1
 800148a:	69fb      	ldr	r3, [r7, #28]
 800148c:	fa02 f303 	lsl.w	r3, r2, r3
 8001490:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	697a      	ldr	r2, [r7, #20]
 8001498:	4013      	ands	r3, r2
 800149a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800149c:	693a      	ldr	r2, [r7, #16]
 800149e:	697b      	ldr	r3, [r7, #20]
 80014a0:	429a      	cmp	r2, r3
 80014a2:	f040 8164 	bne.w	800176e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	f003 0303 	and.w	r3, r3, #3
 80014ae:	2b01      	cmp	r3, #1
 80014b0:	d005      	beq.n	80014be <HAL_GPIO_Init+0x56>
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	f003 0303 	and.w	r3, r3, #3
 80014ba:	2b02      	cmp	r3, #2
 80014bc:	d130      	bne.n	8001520 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	689b      	ldr	r3, [r3, #8]
 80014c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80014c4:	69fb      	ldr	r3, [r7, #28]
 80014c6:	005b      	lsls	r3, r3, #1
 80014c8:	2203      	movs	r2, #3
 80014ca:	fa02 f303 	lsl.w	r3, r2, r3
 80014ce:	43db      	mvns	r3, r3
 80014d0:	69ba      	ldr	r2, [r7, #24]
 80014d2:	4013      	ands	r3, r2
 80014d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	68da      	ldr	r2, [r3, #12]
 80014da:	69fb      	ldr	r3, [r7, #28]
 80014dc:	005b      	lsls	r3, r3, #1
 80014de:	fa02 f303 	lsl.w	r3, r2, r3
 80014e2:	69ba      	ldr	r2, [r7, #24]
 80014e4:	4313      	orrs	r3, r2
 80014e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	69ba      	ldr	r2, [r7, #24]
 80014ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80014f4:	2201      	movs	r2, #1
 80014f6:	69fb      	ldr	r3, [r7, #28]
 80014f8:	fa02 f303 	lsl.w	r3, r2, r3
 80014fc:	43db      	mvns	r3, r3
 80014fe:	69ba      	ldr	r2, [r7, #24]
 8001500:	4013      	ands	r3, r2
 8001502:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	091b      	lsrs	r3, r3, #4
 800150a:	f003 0201 	and.w	r2, r3, #1
 800150e:	69fb      	ldr	r3, [r7, #28]
 8001510:	fa02 f303 	lsl.w	r3, r2, r3
 8001514:	69ba      	ldr	r2, [r7, #24]
 8001516:	4313      	orrs	r3, r2
 8001518:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	69ba      	ldr	r2, [r7, #24]
 800151e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	f003 0303 	and.w	r3, r3, #3
 8001528:	2b03      	cmp	r3, #3
 800152a:	d017      	beq.n	800155c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	68db      	ldr	r3, [r3, #12]
 8001530:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001532:	69fb      	ldr	r3, [r7, #28]
 8001534:	005b      	lsls	r3, r3, #1
 8001536:	2203      	movs	r2, #3
 8001538:	fa02 f303 	lsl.w	r3, r2, r3
 800153c:	43db      	mvns	r3, r3
 800153e:	69ba      	ldr	r2, [r7, #24]
 8001540:	4013      	ands	r3, r2
 8001542:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	689a      	ldr	r2, [r3, #8]
 8001548:	69fb      	ldr	r3, [r7, #28]
 800154a:	005b      	lsls	r3, r3, #1
 800154c:	fa02 f303 	lsl.w	r3, r2, r3
 8001550:	69ba      	ldr	r2, [r7, #24]
 8001552:	4313      	orrs	r3, r2
 8001554:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	69ba      	ldr	r2, [r7, #24]
 800155a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	f003 0303 	and.w	r3, r3, #3
 8001564:	2b02      	cmp	r3, #2
 8001566:	d123      	bne.n	80015b0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001568:	69fb      	ldr	r3, [r7, #28]
 800156a:	08da      	lsrs	r2, r3, #3
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	3208      	adds	r2, #8
 8001570:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001574:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001576:	69fb      	ldr	r3, [r7, #28]
 8001578:	f003 0307 	and.w	r3, r3, #7
 800157c:	009b      	lsls	r3, r3, #2
 800157e:	220f      	movs	r2, #15
 8001580:	fa02 f303 	lsl.w	r3, r2, r3
 8001584:	43db      	mvns	r3, r3
 8001586:	69ba      	ldr	r2, [r7, #24]
 8001588:	4013      	ands	r3, r2
 800158a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	691a      	ldr	r2, [r3, #16]
 8001590:	69fb      	ldr	r3, [r7, #28]
 8001592:	f003 0307 	and.w	r3, r3, #7
 8001596:	009b      	lsls	r3, r3, #2
 8001598:	fa02 f303 	lsl.w	r3, r2, r3
 800159c:	69ba      	ldr	r2, [r7, #24]
 800159e:	4313      	orrs	r3, r2
 80015a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80015a2:	69fb      	ldr	r3, [r7, #28]
 80015a4:	08da      	lsrs	r2, r3, #3
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	3208      	adds	r2, #8
 80015aa:	69b9      	ldr	r1, [r7, #24]
 80015ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80015b6:	69fb      	ldr	r3, [r7, #28]
 80015b8:	005b      	lsls	r3, r3, #1
 80015ba:	2203      	movs	r2, #3
 80015bc:	fa02 f303 	lsl.w	r3, r2, r3
 80015c0:	43db      	mvns	r3, r3
 80015c2:	69ba      	ldr	r2, [r7, #24]
 80015c4:	4013      	ands	r3, r2
 80015c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	f003 0203 	and.w	r2, r3, #3
 80015d0:	69fb      	ldr	r3, [r7, #28]
 80015d2:	005b      	lsls	r3, r3, #1
 80015d4:	fa02 f303 	lsl.w	r3, r2, r3
 80015d8:	69ba      	ldr	r2, [r7, #24]
 80015da:	4313      	orrs	r3, r2
 80015dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	69ba      	ldr	r2, [r7, #24]
 80015e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	f000 80be 	beq.w	800176e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015f2:	4b66      	ldr	r3, [pc, #408]	; (800178c <HAL_GPIO_Init+0x324>)
 80015f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015f6:	4a65      	ldr	r2, [pc, #404]	; (800178c <HAL_GPIO_Init+0x324>)
 80015f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015fc:	6453      	str	r3, [r2, #68]	; 0x44
 80015fe:	4b63      	ldr	r3, [pc, #396]	; (800178c <HAL_GPIO_Init+0x324>)
 8001600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001602:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001606:	60fb      	str	r3, [r7, #12]
 8001608:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800160a:	4a61      	ldr	r2, [pc, #388]	; (8001790 <HAL_GPIO_Init+0x328>)
 800160c:	69fb      	ldr	r3, [r7, #28]
 800160e:	089b      	lsrs	r3, r3, #2
 8001610:	3302      	adds	r3, #2
 8001612:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001616:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001618:	69fb      	ldr	r3, [r7, #28]
 800161a:	f003 0303 	and.w	r3, r3, #3
 800161e:	009b      	lsls	r3, r3, #2
 8001620:	220f      	movs	r2, #15
 8001622:	fa02 f303 	lsl.w	r3, r2, r3
 8001626:	43db      	mvns	r3, r3
 8001628:	69ba      	ldr	r2, [r7, #24]
 800162a:	4013      	ands	r3, r2
 800162c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	4a58      	ldr	r2, [pc, #352]	; (8001794 <HAL_GPIO_Init+0x32c>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d037      	beq.n	80016a6 <HAL_GPIO_Init+0x23e>
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	4a57      	ldr	r2, [pc, #348]	; (8001798 <HAL_GPIO_Init+0x330>)
 800163a:	4293      	cmp	r3, r2
 800163c:	d031      	beq.n	80016a2 <HAL_GPIO_Init+0x23a>
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	4a56      	ldr	r2, [pc, #344]	; (800179c <HAL_GPIO_Init+0x334>)
 8001642:	4293      	cmp	r3, r2
 8001644:	d02b      	beq.n	800169e <HAL_GPIO_Init+0x236>
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	4a55      	ldr	r2, [pc, #340]	; (80017a0 <HAL_GPIO_Init+0x338>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d025      	beq.n	800169a <HAL_GPIO_Init+0x232>
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	4a54      	ldr	r2, [pc, #336]	; (80017a4 <HAL_GPIO_Init+0x33c>)
 8001652:	4293      	cmp	r3, r2
 8001654:	d01f      	beq.n	8001696 <HAL_GPIO_Init+0x22e>
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	4a53      	ldr	r2, [pc, #332]	; (80017a8 <HAL_GPIO_Init+0x340>)
 800165a:	4293      	cmp	r3, r2
 800165c:	d019      	beq.n	8001692 <HAL_GPIO_Init+0x22a>
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	4a52      	ldr	r2, [pc, #328]	; (80017ac <HAL_GPIO_Init+0x344>)
 8001662:	4293      	cmp	r3, r2
 8001664:	d013      	beq.n	800168e <HAL_GPIO_Init+0x226>
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	4a51      	ldr	r2, [pc, #324]	; (80017b0 <HAL_GPIO_Init+0x348>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d00d      	beq.n	800168a <HAL_GPIO_Init+0x222>
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	4a50      	ldr	r2, [pc, #320]	; (80017b4 <HAL_GPIO_Init+0x34c>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d007      	beq.n	8001686 <HAL_GPIO_Init+0x21e>
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	4a4f      	ldr	r2, [pc, #316]	; (80017b8 <HAL_GPIO_Init+0x350>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d101      	bne.n	8001682 <HAL_GPIO_Init+0x21a>
 800167e:	2309      	movs	r3, #9
 8001680:	e012      	b.n	80016a8 <HAL_GPIO_Init+0x240>
 8001682:	230a      	movs	r3, #10
 8001684:	e010      	b.n	80016a8 <HAL_GPIO_Init+0x240>
 8001686:	2308      	movs	r3, #8
 8001688:	e00e      	b.n	80016a8 <HAL_GPIO_Init+0x240>
 800168a:	2307      	movs	r3, #7
 800168c:	e00c      	b.n	80016a8 <HAL_GPIO_Init+0x240>
 800168e:	2306      	movs	r3, #6
 8001690:	e00a      	b.n	80016a8 <HAL_GPIO_Init+0x240>
 8001692:	2305      	movs	r3, #5
 8001694:	e008      	b.n	80016a8 <HAL_GPIO_Init+0x240>
 8001696:	2304      	movs	r3, #4
 8001698:	e006      	b.n	80016a8 <HAL_GPIO_Init+0x240>
 800169a:	2303      	movs	r3, #3
 800169c:	e004      	b.n	80016a8 <HAL_GPIO_Init+0x240>
 800169e:	2302      	movs	r3, #2
 80016a0:	e002      	b.n	80016a8 <HAL_GPIO_Init+0x240>
 80016a2:	2301      	movs	r3, #1
 80016a4:	e000      	b.n	80016a8 <HAL_GPIO_Init+0x240>
 80016a6:	2300      	movs	r3, #0
 80016a8:	69fa      	ldr	r2, [r7, #28]
 80016aa:	f002 0203 	and.w	r2, r2, #3
 80016ae:	0092      	lsls	r2, r2, #2
 80016b0:	4093      	lsls	r3, r2
 80016b2:	69ba      	ldr	r2, [r7, #24]
 80016b4:	4313      	orrs	r3, r2
 80016b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80016b8:	4935      	ldr	r1, [pc, #212]	; (8001790 <HAL_GPIO_Init+0x328>)
 80016ba:	69fb      	ldr	r3, [r7, #28]
 80016bc:	089b      	lsrs	r3, r3, #2
 80016be:	3302      	adds	r3, #2
 80016c0:	69ba      	ldr	r2, [r7, #24]
 80016c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80016c6:	4b3d      	ldr	r3, [pc, #244]	; (80017bc <HAL_GPIO_Init+0x354>)
 80016c8:	689b      	ldr	r3, [r3, #8]
 80016ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016cc:	693b      	ldr	r3, [r7, #16]
 80016ce:	43db      	mvns	r3, r3
 80016d0:	69ba      	ldr	r2, [r7, #24]
 80016d2:	4013      	ands	r3, r2
 80016d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d003      	beq.n	80016ea <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80016e2:	69ba      	ldr	r2, [r7, #24]
 80016e4:	693b      	ldr	r3, [r7, #16]
 80016e6:	4313      	orrs	r3, r2
 80016e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80016ea:	4a34      	ldr	r2, [pc, #208]	; (80017bc <HAL_GPIO_Init+0x354>)
 80016ec:	69bb      	ldr	r3, [r7, #24]
 80016ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80016f0:	4b32      	ldr	r3, [pc, #200]	; (80017bc <HAL_GPIO_Init+0x354>)
 80016f2:	68db      	ldr	r3, [r3, #12]
 80016f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016f6:	693b      	ldr	r3, [r7, #16]
 80016f8:	43db      	mvns	r3, r3
 80016fa:	69ba      	ldr	r2, [r7, #24]
 80016fc:	4013      	ands	r3, r2
 80016fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001708:	2b00      	cmp	r3, #0
 800170a:	d003      	beq.n	8001714 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800170c:	69ba      	ldr	r2, [r7, #24]
 800170e:	693b      	ldr	r3, [r7, #16]
 8001710:	4313      	orrs	r3, r2
 8001712:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001714:	4a29      	ldr	r2, [pc, #164]	; (80017bc <HAL_GPIO_Init+0x354>)
 8001716:	69bb      	ldr	r3, [r7, #24]
 8001718:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800171a:	4b28      	ldr	r3, [pc, #160]	; (80017bc <HAL_GPIO_Init+0x354>)
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001720:	693b      	ldr	r3, [r7, #16]
 8001722:	43db      	mvns	r3, r3
 8001724:	69ba      	ldr	r2, [r7, #24]
 8001726:	4013      	ands	r3, r2
 8001728:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001732:	2b00      	cmp	r3, #0
 8001734:	d003      	beq.n	800173e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001736:	69ba      	ldr	r2, [r7, #24]
 8001738:	693b      	ldr	r3, [r7, #16]
 800173a:	4313      	orrs	r3, r2
 800173c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800173e:	4a1f      	ldr	r2, [pc, #124]	; (80017bc <HAL_GPIO_Init+0x354>)
 8001740:	69bb      	ldr	r3, [r7, #24]
 8001742:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001744:	4b1d      	ldr	r3, [pc, #116]	; (80017bc <HAL_GPIO_Init+0x354>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800174a:	693b      	ldr	r3, [r7, #16]
 800174c:	43db      	mvns	r3, r3
 800174e:	69ba      	ldr	r2, [r7, #24]
 8001750:	4013      	ands	r3, r2
 8001752:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800175c:	2b00      	cmp	r3, #0
 800175e:	d003      	beq.n	8001768 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001760:	69ba      	ldr	r2, [r7, #24]
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	4313      	orrs	r3, r2
 8001766:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001768:	4a14      	ldr	r2, [pc, #80]	; (80017bc <HAL_GPIO_Init+0x354>)
 800176a:	69bb      	ldr	r3, [r7, #24]
 800176c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800176e:	69fb      	ldr	r3, [r7, #28]
 8001770:	3301      	adds	r3, #1
 8001772:	61fb      	str	r3, [r7, #28]
 8001774:	69fb      	ldr	r3, [r7, #28]
 8001776:	2b0f      	cmp	r3, #15
 8001778:	f67f ae86 	bls.w	8001488 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800177c:	bf00      	nop
 800177e:	bf00      	nop
 8001780:	3724      	adds	r7, #36	; 0x24
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr
 800178a:	bf00      	nop
 800178c:	40023800 	.word	0x40023800
 8001790:	40013800 	.word	0x40013800
 8001794:	40020000 	.word	0x40020000
 8001798:	40020400 	.word	0x40020400
 800179c:	40020800 	.word	0x40020800
 80017a0:	40020c00 	.word	0x40020c00
 80017a4:	40021000 	.word	0x40021000
 80017a8:	40021400 	.word	0x40021400
 80017ac:	40021800 	.word	0x40021800
 80017b0:	40021c00 	.word	0x40021c00
 80017b4:	40022000 	.word	0x40022000
 80017b8:	40022400 	.word	0x40022400
 80017bc:	40013c00 	.word	0x40013c00

080017c0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b086      	sub	sp, #24
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80017c8:	2300      	movs	r3, #0
 80017ca:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d101      	bne.n	80017d6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80017d2:	2301      	movs	r3, #1
 80017d4:	e29b      	b.n	8001d0e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f003 0301 	and.w	r3, r3, #1
 80017de:	2b00      	cmp	r3, #0
 80017e0:	f000 8087 	beq.w	80018f2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80017e4:	4b96      	ldr	r3, [pc, #600]	; (8001a40 <HAL_RCC_OscConfig+0x280>)
 80017e6:	689b      	ldr	r3, [r3, #8]
 80017e8:	f003 030c 	and.w	r3, r3, #12
 80017ec:	2b04      	cmp	r3, #4
 80017ee:	d00c      	beq.n	800180a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80017f0:	4b93      	ldr	r3, [pc, #588]	; (8001a40 <HAL_RCC_OscConfig+0x280>)
 80017f2:	689b      	ldr	r3, [r3, #8]
 80017f4:	f003 030c 	and.w	r3, r3, #12
 80017f8:	2b08      	cmp	r3, #8
 80017fa:	d112      	bne.n	8001822 <HAL_RCC_OscConfig+0x62>
 80017fc:	4b90      	ldr	r3, [pc, #576]	; (8001a40 <HAL_RCC_OscConfig+0x280>)
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001804:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001808:	d10b      	bne.n	8001822 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800180a:	4b8d      	ldr	r3, [pc, #564]	; (8001a40 <HAL_RCC_OscConfig+0x280>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001812:	2b00      	cmp	r3, #0
 8001814:	d06c      	beq.n	80018f0 <HAL_RCC_OscConfig+0x130>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d168      	bne.n	80018f0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800181e:	2301      	movs	r3, #1
 8001820:	e275      	b.n	8001d0e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800182a:	d106      	bne.n	800183a <HAL_RCC_OscConfig+0x7a>
 800182c:	4b84      	ldr	r3, [pc, #528]	; (8001a40 <HAL_RCC_OscConfig+0x280>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a83      	ldr	r2, [pc, #524]	; (8001a40 <HAL_RCC_OscConfig+0x280>)
 8001832:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001836:	6013      	str	r3, [r2, #0]
 8001838:	e02e      	b.n	8001898 <HAL_RCC_OscConfig+0xd8>
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d10c      	bne.n	800185c <HAL_RCC_OscConfig+0x9c>
 8001842:	4b7f      	ldr	r3, [pc, #508]	; (8001a40 <HAL_RCC_OscConfig+0x280>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4a7e      	ldr	r2, [pc, #504]	; (8001a40 <HAL_RCC_OscConfig+0x280>)
 8001848:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800184c:	6013      	str	r3, [r2, #0]
 800184e:	4b7c      	ldr	r3, [pc, #496]	; (8001a40 <HAL_RCC_OscConfig+0x280>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4a7b      	ldr	r2, [pc, #492]	; (8001a40 <HAL_RCC_OscConfig+0x280>)
 8001854:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001858:	6013      	str	r3, [r2, #0]
 800185a:	e01d      	b.n	8001898 <HAL_RCC_OscConfig+0xd8>
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001864:	d10c      	bne.n	8001880 <HAL_RCC_OscConfig+0xc0>
 8001866:	4b76      	ldr	r3, [pc, #472]	; (8001a40 <HAL_RCC_OscConfig+0x280>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4a75      	ldr	r2, [pc, #468]	; (8001a40 <HAL_RCC_OscConfig+0x280>)
 800186c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001870:	6013      	str	r3, [r2, #0]
 8001872:	4b73      	ldr	r3, [pc, #460]	; (8001a40 <HAL_RCC_OscConfig+0x280>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4a72      	ldr	r2, [pc, #456]	; (8001a40 <HAL_RCC_OscConfig+0x280>)
 8001878:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800187c:	6013      	str	r3, [r2, #0]
 800187e:	e00b      	b.n	8001898 <HAL_RCC_OscConfig+0xd8>
 8001880:	4b6f      	ldr	r3, [pc, #444]	; (8001a40 <HAL_RCC_OscConfig+0x280>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a6e      	ldr	r2, [pc, #440]	; (8001a40 <HAL_RCC_OscConfig+0x280>)
 8001886:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800188a:	6013      	str	r3, [r2, #0]
 800188c:	4b6c      	ldr	r3, [pc, #432]	; (8001a40 <HAL_RCC_OscConfig+0x280>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a6b      	ldr	r2, [pc, #428]	; (8001a40 <HAL_RCC_OscConfig+0x280>)
 8001892:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001896:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d013      	beq.n	80018c8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018a0:	f7ff fc32 	bl	8001108 <HAL_GetTick>
 80018a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018a6:	e008      	b.n	80018ba <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018a8:	f7ff fc2e 	bl	8001108 <HAL_GetTick>
 80018ac:	4602      	mov	r2, r0
 80018ae:	693b      	ldr	r3, [r7, #16]
 80018b0:	1ad3      	subs	r3, r2, r3
 80018b2:	2b64      	cmp	r3, #100	; 0x64
 80018b4:	d901      	bls.n	80018ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80018b6:	2303      	movs	r3, #3
 80018b8:	e229      	b.n	8001d0e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018ba:	4b61      	ldr	r3, [pc, #388]	; (8001a40 <HAL_RCC_OscConfig+0x280>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d0f0      	beq.n	80018a8 <HAL_RCC_OscConfig+0xe8>
 80018c6:	e014      	b.n	80018f2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018c8:	f7ff fc1e 	bl	8001108 <HAL_GetTick>
 80018cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018ce:	e008      	b.n	80018e2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018d0:	f7ff fc1a 	bl	8001108 <HAL_GetTick>
 80018d4:	4602      	mov	r2, r0
 80018d6:	693b      	ldr	r3, [r7, #16]
 80018d8:	1ad3      	subs	r3, r2, r3
 80018da:	2b64      	cmp	r3, #100	; 0x64
 80018dc:	d901      	bls.n	80018e2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80018de:	2303      	movs	r3, #3
 80018e0:	e215      	b.n	8001d0e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018e2:	4b57      	ldr	r3, [pc, #348]	; (8001a40 <HAL_RCC_OscConfig+0x280>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d1f0      	bne.n	80018d0 <HAL_RCC_OscConfig+0x110>
 80018ee:	e000      	b.n	80018f2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f003 0302 	and.w	r3, r3, #2
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d069      	beq.n	80019d2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80018fe:	4b50      	ldr	r3, [pc, #320]	; (8001a40 <HAL_RCC_OscConfig+0x280>)
 8001900:	689b      	ldr	r3, [r3, #8]
 8001902:	f003 030c 	and.w	r3, r3, #12
 8001906:	2b00      	cmp	r3, #0
 8001908:	d00b      	beq.n	8001922 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800190a:	4b4d      	ldr	r3, [pc, #308]	; (8001a40 <HAL_RCC_OscConfig+0x280>)
 800190c:	689b      	ldr	r3, [r3, #8]
 800190e:	f003 030c 	and.w	r3, r3, #12
 8001912:	2b08      	cmp	r3, #8
 8001914:	d11c      	bne.n	8001950 <HAL_RCC_OscConfig+0x190>
 8001916:	4b4a      	ldr	r3, [pc, #296]	; (8001a40 <HAL_RCC_OscConfig+0x280>)
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800191e:	2b00      	cmp	r3, #0
 8001920:	d116      	bne.n	8001950 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001922:	4b47      	ldr	r3, [pc, #284]	; (8001a40 <HAL_RCC_OscConfig+0x280>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f003 0302 	and.w	r3, r3, #2
 800192a:	2b00      	cmp	r3, #0
 800192c:	d005      	beq.n	800193a <HAL_RCC_OscConfig+0x17a>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	68db      	ldr	r3, [r3, #12]
 8001932:	2b01      	cmp	r3, #1
 8001934:	d001      	beq.n	800193a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001936:	2301      	movs	r3, #1
 8001938:	e1e9      	b.n	8001d0e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800193a:	4b41      	ldr	r3, [pc, #260]	; (8001a40 <HAL_RCC_OscConfig+0x280>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	691b      	ldr	r3, [r3, #16]
 8001946:	00db      	lsls	r3, r3, #3
 8001948:	493d      	ldr	r1, [pc, #244]	; (8001a40 <HAL_RCC_OscConfig+0x280>)
 800194a:	4313      	orrs	r3, r2
 800194c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800194e:	e040      	b.n	80019d2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	68db      	ldr	r3, [r3, #12]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d023      	beq.n	80019a0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001958:	4b39      	ldr	r3, [pc, #228]	; (8001a40 <HAL_RCC_OscConfig+0x280>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a38      	ldr	r2, [pc, #224]	; (8001a40 <HAL_RCC_OscConfig+0x280>)
 800195e:	f043 0301 	orr.w	r3, r3, #1
 8001962:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001964:	f7ff fbd0 	bl	8001108 <HAL_GetTick>
 8001968:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800196a:	e008      	b.n	800197e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800196c:	f7ff fbcc 	bl	8001108 <HAL_GetTick>
 8001970:	4602      	mov	r2, r0
 8001972:	693b      	ldr	r3, [r7, #16]
 8001974:	1ad3      	subs	r3, r2, r3
 8001976:	2b02      	cmp	r3, #2
 8001978:	d901      	bls.n	800197e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800197a:	2303      	movs	r3, #3
 800197c:	e1c7      	b.n	8001d0e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800197e:	4b30      	ldr	r3, [pc, #192]	; (8001a40 <HAL_RCC_OscConfig+0x280>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f003 0302 	and.w	r3, r3, #2
 8001986:	2b00      	cmp	r3, #0
 8001988:	d0f0      	beq.n	800196c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800198a:	4b2d      	ldr	r3, [pc, #180]	; (8001a40 <HAL_RCC_OscConfig+0x280>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	691b      	ldr	r3, [r3, #16]
 8001996:	00db      	lsls	r3, r3, #3
 8001998:	4929      	ldr	r1, [pc, #164]	; (8001a40 <HAL_RCC_OscConfig+0x280>)
 800199a:	4313      	orrs	r3, r2
 800199c:	600b      	str	r3, [r1, #0]
 800199e:	e018      	b.n	80019d2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019a0:	4b27      	ldr	r3, [pc, #156]	; (8001a40 <HAL_RCC_OscConfig+0x280>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a26      	ldr	r2, [pc, #152]	; (8001a40 <HAL_RCC_OscConfig+0x280>)
 80019a6:	f023 0301 	bic.w	r3, r3, #1
 80019aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019ac:	f7ff fbac 	bl	8001108 <HAL_GetTick>
 80019b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019b2:	e008      	b.n	80019c6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019b4:	f7ff fba8 	bl	8001108 <HAL_GetTick>
 80019b8:	4602      	mov	r2, r0
 80019ba:	693b      	ldr	r3, [r7, #16]
 80019bc:	1ad3      	subs	r3, r2, r3
 80019be:	2b02      	cmp	r3, #2
 80019c0:	d901      	bls.n	80019c6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80019c2:	2303      	movs	r3, #3
 80019c4:	e1a3      	b.n	8001d0e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019c6:	4b1e      	ldr	r3, [pc, #120]	; (8001a40 <HAL_RCC_OscConfig+0x280>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f003 0302 	and.w	r3, r3, #2
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d1f0      	bne.n	80019b4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f003 0308 	and.w	r3, r3, #8
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d038      	beq.n	8001a50 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	695b      	ldr	r3, [r3, #20]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d019      	beq.n	8001a1a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019e6:	4b16      	ldr	r3, [pc, #88]	; (8001a40 <HAL_RCC_OscConfig+0x280>)
 80019e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019ea:	4a15      	ldr	r2, [pc, #84]	; (8001a40 <HAL_RCC_OscConfig+0x280>)
 80019ec:	f043 0301 	orr.w	r3, r3, #1
 80019f0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019f2:	f7ff fb89 	bl	8001108 <HAL_GetTick>
 80019f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019f8:	e008      	b.n	8001a0c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019fa:	f7ff fb85 	bl	8001108 <HAL_GetTick>
 80019fe:	4602      	mov	r2, r0
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	1ad3      	subs	r3, r2, r3
 8001a04:	2b02      	cmp	r3, #2
 8001a06:	d901      	bls.n	8001a0c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001a08:	2303      	movs	r3, #3
 8001a0a:	e180      	b.n	8001d0e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a0c:	4b0c      	ldr	r3, [pc, #48]	; (8001a40 <HAL_RCC_OscConfig+0x280>)
 8001a0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a10:	f003 0302 	and.w	r3, r3, #2
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d0f0      	beq.n	80019fa <HAL_RCC_OscConfig+0x23a>
 8001a18:	e01a      	b.n	8001a50 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a1a:	4b09      	ldr	r3, [pc, #36]	; (8001a40 <HAL_RCC_OscConfig+0x280>)
 8001a1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a1e:	4a08      	ldr	r2, [pc, #32]	; (8001a40 <HAL_RCC_OscConfig+0x280>)
 8001a20:	f023 0301 	bic.w	r3, r3, #1
 8001a24:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a26:	f7ff fb6f 	bl	8001108 <HAL_GetTick>
 8001a2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a2c:	e00a      	b.n	8001a44 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a2e:	f7ff fb6b 	bl	8001108 <HAL_GetTick>
 8001a32:	4602      	mov	r2, r0
 8001a34:	693b      	ldr	r3, [r7, #16]
 8001a36:	1ad3      	subs	r3, r2, r3
 8001a38:	2b02      	cmp	r3, #2
 8001a3a:	d903      	bls.n	8001a44 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001a3c:	2303      	movs	r3, #3
 8001a3e:	e166      	b.n	8001d0e <HAL_RCC_OscConfig+0x54e>
 8001a40:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a44:	4b92      	ldr	r3, [pc, #584]	; (8001c90 <HAL_RCC_OscConfig+0x4d0>)
 8001a46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a48:	f003 0302 	and.w	r3, r3, #2
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d1ee      	bne.n	8001a2e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f003 0304 	and.w	r3, r3, #4
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	f000 80a4 	beq.w	8001ba6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a5e:	4b8c      	ldr	r3, [pc, #560]	; (8001c90 <HAL_RCC_OscConfig+0x4d0>)
 8001a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d10d      	bne.n	8001a86 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a6a:	4b89      	ldr	r3, [pc, #548]	; (8001c90 <HAL_RCC_OscConfig+0x4d0>)
 8001a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a6e:	4a88      	ldr	r2, [pc, #544]	; (8001c90 <HAL_RCC_OscConfig+0x4d0>)
 8001a70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a74:	6413      	str	r3, [r2, #64]	; 0x40
 8001a76:	4b86      	ldr	r3, [pc, #536]	; (8001c90 <HAL_RCC_OscConfig+0x4d0>)
 8001a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a7e:	60bb      	str	r3, [r7, #8]
 8001a80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a82:	2301      	movs	r3, #1
 8001a84:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a86:	4b83      	ldr	r3, [pc, #524]	; (8001c94 <HAL_RCC_OscConfig+0x4d4>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d118      	bne.n	8001ac4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001a92:	4b80      	ldr	r3, [pc, #512]	; (8001c94 <HAL_RCC_OscConfig+0x4d4>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4a7f      	ldr	r2, [pc, #508]	; (8001c94 <HAL_RCC_OscConfig+0x4d4>)
 8001a98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a9e:	f7ff fb33 	bl	8001108 <HAL_GetTick>
 8001aa2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001aa4:	e008      	b.n	8001ab8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001aa6:	f7ff fb2f 	bl	8001108 <HAL_GetTick>
 8001aaa:	4602      	mov	r2, r0
 8001aac:	693b      	ldr	r3, [r7, #16]
 8001aae:	1ad3      	subs	r3, r2, r3
 8001ab0:	2b64      	cmp	r3, #100	; 0x64
 8001ab2:	d901      	bls.n	8001ab8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001ab4:	2303      	movs	r3, #3
 8001ab6:	e12a      	b.n	8001d0e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ab8:	4b76      	ldr	r3, [pc, #472]	; (8001c94 <HAL_RCC_OscConfig+0x4d4>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d0f0      	beq.n	8001aa6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	689b      	ldr	r3, [r3, #8]
 8001ac8:	2b01      	cmp	r3, #1
 8001aca:	d106      	bne.n	8001ada <HAL_RCC_OscConfig+0x31a>
 8001acc:	4b70      	ldr	r3, [pc, #448]	; (8001c90 <HAL_RCC_OscConfig+0x4d0>)
 8001ace:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ad0:	4a6f      	ldr	r2, [pc, #444]	; (8001c90 <HAL_RCC_OscConfig+0x4d0>)
 8001ad2:	f043 0301 	orr.w	r3, r3, #1
 8001ad6:	6713      	str	r3, [r2, #112]	; 0x70
 8001ad8:	e02d      	b.n	8001b36 <HAL_RCC_OscConfig+0x376>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	689b      	ldr	r3, [r3, #8]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d10c      	bne.n	8001afc <HAL_RCC_OscConfig+0x33c>
 8001ae2:	4b6b      	ldr	r3, [pc, #428]	; (8001c90 <HAL_RCC_OscConfig+0x4d0>)
 8001ae4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ae6:	4a6a      	ldr	r2, [pc, #424]	; (8001c90 <HAL_RCC_OscConfig+0x4d0>)
 8001ae8:	f023 0301 	bic.w	r3, r3, #1
 8001aec:	6713      	str	r3, [r2, #112]	; 0x70
 8001aee:	4b68      	ldr	r3, [pc, #416]	; (8001c90 <HAL_RCC_OscConfig+0x4d0>)
 8001af0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001af2:	4a67      	ldr	r2, [pc, #412]	; (8001c90 <HAL_RCC_OscConfig+0x4d0>)
 8001af4:	f023 0304 	bic.w	r3, r3, #4
 8001af8:	6713      	str	r3, [r2, #112]	; 0x70
 8001afa:	e01c      	b.n	8001b36 <HAL_RCC_OscConfig+0x376>
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	2b05      	cmp	r3, #5
 8001b02:	d10c      	bne.n	8001b1e <HAL_RCC_OscConfig+0x35e>
 8001b04:	4b62      	ldr	r3, [pc, #392]	; (8001c90 <HAL_RCC_OscConfig+0x4d0>)
 8001b06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b08:	4a61      	ldr	r2, [pc, #388]	; (8001c90 <HAL_RCC_OscConfig+0x4d0>)
 8001b0a:	f043 0304 	orr.w	r3, r3, #4
 8001b0e:	6713      	str	r3, [r2, #112]	; 0x70
 8001b10:	4b5f      	ldr	r3, [pc, #380]	; (8001c90 <HAL_RCC_OscConfig+0x4d0>)
 8001b12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b14:	4a5e      	ldr	r2, [pc, #376]	; (8001c90 <HAL_RCC_OscConfig+0x4d0>)
 8001b16:	f043 0301 	orr.w	r3, r3, #1
 8001b1a:	6713      	str	r3, [r2, #112]	; 0x70
 8001b1c:	e00b      	b.n	8001b36 <HAL_RCC_OscConfig+0x376>
 8001b1e:	4b5c      	ldr	r3, [pc, #368]	; (8001c90 <HAL_RCC_OscConfig+0x4d0>)
 8001b20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b22:	4a5b      	ldr	r2, [pc, #364]	; (8001c90 <HAL_RCC_OscConfig+0x4d0>)
 8001b24:	f023 0301 	bic.w	r3, r3, #1
 8001b28:	6713      	str	r3, [r2, #112]	; 0x70
 8001b2a:	4b59      	ldr	r3, [pc, #356]	; (8001c90 <HAL_RCC_OscConfig+0x4d0>)
 8001b2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b2e:	4a58      	ldr	r2, [pc, #352]	; (8001c90 <HAL_RCC_OscConfig+0x4d0>)
 8001b30:	f023 0304 	bic.w	r3, r3, #4
 8001b34:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	689b      	ldr	r3, [r3, #8]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d015      	beq.n	8001b6a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b3e:	f7ff fae3 	bl	8001108 <HAL_GetTick>
 8001b42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b44:	e00a      	b.n	8001b5c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b46:	f7ff fadf 	bl	8001108 <HAL_GetTick>
 8001b4a:	4602      	mov	r2, r0
 8001b4c:	693b      	ldr	r3, [r7, #16]
 8001b4e:	1ad3      	subs	r3, r2, r3
 8001b50:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d901      	bls.n	8001b5c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001b58:	2303      	movs	r3, #3
 8001b5a:	e0d8      	b.n	8001d0e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b5c:	4b4c      	ldr	r3, [pc, #304]	; (8001c90 <HAL_RCC_OscConfig+0x4d0>)
 8001b5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b60:	f003 0302 	and.w	r3, r3, #2
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d0ee      	beq.n	8001b46 <HAL_RCC_OscConfig+0x386>
 8001b68:	e014      	b.n	8001b94 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b6a:	f7ff facd 	bl	8001108 <HAL_GetTick>
 8001b6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b70:	e00a      	b.n	8001b88 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b72:	f7ff fac9 	bl	8001108 <HAL_GetTick>
 8001b76:	4602      	mov	r2, r0
 8001b78:	693b      	ldr	r3, [r7, #16]
 8001b7a:	1ad3      	subs	r3, r2, r3
 8001b7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d901      	bls.n	8001b88 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001b84:	2303      	movs	r3, #3
 8001b86:	e0c2      	b.n	8001d0e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b88:	4b41      	ldr	r3, [pc, #260]	; (8001c90 <HAL_RCC_OscConfig+0x4d0>)
 8001b8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b8c:	f003 0302 	and.w	r3, r3, #2
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d1ee      	bne.n	8001b72 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001b94:	7dfb      	ldrb	r3, [r7, #23]
 8001b96:	2b01      	cmp	r3, #1
 8001b98:	d105      	bne.n	8001ba6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b9a:	4b3d      	ldr	r3, [pc, #244]	; (8001c90 <HAL_RCC_OscConfig+0x4d0>)
 8001b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b9e:	4a3c      	ldr	r2, [pc, #240]	; (8001c90 <HAL_RCC_OscConfig+0x4d0>)
 8001ba0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ba4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	699b      	ldr	r3, [r3, #24]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	f000 80ae 	beq.w	8001d0c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001bb0:	4b37      	ldr	r3, [pc, #220]	; (8001c90 <HAL_RCC_OscConfig+0x4d0>)
 8001bb2:	689b      	ldr	r3, [r3, #8]
 8001bb4:	f003 030c 	and.w	r3, r3, #12
 8001bb8:	2b08      	cmp	r3, #8
 8001bba:	d06d      	beq.n	8001c98 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	699b      	ldr	r3, [r3, #24]
 8001bc0:	2b02      	cmp	r3, #2
 8001bc2:	d14b      	bne.n	8001c5c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bc4:	4b32      	ldr	r3, [pc, #200]	; (8001c90 <HAL_RCC_OscConfig+0x4d0>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a31      	ldr	r2, [pc, #196]	; (8001c90 <HAL_RCC_OscConfig+0x4d0>)
 8001bca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001bce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bd0:	f7ff fa9a 	bl	8001108 <HAL_GetTick>
 8001bd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bd6:	e008      	b.n	8001bea <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bd8:	f7ff fa96 	bl	8001108 <HAL_GetTick>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	693b      	ldr	r3, [r7, #16]
 8001be0:	1ad3      	subs	r3, r2, r3
 8001be2:	2b02      	cmp	r3, #2
 8001be4:	d901      	bls.n	8001bea <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001be6:	2303      	movs	r3, #3
 8001be8:	e091      	b.n	8001d0e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bea:	4b29      	ldr	r3, [pc, #164]	; (8001c90 <HAL_RCC_OscConfig+0x4d0>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d1f0      	bne.n	8001bd8 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	69da      	ldr	r2, [r3, #28]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6a1b      	ldr	r3, [r3, #32]
 8001bfe:	431a      	orrs	r2, r3
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c04:	019b      	lsls	r3, r3, #6
 8001c06:	431a      	orrs	r2, r3
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c0c:	085b      	lsrs	r3, r3, #1
 8001c0e:	3b01      	subs	r3, #1
 8001c10:	041b      	lsls	r3, r3, #16
 8001c12:	431a      	orrs	r2, r3
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c18:	061b      	lsls	r3, r3, #24
 8001c1a:	431a      	orrs	r2, r3
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c20:	071b      	lsls	r3, r3, #28
 8001c22:	491b      	ldr	r1, [pc, #108]	; (8001c90 <HAL_RCC_OscConfig+0x4d0>)
 8001c24:	4313      	orrs	r3, r2
 8001c26:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c28:	4b19      	ldr	r3, [pc, #100]	; (8001c90 <HAL_RCC_OscConfig+0x4d0>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a18      	ldr	r2, [pc, #96]	; (8001c90 <HAL_RCC_OscConfig+0x4d0>)
 8001c2e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c34:	f7ff fa68 	bl	8001108 <HAL_GetTick>
 8001c38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c3a:	e008      	b.n	8001c4e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c3c:	f7ff fa64 	bl	8001108 <HAL_GetTick>
 8001c40:	4602      	mov	r2, r0
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	1ad3      	subs	r3, r2, r3
 8001c46:	2b02      	cmp	r3, #2
 8001c48:	d901      	bls.n	8001c4e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001c4a:	2303      	movs	r3, #3
 8001c4c:	e05f      	b.n	8001d0e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c4e:	4b10      	ldr	r3, [pc, #64]	; (8001c90 <HAL_RCC_OscConfig+0x4d0>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d0f0      	beq.n	8001c3c <HAL_RCC_OscConfig+0x47c>
 8001c5a:	e057      	b.n	8001d0c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c5c:	4b0c      	ldr	r3, [pc, #48]	; (8001c90 <HAL_RCC_OscConfig+0x4d0>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a0b      	ldr	r2, [pc, #44]	; (8001c90 <HAL_RCC_OscConfig+0x4d0>)
 8001c62:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c68:	f7ff fa4e 	bl	8001108 <HAL_GetTick>
 8001c6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c6e:	e008      	b.n	8001c82 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c70:	f7ff fa4a 	bl	8001108 <HAL_GetTick>
 8001c74:	4602      	mov	r2, r0
 8001c76:	693b      	ldr	r3, [r7, #16]
 8001c78:	1ad3      	subs	r3, r2, r3
 8001c7a:	2b02      	cmp	r3, #2
 8001c7c:	d901      	bls.n	8001c82 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8001c7e:	2303      	movs	r3, #3
 8001c80:	e045      	b.n	8001d0e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c82:	4b03      	ldr	r3, [pc, #12]	; (8001c90 <HAL_RCC_OscConfig+0x4d0>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d1f0      	bne.n	8001c70 <HAL_RCC_OscConfig+0x4b0>
 8001c8e:	e03d      	b.n	8001d0c <HAL_RCC_OscConfig+0x54c>
 8001c90:	40023800 	.word	0x40023800
 8001c94:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001c98:	4b1f      	ldr	r3, [pc, #124]	; (8001d18 <HAL_RCC_OscConfig+0x558>)
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	699b      	ldr	r3, [r3, #24]
 8001ca2:	2b01      	cmp	r3, #1
 8001ca4:	d030      	beq.n	8001d08 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	d129      	bne.n	8001d08 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cbe:	429a      	cmp	r2, r3
 8001cc0:	d122      	bne.n	8001d08 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001cc2:	68fa      	ldr	r2, [r7, #12]
 8001cc4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001cc8:	4013      	ands	r3, r2
 8001cca:	687a      	ldr	r2, [r7, #4]
 8001ccc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001cce:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d119      	bne.n	8001d08 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cde:	085b      	lsrs	r3, r3, #1
 8001ce0:	3b01      	subs	r3, #1
 8001ce2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	d10f      	bne.n	8001d08 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cf2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001cf4:	429a      	cmp	r2, r3
 8001cf6:	d107      	bne.n	8001d08 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d02:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d04:	429a      	cmp	r2, r3
 8001d06:	d001      	beq.n	8001d0c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8001d08:	2301      	movs	r3, #1
 8001d0a:	e000      	b.n	8001d0e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8001d0c:	2300      	movs	r3, #0
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	3718      	adds	r7, #24
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	40023800 	.word	0x40023800

08001d1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b084      	sub	sp, #16
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
 8001d24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001d26:	2300      	movs	r3, #0
 8001d28:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d101      	bne.n	8001d34 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001d30:	2301      	movs	r3, #1
 8001d32:	e0d0      	b.n	8001ed6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d34:	4b6a      	ldr	r3, [pc, #424]	; (8001ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f003 030f 	and.w	r3, r3, #15
 8001d3c:	683a      	ldr	r2, [r7, #0]
 8001d3e:	429a      	cmp	r2, r3
 8001d40:	d910      	bls.n	8001d64 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d42:	4b67      	ldr	r3, [pc, #412]	; (8001ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f023 020f 	bic.w	r2, r3, #15
 8001d4a:	4965      	ldr	r1, [pc, #404]	; (8001ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d52:	4b63      	ldr	r3, [pc, #396]	; (8001ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f003 030f 	and.w	r3, r3, #15
 8001d5a:	683a      	ldr	r2, [r7, #0]
 8001d5c:	429a      	cmp	r2, r3
 8001d5e:	d001      	beq.n	8001d64 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001d60:	2301      	movs	r3, #1
 8001d62:	e0b8      	b.n	8001ed6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f003 0302 	and.w	r3, r3, #2
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d020      	beq.n	8001db2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f003 0304 	and.w	r3, r3, #4
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d005      	beq.n	8001d88 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d7c:	4b59      	ldr	r3, [pc, #356]	; (8001ee4 <HAL_RCC_ClockConfig+0x1c8>)
 8001d7e:	689b      	ldr	r3, [r3, #8]
 8001d80:	4a58      	ldr	r2, [pc, #352]	; (8001ee4 <HAL_RCC_ClockConfig+0x1c8>)
 8001d82:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001d86:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f003 0308 	and.w	r3, r3, #8
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d005      	beq.n	8001da0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d94:	4b53      	ldr	r3, [pc, #332]	; (8001ee4 <HAL_RCC_ClockConfig+0x1c8>)
 8001d96:	689b      	ldr	r3, [r3, #8]
 8001d98:	4a52      	ldr	r2, [pc, #328]	; (8001ee4 <HAL_RCC_ClockConfig+0x1c8>)
 8001d9a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001d9e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001da0:	4b50      	ldr	r3, [pc, #320]	; (8001ee4 <HAL_RCC_ClockConfig+0x1c8>)
 8001da2:	689b      	ldr	r3, [r3, #8]
 8001da4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	689b      	ldr	r3, [r3, #8]
 8001dac:	494d      	ldr	r1, [pc, #308]	; (8001ee4 <HAL_RCC_ClockConfig+0x1c8>)
 8001dae:	4313      	orrs	r3, r2
 8001db0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f003 0301 	and.w	r3, r3, #1
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d040      	beq.n	8001e40 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	2b01      	cmp	r3, #1
 8001dc4:	d107      	bne.n	8001dd6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dc6:	4b47      	ldr	r3, [pc, #284]	; (8001ee4 <HAL_RCC_ClockConfig+0x1c8>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d115      	bne.n	8001dfe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e07f      	b.n	8001ed6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	2b02      	cmp	r3, #2
 8001ddc:	d107      	bne.n	8001dee <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dde:	4b41      	ldr	r3, [pc, #260]	; (8001ee4 <HAL_RCC_ClockConfig+0x1c8>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d109      	bne.n	8001dfe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	e073      	b.n	8001ed6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dee:	4b3d      	ldr	r3, [pc, #244]	; (8001ee4 <HAL_RCC_ClockConfig+0x1c8>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f003 0302 	and.w	r3, r3, #2
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d101      	bne.n	8001dfe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e06b      	b.n	8001ed6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001dfe:	4b39      	ldr	r3, [pc, #228]	; (8001ee4 <HAL_RCC_ClockConfig+0x1c8>)
 8001e00:	689b      	ldr	r3, [r3, #8]
 8001e02:	f023 0203 	bic.w	r2, r3, #3
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	4936      	ldr	r1, [pc, #216]	; (8001ee4 <HAL_RCC_ClockConfig+0x1c8>)
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e10:	f7ff f97a 	bl	8001108 <HAL_GetTick>
 8001e14:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e16:	e00a      	b.n	8001e2e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e18:	f7ff f976 	bl	8001108 <HAL_GetTick>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	1ad3      	subs	r3, r2, r3
 8001e22:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d901      	bls.n	8001e2e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	e053      	b.n	8001ed6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e2e:	4b2d      	ldr	r3, [pc, #180]	; (8001ee4 <HAL_RCC_ClockConfig+0x1c8>)
 8001e30:	689b      	ldr	r3, [r3, #8]
 8001e32:	f003 020c 	and.w	r2, r3, #12
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	009b      	lsls	r3, r3, #2
 8001e3c:	429a      	cmp	r2, r3
 8001e3e:	d1eb      	bne.n	8001e18 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e40:	4b27      	ldr	r3, [pc, #156]	; (8001ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f003 030f 	and.w	r3, r3, #15
 8001e48:	683a      	ldr	r2, [r7, #0]
 8001e4a:	429a      	cmp	r2, r3
 8001e4c:	d210      	bcs.n	8001e70 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e4e:	4b24      	ldr	r3, [pc, #144]	; (8001ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f023 020f 	bic.w	r2, r3, #15
 8001e56:	4922      	ldr	r1, [pc, #136]	; (8001ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e5e:	4b20      	ldr	r3, [pc, #128]	; (8001ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f003 030f 	and.w	r3, r3, #15
 8001e66:	683a      	ldr	r2, [r7, #0]
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	d001      	beq.n	8001e70 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	e032      	b.n	8001ed6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f003 0304 	and.w	r3, r3, #4
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d008      	beq.n	8001e8e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e7c:	4b19      	ldr	r3, [pc, #100]	; (8001ee4 <HAL_RCC_ClockConfig+0x1c8>)
 8001e7e:	689b      	ldr	r3, [r3, #8]
 8001e80:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	68db      	ldr	r3, [r3, #12]
 8001e88:	4916      	ldr	r1, [pc, #88]	; (8001ee4 <HAL_RCC_ClockConfig+0x1c8>)
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f003 0308 	and.w	r3, r3, #8
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d009      	beq.n	8001eae <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001e9a:	4b12      	ldr	r3, [pc, #72]	; (8001ee4 <HAL_RCC_ClockConfig+0x1c8>)
 8001e9c:	689b      	ldr	r3, [r3, #8]
 8001e9e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	691b      	ldr	r3, [r3, #16]
 8001ea6:	00db      	lsls	r3, r3, #3
 8001ea8:	490e      	ldr	r1, [pc, #56]	; (8001ee4 <HAL_RCC_ClockConfig+0x1c8>)
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001eae:	f000 f821 	bl	8001ef4 <HAL_RCC_GetSysClockFreq>
 8001eb2:	4602      	mov	r2, r0
 8001eb4:	4b0b      	ldr	r3, [pc, #44]	; (8001ee4 <HAL_RCC_ClockConfig+0x1c8>)
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	091b      	lsrs	r3, r3, #4
 8001eba:	f003 030f 	and.w	r3, r3, #15
 8001ebe:	490a      	ldr	r1, [pc, #40]	; (8001ee8 <HAL_RCC_ClockConfig+0x1cc>)
 8001ec0:	5ccb      	ldrb	r3, [r1, r3]
 8001ec2:	fa22 f303 	lsr.w	r3, r2, r3
 8001ec6:	4a09      	ldr	r2, [pc, #36]	; (8001eec <HAL_RCC_ClockConfig+0x1d0>)
 8001ec8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001eca:	4b09      	ldr	r3, [pc, #36]	; (8001ef0 <HAL_RCC_ClockConfig+0x1d4>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f7ff f8d6 	bl	8001080 <HAL_InitTick>

  return HAL_OK;
 8001ed4:	2300      	movs	r3, #0
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	3710      	adds	r7, #16
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	40023c00 	.word	0x40023c00
 8001ee4:	40023800 	.word	0x40023800
 8001ee8:	08005a5c 	.word	0x08005a5c
 8001eec:	20000024 	.word	0x20000024
 8001ef0:	20000028 	.word	0x20000028

08001ef4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ef4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ef8:	b090      	sub	sp, #64	; 0x40
 8001efa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001efc:	2300      	movs	r3, #0
 8001efe:	637b      	str	r3, [r7, #52]	; 0x34
 8001f00:	2300      	movs	r3, #0
 8001f02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001f04:	2300      	movs	r3, #0
 8001f06:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f0c:	4b59      	ldr	r3, [pc, #356]	; (8002074 <HAL_RCC_GetSysClockFreq+0x180>)
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	f003 030c 	and.w	r3, r3, #12
 8001f14:	2b08      	cmp	r3, #8
 8001f16:	d00d      	beq.n	8001f34 <HAL_RCC_GetSysClockFreq+0x40>
 8001f18:	2b08      	cmp	r3, #8
 8001f1a:	f200 80a1 	bhi.w	8002060 <HAL_RCC_GetSysClockFreq+0x16c>
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d002      	beq.n	8001f28 <HAL_RCC_GetSysClockFreq+0x34>
 8001f22:	2b04      	cmp	r3, #4
 8001f24:	d003      	beq.n	8001f2e <HAL_RCC_GetSysClockFreq+0x3a>
 8001f26:	e09b      	b.n	8002060 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001f28:	4b53      	ldr	r3, [pc, #332]	; (8002078 <HAL_RCC_GetSysClockFreq+0x184>)
 8001f2a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001f2c:	e09b      	b.n	8002066 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001f2e:	4b53      	ldr	r3, [pc, #332]	; (800207c <HAL_RCC_GetSysClockFreq+0x188>)
 8001f30:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001f32:	e098      	b.n	8002066 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f34:	4b4f      	ldr	r3, [pc, #316]	; (8002074 <HAL_RCC_GetSysClockFreq+0x180>)
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001f3c:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001f3e:	4b4d      	ldr	r3, [pc, #308]	; (8002074 <HAL_RCC_GetSysClockFreq+0x180>)
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d028      	beq.n	8001f9c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f4a:	4b4a      	ldr	r3, [pc, #296]	; (8002074 <HAL_RCC_GetSysClockFreq+0x180>)
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	099b      	lsrs	r3, r3, #6
 8001f50:	2200      	movs	r2, #0
 8001f52:	623b      	str	r3, [r7, #32]
 8001f54:	627a      	str	r2, [r7, #36]	; 0x24
 8001f56:	6a3b      	ldr	r3, [r7, #32]
 8001f58:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001f5c:	2100      	movs	r1, #0
 8001f5e:	4b47      	ldr	r3, [pc, #284]	; (800207c <HAL_RCC_GetSysClockFreq+0x188>)
 8001f60:	fb03 f201 	mul.w	r2, r3, r1
 8001f64:	2300      	movs	r3, #0
 8001f66:	fb00 f303 	mul.w	r3, r0, r3
 8001f6a:	4413      	add	r3, r2
 8001f6c:	4a43      	ldr	r2, [pc, #268]	; (800207c <HAL_RCC_GetSysClockFreq+0x188>)
 8001f6e:	fba0 1202 	umull	r1, r2, r0, r2
 8001f72:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001f74:	460a      	mov	r2, r1
 8001f76:	62ba      	str	r2, [r7, #40]	; 0x28
 8001f78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f7a:	4413      	add	r3, r2
 8001f7c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f80:	2200      	movs	r2, #0
 8001f82:	61bb      	str	r3, [r7, #24]
 8001f84:	61fa      	str	r2, [r7, #28]
 8001f86:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001f8a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001f8e:	f7fe f9a7 	bl	80002e0 <__aeabi_uldivmod>
 8001f92:	4602      	mov	r2, r0
 8001f94:	460b      	mov	r3, r1
 8001f96:	4613      	mov	r3, r2
 8001f98:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001f9a:	e053      	b.n	8002044 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f9c:	4b35      	ldr	r3, [pc, #212]	; (8002074 <HAL_RCC_GetSysClockFreq+0x180>)
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	099b      	lsrs	r3, r3, #6
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	613b      	str	r3, [r7, #16]
 8001fa6:	617a      	str	r2, [r7, #20]
 8001fa8:	693b      	ldr	r3, [r7, #16]
 8001faa:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001fae:	f04f 0b00 	mov.w	fp, #0
 8001fb2:	4652      	mov	r2, sl
 8001fb4:	465b      	mov	r3, fp
 8001fb6:	f04f 0000 	mov.w	r0, #0
 8001fba:	f04f 0100 	mov.w	r1, #0
 8001fbe:	0159      	lsls	r1, r3, #5
 8001fc0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001fc4:	0150      	lsls	r0, r2, #5
 8001fc6:	4602      	mov	r2, r0
 8001fc8:	460b      	mov	r3, r1
 8001fca:	ebb2 080a 	subs.w	r8, r2, sl
 8001fce:	eb63 090b 	sbc.w	r9, r3, fp
 8001fd2:	f04f 0200 	mov.w	r2, #0
 8001fd6:	f04f 0300 	mov.w	r3, #0
 8001fda:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001fde:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001fe2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001fe6:	ebb2 0408 	subs.w	r4, r2, r8
 8001fea:	eb63 0509 	sbc.w	r5, r3, r9
 8001fee:	f04f 0200 	mov.w	r2, #0
 8001ff2:	f04f 0300 	mov.w	r3, #0
 8001ff6:	00eb      	lsls	r3, r5, #3
 8001ff8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001ffc:	00e2      	lsls	r2, r4, #3
 8001ffe:	4614      	mov	r4, r2
 8002000:	461d      	mov	r5, r3
 8002002:	eb14 030a 	adds.w	r3, r4, sl
 8002006:	603b      	str	r3, [r7, #0]
 8002008:	eb45 030b 	adc.w	r3, r5, fp
 800200c:	607b      	str	r3, [r7, #4]
 800200e:	f04f 0200 	mov.w	r2, #0
 8002012:	f04f 0300 	mov.w	r3, #0
 8002016:	e9d7 4500 	ldrd	r4, r5, [r7]
 800201a:	4629      	mov	r1, r5
 800201c:	028b      	lsls	r3, r1, #10
 800201e:	4621      	mov	r1, r4
 8002020:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002024:	4621      	mov	r1, r4
 8002026:	028a      	lsls	r2, r1, #10
 8002028:	4610      	mov	r0, r2
 800202a:	4619      	mov	r1, r3
 800202c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800202e:	2200      	movs	r2, #0
 8002030:	60bb      	str	r3, [r7, #8]
 8002032:	60fa      	str	r2, [r7, #12]
 8002034:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002038:	f7fe f952 	bl	80002e0 <__aeabi_uldivmod>
 800203c:	4602      	mov	r2, r0
 800203e:	460b      	mov	r3, r1
 8002040:	4613      	mov	r3, r2
 8002042:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002044:	4b0b      	ldr	r3, [pc, #44]	; (8002074 <HAL_RCC_GetSysClockFreq+0x180>)
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	0c1b      	lsrs	r3, r3, #16
 800204a:	f003 0303 	and.w	r3, r3, #3
 800204e:	3301      	adds	r3, #1
 8002050:	005b      	lsls	r3, r3, #1
 8002052:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8002054:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002058:	fbb2 f3f3 	udiv	r3, r2, r3
 800205c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800205e:	e002      	b.n	8002066 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002060:	4b05      	ldr	r3, [pc, #20]	; (8002078 <HAL_RCC_GetSysClockFreq+0x184>)
 8002062:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002064:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002066:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002068:	4618      	mov	r0, r3
 800206a:	3740      	adds	r7, #64	; 0x40
 800206c:	46bd      	mov	sp, r7
 800206e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002072:	bf00      	nop
 8002074:	40023800 	.word	0x40023800
 8002078:	00f42400 	.word	0x00f42400
 800207c:	017d7840 	.word	0x017d7840

08002080 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002080:	b480      	push	{r7}
 8002082:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002084:	4b03      	ldr	r3, [pc, #12]	; (8002094 <HAL_RCC_GetHCLKFreq+0x14>)
 8002086:	681b      	ldr	r3, [r3, #0]
}
 8002088:	4618      	mov	r0, r3
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr
 8002092:	bf00      	nop
 8002094:	20000024 	.word	0x20000024

08002098 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800209c:	f7ff fff0 	bl	8002080 <HAL_RCC_GetHCLKFreq>
 80020a0:	4602      	mov	r2, r0
 80020a2:	4b05      	ldr	r3, [pc, #20]	; (80020b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80020a4:	689b      	ldr	r3, [r3, #8]
 80020a6:	0a9b      	lsrs	r3, r3, #10
 80020a8:	f003 0307 	and.w	r3, r3, #7
 80020ac:	4903      	ldr	r1, [pc, #12]	; (80020bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80020ae:	5ccb      	ldrb	r3, [r1, r3]
 80020b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	bd80      	pop	{r7, pc}
 80020b8:	40023800 	.word	0x40023800
 80020bc:	08005a6c 	.word	0x08005a6c

080020c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80020c4:	f7ff ffdc 	bl	8002080 <HAL_RCC_GetHCLKFreq>
 80020c8:	4602      	mov	r2, r0
 80020ca:	4b05      	ldr	r3, [pc, #20]	; (80020e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80020cc:	689b      	ldr	r3, [r3, #8]
 80020ce:	0b5b      	lsrs	r3, r3, #13
 80020d0:	f003 0307 	and.w	r3, r3, #7
 80020d4:	4903      	ldr	r1, [pc, #12]	; (80020e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80020d6:	5ccb      	ldrb	r3, [r1, r3]
 80020d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020dc:	4618      	mov	r0, r3
 80020de:	bd80      	pop	{r7, pc}
 80020e0:	40023800 	.word	0x40023800
 80020e4:	08005a6c 	.word	0x08005a6c

080020e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b088      	sub	sp, #32
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80020f0:	2300      	movs	r3, #0
 80020f2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80020f4:	2300      	movs	r3, #0
 80020f6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80020f8:	2300      	movs	r3, #0
 80020fa:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80020fc:	2300      	movs	r3, #0
 80020fe:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002100:	2300      	movs	r3, #0
 8002102:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f003 0301 	and.w	r3, r3, #1
 800210c:	2b00      	cmp	r3, #0
 800210e:	d012      	beq.n	8002136 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002110:	4b69      	ldr	r3, [pc, #420]	; (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	4a68      	ldr	r2, [pc, #416]	; (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002116:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800211a:	6093      	str	r3, [r2, #8]
 800211c:	4b66      	ldr	r3, [pc, #408]	; (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800211e:	689a      	ldr	r2, [r3, #8]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002124:	4964      	ldr	r1, [pc, #400]	; (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002126:	4313      	orrs	r3, r2
 8002128:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800212e:	2b00      	cmp	r3, #0
 8002130:	d101      	bne.n	8002136 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002132:	2301      	movs	r3, #1
 8002134:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800213e:	2b00      	cmp	r3, #0
 8002140:	d017      	beq.n	8002172 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002142:	4b5d      	ldr	r3, [pc, #372]	; (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002144:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002148:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002150:	4959      	ldr	r1, [pc, #356]	; (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002152:	4313      	orrs	r3, r2
 8002154:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800215c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002160:	d101      	bne.n	8002166 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002162:	2301      	movs	r3, #1
 8002164:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800216a:	2b00      	cmp	r3, #0
 800216c:	d101      	bne.n	8002172 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800216e:	2301      	movs	r3, #1
 8002170:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800217a:	2b00      	cmp	r3, #0
 800217c:	d017      	beq.n	80021ae <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800217e:	4b4e      	ldr	r3, [pc, #312]	; (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002180:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002184:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218c:	494a      	ldr	r1, [pc, #296]	; (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800218e:	4313      	orrs	r3, r2
 8002190:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002198:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800219c:	d101      	bne.n	80021a2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800219e:	2301      	movs	r3, #1
 80021a0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d101      	bne.n	80021ae <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80021aa:	2301      	movs	r3, #1
 80021ac:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d001      	beq.n	80021be <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80021ba:	2301      	movs	r3, #1
 80021bc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f003 0320 	and.w	r3, r3, #32
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	f000 808b 	beq.w	80022e2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80021cc:	4b3a      	ldr	r3, [pc, #232]	; (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d0:	4a39      	ldr	r2, [pc, #228]	; (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021d6:	6413      	str	r3, [r2, #64]	; 0x40
 80021d8:	4b37      	ldr	r3, [pc, #220]	; (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021e0:	60bb      	str	r3, [r7, #8]
 80021e2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80021e4:	4b35      	ldr	r3, [pc, #212]	; (80022bc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a34      	ldr	r2, [pc, #208]	; (80022bc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80021ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80021f0:	f7fe ff8a 	bl	8001108 <HAL_GetTick>
 80021f4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80021f6:	e008      	b.n	800220a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021f8:	f7fe ff86 	bl	8001108 <HAL_GetTick>
 80021fc:	4602      	mov	r2, r0
 80021fe:	697b      	ldr	r3, [r7, #20]
 8002200:	1ad3      	subs	r3, r2, r3
 8002202:	2b64      	cmp	r3, #100	; 0x64
 8002204:	d901      	bls.n	800220a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002206:	2303      	movs	r3, #3
 8002208:	e38f      	b.n	800292a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800220a:	4b2c      	ldr	r3, [pc, #176]	; (80022bc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002212:	2b00      	cmp	r3, #0
 8002214:	d0f0      	beq.n	80021f8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002216:	4b28      	ldr	r3, [pc, #160]	; (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002218:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800221a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800221e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002220:	693b      	ldr	r3, [r7, #16]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d035      	beq.n	8002292 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800222a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800222e:	693a      	ldr	r2, [r7, #16]
 8002230:	429a      	cmp	r2, r3
 8002232:	d02e      	beq.n	8002292 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002234:	4b20      	ldr	r3, [pc, #128]	; (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002236:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002238:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800223c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800223e:	4b1e      	ldr	r3, [pc, #120]	; (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002240:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002242:	4a1d      	ldr	r2, [pc, #116]	; (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002244:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002248:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800224a:	4b1b      	ldr	r3, [pc, #108]	; (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800224c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800224e:	4a1a      	ldr	r2, [pc, #104]	; (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002250:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002254:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002256:	4a18      	ldr	r2, [pc, #96]	; (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800225c:	4b16      	ldr	r3, [pc, #88]	; (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800225e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002260:	f003 0301 	and.w	r3, r3, #1
 8002264:	2b01      	cmp	r3, #1
 8002266:	d114      	bne.n	8002292 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002268:	f7fe ff4e 	bl	8001108 <HAL_GetTick>
 800226c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800226e:	e00a      	b.n	8002286 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002270:	f7fe ff4a 	bl	8001108 <HAL_GetTick>
 8002274:	4602      	mov	r2, r0
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	1ad3      	subs	r3, r2, r3
 800227a:	f241 3288 	movw	r2, #5000	; 0x1388
 800227e:	4293      	cmp	r3, r2
 8002280:	d901      	bls.n	8002286 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002282:	2303      	movs	r3, #3
 8002284:	e351      	b.n	800292a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002286:	4b0c      	ldr	r3, [pc, #48]	; (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002288:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800228a:	f003 0302 	and.w	r3, r3, #2
 800228e:	2b00      	cmp	r3, #0
 8002290:	d0ee      	beq.n	8002270 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002296:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800229a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800229e:	d111      	bne.n	80022c4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80022a0:	4b05      	ldr	r3, [pc, #20]	; (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022a2:	689b      	ldr	r3, [r3, #8]
 80022a4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80022ac:	4b04      	ldr	r3, [pc, #16]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80022ae:	400b      	ands	r3, r1
 80022b0:	4901      	ldr	r1, [pc, #4]	; (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022b2:	4313      	orrs	r3, r2
 80022b4:	608b      	str	r3, [r1, #8]
 80022b6:	e00b      	b.n	80022d0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80022b8:	40023800 	.word	0x40023800
 80022bc:	40007000 	.word	0x40007000
 80022c0:	0ffffcff 	.word	0x0ffffcff
 80022c4:	4bac      	ldr	r3, [pc, #688]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022c6:	689b      	ldr	r3, [r3, #8]
 80022c8:	4aab      	ldr	r2, [pc, #684]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022ca:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80022ce:	6093      	str	r3, [r2, #8]
 80022d0:	4ba9      	ldr	r3, [pc, #676]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022d2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022dc:	49a6      	ldr	r1, [pc, #664]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022de:	4313      	orrs	r3, r2
 80022e0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f003 0310 	and.w	r3, r3, #16
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d010      	beq.n	8002310 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80022ee:	4ba2      	ldr	r3, [pc, #648]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80022f4:	4aa0      	ldr	r2, [pc, #640]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80022fa:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80022fe:	4b9e      	ldr	r3, [pc, #632]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002300:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002308:	499b      	ldr	r1, [pc, #620]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800230a:	4313      	orrs	r3, r2
 800230c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002318:	2b00      	cmp	r3, #0
 800231a:	d00a      	beq.n	8002332 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800231c:	4b96      	ldr	r3, [pc, #600]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800231e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002322:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800232a:	4993      	ldr	r1, [pc, #588]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800232c:	4313      	orrs	r3, r2
 800232e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800233a:	2b00      	cmp	r3, #0
 800233c:	d00a      	beq.n	8002354 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800233e:	4b8e      	ldr	r3, [pc, #568]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002340:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002344:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800234c:	498a      	ldr	r1, [pc, #552]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800234e:	4313      	orrs	r3, r2
 8002350:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800235c:	2b00      	cmp	r3, #0
 800235e:	d00a      	beq.n	8002376 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002360:	4b85      	ldr	r3, [pc, #532]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002362:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002366:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800236e:	4982      	ldr	r1, [pc, #520]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002370:	4313      	orrs	r3, r2
 8002372:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800237e:	2b00      	cmp	r3, #0
 8002380:	d00a      	beq.n	8002398 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002382:	4b7d      	ldr	r3, [pc, #500]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002384:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002388:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002390:	4979      	ldr	r1, [pc, #484]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002392:	4313      	orrs	r3, r2
 8002394:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d00a      	beq.n	80023ba <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80023a4:	4b74      	ldr	r3, [pc, #464]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023aa:	f023 0203 	bic.w	r2, r3, #3
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023b2:	4971      	ldr	r1, [pc, #452]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023b4:	4313      	orrs	r3, r2
 80023b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d00a      	beq.n	80023dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80023c6:	4b6c      	ldr	r3, [pc, #432]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023cc:	f023 020c 	bic.w	r2, r3, #12
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023d4:	4968      	ldr	r1, [pc, #416]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023d6:	4313      	orrs	r3, r2
 80023d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d00a      	beq.n	80023fe <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80023e8:	4b63      	ldr	r3, [pc, #396]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023ee:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023f6:	4960      	ldr	r1, [pc, #384]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023f8:	4313      	orrs	r3, r2
 80023fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002406:	2b00      	cmp	r3, #0
 8002408:	d00a      	beq.n	8002420 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800240a:	4b5b      	ldr	r3, [pc, #364]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800240c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002410:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002418:	4957      	ldr	r1, [pc, #348]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800241a:	4313      	orrs	r3, r2
 800241c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002428:	2b00      	cmp	r3, #0
 800242a:	d00a      	beq.n	8002442 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800242c:	4b52      	ldr	r3, [pc, #328]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800242e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002432:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800243a:	494f      	ldr	r1, [pc, #316]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800243c:	4313      	orrs	r3, r2
 800243e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800244a:	2b00      	cmp	r3, #0
 800244c:	d00a      	beq.n	8002464 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800244e:	4b4a      	ldr	r3, [pc, #296]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002450:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002454:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800245c:	4946      	ldr	r1, [pc, #280]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800245e:	4313      	orrs	r3, r2
 8002460:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800246c:	2b00      	cmp	r3, #0
 800246e:	d00a      	beq.n	8002486 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002470:	4b41      	ldr	r3, [pc, #260]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002472:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002476:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800247e:	493e      	ldr	r1, [pc, #248]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002480:	4313      	orrs	r3, r2
 8002482:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800248e:	2b00      	cmp	r3, #0
 8002490:	d00a      	beq.n	80024a8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002492:	4b39      	ldr	r3, [pc, #228]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002494:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002498:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024a0:	4935      	ldr	r1, [pc, #212]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80024a2:	4313      	orrs	r3, r2
 80024a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d00a      	beq.n	80024ca <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80024b4:	4b30      	ldr	r3, [pc, #192]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80024b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024ba:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80024c2:	492d      	ldr	r1, [pc, #180]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80024c4:	4313      	orrs	r3, r2
 80024c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d011      	beq.n	80024fa <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80024d6:	4b28      	ldr	r3, [pc, #160]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80024d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024dc:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80024e4:	4924      	ldr	r1, [pc, #144]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80024e6:	4313      	orrs	r3, r2
 80024e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80024f0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80024f4:	d101      	bne.n	80024fa <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80024f6:	2301      	movs	r3, #1
 80024f8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 0308 	and.w	r3, r3, #8
 8002502:	2b00      	cmp	r3, #0
 8002504:	d001      	beq.n	800250a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002506:	2301      	movs	r3, #1
 8002508:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002512:	2b00      	cmp	r3, #0
 8002514:	d00a      	beq.n	800252c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002516:	4b18      	ldr	r3, [pc, #96]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002518:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800251c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002524:	4914      	ldr	r1, [pc, #80]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002526:	4313      	orrs	r3, r2
 8002528:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002534:	2b00      	cmp	r3, #0
 8002536:	d00b      	beq.n	8002550 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002538:	4b0f      	ldr	r3, [pc, #60]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800253a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800253e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002548:	490b      	ldr	r1, [pc, #44]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800254a:	4313      	orrs	r3, r2
 800254c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002558:	2b00      	cmp	r3, #0
 800255a:	d00f      	beq.n	800257c <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800255c:	4b06      	ldr	r3, [pc, #24]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800255e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002562:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800256c:	4902      	ldr	r1, [pc, #8]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800256e:	4313      	orrs	r3, r2
 8002570:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002574:	e002      	b.n	800257c <HAL_RCCEx_PeriphCLKConfig+0x494>
 8002576:	bf00      	nop
 8002578:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002584:	2b00      	cmp	r3, #0
 8002586:	d00b      	beq.n	80025a0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002588:	4b8a      	ldr	r3, [pc, #552]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800258a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800258e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002598:	4986      	ldr	r1, [pc, #536]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800259a:	4313      	orrs	r3, r2
 800259c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d00b      	beq.n	80025c4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80025ac:	4b81      	ldr	r3, [pc, #516]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80025ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80025b2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80025bc:	497d      	ldr	r1, [pc, #500]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80025be:	4313      	orrs	r3, r2
 80025c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80025c4:	69fb      	ldr	r3, [r7, #28]
 80025c6:	2b01      	cmp	r3, #1
 80025c8:	d006      	beq.n	80025d8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	f000 80d6 	beq.w	8002784 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80025d8:	4b76      	ldr	r3, [pc, #472]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a75      	ldr	r2, [pc, #468]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80025de:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80025e2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025e4:	f7fe fd90 	bl	8001108 <HAL_GetTick>
 80025e8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80025ea:	e008      	b.n	80025fe <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80025ec:	f7fe fd8c 	bl	8001108 <HAL_GetTick>
 80025f0:	4602      	mov	r2, r0
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	1ad3      	subs	r3, r2, r3
 80025f6:	2b64      	cmp	r3, #100	; 0x64
 80025f8:	d901      	bls.n	80025fe <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80025fa:	2303      	movs	r3, #3
 80025fc:	e195      	b.n	800292a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80025fe:	4b6d      	ldr	r3, [pc, #436]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002606:	2b00      	cmp	r3, #0
 8002608:	d1f0      	bne.n	80025ec <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f003 0301 	and.w	r3, r3, #1
 8002612:	2b00      	cmp	r3, #0
 8002614:	d021      	beq.n	800265a <HAL_RCCEx_PeriphCLKConfig+0x572>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800261a:	2b00      	cmp	r3, #0
 800261c:	d11d      	bne.n	800265a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800261e:	4b65      	ldr	r3, [pc, #404]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002620:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002624:	0c1b      	lsrs	r3, r3, #16
 8002626:	f003 0303 	and.w	r3, r3, #3
 800262a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800262c:	4b61      	ldr	r3, [pc, #388]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800262e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002632:	0e1b      	lsrs	r3, r3, #24
 8002634:	f003 030f 	and.w	r3, r3, #15
 8002638:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	019a      	lsls	r2, r3, #6
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	041b      	lsls	r3, r3, #16
 8002644:	431a      	orrs	r2, r3
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	061b      	lsls	r3, r3, #24
 800264a:	431a      	orrs	r2, r3
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	689b      	ldr	r3, [r3, #8]
 8002650:	071b      	lsls	r3, r3, #28
 8002652:	4958      	ldr	r1, [pc, #352]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002654:	4313      	orrs	r3, r2
 8002656:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002662:	2b00      	cmp	r3, #0
 8002664:	d004      	beq.n	8002670 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800266a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800266e:	d00a      	beq.n	8002686 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002678:	2b00      	cmp	r3, #0
 800267a:	d02e      	beq.n	80026da <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002680:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002684:	d129      	bne.n	80026da <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002686:	4b4b      	ldr	r3, [pc, #300]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002688:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800268c:	0c1b      	lsrs	r3, r3, #16
 800268e:	f003 0303 	and.w	r3, r3, #3
 8002692:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002694:	4b47      	ldr	r3, [pc, #284]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002696:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800269a:	0f1b      	lsrs	r3, r3, #28
 800269c:	f003 0307 	and.w	r3, r3, #7
 80026a0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	019a      	lsls	r2, r3, #6
 80026a8:	693b      	ldr	r3, [r7, #16]
 80026aa:	041b      	lsls	r3, r3, #16
 80026ac:	431a      	orrs	r2, r3
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	68db      	ldr	r3, [r3, #12]
 80026b2:	061b      	lsls	r3, r3, #24
 80026b4:	431a      	orrs	r2, r3
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	071b      	lsls	r3, r3, #28
 80026ba:	493e      	ldr	r1, [pc, #248]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80026bc:	4313      	orrs	r3, r2
 80026be:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80026c2:	4b3c      	ldr	r3, [pc, #240]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80026c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80026c8:	f023 021f 	bic.w	r2, r3, #31
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d0:	3b01      	subs	r3, #1
 80026d2:	4938      	ldr	r1, [pc, #224]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80026d4:	4313      	orrs	r3, r2
 80026d6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d01d      	beq.n	8002722 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80026e6:	4b33      	ldr	r3, [pc, #204]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80026e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80026ec:	0e1b      	lsrs	r3, r3, #24
 80026ee:	f003 030f 	and.w	r3, r3, #15
 80026f2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80026f4:	4b2f      	ldr	r3, [pc, #188]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80026f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80026fa:	0f1b      	lsrs	r3, r3, #28
 80026fc:	f003 0307 	and.w	r3, r3, #7
 8002700:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	019a      	lsls	r2, r3, #6
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	691b      	ldr	r3, [r3, #16]
 800270c:	041b      	lsls	r3, r3, #16
 800270e:	431a      	orrs	r2, r3
 8002710:	693b      	ldr	r3, [r7, #16]
 8002712:	061b      	lsls	r3, r3, #24
 8002714:	431a      	orrs	r2, r3
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	071b      	lsls	r3, r3, #28
 800271a:	4926      	ldr	r1, [pc, #152]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800271c:	4313      	orrs	r3, r2
 800271e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800272a:	2b00      	cmp	r3, #0
 800272c:	d011      	beq.n	8002752 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	019a      	lsls	r2, r3, #6
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	691b      	ldr	r3, [r3, #16]
 8002738:	041b      	lsls	r3, r3, #16
 800273a:	431a      	orrs	r2, r3
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	68db      	ldr	r3, [r3, #12]
 8002740:	061b      	lsls	r3, r3, #24
 8002742:	431a      	orrs	r2, r3
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	071b      	lsls	r3, r3, #28
 800274a:	491a      	ldr	r1, [pc, #104]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800274c:	4313      	orrs	r3, r2
 800274e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002752:	4b18      	ldr	r3, [pc, #96]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a17      	ldr	r2, [pc, #92]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002758:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800275c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800275e:	f7fe fcd3 	bl	8001108 <HAL_GetTick>
 8002762:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002764:	e008      	b.n	8002778 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002766:	f7fe fccf 	bl	8001108 <HAL_GetTick>
 800276a:	4602      	mov	r2, r0
 800276c:	697b      	ldr	r3, [r7, #20]
 800276e:	1ad3      	subs	r3, r2, r3
 8002770:	2b64      	cmp	r3, #100	; 0x64
 8002772:	d901      	bls.n	8002778 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002774:	2303      	movs	r3, #3
 8002776:	e0d8      	b.n	800292a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002778:	4b0e      	ldr	r3, [pc, #56]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002780:	2b00      	cmp	r3, #0
 8002782:	d0f0      	beq.n	8002766 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002784:	69bb      	ldr	r3, [r7, #24]
 8002786:	2b01      	cmp	r3, #1
 8002788:	f040 80ce 	bne.w	8002928 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800278c:	4b09      	ldr	r3, [pc, #36]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a08      	ldr	r2, [pc, #32]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002792:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002796:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002798:	f7fe fcb6 	bl	8001108 <HAL_GetTick>
 800279c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800279e:	e00b      	b.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80027a0:	f7fe fcb2 	bl	8001108 <HAL_GetTick>
 80027a4:	4602      	mov	r2, r0
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	1ad3      	subs	r3, r2, r3
 80027aa:	2b64      	cmp	r3, #100	; 0x64
 80027ac:	d904      	bls.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80027ae:	2303      	movs	r3, #3
 80027b0:	e0bb      	b.n	800292a <HAL_RCCEx_PeriphCLKConfig+0x842>
 80027b2:	bf00      	nop
 80027b4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80027b8:	4b5e      	ldr	r3, [pc, #376]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80027c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80027c4:	d0ec      	beq.n	80027a0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d003      	beq.n	80027da <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d009      	beq.n	80027ee <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d02e      	beq.n	8002844 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d12a      	bne.n	8002844 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80027ee:	4b51      	ldr	r3, [pc, #324]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80027f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027f4:	0c1b      	lsrs	r3, r3, #16
 80027f6:	f003 0303 	and.w	r3, r3, #3
 80027fa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80027fc:	4b4d      	ldr	r3, [pc, #308]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80027fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002802:	0f1b      	lsrs	r3, r3, #28
 8002804:	f003 0307 	and.w	r3, r3, #7
 8002808:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	695b      	ldr	r3, [r3, #20]
 800280e:	019a      	lsls	r2, r3, #6
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	041b      	lsls	r3, r3, #16
 8002814:	431a      	orrs	r2, r3
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	699b      	ldr	r3, [r3, #24]
 800281a:	061b      	lsls	r3, r3, #24
 800281c:	431a      	orrs	r2, r3
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	071b      	lsls	r3, r3, #28
 8002822:	4944      	ldr	r1, [pc, #272]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002824:	4313      	orrs	r3, r2
 8002826:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800282a:	4b42      	ldr	r3, [pc, #264]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800282c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002830:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002838:	3b01      	subs	r3, #1
 800283a:	021b      	lsls	r3, r3, #8
 800283c:	493d      	ldr	r1, [pc, #244]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800283e:	4313      	orrs	r3, r2
 8002840:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800284c:	2b00      	cmp	r3, #0
 800284e:	d022      	beq.n	8002896 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002854:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002858:	d11d      	bne.n	8002896 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800285a:	4b36      	ldr	r3, [pc, #216]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800285c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002860:	0e1b      	lsrs	r3, r3, #24
 8002862:	f003 030f 	and.w	r3, r3, #15
 8002866:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002868:	4b32      	ldr	r3, [pc, #200]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800286a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800286e:	0f1b      	lsrs	r3, r3, #28
 8002870:	f003 0307 	and.w	r3, r3, #7
 8002874:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	695b      	ldr	r3, [r3, #20]
 800287a:	019a      	lsls	r2, r3, #6
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6a1b      	ldr	r3, [r3, #32]
 8002880:	041b      	lsls	r3, r3, #16
 8002882:	431a      	orrs	r2, r3
 8002884:	693b      	ldr	r3, [r7, #16]
 8002886:	061b      	lsls	r3, r3, #24
 8002888:	431a      	orrs	r2, r3
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	071b      	lsls	r3, r3, #28
 800288e:	4929      	ldr	r1, [pc, #164]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002890:	4313      	orrs	r3, r2
 8002892:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f003 0308 	and.w	r3, r3, #8
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d028      	beq.n	80028f4 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80028a2:	4b24      	ldr	r3, [pc, #144]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80028a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028a8:	0e1b      	lsrs	r3, r3, #24
 80028aa:	f003 030f 	and.w	r3, r3, #15
 80028ae:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80028b0:	4b20      	ldr	r3, [pc, #128]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80028b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028b6:	0c1b      	lsrs	r3, r3, #16
 80028b8:	f003 0303 	and.w	r3, r3, #3
 80028bc:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	695b      	ldr	r3, [r3, #20]
 80028c2:	019a      	lsls	r2, r3, #6
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	041b      	lsls	r3, r3, #16
 80028c8:	431a      	orrs	r2, r3
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	061b      	lsls	r3, r3, #24
 80028ce:	431a      	orrs	r2, r3
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	69db      	ldr	r3, [r3, #28]
 80028d4:	071b      	lsls	r3, r3, #28
 80028d6:	4917      	ldr	r1, [pc, #92]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80028d8:	4313      	orrs	r3, r2
 80028da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80028de:	4b15      	ldr	r3, [pc, #84]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80028e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80028e4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ec:	4911      	ldr	r1, [pc, #68]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80028ee:	4313      	orrs	r3, r2
 80028f0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80028f4:	4b0f      	ldr	r3, [pc, #60]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a0e      	ldr	r2, [pc, #56]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80028fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028fe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002900:	f7fe fc02 	bl	8001108 <HAL_GetTick>
 8002904:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002906:	e008      	b.n	800291a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002908:	f7fe fbfe 	bl	8001108 <HAL_GetTick>
 800290c:	4602      	mov	r2, r0
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	1ad3      	subs	r3, r2, r3
 8002912:	2b64      	cmp	r3, #100	; 0x64
 8002914:	d901      	bls.n	800291a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002916:	2303      	movs	r3, #3
 8002918:	e007      	b.n	800292a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800291a:	4b06      	ldr	r3, [pc, #24]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002922:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002926:	d1ef      	bne.n	8002908 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8002928:	2300      	movs	r3, #0
}
 800292a:	4618      	mov	r0, r3
 800292c:	3720      	adds	r7, #32
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}
 8002932:	bf00      	nop
 8002934:	40023800 	.word	0x40023800

08002938 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b084      	sub	sp, #16
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d101      	bne.n	800294a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	e09d      	b.n	8002a86 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800294e:	2b00      	cmp	r3, #0
 8002950:	d108      	bne.n	8002964 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800295a:	d009      	beq.n	8002970 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2200      	movs	r2, #0
 8002960:	61da      	str	r2, [r3, #28]
 8002962:	e005      	b.n	8002970 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2200      	movs	r2, #0
 8002968:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2200      	movs	r2, #0
 800296e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2200      	movs	r2, #0
 8002974:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800297c:	b2db      	uxtb	r3, r3
 800297e:	2b00      	cmp	r3, #0
 8002980:	d106      	bne.n	8002990 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2200      	movs	r2, #0
 8002986:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800298a:	6878      	ldr	r0, [r7, #4]
 800298c:	f7fe f954 	bl	8000c38 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2202      	movs	r2, #2
 8002994:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	681a      	ldr	r2, [r3, #0]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80029a6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	68db      	ldr	r3, [r3, #12]
 80029ac:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80029b0:	d902      	bls.n	80029b8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80029b2:	2300      	movs	r3, #0
 80029b4:	60fb      	str	r3, [r7, #12]
 80029b6:	e002      	b.n	80029be <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80029b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80029bc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	68db      	ldr	r3, [r3, #12]
 80029c2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80029c6:	d007      	beq.n	80029d8 <HAL_SPI_Init+0xa0>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	68db      	ldr	r3, [r3, #12]
 80029cc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80029d0:	d002      	beq.n	80029d8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2200      	movs	r2, #0
 80029d6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	689b      	ldr	r3, [r3, #8]
 80029e4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80029e8:	431a      	orrs	r2, r3
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	691b      	ldr	r3, [r3, #16]
 80029ee:	f003 0302 	and.w	r3, r3, #2
 80029f2:	431a      	orrs	r2, r3
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	695b      	ldr	r3, [r3, #20]
 80029f8:	f003 0301 	and.w	r3, r3, #1
 80029fc:	431a      	orrs	r2, r3
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	699b      	ldr	r3, [r3, #24]
 8002a02:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a06:	431a      	orrs	r2, r3
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	69db      	ldr	r3, [r3, #28]
 8002a0c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002a10:	431a      	orrs	r2, r3
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6a1b      	ldr	r3, [r3, #32]
 8002a16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a1a:	ea42 0103 	orr.w	r1, r2, r3
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a22:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	430a      	orrs	r2, r1
 8002a2c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	699b      	ldr	r3, [r3, #24]
 8002a32:	0c1b      	lsrs	r3, r3, #16
 8002a34:	f003 0204 	and.w	r2, r3, #4
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a3c:	f003 0310 	and.w	r3, r3, #16
 8002a40:	431a      	orrs	r2, r3
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a46:	f003 0308 	and.w	r3, r3, #8
 8002a4a:	431a      	orrs	r2, r3
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	68db      	ldr	r3, [r3, #12]
 8002a50:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002a54:	ea42 0103 	orr.w	r1, r2, r3
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	430a      	orrs	r2, r1
 8002a64:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	69da      	ldr	r2, [r3, #28]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a74:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2201      	movs	r2, #1
 8002a80:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002a84:	2300      	movs	r3, #0
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	3710      	adds	r7, #16
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}

08002a8e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a8e:	b580      	push	{r7, lr}
 8002a90:	b088      	sub	sp, #32
 8002a92:	af02      	add	r7, sp, #8
 8002a94:	60f8      	str	r0, [r7, #12]
 8002a96:	60b9      	str	r1, [r7, #8]
 8002a98:	603b      	str	r3, [r7, #0]
 8002a9a:	4613      	mov	r3, r2
 8002a9c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002aaa:	d112      	bne.n	8002ad2 <HAL_SPI_Receive+0x44>
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	689b      	ldr	r3, [r3, #8]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d10e      	bne.n	8002ad2 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	2204      	movs	r2, #4
 8002ab8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002abc:	88fa      	ldrh	r2, [r7, #6]
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	9300      	str	r3, [sp, #0]
 8002ac2:	4613      	mov	r3, r2
 8002ac4:	68ba      	ldr	r2, [r7, #8]
 8002ac6:	68b9      	ldr	r1, [r7, #8]
 8002ac8:	68f8      	ldr	r0, [r7, #12]
 8002aca:	f000 f910 	bl	8002cee <HAL_SPI_TransmitReceive>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	e109      	b.n	8002ce6 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002ad8:	2b01      	cmp	r3, #1
 8002ada:	d101      	bne.n	8002ae0 <HAL_SPI_Receive+0x52>
 8002adc:	2302      	movs	r3, #2
 8002ade:	e102      	b.n	8002ce6 <HAL_SPI_Receive+0x258>
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002ae8:	f7fe fb0e 	bl	8001108 <HAL_GetTick>
 8002aec:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002af4:	b2db      	uxtb	r3, r3
 8002af6:	2b01      	cmp	r3, #1
 8002af8:	d002      	beq.n	8002b00 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8002afa:	2302      	movs	r3, #2
 8002afc:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002afe:	e0e9      	b.n	8002cd4 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d002      	beq.n	8002b0c <HAL_SPI_Receive+0x7e>
 8002b06:	88fb      	ldrh	r3, [r7, #6]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d102      	bne.n	8002b12 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002b10:	e0e0      	b.n	8002cd4 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	2204      	movs	r2, #4
 8002b16:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	68ba      	ldr	r2, [r7, #8]
 8002b24:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	88fa      	ldrh	r2, [r7, #6]
 8002b2a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	88fa      	ldrh	r2, [r7, #6]
 8002b32:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	2200      	movs	r2, #0
 8002b46:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	2200      	movs	r2, #0
 8002b52:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	68db      	ldr	r3, [r3, #12]
 8002b58:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002b5c:	d908      	bls.n	8002b70 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	685a      	ldr	r2, [r3, #4]
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002b6c:	605a      	str	r2, [r3, #4]
 8002b6e:	e007      	b.n	8002b80 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	685a      	ldr	r2, [r3, #4]
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002b7e:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b88:	d10f      	bne.n	8002baa <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	681a      	ldr	r2, [r3, #0]
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b98:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	681a      	ldr	r2, [r3, #0]
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002ba8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bb4:	2b40      	cmp	r3, #64	; 0x40
 8002bb6:	d007      	beq.n	8002bc8 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	681a      	ldr	r2, [r3, #0]
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002bc6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	68db      	ldr	r3, [r3, #12]
 8002bcc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002bd0:	d867      	bhi.n	8002ca2 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002bd2:	e030      	b.n	8002c36 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	689b      	ldr	r3, [r3, #8]
 8002bda:	f003 0301 	and.w	r3, r3, #1
 8002bde:	2b01      	cmp	r3, #1
 8002be0:	d117      	bne.n	8002c12 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f103 020c 	add.w	r2, r3, #12
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bee:	7812      	ldrb	r2, [r2, #0]
 8002bf0:	b2d2      	uxtb	r2, r2
 8002bf2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf8:	1c5a      	adds	r2, r3, #1
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002c04:	b29b      	uxth	r3, r3
 8002c06:	3b01      	subs	r3, #1
 8002c08:	b29a      	uxth	r2, r3
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8002c10:	e011      	b.n	8002c36 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002c12:	f7fe fa79 	bl	8001108 <HAL_GetTick>
 8002c16:	4602      	mov	r2, r0
 8002c18:	693b      	ldr	r3, [r7, #16]
 8002c1a:	1ad3      	subs	r3, r2, r3
 8002c1c:	683a      	ldr	r2, [r7, #0]
 8002c1e:	429a      	cmp	r2, r3
 8002c20:	d803      	bhi.n	8002c2a <HAL_SPI_Receive+0x19c>
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c28:	d102      	bne.n	8002c30 <HAL_SPI_Receive+0x1a2>
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d102      	bne.n	8002c36 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8002c30:	2303      	movs	r3, #3
 8002c32:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002c34:	e04e      	b.n	8002cd4 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002c3c:	b29b      	uxth	r3, r3
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d1c8      	bne.n	8002bd4 <HAL_SPI_Receive+0x146>
 8002c42:	e034      	b.n	8002cae <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	689b      	ldr	r3, [r3, #8]
 8002c4a:	f003 0301 	and.w	r3, r3, #1
 8002c4e:	2b01      	cmp	r3, #1
 8002c50:	d115      	bne.n	8002c7e <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	68da      	ldr	r2, [r3, #12]
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c5c:	b292      	uxth	r2, r2
 8002c5e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c64:	1c9a      	adds	r2, r3, #2
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002c70:	b29b      	uxth	r3, r3
 8002c72:	3b01      	subs	r3, #1
 8002c74:	b29a      	uxth	r2, r3
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8002c7c:	e011      	b.n	8002ca2 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002c7e:	f7fe fa43 	bl	8001108 <HAL_GetTick>
 8002c82:	4602      	mov	r2, r0
 8002c84:	693b      	ldr	r3, [r7, #16]
 8002c86:	1ad3      	subs	r3, r2, r3
 8002c88:	683a      	ldr	r2, [r7, #0]
 8002c8a:	429a      	cmp	r2, r3
 8002c8c:	d803      	bhi.n	8002c96 <HAL_SPI_Receive+0x208>
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c94:	d102      	bne.n	8002c9c <HAL_SPI_Receive+0x20e>
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d102      	bne.n	8002ca2 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8002c9c:	2303      	movs	r3, #3
 8002c9e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002ca0:	e018      	b.n	8002cd4 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002ca8:	b29b      	uxth	r3, r3
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d1ca      	bne.n	8002c44 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002cae:	693a      	ldr	r2, [r7, #16]
 8002cb0:	6839      	ldr	r1, [r7, #0]
 8002cb2:	68f8      	ldr	r0, [r7, #12]
 8002cb4:	f000 fd28 	bl	8003708 <SPI_EndRxTransaction>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d002      	beq.n	8002cc4 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	2220      	movs	r2, #32
 8002cc2:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d002      	beq.n	8002cd2 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	75fb      	strb	r3, [r7, #23]
 8002cd0:	e000      	b.n	8002cd4 <HAL_SPI_Receive+0x246>
  }

error :
 8002cd2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002ce4:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	3718      	adds	r7, #24
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}

08002cee <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002cee:	b580      	push	{r7, lr}
 8002cf0:	b08a      	sub	sp, #40	; 0x28
 8002cf2:	af00      	add	r7, sp, #0
 8002cf4:	60f8      	str	r0, [r7, #12]
 8002cf6:	60b9      	str	r1, [r7, #8]
 8002cf8:	607a      	str	r2, [r7, #4]
 8002cfa:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002d00:	2300      	movs	r3, #0
 8002d02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002d0c:	2b01      	cmp	r3, #1
 8002d0e:	d101      	bne.n	8002d14 <HAL_SPI_TransmitReceive+0x26>
 8002d10:	2302      	movs	r3, #2
 8002d12:	e1fb      	b.n	800310c <HAL_SPI_TransmitReceive+0x41e>
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	2201      	movs	r2, #1
 8002d18:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002d1c:	f7fe f9f4 	bl	8001108 <HAL_GetTick>
 8002d20:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002d28:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8002d30:	887b      	ldrh	r3, [r7, #2]
 8002d32:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8002d34:	887b      	ldrh	r3, [r7, #2]
 8002d36:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002d38:	7efb      	ldrb	r3, [r7, #27]
 8002d3a:	2b01      	cmp	r3, #1
 8002d3c:	d00e      	beq.n	8002d5c <HAL_SPI_TransmitReceive+0x6e>
 8002d3e:	697b      	ldr	r3, [r7, #20]
 8002d40:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002d44:	d106      	bne.n	8002d54 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	689b      	ldr	r3, [r3, #8]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d102      	bne.n	8002d54 <HAL_SPI_TransmitReceive+0x66>
 8002d4e:	7efb      	ldrb	r3, [r7, #27]
 8002d50:	2b04      	cmp	r3, #4
 8002d52:	d003      	beq.n	8002d5c <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8002d54:	2302      	movs	r3, #2
 8002d56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8002d5a:	e1cd      	b.n	80030f8 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d005      	beq.n	8002d6e <HAL_SPI_TransmitReceive+0x80>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d002      	beq.n	8002d6e <HAL_SPI_TransmitReceive+0x80>
 8002d68:	887b      	ldrh	r3, [r7, #2]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d103      	bne.n	8002d76 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8002d74:	e1c0      	b.n	80030f8 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002d7c:	b2db      	uxtb	r3, r3
 8002d7e:	2b04      	cmp	r3, #4
 8002d80:	d003      	beq.n	8002d8a <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	2205      	movs	r2, #5
 8002d86:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	687a      	ldr	r2, [r7, #4]
 8002d94:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	887a      	ldrh	r2, [r7, #2]
 8002d9a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	887a      	ldrh	r2, [r7, #2]
 8002da2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	68ba      	ldr	r2, [r7, #8]
 8002daa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	887a      	ldrh	r2, [r7, #2]
 8002db0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	887a      	ldrh	r2, [r7, #2]
 8002db6:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	68db      	ldr	r3, [r3, #12]
 8002dc8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002dcc:	d802      	bhi.n	8002dd4 <HAL_SPI_TransmitReceive+0xe6>
 8002dce:	8a3b      	ldrh	r3, [r7, #16]
 8002dd0:	2b01      	cmp	r3, #1
 8002dd2:	d908      	bls.n	8002de6 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	685a      	ldr	r2, [r3, #4]
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002de2:	605a      	str	r2, [r3, #4]
 8002de4:	e007      	b.n	8002df6 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	685a      	ldr	r2, [r3, #4]
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002df4:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e00:	2b40      	cmp	r3, #64	; 0x40
 8002e02:	d007      	beq.n	8002e14 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	681a      	ldr	r2, [r3, #0]
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e12:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	68db      	ldr	r3, [r3, #12]
 8002e18:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002e1c:	d97c      	bls.n	8002f18 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d002      	beq.n	8002e2c <HAL_SPI_TransmitReceive+0x13e>
 8002e26:	8a7b      	ldrh	r3, [r7, #18]
 8002e28:	2b01      	cmp	r3, #1
 8002e2a:	d169      	bne.n	8002f00 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e30:	881a      	ldrh	r2, [r3, #0]
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e3c:	1c9a      	adds	r2, r3, #2
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e46:	b29b      	uxth	r3, r3
 8002e48:	3b01      	subs	r3, #1
 8002e4a:	b29a      	uxth	r2, r3
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002e50:	e056      	b.n	8002f00 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	f003 0302 	and.w	r3, r3, #2
 8002e5c:	2b02      	cmp	r3, #2
 8002e5e:	d11b      	bne.n	8002e98 <HAL_SPI_TransmitReceive+0x1aa>
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e64:	b29b      	uxth	r3, r3
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d016      	beq.n	8002e98 <HAL_SPI_TransmitReceive+0x1aa>
 8002e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e6c:	2b01      	cmp	r3, #1
 8002e6e:	d113      	bne.n	8002e98 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e74:	881a      	ldrh	r2, [r3, #0]
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e80:	1c9a      	adds	r2, r3, #2
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e8a:	b29b      	uxth	r3, r3
 8002e8c:	3b01      	subs	r3, #1
 8002e8e:	b29a      	uxth	r2, r3
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002e94:	2300      	movs	r3, #0
 8002e96:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	f003 0301 	and.w	r3, r3, #1
 8002ea2:	2b01      	cmp	r3, #1
 8002ea4:	d11c      	bne.n	8002ee0 <HAL_SPI_TransmitReceive+0x1f2>
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002eac:	b29b      	uxth	r3, r3
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d016      	beq.n	8002ee0 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	68da      	ldr	r2, [r3, #12]
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ebc:	b292      	uxth	r2, r2
 8002ebe:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec4:	1c9a      	adds	r2, r3, #2
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002ed0:	b29b      	uxth	r3, r3
 8002ed2:	3b01      	subs	r3, #1
 8002ed4:	b29a      	uxth	r2, r3
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002edc:	2301      	movs	r3, #1
 8002ede:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002ee0:	f7fe f912 	bl	8001108 <HAL_GetTick>
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	69fb      	ldr	r3, [r7, #28]
 8002ee8:	1ad3      	subs	r3, r2, r3
 8002eea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002eec:	429a      	cmp	r2, r3
 8002eee:	d807      	bhi.n	8002f00 <HAL_SPI_TransmitReceive+0x212>
 8002ef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ef2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ef6:	d003      	beq.n	8002f00 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8002ef8:	2303      	movs	r3, #3
 8002efa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8002efe:	e0fb      	b.n	80030f8 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f04:	b29b      	uxth	r3, r3
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d1a3      	bne.n	8002e52 <HAL_SPI_TransmitReceive+0x164>
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002f10:	b29b      	uxth	r3, r3
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d19d      	bne.n	8002e52 <HAL_SPI_TransmitReceive+0x164>
 8002f16:	e0df      	b.n	80030d8 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d003      	beq.n	8002f28 <HAL_SPI_TransmitReceive+0x23a>
 8002f20:	8a7b      	ldrh	r3, [r7, #18]
 8002f22:	2b01      	cmp	r3, #1
 8002f24:	f040 80cb 	bne.w	80030be <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f2c:	b29b      	uxth	r3, r3
 8002f2e:	2b01      	cmp	r3, #1
 8002f30:	d912      	bls.n	8002f58 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f36:	881a      	ldrh	r2, [r3, #0]
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f42:	1c9a      	adds	r2, r3, #2
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f4c:	b29b      	uxth	r3, r3
 8002f4e:	3b02      	subs	r3, #2
 8002f50:	b29a      	uxth	r2, r3
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002f56:	e0b2      	b.n	80030be <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	330c      	adds	r3, #12
 8002f62:	7812      	ldrb	r2, [r2, #0]
 8002f64:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f6a:	1c5a      	adds	r2, r3, #1
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f74:	b29b      	uxth	r3, r3
 8002f76:	3b01      	subs	r3, #1
 8002f78:	b29a      	uxth	r2, r3
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002f7e:	e09e      	b.n	80030be <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	f003 0302 	and.w	r3, r3, #2
 8002f8a:	2b02      	cmp	r3, #2
 8002f8c:	d134      	bne.n	8002ff8 <HAL_SPI_TransmitReceive+0x30a>
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f92:	b29b      	uxth	r3, r3
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d02f      	beq.n	8002ff8 <HAL_SPI_TransmitReceive+0x30a>
 8002f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f9a:	2b01      	cmp	r3, #1
 8002f9c:	d12c      	bne.n	8002ff8 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fa2:	b29b      	uxth	r3, r3
 8002fa4:	2b01      	cmp	r3, #1
 8002fa6:	d912      	bls.n	8002fce <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fac:	881a      	ldrh	r2, [r3, #0]
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fb8:	1c9a      	adds	r2, r3, #2
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fc2:	b29b      	uxth	r3, r3
 8002fc4:	3b02      	subs	r3, #2
 8002fc6:	b29a      	uxth	r2, r3
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002fcc:	e012      	b.n	8002ff4 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	330c      	adds	r3, #12
 8002fd8:	7812      	ldrb	r2, [r2, #0]
 8002fda:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fe0:	1c5a      	adds	r2, r3, #1
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fea:	b29b      	uxth	r3, r3
 8002fec:	3b01      	subs	r3, #1
 8002fee:	b29a      	uxth	r2, r3
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	689b      	ldr	r3, [r3, #8]
 8002ffe:	f003 0301 	and.w	r3, r3, #1
 8003002:	2b01      	cmp	r3, #1
 8003004:	d148      	bne.n	8003098 <HAL_SPI_TransmitReceive+0x3aa>
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800300c:	b29b      	uxth	r3, r3
 800300e:	2b00      	cmp	r3, #0
 8003010:	d042      	beq.n	8003098 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003018:	b29b      	uxth	r3, r3
 800301a:	2b01      	cmp	r3, #1
 800301c:	d923      	bls.n	8003066 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	68da      	ldr	r2, [r3, #12]
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003028:	b292      	uxth	r2, r2
 800302a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003030:	1c9a      	adds	r2, r3, #2
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800303c:	b29b      	uxth	r3, r3
 800303e:	3b02      	subs	r3, #2
 8003040:	b29a      	uxth	r2, r3
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800304e:	b29b      	uxth	r3, r3
 8003050:	2b01      	cmp	r3, #1
 8003052:	d81f      	bhi.n	8003094 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	685a      	ldr	r2, [r3, #4]
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003062:	605a      	str	r2, [r3, #4]
 8003064:	e016      	b.n	8003094 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f103 020c 	add.w	r2, r3, #12
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003072:	7812      	ldrb	r2, [r2, #0]
 8003074:	b2d2      	uxtb	r2, r2
 8003076:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800307c:	1c5a      	adds	r2, r3, #1
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003088:	b29b      	uxth	r3, r3
 800308a:	3b01      	subs	r3, #1
 800308c:	b29a      	uxth	r2, r3
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003094:	2301      	movs	r3, #1
 8003096:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003098:	f7fe f836 	bl	8001108 <HAL_GetTick>
 800309c:	4602      	mov	r2, r0
 800309e:	69fb      	ldr	r3, [r7, #28]
 80030a0:	1ad3      	subs	r3, r2, r3
 80030a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80030a4:	429a      	cmp	r2, r3
 80030a6:	d803      	bhi.n	80030b0 <HAL_SPI_TransmitReceive+0x3c2>
 80030a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80030ae:	d102      	bne.n	80030b6 <HAL_SPI_TransmitReceive+0x3c8>
 80030b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d103      	bne.n	80030be <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80030b6:	2303      	movs	r3, #3
 80030b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80030bc:	e01c      	b.n	80030f8 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030c2:	b29b      	uxth	r3, r3
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	f47f af5b 	bne.w	8002f80 <HAL_SPI_TransmitReceive+0x292>
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80030d0:	b29b      	uxth	r3, r3
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	f47f af54 	bne.w	8002f80 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80030d8:	69fa      	ldr	r2, [r7, #28]
 80030da:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80030dc:	68f8      	ldr	r0, [r7, #12]
 80030de:	f000 fb8f 	bl	8003800 <SPI_EndRxTxTransaction>
 80030e2:	4603      	mov	r3, r0
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d006      	beq.n	80030f6 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80030e8:	2301      	movs	r3, #1
 80030ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	2220      	movs	r2, #32
 80030f2:	661a      	str	r2, [r3, #96]	; 0x60
 80030f4:	e000      	b.n	80030f8 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80030f6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	2201      	movs	r2, #1
 80030fc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	2200      	movs	r2, #0
 8003104:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003108:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800310c:	4618      	mov	r0, r3
 800310e:	3728      	adds	r7, #40	; 0x28
 8003110:	46bd      	mov	sp, r7
 8003112:	bd80      	pop	{r7, pc}

08003114 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8003114:	b480      	push	{r7}
 8003116:	b087      	sub	sp, #28
 8003118:	af00      	add	r7, sp, #0
 800311a:	60f8      	str	r0, [r7, #12]
 800311c:	60b9      	str	r1, [r7, #8]
 800311e:	4613      	mov	r3, r2
 8003120:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003122:	2300      	movs	r3, #0
 8003124:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800312c:	2b01      	cmp	r3, #1
 800312e:	d101      	bne.n	8003134 <HAL_SPI_Transmit_IT+0x20>
 8003130:	2302      	movs	r3, #2
 8003132:	e072      	b.n	800321a <HAL_SPI_Transmit_IT+0x106>
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	2201      	movs	r2, #1
 8003138:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if ((pData == NULL) || (Size == 0U))
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d002      	beq.n	8003148 <HAL_SPI_Transmit_IT+0x34>
 8003142:	88fb      	ldrh	r3, [r7, #6]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d102      	bne.n	800314e <HAL_SPI_Transmit_IT+0x3a>
  {
    errorcode = HAL_ERROR;
 8003148:	2301      	movs	r3, #1
 800314a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800314c:	e060      	b.n	8003210 <HAL_SPI_Transmit_IT+0xfc>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003154:	b2db      	uxtb	r3, r3
 8003156:	2b01      	cmp	r3, #1
 8003158:	d002      	beq.n	8003160 <HAL_SPI_Transmit_IT+0x4c>
  {
    errorcode = HAL_BUSY;
 800315a:	2302      	movs	r3, #2
 800315c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800315e:	e057      	b.n	8003210 <HAL_SPI_Transmit_IT+0xfc>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	2203      	movs	r2, #3
 8003164:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	2200      	movs	r2, #0
 800316c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	68ba      	ldr	r2, [r7, #8]
 8003172:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	88fa      	ldrh	r2, [r7, #6]
 8003178:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	88fa      	ldrh	r2, [r7, #6]
 800317e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	2200      	movs	r2, #0
 8003184:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	2200      	movs	r2, #0
 800318a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	2200      	movs	r2, #0
 8003192:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxISR       = NULL;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	2200      	movs	r2, #0
 800319a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	68db      	ldr	r3, [r3, #12]
 80031a0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80031a4:	d903      	bls.n	80031ae <HAL_SPI_Transmit_IT+0x9a>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	4a1f      	ldr	r2, [pc, #124]	; (8003228 <HAL_SPI_Transmit_IT+0x114>)
 80031aa:	651a      	str	r2, [r3, #80]	; 0x50
 80031ac:	e002      	b.n	80031b4 <HAL_SPI_Transmit_IT+0xa0>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	4a1e      	ldr	r2, [pc, #120]	; (800322c <HAL_SPI_Transmit_IT+0x118>)
 80031b2:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	689b      	ldr	r3, [r3, #8]
 80031b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031bc:	d10f      	bne.n	80031de <HAL_SPI_Transmit_IT+0xca>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	681a      	ldr	r2, [r3, #0]
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80031cc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	681a      	ldr	r2, [r3, #0]
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80031dc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	685a      	ldr	r2, [r3, #4]
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 80031ec:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031f8:	2b40      	cmp	r3, #64	; 0x40
 80031fa:	d008      	beq.n	800320e <HAL_SPI_Transmit_IT+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	681a      	ldr	r2, [r3, #0]
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800320a:	601a      	str	r2, [r3, #0]
 800320c:	e000      	b.n	8003210 <HAL_SPI_Transmit_IT+0xfc>
  }

error :
 800320e:	bf00      	nop
  __HAL_UNLOCK(hspi);
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	2200      	movs	r2, #0
 8003214:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003218:	7dfb      	ldrb	r3, [r7, #23]
}
 800321a:	4618      	mov	r0, r3
 800321c:	371c      	adds	r7, #28
 800321e:	46bd      	mov	sp, r7
 8003220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003224:	4770      	bx	lr
 8003226:	bf00      	nop
 8003228:	08003489 	.word	0x08003489
 800322c:	08003443 	.word	0x08003443

08003230 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b088      	sub	sp, #32
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003248:	69bb      	ldr	r3, [r7, #24]
 800324a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800324e:	2b00      	cmp	r3, #0
 8003250:	d10e      	bne.n	8003270 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003252:	69bb      	ldr	r3, [r7, #24]
 8003254:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003258:	2b00      	cmp	r3, #0
 800325a:	d009      	beq.n	8003270 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800325c:	69fb      	ldr	r3, [r7, #28]
 800325e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003262:	2b00      	cmp	r3, #0
 8003264:	d004      	beq.n	8003270 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800326a:	6878      	ldr	r0, [r7, #4]
 800326c:	4798      	blx	r3
    return;
 800326e:	e0ce      	b.n	800340e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003270:	69bb      	ldr	r3, [r7, #24]
 8003272:	f003 0302 	and.w	r3, r3, #2
 8003276:	2b00      	cmp	r3, #0
 8003278:	d009      	beq.n	800328e <HAL_SPI_IRQHandler+0x5e>
 800327a:	69fb      	ldr	r3, [r7, #28]
 800327c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003280:	2b00      	cmp	r3, #0
 8003282:	d004      	beq.n	800328e <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003288:	6878      	ldr	r0, [r7, #4]
 800328a:	4798      	blx	r3
    return;
 800328c:	e0bf      	b.n	800340e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800328e:	69bb      	ldr	r3, [r7, #24]
 8003290:	f003 0320 	and.w	r3, r3, #32
 8003294:	2b00      	cmp	r3, #0
 8003296:	d10a      	bne.n	80032ae <HAL_SPI_IRQHandler+0x7e>
 8003298:	69bb      	ldr	r3, [r7, #24]
 800329a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d105      	bne.n	80032ae <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80032a2:	69bb      	ldr	r3, [r7, #24]
 80032a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	f000 80b0 	beq.w	800340e <HAL_SPI_IRQHandler+0x1de>
 80032ae:	69fb      	ldr	r3, [r7, #28]
 80032b0:	f003 0320 	and.w	r3, r3, #32
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	f000 80aa 	beq.w	800340e <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80032ba:	69bb      	ldr	r3, [r7, #24]
 80032bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d023      	beq.n	800330c <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80032ca:	b2db      	uxtb	r3, r3
 80032cc:	2b03      	cmp	r3, #3
 80032ce:	d011      	beq.n	80032f4 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032d4:	f043 0204 	orr.w	r2, r3, #4
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80032dc:	2300      	movs	r3, #0
 80032de:	617b      	str	r3, [r7, #20]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	68db      	ldr	r3, [r3, #12]
 80032e6:	617b      	str	r3, [r7, #20]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	689b      	ldr	r3, [r3, #8]
 80032ee:	617b      	str	r3, [r7, #20]
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	e00b      	b.n	800330c <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80032f4:	2300      	movs	r3, #0
 80032f6:	613b      	str	r3, [r7, #16]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	68db      	ldr	r3, [r3, #12]
 80032fe:	613b      	str	r3, [r7, #16]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	689b      	ldr	r3, [r3, #8]
 8003306:	613b      	str	r3, [r7, #16]
 8003308:	693b      	ldr	r3, [r7, #16]
        return;
 800330a:	e080      	b.n	800340e <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800330c:	69bb      	ldr	r3, [r7, #24]
 800330e:	f003 0320 	and.w	r3, r3, #32
 8003312:	2b00      	cmp	r3, #0
 8003314:	d014      	beq.n	8003340 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800331a:	f043 0201 	orr.w	r2, r3, #1
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003322:	2300      	movs	r3, #0
 8003324:	60fb      	str	r3, [r7, #12]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	60fb      	str	r3, [r7, #12]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	681a      	ldr	r2, [r3, #0]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800333c:	601a      	str	r2, [r3, #0]
 800333e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8003340:	69bb      	ldr	r3, [r7, #24]
 8003342:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003346:	2b00      	cmp	r3, #0
 8003348:	d00c      	beq.n	8003364 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800334e:	f043 0208 	orr.w	r2, r3, #8
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8003356:	2300      	movs	r3, #0
 8003358:	60bb      	str	r3, [r7, #8]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	689b      	ldr	r3, [r3, #8]
 8003360:	60bb      	str	r3, [r7, #8]
 8003362:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003368:	2b00      	cmp	r3, #0
 800336a:	d04f      	beq.n	800340c <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	685a      	ldr	r2, [r3, #4]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800337a:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2201      	movs	r2, #1
 8003380:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003384:	69fb      	ldr	r3, [r7, #28]
 8003386:	f003 0302 	and.w	r3, r3, #2
 800338a:	2b00      	cmp	r3, #0
 800338c:	d104      	bne.n	8003398 <HAL_SPI_IRQHandler+0x168>
 800338e:	69fb      	ldr	r3, [r7, #28]
 8003390:	f003 0301 	and.w	r3, r3, #1
 8003394:	2b00      	cmp	r3, #0
 8003396:	d034      	beq.n	8003402 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	685a      	ldr	r2, [r3, #4]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f022 0203 	bic.w	r2, r2, #3
 80033a6:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d011      	beq.n	80033d4 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033b4:	4a17      	ldr	r2, [pc, #92]	; (8003414 <HAL_SPI_IRQHandler+0x1e4>)
 80033b6:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033bc:	4618      	mov	r0, r3
 80033be:	f7fe f830 	bl	8001422 <HAL_DMA_Abort_IT>
 80033c2:	4603      	mov	r3, r0
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d005      	beq.n	80033d4 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033cc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d016      	beq.n	800340a <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033e0:	4a0c      	ldr	r2, [pc, #48]	; (8003414 <HAL_SPI_IRQHandler+0x1e4>)
 80033e2:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033e8:	4618      	mov	r0, r3
 80033ea:	f7fe f81a 	bl	8001422 <HAL_DMA_Abort_IT>
 80033ee:	4603      	mov	r3, r0
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d00a      	beq.n	800340a <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033f8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8003400:	e003      	b.n	800340a <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8003402:	6878      	ldr	r0, [r7, #4]
 8003404:	f7fd f92a 	bl	800065c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8003408:	e000      	b.n	800340c <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 800340a:	bf00      	nop
    return;
 800340c:	bf00      	nop
  }
}
 800340e:	3720      	adds	r7, #32
 8003410:	46bd      	mov	sp, r7
 8003412:	bd80      	pop	{r7, pc}
 8003414:	08003419 	.word	0x08003419

08003418 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b084      	sub	sp, #16
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003424:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	2200      	movs	r2, #0
 800342a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	2200      	movs	r2, #0
 8003432:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003434:	68f8      	ldr	r0, [r7, #12]
 8003436:	f7fd f911 	bl	800065c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800343a:	bf00      	nop
 800343c:	3710      	adds	r7, #16
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}

08003442 <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003442:	b580      	push	{r7, lr}
 8003444:	b082      	sub	sp, #8
 8003446:	af00      	add	r7, sp, #0
 8003448:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	330c      	adds	r3, #12
 8003454:	7812      	ldrb	r2, [r2, #0]
 8003456:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800345c:	1c5a      	adds	r2, r3, #1
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003466:	b29b      	uxth	r3, r3
 8003468:	3b01      	subs	r3, #1
 800346a:	b29a      	uxth	r2, r3
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003474:	b29b      	uxth	r3, r3
 8003476:	2b00      	cmp	r3, #0
 8003478:	d102      	bne.n	8003480 <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 800347a:	6878      	ldr	r0, [r7, #4]
 800347c:	f000 fa2a 	bl	80038d4 <SPI_CloseTx_ISR>
  }
}
 8003480:	bf00      	nop
 8003482:	3708      	adds	r7, #8
 8003484:	46bd      	mov	sp, r7
 8003486:	bd80      	pop	{r7, pc}

08003488 <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b082      	sub	sp, #8
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003494:	881a      	ldrh	r2, [r3, #0]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034a0:	1c9a      	adds	r2, r3, #2
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034aa:	b29b      	uxth	r3, r3
 80034ac:	3b01      	subs	r3, #1
 80034ae:	b29a      	uxth	r2, r3
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034b8:	b29b      	uxth	r3, r3
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d102      	bne.n	80034c4 <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 80034be:	6878      	ldr	r0, [r7, #4]
 80034c0:	f000 fa08 	bl	80038d4 <SPI_CloseTx_ISR>
  }
}
 80034c4:	bf00      	nop
 80034c6:	3708      	adds	r7, #8
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bd80      	pop	{r7, pc}

080034cc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b088      	sub	sp, #32
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	60f8      	str	r0, [r7, #12]
 80034d4:	60b9      	str	r1, [r7, #8]
 80034d6:	603b      	str	r3, [r7, #0]
 80034d8:	4613      	mov	r3, r2
 80034da:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80034dc:	f7fd fe14 	bl	8001108 <HAL_GetTick>
 80034e0:	4602      	mov	r2, r0
 80034e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034e4:	1a9b      	subs	r3, r3, r2
 80034e6:	683a      	ldr	r2, [r7, #0]
 80034e8:	4413      	add	r3, r2
 80034ea:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80034ec:	f7fd fe0c 	bl	8001108 <HAL_GetTick>
 80034f0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80034f2:	4b39      	ldr	r3, [pc, #228]	; (80035d8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	015b      	lsls	r3, r3, #5
 80034f8:	0d1b      	lsrs	r3, r3, #20
 80034fa:	69fa      	ldr	r2, [r7, #28]
 80034fc:	fb02 f303 	mul.w	r3, r2, r3
 8003500:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003502:	e054      	b.n	80035ae <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800350a:	d050      	beq.n	80035ae <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800350c:	f7fd fdfc 	bl	8001108 <HAL_GetTick>
 8003510:	4602      	mov	r2, r0
 8003512:	69bb      	ldr	r3, [r7, #24]
 8003514:	1ad3      	subs	r3, r2, r3
 8003516:	69fa      	ldr	r2, [r7, #28]
 8003518:	429a      	cmp	r2, r3
 800351a:	d902      	bls.n	8003522 <SPI_WaitFlagStateUntilTimeout+0x56>
 800351c:	69fb      	ldr	r3, [r7, #28]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d13d      	bne.n	800359e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	685a      	ldr	r2, [r3, #4]
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003530:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800353a:	d111      	bne.n	8003560 <SPI_WaitFlagStateUntilTimeout+0x94>
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	689b      	ldr	r3, [r3, #8]
 8003540:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003544:	d004      	beq.n	8003550 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	689b      	ldr	r3, [r3, #8]
 800354a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800354e:	d107      	bne.n	8003560 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	681a      	ldr	r2, [r3, #0]
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800355e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003564:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003568:	d10f      	bne.n	800358a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	681a      	ldr	r2, [r3, #0]
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003578:	601a      	str	r2, [r3, #0]
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	681a      	ldr	r2, [r3, #0]
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003588:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2201      	movs	r2, #1
 800358e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	2200      	movs	r2, #0
 8003596:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800359a:	2303      	movs	r3, #3
 800359c:	e017      	b.n	80035ce <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d101      	bne.n	80035a8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80035a4:	2300      	movs	r3, #0
 80035a6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	3b01      	subs	r3, #1
 80035ac:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	689a      	ldr	r2, [r3, #8]
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	4013      	ands	r3, r2
 80035b8:	68ba      	ldr	r2, [r7, #8]
 80035ba:	429a      	cmp	r2, r3
 80035bc:	bf0c      	ite	eq
 80035be:	2301      	moveq	r3, #1
 80035c0:	2300      	movne	r3, #0
 80035c2:	b2db      	uxtb	r3, r3
 80035c4:	461a      	mov	r2, r3
 80035c6:	79fb      	ldrb	r3, [r7, #7]
 80035c8:	429a      	cmp	r2, r3
 80035ca:	d19b      	bne.n	8003504 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80035cc:	2300      	movs	r3, #0
}
 80035ce:	4618      	mov	r0, r3
 80035d0:	3720      	adds	r7, #32
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}
 80035d6:	bf00      	nop
 80035d8:	20000024 	.word	0x20000024

080035dc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b08a      	sub	sp, #40	; 0x28
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	60f8      	str	r0, [r7, #12]
 80035e4:	60b9      	str	r1, [r7, #8]
 80035e6:	607a      	str	r2, [r7, #4]
 80035e8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80035ea:	2300      	movs	r3, #0
 80035ec:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80035ee:	f7fd fd8b 	bl	8001108 <HAL_GetTick>
 80035f2:	4602      	mov	r2, r0
 80035f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035f6:	1a9b      	subs	r3, r3, r2
 80035f8:	683a      	ldr	r2, [r7, #0]
 80035fa:	4413      	add	r3, r2
 80035fc:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80035fe:	f7fd fd83 	bl	8001108 <HAL_GetTick>
 8003602:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	330c      	adds	r3, #12
 800360a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800360c:	4b3d      	ldr	r3, [pc, #244]	; (8003704 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800360e:	681a      	ldr	r2, [r3, #0]
 8003610:	4613      	mov	r3, r2
 8003612:	009b      	lsls	r3, r3, #2
 8003614:	4413      	add	r3, r2
 8003616:	00da      	lsls	r2, r3, #3
 8003618:	1ad3      	subs	r3, r2, r3
 800361a:	0d1b      	lsrs	r3, r3, #20
 800361c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800361e:	fb02 f303 	mul.w	r3, r2, r3
 8003622:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003624:	e060      	b.n	80036e8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800362c:	d107      	bne.n	800363e <SPI_WaitFifoStateUntilTimeout+0x62>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d104      	bne.n	800363e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003634:	69fb      	ldr	r3, [r7, #28]
 8003636:	781b      	ldrb	r3, [r3, #0]
 8003638:	b2db      	uxtb	r3, r3
 800363a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800363c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003644:	d050      	beq.n	80036e8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003646:	f7fd fd5f 	bl	8001108 <HAL_GetTick>
 800364a:	4602      	mov	r2, r0
 800364c:	6a3b      	ldr	r3, [r7, #32]
 800364e:	1ad3      	subs	r3, r2, r3
 8003650:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003652:	429a      	cmp	r2, r3
 8003654:	d902      	bls.n	800365c <SPI_WaitFifoStateUntilTimeout+0x80>
 8003656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003658:	2b00      	cmp	r3, #0
 800365a:	d13d      	bne.n	80036d8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	685a      	ldr	r2, [r3, #4]
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800366a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003674:	d111      	bne.n	800369a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800367e:	d004      	beq.n	800368a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003688:	d107      	bne.n	800369a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	681a      	ldr	r2, [r3, #0]
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003698:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800369e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036a2:	d10f      	bne.n	80036c4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	681a      	ldr	r2, [r3, #0]
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80036b2:	601a      	str	r2, [r3, #0]
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	681a      	ldr	r2, [r3, #0]
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80036c2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	2201      	movs	r2, #1
 80036c8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	2200      	movs	r2, #0
 80036d0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80036d4:	2303      	movs	r3, #3
 80036d6:	e010      	b.n	80036fa <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80036d8:	69bb      	ldr	r3, [r7, #24]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d101      	bne.n	80036e2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80036de:	2300      	movs	r3, #0
 80036e0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80036e2:	69bb      	ldr	r3, [r7, #24]
 80036e4:	3b01      	subs	r3, #1
 80036e6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	689a      	ldr	r2, [r3, #8]
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	4013      	ands	r3, r2
 80036f2:	687a      	ldr	r2, [r7, #4]
 80036f4:	429a      	cmp	r2, r3
 80036f6:	d196      	bne.n	8003626 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80036f8:	2300      	movs	r3, #0
}
 80036fa:	4618      	mov	r0, r3
 80036fc:	3728      	adds	r7, #40	; 0x28
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}
 8003702:	bf00      	nop
 8003704:	20000024 	.word	0x20000024

08003708 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b088      	sub	sp, #32
 800370c:	af02      	add	r7, sp, #8
 800370e:	60f8      	str	r0, [r7, #12]
 8003710:	60b9      	str	r1, [r7, #8]
 8003712:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800371c:	d111      	bne.n	8003742 <SPI_EndRxTransaction+0x3a>
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	689b      	ldr	r3, [r3, #8]
 8003722:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003726:	d004      	beq.n	8003732 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	689b      	ldr	r3, [r3, #8]
 800372c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003730:	d107      	bne.n	8003742 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	681a      	ldr	r2, [r3, #0]
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003740:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800374a:	d112      	bne.n	8003772 <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	9300      	str	r3, [sp, #0]
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	2200      	movs	r2, #0
 8003754:	2180      	movs	r1, #128	; 0x80
 8003756:	68f8      	ldr	r0, [r7, #12]
 8003758:	f7ff feb8 	bl	80034cc <SPI_WaitFlagStateUntilTimeout>
 800375c:	4603      	mov	r3, r0
 800375e:	2b00      	cmp	r3, #0
 8003760:	d021      	beq.n	80037a6 <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003766:	f043 0220 	orr.w	r2, r3, #32
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800376e:	2303      	movs	r3, #3
 8003770:	e03d      	b.n	80037ee <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in µs */
    __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003772:	4b21      	ldr	r3, [pc, #132]	; (80037f8 <SPI_EndRxTransaction+0xf0>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a21      	ldr	r2, [pc, #132]	; (80037fc <SPI_EndRxTransaction+0xf4>)
 8003778:	fba2 2303 	umull	r2, r3, r2, r3
 800377c:	0d5b      	lsrs	r3, r3, #21
 800377e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003782:	fb02 f303 	mul.w	r3, r2, r3
 8003786:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003788:	697b      	ldr	r3, [r7, #20]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d00a      	beq.n	80037a4 <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 800378e:	697b      	ldr	r3, [r7, #20]
 8003790:	3b01      	subs	r3, #1
 8003792:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	689b      	ldr	r3, [r3, #8]
 800379a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800379e:	2b80      	cmp	r3, #128	; 0x80
 80037a0:	d0f2      	beq.n	8003788 <SPI_EndRxTransaction+0x80>
 80037a2:	e000      	b.n	80037a6 <SPI_EndRxTransaction+0x9e>
        break;
 80037a4:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80037ae:	d11d      	bne.n	80037ec <SPI_EndRxTransaction+0xe4>
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	689b      	ldr	r3, [r3, #8]
 80037b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037b8:	d004      	beq.n	80037c4 <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	689b      	ldr	r3, [r3, #8]
 80037be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037c2:	d113      	bne.n	80037ec <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	9300      	str	r3, [sp, #0]
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	2200      	movs	r2, #0
 80037cc:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80037d0:	68f8      	ldr	r0, [r7, #12]
 80037d2:	f7ff ff03 	bl	80035dc <SPI_WaitFifoStateUntilTimeout>
 80037d6:	4603      	mov	r3, r0
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d007      	beq.n	80037ec <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037e0:	f043 0220 	orr.w	r2, r3, #32
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80037e8:	2303      	movs	r3, #3
 80037ea:	e000      	b.n	80037ee <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 80037ec:	2300      	movs	r3, #0
}
 80037ee:	4618      	mov	r0, r3
 80037f0:	3718      	adds	r7, #24
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bd80      	pop	{r7, pc}
 80037f6:	bf00      	nop
 80037f8:	20000024 	.word	0x20000024
 80037fc:	165e9f81 	.word	0x165e9f81

08003800 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b088      	sub	sp, #32
 8003804:	af02      	add	r7, sp, #8
 8003806:	60f8      	str	r0, [r7, #12]
 8003808:	60b9      	str	r1, [r7, #8]
 800380a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	9300      	str	r3, [sp, #0]
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	2200      	movs	r2, #0
 8003814:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003818:	68f8      	ldr	r0, [r7, #12]
 800381a:	f7ff fedf 	bl	80035dc <SPI_WaitFifoStateUntilTimeout>
 800381e:	4603      	mov	r3, r0
 8003820:	2b00      	cmp	r3, #0
 8003822:	d007      	beq.n	8003834 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003828:	f043 0220 	orr.w	r2, r3, #32
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003830:	2303      	movs	r3, #3
 8003832:	e046      	b.n	80038c2 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003834:	4b25      	ldr	r3, [pc, #148]	; (80038cc <SPI_EndRxTxTransaction+0xcc>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a25      	ldr	r2, [pc, #148]	; (80038d0 <SPI_EndRxTxTransaction+0xd0>)
 800383a:	fba2 2303 	umull	r2, r3, r2, r3
 800383e:	0d5b      	lsrs	r3, r3, #21
 8003840:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003844:	fb02 f303 	mul.w	r3, r2, r3
 8003848:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003852:	d112      	bne.n	800387a <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	9300      	str	r3, [sp, #0]
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	2200      	movs	r2, #0
 800385c:	2180      	movs	r1, #128	; 0x80
 800385e:	68f8      	ldr	r0, [r7, #12]
 8003860:	f7ff fe34 	bl	80034cc <SPI_WaitFlagStateUntilTimeout>
 8003864:	4603      	mov	r3, r0
 8003866:	2b00      	cmp	r3, #0
 8003868:	d016      	beq.n	8003898 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800386e:	f043 0220 	orr.w	r2, r3, #32
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8003876:	2303      	movs	r3, #3
 8003878:	e023      	b.n	80038c2 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800387a:	697b      	ldr	r3, [r7, #20]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d00a      	beq.n	8003896 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8003880:	697b      	ldr	r3, [r7, #20]
 8003882:	3b01      	subs	r3, #1
 8003884:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	689b      	ldr	r3, [r3, #8]
 800388c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003890:	2b80      	cmp	r3, #128	; 0x80
 8003892:	d0f2      	beq.n	800387a <SPI_EndRxTxTransaction+0x7a>
 8003894:	e000      	b.n	8003898 <SPI_EndRxTxTransaction+0x98>
        break;
 8003896:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	9300      	str	r3, [sp, #0]
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	2200      	movs	r2, #0
 80038a0:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80038a4:	68f8      	ldr	r0, [r7, #12]
 80038a6:	f7ff fe99 	bl	80035dc <SPI_WaitFifoStateUntilTimeout>
 80038aa:	4603      	mov	r3, r0
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d007      	beq.n	80038c0 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038b4:	f043 0220 	orr.w	r2, r3, #32
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80038bc:	2303      	movs	r3, #3
 80038be:	e000      	b.n	80038c2 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 80038c0:	2300      	movs	r3, #0
}
 80038c2:	4618      	mov	r0, r3
 80038c4:	3718      	adds	r7, #24
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}
 80038ca:	bf00      	nop
 80038cc:	20000024 	.word	0x20000024
 80038d0:	165e9f81 	.word	0x165e9f81

080038d4 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b084      	sub	sp, #16
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80038dc:	f7fd fc14 	bl	8001108 <HAL_GetTick>
 80038e0:	60f8      	str	r0, [r7, #12]

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	685a      	ldr	r2, [r3, #4]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80038f0:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80038f2:	68fa      	ldr	r2, [r7, #12]
 80038f4:	2164      	movs	r1, #100	; 0x64
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	f7ff ff82 	bl	8003800 <SPI_EndRxTxTransaction>
 80038fc:	4603      	mov	r3, r0
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d005      	beq.n	800390e <SPI_CloseTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003906:	f043 0220 	orr.w	r2, r3, #32
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d10a      	bne.n	800392c <SPI_CloseTx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003916:	2300      	movs	r3, #0
 8003918:	60bb      	str	r3, [r7, #8]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	68db      	ldr	r3, [r3, #12]
 8003920:	60bb      	str	r3, [r7, #8]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	689b      	ldr	r3, [r3, #8]
 8003928:	60bb      	str	r3, [r7, #8]
 800392a:	68bb      	ldr	r3, [r7, #8]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2201      	movs	r2, #1
 8003930:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003938:	2b00      	cmp	r3, #0
 800393a:	d003      	beq.n	8003944 <SPI_CloseTx_ISR+0x70>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 800393c:	6878      	ldr	r0, [r7, #4]
 800393e:	f7fc fe8d 	bl	800065c <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8003942:	e002      	b.n	800394a <SPI_CloseTx_ISR+0x76>
    HAL_SPI_TxCpltCallback(hspi);
 8003944:	6878      	ldr	r0, [r7, #4]
 8003946:	f7fc fe5d 	bl	8000604 <HAL_SPI_TxCpltCallback>
}
 800394a:	bf00      	nop
 800394c:	3710      	adds	r7, #16
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}

08003952 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003952:	b580      	push	{r7, lr}
 8003954:	b082      	sub	sp, #8
 8003956:	af00      	add	r7, sp, #0
 8003958:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d101      	bne.n	8003964 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003960:	2301      	movs	r3, #1
 8003962:	e040      	b.n	80039e6 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003968:	2b00      	cmp	r3, #0
 800396a:	d106      	bne.n	800397a <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2200      	movs	r2, #0
 8003970:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003974:	6878      	ldr	r0, [r7, #4]
 8003976:	f7fd fa05 	bl	8000d84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2224      	movs	r2, #36	; 0x24
 800397e:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	681a      	ldr	r2, [r3, #0]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f022 0201 	bic.w	r2, r2, #1
 800398e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003990:	6878      	ldr	r0, [r7, #4]
 8003992:	f000 fbc1 	bl	8004118 <UART_SetConfig>
 8003996:	4603      	mov	r3, r0
 8003998:	2b01      	cmp	r3, #1
 800399a:	d101      	bne.n	80039a0 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800399c:	2301      	movs	r3, #1
 800399e:	e022      	b.n	80039e6 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d002      	beq.n	80039ae <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80039a8:	6878      	ldr	r0, [r7, #4]
 80039aa:	f000 fe19 	bl	80045e0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	685a      	ldr	r2, [r3, #4]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80039bc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	689a      	ldr	r2, [r3, #8]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80039cc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	681a      	ldr	r2, [r3, #0]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f042 0201 	orr.w	r2, r2, #1
 80039dc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80039de:	6878      	ldr	r0, [r7, #4]
 80039e0:	f000 fea0 	bl	8004724 <UART_CheckIdleState>
 80039e4:	4603      	mov	r3, r0
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	3708      	adds	r7, #8
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}

080039ee <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039ee:	b580      	push	{r7, lr}
 80039f0:	b08a      	sub	sp, #40	; 0x28
 80039f2:	af02      	add	r7, sp, #8
 80039f4:	60f8      	str	r0, [r7, #12]
 80039f6:	60b9      	str	r1, [r7, #8]
 80039f8:	603b      	str	r3, [r7, #0]
 80039fa:	4613      	mov	r3, r2
 80039fc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a02:	2b20      	cmp	r3, #32
 8003a04:	d171      	bne.n	8003aea <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d002      	beq.n	8003a12 <HAL_UART_Transmit+0x24>
 8003a0c:	88fb      	ldrh	r3, [r7, #6]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d101      	bne.n	8003a16 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
 8003a14:	e06a      	b.n	8003aec <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	2200      	movs	r2, #0
 8003a1a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	2221      	movs	r2, #33	; 0x21
 8003a22:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a24:	f7fd fb70 	bl	8001108 <HAL_GetTick>
 8003a28:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	88fa      	ldrh	r2, [r7, #6]
 8003a2e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	88fa      	ldrh	r2, [r7, #6]
 8003a36:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a42:	d108      	bne.n	8003a56 <HAL_UART_Transmit+0x68>
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	691b      	ldr	r3, [r3, #16]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d104      	bne.n	8003a56 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	61bb      	str	r3, [r7, #24]
 8003a54:	e003      	b.n	8003a5e <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003a5e:	e02c      	b.n	8003aba <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	9300      	str	r3, [sp, #0]
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	2200      	movs	r2, #0
 8003a68:	2180      	movs	r1, #128	; 0x80
 8003a6a:	68f8      	ldr	r0, [r7, #12]
 8003a6c:	f000 fea7 	bl	80047be <UART_WaitOnFlagUntilTimeout>
 8003a70:	4603      	mov	r3, r0
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d001      	beq.n	8003a7a <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8003a76:	2303      	movs	r3, #3
 8003a78:	e038      	b.n	8003aec <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003a7a:	69fb      	ldr	r3, [r7, #28]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d10b      	bne.n	8003a98 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003a80:	69bb      	ldr	r3, [r7, #24]
 8003a82:	881b      	ldrh	r3, [r3, #0]
 8003a84:	461a      	mov	r2, r3
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a8e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003a90:	69bb      	ldr	r3, [r7, #24]
 8003a92:	3302      	adds	r3, #2
 8003a94:	61bb      	str	r3, [r7, #24]
 8003a96:	e007      	b.n	8003aa8 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003a98:	69fb      	ldr	r3, [r7, #28]
 8003a9a:	781a      	ldrb	r2, [r3, #0]
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003aa2:	69fb      	ldr	r3, [r7, #28]
 8003aa4:	3301      	adds	r3, #1
 8003aa6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003aae:	b29b      	uxth	r3, r3
 8003ab0:	3b01      	subs	r3, #1
 8003ab2:	b29a      	uxth	r2, r3
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003ac0:	b29b      	uxth	r3, r3
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d1cc      	bne.n	8003a60 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	9300      	str	r3, [sp, #0]
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	2200      	movs	r2, #0
 8003ace:	2140      	movs	r1, #64	; 0x40
 8003ad0:	68f8      	ldr	r0, [r7, #12]
 8003ad2:	f000 fe74 	bl	80047be <UART_WaitOnFlagUntilTimeout>
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d001      	beq.n	8003ae0 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8003adc:	2303      	movs	r3, #3
 8003ade:	e005      	b.n	8003aec <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	2220      	movs	r2, #32
 8003ae4:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	e000      	b.n	8003aec <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003aea:	2302      	movs	r3, #2
  }
}
 8003aec:	4618      	mov	r0, r3
 8003aee:	3720      	adds	r7, #32
 8003af0:	46bd      	mov	sp, r7
 8003af2:	bd80      	pop	{r7, pc}

08003af4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b0ba      	sub	sp, #232	; 0xe8
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	69db      	ldr	r3, [r3, #28]
 8003b02:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	689b      	ldr	r3, [r3, #8]
 8003b16:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003b1a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003b1e:	f640 030f 	movw	r3, #2063	; 0x80f
 8003b22:	4013      	ands	r3, r2
 8003b24:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003b28:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d115      	bne.n	8003b5c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003b30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b34:	f003 0320 	and.w	r3, r3, #32
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d00f      	beq.n	8003b5c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003b3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b40:	f003 0320 	and.w	r3, r3, #32
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d009      	beq.n	8003b5c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	f000 82ac 	beq.w	80040aa <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	4798      	blx	r3
      }
      return;
 8003b5a:	e2a6      	b.n	80040aa <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003b5c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	f000 8117 	beq.w	8003d94 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003b66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b6a:	f003 0301 	and.w	r3, r3, #1
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d106      	bne.n	8003b80 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003b72:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003b76:	4b85      	ldr	r3, [pc, #532]	; (8003d8c <HAL_UART_IRQHandler+0x298>)
 8003b78:	4013      	ands	r3, r2
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	f000 810a 	beq.w	8003d94 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003b80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b84:	f003 0301 	and.w	r3, r3, #1
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d011      	beq.n	8003bb0 <HAL_UART_IRQHandler+0xbc>
 8003b8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d00b      	beq.n	8003bb0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	2201      	movs	r2, #1
 8003b9e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ba6:	f043 0201 	orr.w	r2, r3, #1
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003bb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bb4:	f003 0302 	and.w	r3, r3, #2
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d011      	beq.n	8003be0 <HAL_UART_IRQHandler+0xec>
 8003bbc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003bc0:	f003 0301 	and.w	r3, r3, #1
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d00b      	beq.n	8003be0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	2202      	movs	r2, #2
 8003bce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003bd6:	f043 0204 	orr.w	r2, r3, #4
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003be0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003be4:	f003 0304 	and.w	r3, r3, #4
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d011      	beq.n	8003c10 <HAL_UART_IRQHandler+0x11c>
 8003bec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003bf0:	f003 0301 	and.w	r3, r3, #1
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d00b      	beq.n	8003c10 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	2204      	movs	r2, #4
 8003bfe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c06:	f043 0202 	orr.w	r2, r3, #2
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003c10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c14:	f003 0308 	and.w	r3, r3, #8
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d017      	beq.n	8003c4c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003c1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c20:	f003 0320 	and.w	r3, r3, #32
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d105      	bne.n	8003c34 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003c28:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c2c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d00b      	beq.n	8003c4c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	2208      	movs	r2, #8
 8003c3a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c42:	f043 0208 	orr.w	r2, r3, #8
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003c4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d012      	beq.n	8003c7e <HAL_UART_IRQHandler+0x18a>
 8003c58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c5c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d00c      	beq.n	8003c7e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003c6c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c74:	f043 0220 	orr.w	r2, r3, #32
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	f000 8212 	beq.w	80040ae <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003c8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c8e:	f003 0320 	and.w	r3, r3, #32
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d00d      	beq.n	8003cb2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003c96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c9a:	f003 0320 	and.w	r3, r3, #32
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d007      	beq.n	8003cb2 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d003      	beq.n	8003cb2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003cb8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	689b      	ldr	r3, [r3, #8]
 8003cc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cc6:	2b40      	cmp	r3, #64	; 0x40
 8003cc8:	d005      	beq.n	8003cd6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003cca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003cce:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d04f      	beq.n	8003d76 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003cd6:	6878      	ldr	r0, [r7, #4]
 8003cd8:	f000 fe37 	bl	800494a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	689b      	ldr	r3, [r3, #8]
 8003ce2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ce6:	2b40      	cmp	r3, #64	; 0x40
 8003ce8:	d141      	bne.n	8003d6e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	3308      	adds	r3, #8
 8003cf0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cf4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003cf8:	e853 3f00 	ldrex	r3, [r3]
 8003cfc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003d00:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003d04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d08:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	3308      	adds	r3, #8
 8003d12:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003d16:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003d1a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d1e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003d22:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003d26:	e841 2300 	strex	r3, r2, [r1]
 8003d2a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003d2e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d1d9      	bne.n	8003cea <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d013      	beq.n	8003d66 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d42:	4a13      	ldr	r2, [pc, #76]	; (8003d90 <HAL_UART_IRQHandler+0x29c>)
 8003d44:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	f7fd fb69 	bl	8001422 <HAL_DMA_Abort_IT>
 8003d50:	4603      	mov	r3, r0
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d017      	beq.n	8003d86 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d5c:	687a      	ldr	r2, [r7, #4]
 8003d5e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003d60:	4610      	mov	r0, r2
 8003d62:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d64:	e00f      	b.n	8003d86 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003d66:	6878      	ldr	r0, [r7, #4]
 8003d68:	f000 f9b6 	bl	80040d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d6c:	e00b      	b.n	8003d86 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003d6e:	6878      	ldr	r0, [r7, #4]
 8003d70:	f000 f9b2 	bl	80040d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d74:	e007      	b.n	8003d86 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003d76:	6878      	ldr	r0, [r7, #4]
 8003d78:	f000 f9ae 	bl	80040d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8003d84:	e193      	b.n	80040ae <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d86:	bf00      	nop
    return;
 8003d88:	e191      	b.n	80040ae <HAL_UART_IRQHandler+0x5ba>
 8003d8a:	bf00      	nop
 8003d8c:	04000120 	.word	0x04000120
 8003d90:	08004a13 	.word	0x08004a13

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d98:	2b01      	cmp	r3, #1
 8003d9a:	f040 814c 	bne.w	8004036 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003d9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003da2:	f003 0310 	and.w	r3, r3, #16
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	f000 8145 	beq.w	8004036 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003dac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003db0:	f003 0310 	and.w	r3, r3, #16
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	f000 813e 	beq.w	8004036 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	2210      	movs	r2, #16
 8003dc0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	689b      	ldr	r3, [r3, #8]
 8003dc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dcc:	2b40      	cmp	r3, #64	; 0x40
 8003dce:	f040 80b6 	bne.w	8003f3e <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003dde:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	f000 8165 	beq.w	80040b2 <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003dee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003df2:	429a      	cmp	r2, r3
 8003df4:	f080 815d 	bcs.w	80040b2 <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003dfe:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e06:	69db      	ldr	r3, [r3, #28]
 8003e08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e0c:	f000 8086 	beq.w	8003f1c <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e18:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003e1c:	e853 3f00 	ldrex	r3, [r3]
 8003e20:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003e24:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003e28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e2c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	461a      	mov	r2, r3
 8003e36:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003e3a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003e3e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e42:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003e46:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003e4a:	e841 2300 	strex	r3, r2, [r1]
 8003e4e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003e52:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d1da      	bne.n	8003e10 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	3308      	adds	r3, #8
 8003e60:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e62:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e64:	e853 3f00 	ldrex	r3, [r3]
 8003e68:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003e6a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003e6c:	f023 0301 	bic.w	r3, r3, #1
 8003e70:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	3308      	adds	r3, #8
 8003e7a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003e7e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003e82:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e84:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003e86:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003e8a:	e841 2300 	strex	r3, r2, [r1]
 8003e8e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003e90:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d1e1      	bne.n	8003e5a <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	3308      	adds	r3, #8
 8003e9c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e9e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003ea0:	e853 3f00 	ldrex	r3, [r3]
 8003ea4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003ea6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ea8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003eac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	3308      	adds	r3, #8
 8003eb6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003eba:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003ebc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ebe:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003ec0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003ec2:	e841 2300 	strex	r3, r2, [r1]
 8003ec6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003ec8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d1e3      	bne.n	8003e96 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2220      	movs	r2, #32
 8003ed2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ee2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ee4:	e853 3f00 	ldrex	r3, [r3]
 8003ee8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003eea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003eec:	f023 0310 	bic.w	r3, r3, #16
 8003ef0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	461a      	mov	r2, r3
 8003efa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003efe:	65bb      	str	r3, [r7, #88]	; 0x58
 8003f00:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f02:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003f04:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003f06:	e841 2300 	strex	r3, r2, [r1]
 8003f0a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003f0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d1e4      	bne.n	8003edc <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f16:	4618      	mov	r0, r3
 8003f18:	f7fd fa13 	bl	8001342 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2202      	movs	r2, #2
 8003f20:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003f2e:	b29b      	uxth	r3, r3
 8003f30:	1ad3      	subs	r3, r2, r3
 8003f32:	b29b      	uxth	r3, r3
 8003f34:	4619      	mov	r1, r3
 8003f36:	6878      	ldr	r0, [r7, #4]
 8003f38:	f000 f8d8 	bl	80040ec <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003f3c:	e0b9      	b.n	80040b2 <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003f4a:	b29b      	uxth	r3, r3
 8003f4c:	1ad3      	subs	r3, r2, r3
 8003f4e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003f58:	b29b      	uxth	r3, r3
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	f000 80ab 	beq.w	80040b6 <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8003f60:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	f000 80a6 	beq.w	80040b6 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f72:	e853 3f00 	ldrex	r3, [r3]
 8003f76:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003f78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f7a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003f7e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	461a      	mov	r2, r3
 8003f88:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003f8c:	647b      	str	r3, [r7, #68]	; 0x44
 8003f8e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f90:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003f92:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003f94:	e841 2300 	strex	r3, r2, [r1]
 8003f98:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003f9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d1e4      	bne.n	8003f6a <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	3308      	adds	r3, #8
 8003fa6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003faa:	e853 3f00 	ldrex	r3, [r3]
 8003fae:	623b      	str	r3, [r7, #32]
   return(result);
 8003fb0:	6a3b      	ldr	r3, [r7, #32]
 8003fb2:	f023 0301 	bic.w	r3, r3, #1
 8003fb6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	3308      	adds	r3, #8
 8003fc0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003fc4:	633a      	str	r2, [r7, #48]	; 0x30
 8003fc6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fc8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003fca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003fcc:	e841 2300 	strex	r3, r2, [r1]
 8003fd0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d1e3      	bne.n	8003fa0 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2220      	movs	r2, #32
 8003fdc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	e853 3f00 	ldrex	r3, [r3]
 8003ff8:	60fb      	str	r3, [r7, #12]
   return(result);
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	f023 0310 	bic.w	r3, r3, #16
 8004000:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	461a      	mov	r2, r3
 800400a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800400e:	61fb      	str	r3, [r7, #28]
 8004010:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004012:	69b9      	ldr	r1, [r7, #24]
 8004014:	69fa      	ldr	r2, [r7, #28]
 8004016:	e841 2300 	strex	r3, r2, [r1]
 800401a:	617b      	str	r3, [r7, #20]
   return(result);
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d1e4      	bne.n	8003fec <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2202      	movs	r2, #2
 8004026:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004028:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800402c:	4619      	mov	r1, r3
 800402e:	6878      	ldr	r0, [r7, #4]
 8004030:	f000 f85c 	bl	80040ec <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004034:	e03f      	b.n	80040b6 <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004036:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800403a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800403e:	2b00      	cmp	r3, #0
 8004040:	d00e      	beq.n	8004060 <HAL_UART_IRQHandler+0x56c>
 8004042:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004046:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800404a:	2b00      	cmp	r3, #0
 800404c:	d008      	beq.n	8004060 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004056:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004058:	6878      	ldr	r0, [r7, #4]
 800405a:	f000 f853 	bl	8004104 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800405e:	e02d      	b.n	80040bc <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004060:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004064:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004068:	2b00      	cmp	r3, #0
 800406a:	d00e      	beq.n	800408a <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800406c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004070:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004074:	2b00      	cmp	r3, #0
 8004076:	d008      	beq.n	800408a <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800407c:	2b00      	cmp	r3, #0
 800407e:	d01c      	beq.n	80040ba <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004084:	6878      	ldr	r0, [r7, #4]
 8004086:	4798      	blx	r3
    }
    return;
 8004088:	e017      	b.n	80040ba <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800408a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800408e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004092:	2b00      	cmp	r3, #0
 8004094:	d012      	beq.n	80040bc <HAL_UART_IRQHandler+0x5c8>
 8004096:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800409a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d00c      	beq.n	80040bc <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	f000 fccb 	bl	8004a3e <UART_EndTransmit_IT>
    return;
 80040a8:	e008      	b.n	80040bc <HAL_UART_IRQHandler+0x5c8>
      return;
 80040aa:	bf00      	nop
 80040ac:	e006      	b.n	80040bc <HAL_UART_IRQHandler+0x5c8>
    return;
 80040ae:	bf00      	nop
 80040b0:	e004      	b.n	80040bc <HAL_UART_IRQHandler+0x5c8>
      return;
 80040b2:	bf00      	nop
 80040b4:	e002      	b.n	80040bc <HAL_UART_IRQHandler+0x5c8>
      return;
 80040b6:	bf00      	nop
 80040b8:	e000      	b.n	80040bc <HAL_UART_IRQHandler+0x5c8>
    return;
 80040ba:	bf00      	nop
  }

}
 80040bc:	37e8      	adds	r7, #232	; 0xe8
 80040be:	46bd      	mov	sp, r7
 80040c0:	bd80      	pop	{r7, pc}
 80040c2:	bf00      	nop

080040c4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80040c4:	b480      	push	{r7}
 80040c6:	b083      	sub	sp, #12
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80040cc:	bf00      	nop
 80040ce:	370c      	adds	r7, #12
 80040d0:	46bd      	mov	sp, r7
 80040d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d6:	4770      	bx	lr

080040d8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80040d8:	b480      	push	{r7}
 80040da:	b083      	sub	sp, #12
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80040e0:	bf00      	nop
 80040e2:	370c      	adds	r7, #12
 80040e4:	46bd      	mov	sp, r7
 80040e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ea:	4770      	bx	lr

080040ec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80040ec:	b480      	push	{r7}
 80040ee:	b083      	sub	sp, #12
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
 80040f4:	460b      	mov	r3, r1
 80040f6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80040f8:	bf00      	nop
 80040fa:	370c      	adds	r7, #12
 80040fc:	46bd      	mov	sp, r7
 80040fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004102:	4770      	bx	lr

08004104 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004104:	b480      	push	{r7}
 8004106:	b083      	sub	sp, #12
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800410c:	bf00      	nop
 800410e:	370c      	adds	r7, #12
 8004110:	46bd      	mov	sp, r7
 8004112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004116:	4770      	bx	lr

08004118 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b088      	sub	sp, #32
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004120:	2300      	movs	r3, #0
 8004122:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	689a      	ldr	r2, [r3, #8]
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	691b      	ldr	r3, [r3, #16]
 800412c:	431a      	orrs	r2, r3
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	695b      	ldr	r3, [r3, #20]
 8004132:	431a      	orrs	r2, r3
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	69db      	ldr	r3, [r3, #28]
 8004138:	4313      	orrs	r3, r2
 800413a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	681a      	ldr	r2, [r3, #0]
 8004142:	4ba6      	ldr	r3, [pc, #664]	; (80043dc <UART_SetConfig+0x2c4>)
 8004144:	4013      	ands	r3, r2
 8004146:	687a      	ldr	r2, [r7, #4]
 8004148:	6812      	ldr	r2, [r2, #0]
 800414a:	6979      	ldr	r1, [r7, #20]
 800414c:	430b      	orrs	r3, r1
 800414e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	685b      	ldr	r3, [r3, #4]
 8004156:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	68da      	ldr	r2, [r3, #12]
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	430a      	orrs	r2, r1
 8004164:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	699b      	ldr	r3, [r3, #24]
 800416a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6a1b      	ldr	r3, [r3, #32]
 8004170:	697a      	ldr	r2, [r7, #20]
 8004172:	4313      	orrs	r3, r2
 8004174:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	689b      	ldr	r3, [r3, #8]
 800417c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	697a      	ldr	r2, [r7, #20]
 8004186:	430a      	orrs	r2, r1
 8004188:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4a94      	ldr	r2, [pc, #592]	; (80043e0 <UART_SetConfig+0x2c8>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d120      	bne.n	80041d6 <UART_SetConfig+0xbe>
 8004194:	4b93      	ldr	r3, [pc, #588]	; (80043e4 <UART_SetConfig+0x2cc>)
 8004196:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800419a:	f003 0303 	and.w	r3, r3, #3
 800419e:	2b03      	cmp	r3, #3
 80041a0:	d816      	bhi.n	80041d0 <UART_SetConfig+0xb8>
 80041a2:	a201      	add	r2, pc, #4	; (adr r2, 80041a8 <UART_SetConfig+0x90>)
 80041a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041a8:	080041b9 	.word	0x080041b9
 80041ac:	080041c5 	.word	0x080041c5
 80041b0:	080041bf 	.word	0x080041bf
 80041b4:	080041cb 	.word	0x080041cb
 80041b8:	2301      	movs	r3, #1
 80041ba:	77fb      	strb	r3, [r7, #31]
 80041bc:	e150      	b.n	8004460 <UART_SetConfig+0x348>
 80041be:	2302      	movs	r3, #2
 80041c0:	77fb      	strb	r3, [r7, #31]
 80041c2:	e14d      	b.n	8004460 <UART_SetConfig+0x348>
 80041c4:	2304      	movs	r3, #4
 80041c6:	77fb      	strb	r3, [r7, #31]
 80041c8:	e14a      	b.n	8004460 <UART_SetConfig+0x348>
 80041ca:	2308      	movs	r3, #8
 80041cc:	77fb      	strb	r3, [r7, #31]
 80041ce:	e147      	b.n	8004460 <UART_SetConfig+0x348>
 80041d0:	2310      	movs	r3, #16
 80041d2:	77fb      	strb	r3, [r7, #31]
 80041d4:	e144      	b.n	8004460 <UART_SetConfig+0x348>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a83      	ldr	r2, [pc, #524]	; (80043e8 <UART_SetConfig+0x2d0>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d132      	bne.n	8004246 <UART_SetConfig+0x12e>
 80041e0:	4b80      	ldr	r3, [pc, #512]	; (80043e4 <UART_SetConfig+0x2cc>)
 80041e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041e6:	f003 030c 	and.w	r3, r3, #12
 80041ea:	2b0c      	cmp	r3, #12
 80041ec:	d828      	bhi.n	8004240 <UART_SetConfig+0x128>
 80041ee:	a201      	add	r2, pc, #4	; (adr r2, 80041f4 <UART_SetConfig+0xdc>)
 80041f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041f4:	08004229 	.word	0x08004229
 80041f8:	08004241 	.word	0x08004241
 80041fc:	08004241 	.word	0x08004241
 8004200:	08004241 	.word	0x08004241
 8004204:	08004235 	.word	0x08004235
 8004208:	08004241 	.word	0x08004241
 800420c:	08004241 	.word	0x08004241
 8004210:	08004241 	.word	0x08004241
 8004214:	0800422f 	.word	0x0800422f
 8004218:	08004241 	.word	0x08004241
 800421c:	08004241 	.word	0x08004241
 8004220:	08004241 	.word	0x08004241
 8004224:	0800423b 	.word	0x0800423b
 8004228:	2300      	movs	r3, #0
 800422a:	77fb      	strb	r3, [r7, #31]
 800422c:	e118      	b.n	8004460 <UART_SetConfig+0x348>
 800422e:	2302      	movs	r3, #2
 8004230:	77fb      	strb	r3, [r7, #31]
 8004232:	e115      	b.n	8004460 <UART_SetConfig+0x348>
 8004234:	2304      	movs	r3, #4
 8004236:	77fb      	strb	r3, [r7, #31]
 8004238:	e112      	b.n	8004460 <UART_SetConfig+0x348>
 800423a:	2308      	movs	r3, #8
 800423c:	77fb      	strb	r3, [r7, #31]
 800423e:	e10f      	b.n	8004460 <UART_SetConfig+0x348>
 8004240:	2310      	movs	r3, #16
 8004242:	77fb      	strb	r3, [r7, #31]
 8004244:	e10c      	b.n	8004460 <UART_SetConfig+0x348>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a68      	ldr	r2, [pc, #416]	; (80043ec <UART_SetConfig+0x2d4>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d120      	bne.n	8004292 <UART_SetConfig+0x17a>
 8004250:	4b64      	ldr	r3, [pc, #400]	; (80043e4 <UART_SetConfig+0x2cc>)
 8004252:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004256:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800425a:	2b30      	cmp	r3, #48	; 0x30
 800425c:	d013      	beq.n	8004286 <UART_SetConfig+0x16e>
 800425e:	2b30      	cmp	r3, #48	; 0x30
 8004260:	d814      	bhi.n	800428c <UART_SetConfig+0x174>
 8004262:	2b20      	cmp	r3, #32
 8004264:	d009      	beq.n	800427a <UART_SetConfig+0x162>
 8004266:	2b20      	cmp	r3, #32
 8004268:	d810      	bhi.n	800428c <UART_SetConfig+0x174>
 800426a:	2b00      	cmp	r3, #0
 800426c:	d002      	beq.n	8004274 <UART_SetConfig+0x15c>
 800426e:	2b10      	cmp	r3, #16
 8004270:	d006      	beq.n	8004280 <UART_SetConfig+0x168>
 8004272:	e00b      	b.n	800428c <UART_SetConfig+0x174>
 8004274:	2300      	movs	r3, #0
 8004276:	77fb      	strb	r3, [r7, #31]
 8004278:	e0f2      	b.n	8004460 <UART_SetConfig+0x348>
 800427a:	2302      	movs	r3, #2
 800427c:	77fb      	strb	r3, [r7, #31]
 800427e:	e0ef      	b.n	8004460 <UART_SetConfig+0x348>
 8004280:	2304      	movs	r3, #4
 8004282:	77fb      	strb	r3, [r7, #31]
 8004284:	e0ec      	b.n	8004460 <UART_SetConfig+0x348>
 8004286:	2308      	movs	r3, #8
 8004288:	77fb      	strb	r3, [r7, #31]
 800428a:	e0e9      	b.n	8004460 <UART_SetConfig+0x348>
 800428c:	2310      	movs	r3, #16
 800428e:	77fb      	strb	r3, [r7, #31]
 8004290:	e0e6      	b.n	8004460 <UART_SetConfig+0x348>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4a56      	ldr	r2, [pc, #344]	; (80043f0 <UART_SetConfig+0x2d8>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d120      	bne.n	80042de <UART_SetConfig+0x1c6>
 800429c:	4b51      	ldr	r3, [pc, #324]	; (80043e4 <UART_SetConfig+0x2cc>)
 800429e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042a2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80042a6:	2bc0      	cmp	r3, #192	; 0xc0
 80042a8:	d013      	beq.n	80042d2 <UART_SetConfig+0x1ba>
 80042aa:	2bc0      	cmp	r3, #192	; 0xc0
 80042ac:	d814      	bhi.n	80042d8 <UART_SetConfig+0x1c0>
 80042ae:	2b80      	cmp	r3, #128	; 0x80
 80042b0:	d009      	beq.n	80042c6 <UART_SetConfig+0x1ae>
 80042b2:	2b80      	cmp	r3, #128	; 0x80
 80042b4:	d810      	bhi.n	80042d8 <UART_SetConfig+0x1c0>
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d002      	beq.n	80042c0 <UART_SetConfig+0x1a8>
 80042ba:	2b40      	cmp	r3, #64	; 0x40
 80042bc:	d006      	beq.n	80042cc <UART_SetConfig+0x1b4>
 80042be:	e00b      	b.n	80042d8 <UART_SetConfig+0x1c0>
 80042c0:	2300      	movs	r3, #0
 80042c2:	77fb      	strb	r3, [r7, #31]
 80042c4:	e0cc      	b.n	8004460 <UART_SetConfig+0x348>
 80042c6:	2302      	movs	r3, #2
 80042c8:	77fb      	strb	r3, [r7, #31]
 80042ca:	e0c9      	b.n	8004460 <UART_SetConfig+0x348>
 80042cc:	2304      	movs	r3, #4
 80042ce:	77fb      	strb	r3, [r7, #31]
 80042d0:	e0c6      	b.n	8004460 <UART_SetConfig+0x348>
 80042d2:	2308      	movs	r3, #8
 80042d4:	77fb      	strb	r3, [r7, #31]
 80042d6:	e0c3      	b.n	8004460 <UART_SetConfig+0x348>
 80042d8:	2310      	movs	r3, #16
 80042da:	77fb      	strb	r3, [r7, #31]
 80042dc:	e0c0      	b.n	8004460 <UART_SetConfig+0x348>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a44      	ldr	r2, [pc, #272]	; (80043f4 <UART_SetConfig+0x2dc>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d125      	bne.n	8004334 <UART_SetConfig+0x21c>
 80042e8:	4b3e      	ldr	r3, [pc, #248]	; (80043e4 <UART_SetConfig+0x2cc>)
 80042ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80042f6:	d017      	beq.n	8004328 <UART_SetConfig+0x210>
 80042f8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80042fc:	d817      	bhi.n	800432e <UART_SetConfig+0x216>
 80042fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004302:	d00b      	beq.n	800431c <UART_SetConfig+0x204>
 8004304:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004308:	d811      	bhi.n	800432e <UART_SetConfig+0x216>
 800430a:	2b00      	cmp	r3, #0
 800430c:	d003      	beq.n	8004316 <UART_SetConfig+0x1fe>
 800430e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004312:	d006      	beq.n	8004322 <UART_SetConfig+0x20a>
 8004314:	e00b      	b.n	800432e <UART_SetConfig+0x216>
 8004316:	2300      	movs	r3, #0
 8004318:	77fb      	strb	r3, [r7, #31]
 800431a:	e0a1      	b.n	8004460 <UART_SetConfig+0x348>
 800431c:	2302      	movs	r3, #2
 800431e:	77fb      	strb	r3, [r7, #31]
 8004320:	e09e      	b.n	8004460 <UART_SetConfig+0x348>
 8004322:	2304      	movs	r3, #4
 8004324:	77fb      	strb	r3, [r7, #31]
 8004326:	e09b      	b.n	8004460 <UART_SetConfig+0x348>
 8004328:	2308      	movs	r3, #8
 800432a:	77fb      	strb	r3, [r7, #31]
 800432c:	e098      	b.n	8004460 <UART_SetConfig+0x348>
 800432e:	2310      	movs	r3, #16
 8004330:	77fb      	strb	r3, [r7, #31]
 8004332:	e095      	b.n	8004460 <UART_SetConfig+0x348>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4a2f      	ldr	r2, [pc, #188]	; (80043f8 <UART_SetConfig+0x2e0>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d125      	bne.n	800438a <UART_SetConfig+0x272>
 800433e:	4b29      	ldr	r3, [pc, #164]	; (80043e4 <UART_SetConfig+0x2cc>)
 8004340:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004344:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004348:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800434c:	d017      	beq.n	800437e <UART_SetConfig+0x266>
 800434e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004352:	d817      	bhi.n	8004384 <UART_SetConfig+0x26c>
 8004354:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004358:	d00b      	beq.n	8004372 <UART_SetConfig+0x25a>
 800435a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800435e:	d811      	bhi.n	8004384 <UART_SetConfig+0x26c>
 8004360:	2b00      	cmp	r3, #0
 8004362:	d003      	beq.n	800436c <UART_SetConfig+0x254>
 8004364:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004368:	d006      	beq.n	8004378 <UART_SetConfig+0x260>
 800436a:	e00b      	b.n	8004384 <UART_SetConfig+0x26c>
 800436c:	2301      	movs	r3, #1
 800436e:	77fb      	strb	r3, [r7, #31]
 8004370:	e076      	b.n	8004460 <UART_SetConfig+0x348>
 8004372:	2302      	movs	r3, #2
 8004374:	77fb      	strb	r3, [r7, #31]
 8004376:	e073      	b.n	8004460 <UART_SetConfig+0x348>
 8004378:	2304      	movs	r3, #4
 800437a:	77fb      	strb	r3, [r7, #31]
 800437c:	e070      	b.n	8004460 <UART_SetConfig+0x348>
 800437e:	2308      	movs	r3, #8
 8004380:	77fb      	strb	r3, [r7, #31]
 8004382:	e06d      	b.n	8004460 <UART_SetConfig+0x348>
 8004384:	2310      	movs	r3, #16
 8004386:	77fb      	strb	r3, [r7, #31]
 8004388:	e06a      	b.n	8004460 <UART_SetConfig+0x348>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a1b      	ldr	r2, [pc, #108]	; (80043fc <UART_SetConfig+0x2e4>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d138      	bne.n	8004406 <UART_SetConfig+0x2ee>
 8004394:	4b13      	ldr	r3, [pc, #76]	; (80043e4 <UART_SetConfig+0x2cc>)
 8004396:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800439a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800439e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80043a2:	d017      	beq.n	80043d4 <UART_SetConfig+0x2bc>
 80043a4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80043a8:	d82a      	bhi.n	8004400 <UART_SetConfig+0x2e8>
 80043aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043ae:	d00b      	beq.n	80043c8 <UART_SetConfig+0x2b0>
 80043b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043b4:	d824      	bhi.n	8004400 <UART_SetConfig+0x2e8>
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d003      	beq.n	80043c2 <UART_SetConfig+0x2aa>
 80043ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043be:	d006      	beq.n	80043ce <UART_SetConfig+0x2b6>
 80043c0:	e01e      	b.n	8004400 <UART_SetConfig+0x2e8>
 80043c2:	2300      	movs	r3, #0
 80043c4:	77fb      	strb	r3, [r7, #31]
 80043c6:	e04b      	b.n	8004460 <UART_SetConfig+0x348>
 80043c8:	2302      	movs	r3, #2
 80043ca:	77fb      	strb	r3, [r7, #31]
 80043cc:	e048      	b.n	8004460 <UART_SetConfig+0x348>
 80043ce:	2304      	movs	r3, #4
 80043d0:	77fb      	strb	r3, [r7, #31]
 80043d2:	e045      	b.n	8004460 <UART_SetConfig+0x348>
 80043d4:	2308      	movs	r3, #8
 80043d6:	77fb      	strb	r3, [r7, #31]
 80043d8:	e042      	b.n	8004460 <UART_SetConfig+0x348>
 80043da:	bf00      	nop
 80043dc:	efff69f3 	.word	0xefff69f3
 80043e0:	40011000 	.word	0x40011000
 80043e4:	40023800 	.word	0x40023800
 80043e8:	40004400 	.word	0x40004400
 80043ec:	40004800 	.word	0x40004800
 80043f0:	40004c00 	.word	0x40004c00
 80043f4:	40005000 	.word	0x40005000
 80043f8:	40011400 	.word	0x40011400
 80043fc:	40007800 	.word	0x40007800
 8004400:	2310      	movs	r3, #16
 8004402:	77fb      	strb	r3, [r7, #31]
 8004404:	e02c      	b.n	8004460 <UART_SetConfig+0x348>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a72      	ldr	r2, [pc, #456]	; (80045d4 <UART_SetConfig+0x4bc>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d125      	bne.n	800445c <UART_SetConfig+0x344>
 8004410:	4b71      	ldr	r3, [pc, #452]	; (80045d8 <UART_SetConfig+0x4c0>)
 8004412:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004416:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800441a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800441e:	d017      	beq.n	8004450 <UART_SetConfig+0x338>
 8004420:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004424:	d817      	bhi.n	8004456 <UART_SetConfig+0x33e>
 8004426:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800442a:	d00b      	beq.n	8004444 <UART_SetConfig+0x32c>
 800442c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004430:	d811      	bhi.n	8004456 <UART_SetConfig+0x33e>
 8004432:	2b00      	cmp	r3, #0
 8004434:	d003      	beq.n	800443e <UART_SetConfig+0x326>
 8004436:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800443a:	d006      	beq.n	800444a <UART_SetConfig+0x332>
 800443c:	e00b      	b.n	8004456 <UART_SetConfig+0x33e>
 800443e:	2300      	movs	r3, #0
 8004440:	77fb      	strb	r3, [r7, #31]
 8004442:	e00d      	b.n	8004460 <UART_SetConfig+0x348>
 8004444:	2302      	movs	r3, #2
 8004446:	77fb      	strb	r3, [r7, #31]
 8004448:	e00a      	b.n	8004460 <UART_SetConfig+0x348>
 800444a:	2304      	movs	r3, #4
 800444c:	77fb      	strb	r3, [r7, #31]
 800444e:	e007      	b.n	8004460 <UART_SetConfig+0x348>
 8004450:	2308      	movs	r3, #8
 8004452:	77fb      	strb	r3, [r7, #31]
 8004454:	e004      	b.n	8004460 <UART_SetConfig+0x348>
 8004456:	2310      	movs	r3, #16
 8004458:	77fb      	strb	r3, [r7, #31]
 800445a:	e001      	b.n	8004460 <UART_SetConfig+0x348>
 800445c:	2310      	movs	r3, #16
 800445e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	69db      	ldr	r3, [r3, #28]
 8004464:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004468:	d15b      	bne.n	8004522 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800446a:	7ffb      	ldrb	r3, [r7, #31]
 800446c:	2b08      	cmp	r3, #8
 800446e:	d828      	bhi.n	80044c2 <UART_SetConfig+0x3aa>
 8004470:	a201      	add	r2, pc, #4	; (adr r2, 8004478 <UART_SetConfig+0x360>)
 8004472:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004476:	bf00      	nop
 8004478:	0800449d 	.word	0x0800449d
 800447c:	080044a5 	.word	0x080044a5
 8004480:	080044ad 	.word	0x080044ad
 8004484:	080044c3 	.word	0x080044c3
 8004488:	080044b3 	.word	0x080044b3
 800448c:	080044c3 	.word	0x080044c3
 8004490:	080044c3 	.word	0x080044c3
 8004494:	080044c3 	.word	0x080044c3
 8004498:	080044bb 	.word	0x080044bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800449c:	f7fd fdfc 	bl	8002098 <HAL_RCC_GetPCLK1Freq>
 80044a0:	61b8      	str	r0, [r7, #24]
        break;
 80044a2:	e013      	b.n	80044cc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80044a4:	f7fd fe0c 	bl	80020c0 <HAL_RCC_GetPCLK2Freq>
 80044a8:	61b8      	str	r0, [r7, #24]
        break;
 80044aa:	e00f      	b.n	80044cc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80044ac:	4b4b      	ldr	r3, [pc, #300]	; (80045dc <UART_SetConfig+0x4c4>)
 80044ae:	61bb      	str	r3, [r7, #24]
        break;
 80044b0:	e00c      	b.n	80044cc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80044b2:	f7fd fd1f 	bl	8001ef4 <HAL_RCC_GetSysClockFreq>
 80044b6:	61b8      	str	r0, [r7, #24]
        break;
 80044b8:	e008      	b.n	80044cc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80044ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044be:	61bb      	str	r3, [r7, #24]
        break;
 80044c0:	e004      	b.n	80044cc <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80044c2:	2300      	movs	r3, #0
 80044c4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80044c6:	2301      	movs	r3, #1
 80044c8:	77bb      	strb	r3, [r7, #30]
        break;
 80044ca:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80044cc:	69bb      	ldr	r3, [r7, #24]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d074      	beq.n	80045bc <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80044d2:	69bb      	ldr	r3, [r7, #24]
 80044d4:	005a      	lsls	r2, r3, #1
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	085b      	lsrs	r3, r3, #1
 80044dc:	441a      	add	r2, r3
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80044e6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80044e8:	693b      	ldr	r3, [r7, #16]
 80044ea:	2b0f      	cmp	r3, #15
 80044ec:	d916      	bls.n	800451c <UART_SetConfig+0x404>
 80044ee:	693b      	ldr	r3, [r7, #16]
 80044f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044f4:	d212      	bcs.n	800451c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80044f6:	693b      	ldr	r3, [r7, #16]
 80044f8:	b29b      	uxth	r3, r3
 80044fa:	f023 030f 	bic.w	r3, r3, #15
 80044fe:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004500:	693b      	ldr	r3, [r7, #16]
 8004502:	085b      	lsrs	r3, r3, #1
 8004504:	b29b      	uxth	r3, r3
 8004506:	f003 0307 	and.w	r3, r3, #7
 800450a:	b29a      	uxth	r2, r3
 800450c:	89fb      	ldrh	r3, [r7, #14]
 800450e:	4313      	orrs	r3, r2
 8004510:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	89fa      	ldrh	r2, [r7, #14]
 8004518:	60da      	str	r2, [r3, #12]
 800451a:	e04f      	b.n	80045bc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800451c:	2301      	movs	r3, #1
 800451e:	77bb      	strb	r3, [r7, #30]
 8004520:	e04c      	b.n	80045bc <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004522:	7ffb      	ldrb	r3, [r7, #31]
 8004524:	2b08      	cmp	r3, #8
 8004526:	d828      	bhi.n	800457a <UART_SetConfig+0x462>
 8004528:	a201      	add	r2, pc, #4	; (adr r2, 8004530 <UART_SetConfig+0x418>)
 800452a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800452e:	bf00      	nop
 8004530:	08004555 	.word	0x08004555
 8004534:	0800455d 	.word	0x0800455d
 8004538:	08004565 	.word	0x08004565
 800453c:	0800457b 	.word	0x0800457b
 8004540:	0800456b 	.word	0x0800456b
 8004544:	0800457b 	.word	0x0800457b
 8004548:	0800457b 	.word	0x0800457b
 800454c:	0800457b 	.word	0x0800457b
 8004550:	08004573 	.word	0x08004573
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004554:	f7fd fda0 	bl	8002098 <HAL_RCC_GetPCLK1Freq>
 8004558:	61b8      	str	r0, [r7, #24]
        break;
 800455a:	e013      	b.n	8004584 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800455c:	f7fd fdb0 	bl	80020c0 <HAL_RCC_GetPCLK2Freq>
 8004560:	61b8      	str	r0, [r7, #24]
        break;
 8004562:	e00f      	b.n	8004584 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004564:	4b1d      	ldr	r3, [pc, #116]	; (80045dc <UART_SetConfig+0x4c4>)
 8004566:	61bb      	str	r3, [r7, #24]
        break;
 8004568:	e00c      	b.n	8004584 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800456a:	f7fd fcc3 	bl	8001ef4 <HAL_RCC_GetSysClockFreq>
 800456e:	61b8      	str	r0, [r7, #24]
        break;
 8004570:	e008      	b.n	8004584 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004572:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004576:	61bb      	str	r3, [r7, #24]
        break;
 8004578:	e004      	b.n	8004584 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800457a:	2300      	movs	r3, #0
 800457c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800457e:	2301      	movs	r3, #1
 8004580:	77bb      	strb	r3, [r7, #30]
        break;
 8004582:	bf00      	nop
    }

    if (pclk != 0U)
 8004584:	69bb      	ldr	r3, [r7, #24]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d018      	beq.n	80045bc <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	085a      	lsrs	r2, r3, #1
 8004590:	69bb      	ldr	r3, [r7, #24]
 8004592:	441a      	add	r2, r3
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	fbb2 f3f3 	udiv	r3, r2, r3
 800459c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800459e:	693b      	ldr	r3, [r7, #16]
 80045a0:	2b0f      	cmp	r3, #15
 80045a2:	d909      	bls.n	80045b8 <UART_SetConfig+0x4a0>
 80045a4:	693b      	ldr	r3, [r7, #16]
 80045a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045aa:	d205      	bcs.n	80045b8 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80045ac:	693b      	ldr	r3, [r7, #16]
 80045ae:	b29a      	uxth	r2, r3
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	60da      	str	r2, [r3, #12]
 80045b6:	e001      	b.n	80045bc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80045b8:	2301      	movs	r3, #1
 80045ba:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2200      	movs	r2, #0
 80045c0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2200      	movs	r2, #0
 80045c6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80045c8:	7fbb      	ldrb	r3, [r7, #30]
}
 80045ca:	4618      	mov	r0, r3
 80045cc:	3720      	adds	r7, #32
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bd80      	pop	{r7, pc}
 80045d2:	bf00      	nop
 80045d4:	40007c00 	.word	0x40007c00
 80045d8:	40023800 	.word	0x40023800
 80045dc:	00f42400 	.word	0x00f42400

080045e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80045e0:	b480      	push	{r7}
 80045e2:	b083      	sub	sp, #12
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ec:	f003 0301 	and.w	r3, r3, #1
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d00a      	beq.n	800460a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	430a      	orrs	r2, r1
 8004608:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800460e:	f003 0302 	and.w	r3, r3, #2
 8004612:	2b00      	cmp	r3, #0
 8004614:	d00a      	beq.n	800462c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	685b      	ldr	r3, [r3, #4]
 800461c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	430a      	orrs	r2, r1
 800462a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004630:	f003 0304 	and.w	r3, r3, #4
 8004634:	2b00      	cmp	r3, #0
 8004636:	d00a      	beq.n	800464e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	685b      	ldr	r3, [r3, #4]
 800463e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	430a      	orrs	r2, r1
 800464c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004652:	f003 0308 	and.w	r3, r3, #8
 8004656:	2b00      	cmp	r3, #0
 8004658:	d00a      	beq.n	8004670 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	430a      	orrs	r2, r1
 800466e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004674:	f003 0310 	and.w	r3, r3, #16
 8004678:	2b00      	cmp	r3, #0
 800467a:	d00a      	beq.n	8004692 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	689b      	ldr	r3, [r3, #8]
 8004682:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	430a      	orrs	r2, r1
 8004690:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004696:	f003 0320 	and.w	r3, r3, #32
 800469a:	2b00      	cmp	r3, #0
 800469c:	d00a      	beq.n	80046b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	689b      	ldr	r3, [r3, #8]
 80046a4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	430a      	orrs	r2, r1
 80046b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d01a      	beq.n	80046f6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	430a      	orrs	r2, r1
 80046d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80046de:	d10a      	bne.n	80046f6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	430a      	orrs	r2, r1
 80046f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d00a      	beq.n	8004718 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	430a      	orrs	r2, r1
 8004716:	605a      	str	r2, [r3, #4]
  }
}
 8004718:	bf00      	nop
 800471a:	370c      	adds	r7, #12
 800471c:	46bd      	mov	sp, r7
 800471e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004722:	4770      	bx	lr

08004724 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b086      	sub	sp, #24
 8004728:	af02      	add	r7, sp, #8
 800472a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2200      	movs	r2, #0
 8004730:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004734:	f7fc fce8 	bl	8001108 <HAL_GetTick>
 8004738:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f003 0308 	and.w	r3, r3, #8
 8004744:	2b08      	cmp	r3, #8
 8004746:	d10e      	bne.n	8004766 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004748:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800474c:	9300      	str	r3, [sp, #0]
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	2200      	movs	r2, #0
 8004752:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004756:	6878      	ldr	r0, [r7, #4]
 8004758:	f000 f831 	bl	80047be <UART_WaitOnFlagUntilTimeout>
 800475c:	4603      	mov	r3, r0
 800475e:	2b00      	cmp	r3, #0
 8004760:	d001      	beq.n	8004766 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004762:	2303      	movs	r3, #3
 8004764:	e027      	b.n	80047b6 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f003 0304 	and.w	r3, r3, #4
 8004770:	2b04      	cmp	r3, #4
 8004772:	d10e      	bne.n	8004792 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004774:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004778:	9300      	str	r3, [sp, #0]
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	2200      	movs	r2, #0
 800477e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004782:	6878      	ldr	r0, [r7, #4]
 8004784:	f000 f81b 	bl	80047be <UART_WaitOnFlagUntilTimeout>
 8004788:	4603      	mov	r3, r0
 800478a:	2b00      	cmp	r3, #0
 800478c:	d001      	beq.n	8004792 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800478e:	2303      	movs	r3, #3
 8004790:	e011      	b.n	80047b6 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2220      	movs	r2, #32
 8004796:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2220      	movs	r2, #32
 800479c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2200      	movs	r2, #0
 80047a4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2200      	movs	r2, #0
 80047aa:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2200      	movs	r2, #0
 80047b0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80047b4:	2300      	movs	r3, #0
}
 80047b6:	4618      	mov	r0, r3
 80047b8:	3710      	adds	r7, #16
 80047ba:	46bd      	mov	sp, r7
 80047bc:	bd80      	pop	{r7, pc}

080047be <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80047be:	b580      	push	{r7, lr}
 80047c0:	b09c      	sub	sp, #112	; 0x70
 80047c2:	af00      	add	r7, sp, #0
 80047c4:	60f8      	str	r0, [r7, #12]
 80047c6:	60b9      	str	r1, [r7, #8]
 80047c8:	603b      	str	r3, [r7, #0]
 80047ca:	4613      	mov	r3, r2
 80047cc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047ce:	e0a7      	b.n	8004920 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80047d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80047d6:	f000 80a3 	beq.w	8004920 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047da:	f7fc fc95 	bl	8001108 <HAL_GetTick>
 80047de:	4602      	mov	r2, r0
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	1ad3      	subs	r3, r2, r3
 80047e4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80047e6:	429a      	cmp	r2, r3
 80047e8:	d302      	bcc.n	80047f0 <UART_WaitOnFlagUntilTimeout+0x32>
 80047ea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d13f      	bne.n	8004870 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80047f8:	e853 3f00 	ldrex	r3, [r3]
 80047fc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80047fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004800:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004804:	667b      	str	r3, [r7, #100]	; 0x64
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	461a      	mov	r2, r3
 800480c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800480e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004810:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004812:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004814:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004816:	e841 2300 	strex	r3, r2, [r1]
 800481a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800481c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800481e:	2b00      	cmp	r3, #0
 8004820:	d1e6      	bne.n	80047f0 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	3308      	adds	r3, #8
 8004828:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800482a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800482c:	e853 3f00 	ldrex	r3, [r3]
 8004830:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004832:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004834:	f023 0301 	bic.w	r3, r3, #1
 8004838:	663b      	str	r3, [r7, #96]	; 0x60
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	3308      	adds	r3, #8
 8004840:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004842:	64ba      	str	r2, [r7, #72]	; 0x48
 8004844:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004846:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004848:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800484a:	e841 2300 	strex	r3, r2, [r1]
 800484e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004850:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004852:	2b00      	cmp	r3, #0
 8004854:	d1e5      	bne.n	8004822 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	2220      	movs	r2, #32
 800485a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	2220      	movs	r2, #32
 8004860:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	2200      	movs	r2, #0
 8004868:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 800486c:	2303      	movs	r3, #3
 800486e:	e068      	b.n	8004942 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f003 0304 	and.w	r3, r3, #4
 800487a:	2b00      	cmp	r3, #0
 800487c:	d050      	beq.n	8004920 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	69db      	ldr	r3, [r3, #28]
 8004884:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004888:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800488c:	d148      	bne.n	8004920 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004896:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800489e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048a0:	e853 3f00 	ldrex	r3, [r3]
 80048a4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80048a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80048ac:	66fb      	str	r3, [r7, #108]	; 0x6c
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	461a      	mov	r2, r3
 80048b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048b6:	637b      	str	r3, [r7, #52]	; 0x34
 80048b8:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048ba:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80048bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80048be:	e841 2300 	strex	r3, r2, [r1]
 80048c2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80048c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d1e6      	bne.n	8004898 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	3308      	adds	r3, #8
 80048d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048d2:	697b      	ldr	r3, [r7, #20]
 80048d4:	e853 3f00 	ldrex	r3, [r3]
 80048d8:	613b      	str	r3, [r7, #16]
   return(result);
 80048da:	693b      	ldr	r3, [r7, #16]
 80048dc:	f023 0301 	bic.w	r3, r3, #1
 80048e0:	66bb      	str	r3, [r7, #104]	; 0x68
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	3308      	adds	r3, #8
 80048e8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80048ea:	623a      	str	r2, [r7, #32]
 80048ec:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048ee:	69f9      	ldr	r1, [r7, #28]
 80048f0:	6a3a      	ldr	r2, [r7, #32]
 80048f2:	e841 2300 	strex	r3, r2, [r1]
 80048f6:	61bb      	str	r3, [r7, #24]
   return(result);
 80048f8:	69bb      	ldr	r3, [r7, #24]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d1e5      	bne.n	80048ca <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	2220      	movs	r2, #32
 8004902:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	2220      	movs	r2, #32
 8004908:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	2220      	movs	r2, #32
 8004910:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	2200      	movs	r2, #0
 8004918:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800491c:	2303      	movs	r3, #3
 800491e:	e010      	b.n	8004942 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	69da      	ldr	r2, [r3, #28]
 8004926:	68bb      	ldr	r3, [r7, #8]
 8004928:	4013      	ands	r3, r2
 800492a:	68ba      	ldr	r2, [r7, #8]
 800492c:	429a      	cmp	r2, r3
 800492e:	bf0c      	ite	eq
 8004930:	2301      	moveq	r3, #1
 8004932:	2300      	movne	r3, #0
 8004934:	b2db      	uxtb	r3, r3
 8004936:	461a      	mov	r2, r3
 8004938:	79fb      	ldrb	r3, [r7, #7]
 800493a:	429a      	cmp	r2, r3
 800493c:	f43f af48 	beq.w	80047d0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004940:	2300      	movs	r3, #0
}
 8004942:	4618      	mov	r0, r3
 8004944:	3770      	adds	r7, #112	; 0x70
 8004946:	46bd      	mov	sp, r7
 8004948:	bd80      	pop	{r7, pc}

0800494a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800494a:	b480      	push	{r7}
 800494c:	b095      	sub	sp, #84	; 0x54
 800494e:	af00      	add	r7, sp, #0
 8004950:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004958:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800495a:	e853 3f00 	ldrex	r3, [r3]
 800495e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004962:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004966:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	461a      	mov	r2, r3
 800496e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004970:	643b      	str	r3, [r7, #64]	; 0x40
 8004972:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004974:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004976:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004978:	e841 2300 	strex	r3, r2, [r1]
 800497c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800497e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004980:	2b00      	cmp	r3, #0
 8004982:	d1e6      	bne.n	8004952 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	3308      	adds	r3, #8
 800498a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800498c:	6a3b      	ldr	r3, [r7, #32]
 800498e:	e853 3f00 	ldrex	r3, [r3]
 8004992:	61fb      	str	r3, [r7, #28]
   return(result);
 8004994:	69fb      	ldr	r3, [r7, #28]
 8004996:	f023 0301 	bic.w	r3, r3, #1
 800499a:	64bb      	str	r3, [r7, #72]	; 0x48
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	3308      	adds	r3, #8
 80049a2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80049a4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80049a6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049a8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80049aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80049ac:	e841 2300 	strex	r3, r2, [r1]
 80049b0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80049b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d1e5      	bne.n	8004984 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049bc:	2b01      	cmp	r3, #1
 80049be:	d118      	bne.n	80049f2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	e853 3f00 	ldrex	r3, [r3]
 80049cc:	60bb      	str	r3, [r7, #8]
   return(result);
 80049ce:	68bb      	ldr	r3, [r7, #8]
 80049d0:	f023 0310 	bic.w	r3, r3, #16
 80049d4:	647b      	str	r3, [r7, #68]	; 0x44
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	461a      	mov	r2, r3
 80049dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049de:	61bb      	str	r3, [r7, #24]
 80049e0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049e2:	6979      	ldr	r1, [r7, #20]
 80049e4:	69ba      	ldr	r2, [r7, #24]
 80049e6:	e841 2300 	strex	r3, r2, [r1]
 80049ea:	613b      	str	r3, [r7, #16]
   return(result);
 80049ec:	693b      	ldr	r3, [r7, #16]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d1e6      	bne.n	80049c0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2220      	movs	r2, #32
 80049f6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2200      	movs	r2, #0
 80049fe:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2200      	movs	r2, #0
 8004a04:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004a06:	bf00      	nop
 8004a08:	3754      	adds	r7, #84	; 0x54
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a10:	4770      	bx	lr

08004a12 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004a12:	b580      	push	{r7, lr}
 8004a14:	b084      	sub	sp, #16
 8004a16:	af00      	add	r7, sp, #0
 8004a18:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a1e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	2200      	movs	r2, #0
 8004a24:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004a30:	68f8      	ldr	r0, [r7, #12]
 8004a32:	f7ff fb51 	bl	80040d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004a36:	bf00      	nop
 8004a38:	3710      	adds	r7, #16
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bd80      	pop	{r7, pc}

08004a3e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004a3e:	b580      	push	{r7, lr}
 8004a40:	b088      	sub	sp, #32
 8004a42:	af00      	add	r7, sp, #0
 8004a44:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	e853 3f00 	ldrex	r3, [r3]
 8004a52:	60bb      	str	r3, [r7, #8]
   return(result);
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a5a:	61fb      	str	r3, [r7, #28]
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	461a      	mov	r2, r3
 8004a62:	69fb      	ldr	r3, [r7, #28]
 8004a64:	61bb      	str	r3, [r7, #24]
 8004a66:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a68:	6979      	ldr	r1, [r7, #20]
 8004a6a:	69ba      	ldr	r2, [r7, #24]
 8004a6c:	e841 2300 	strex	r3, r2, [r1]
 8004a70:	613b      	str	r3, [r7, #16]
   return(result);
 8004a72:	693b      	ldr	r3, [r7, #16]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d1e6      	bne.n	8004a46 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2220      	movs	r2, #32
 8004a7c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2200      	movs	r2, #0
 8004a82:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004a84:	6878      	ldr	r0, [r7, #4]
 8004a86:	f7ff fb1d 	bl	80040c4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004a8a:	bf00      	nop
 8004a8c:	3720      	adds	r7, #32
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	bd80      	pop	{r7, pc}
	...

08004a94 <std>:
 8004a94:	2300      	movs	r3, #0
 8004a96:	b510      	push	{r4, lr}
 8004a98:	4604      	mov	r4, r0
 8004a9a:	e9c0 3300 	strd	r3, r3, [r0]
 8004a9e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004aa2:	6083      	str	r3, [r0, #8]
 8004aa4:	8181      	strh	r1, [r0, #12]
 8004aa6:	6643      	str	r3, [r0, #100]	; 0x64
 8004aa8:	81c2      	strh	r2, [r0, #14]
 8004aaa:	6183      	str	r3, [r0, #24]
 8004aac:	4619      	mov	r1, r3
 8004aae:	2208      	movs	r2, #8
 8004ab0:	305c      	adds	r0, #92	; 0x5c
 8004ab2:	f000 f9f7 	bl	8004ea4 <memset>
 8004ab6:	4b0d      	ldr	r3, [pc, #52]	; (8004aec <std+0x58>)
 8004ab8:	6263      	str	r3, [r4, #36]	; 0x24
 8004aba:	4b0d      	ldr	r3, [pc, #52]	; (8004af0 <std+0x5c>)
 8004abc:	62a3      	str	r3, [r4, #40]	; 0x28
 8004abe:	4b0d      	ldr	r3, [pc, #52]	; (8004af4 <std+0x60>)
 8004ac0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004ac2:	4b0d      	ldr	r3, [pc, #52]	; (8004af8 <std+0x64>)
 8004ac4:	6323      	str	r3, [r4, #48]	; 0x30
 8004ac6:	4b0d      	ldr	r3, [pc, #52]	; (8004afc <std+0x68>)
 8004ac8:	6224      	str	r4, [r4, #32]
 8004aca:	429c      	cmp	r4, r3
 8004acc:	d006      	beq.n	8004adc <std+0x48>
 8004ace:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8004ad2:	4294      	cmp	r4, r2
 8004ad4:	d002      	beq.n	8004adc <std+0x48>
 8004ad6:	33d0      	adds	r3, #208	; 0xd0
 8004ad8:	429c      	cmp	r4, r3
 8004ada:	d105      	bne.n	8004ae8 <std+0x54>
 8004adc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004ae0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ae4:	f000 ba56 	b.w	8004f94 <__retarget_lock_init_recursive>
 8004ae8:	bd10      	pop	{r4, pc}
 8004aea:	bf00      	nop
 8004aec:	08004cf5 	.word	0x08004cf5
 8004af0:	08004d17 	.word	0x08004d17
 8004af4:	08004d4f 	.word	0x08004d4f
 8004af8:	08004d73 	.word	0x08004d73
 8004afc:	20000204 	.word	0x20000204

08004b00 <stdio_exit_handler>:
 8004b00:	4a02      	ldr	r2, [pc, #8]	; (8004b0c <stdio_exit_handler+0xc>)
 8004b02:	4903      	ldr	r1, [pc, #12]	; (8004b10 <stdio_exit_handler+0x10>)
 8004b04:	4803      	ldr	r0, [pc, #12]	; (8004b14 <stdio_exit_handler+0x14>)
 8004b06:	f000 b869 	b.w	8004bdc <_fwalk_sglue>
 8004b0a:	bf00      	nop
 8004b0c:	20000030 	.word	0x20000030
 8004b10:	08005841 	.word	0x08005841
 8004b14:	2000003c 	.word	0x2000003c

08004b18 <cleanup_stdio>:
 8004b18:	6841      	ldr	r1, [r0, #4]
 8004b1a:	4b0c      	ldr	r3, [pc, #48]	; (8004b4c <cleanup_stdio+0x34>)
 8004b1c:	4299      	cmp	r1, r3
 8004b1e:	b510      	push	{r4, lr}
 8004b20:	4604      	mov	r4, r0
 8004b22:	d001      	beq.n	8004b28 <cleanup_stdio+0x10>
 8004b24:	f000 fe8c 	bl	8005840 <_fflush_r>
 8004b28:	68a1      	ldr	r1, [r4, #8]
 8004b2a:	4b09      	ldr	r3, [pc, #36]	; (8004b50 <cleanup_stdio+0x38>)
 8004b2c:	4299      	cmp	r1, r3
 8004b2e:	d002      	beq.n	8004b36 <cleanup_stdio+0x1e>
 8004b30:	4620      	mov	r0, r4
 8004b32:	f000 fe85 	bl	8005840 <_fflush_r>
 8004b36:	68e1      	ldr	r1, [r4, #12]
 8004b38:	4b06      	ldr	r3, [pc, #24]	; (8004b54 <cleanup_stdio+0x3c>)
 8004b3a:	4299      	cmp	r1, r3
 8004b3c:	d004      	beq.n	8004b48 <cleanup_stdio+0x30>
 8004b3e:	4620      	mov	r0, r4
 8004b40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b44:	f000 be7c 	b.w	8005840 <_fflush_r>
 8004b48:	bd10      	pop	{r4, pc}
 8004b4a:	bf00      	nop
 8004b4c:	20000204 	.word	0x20000204
 8004b50:	2000026c 	.word	0x2000026c
 8004b54:	200002d4 	.word	0x200002d4

08004b58 <global_stdio_init.part.0>:
 8004b58:	b510      	push	{r4, lr}
 8004b5a:	4b0b      	ldr	r3, [pc, #44]	; (8004b88 <global_stdio_init.part.0+0x30>)
 8004b5c:	4c0b      	ldr	r4, [pc, #44]	; (8004b8c <global_stdio_init.part.0+0x34>)
 8004b5e:	4a0c      	ldr	r2, [pc, #48]	; (8004b90 <global_stdio_init.part.0+0x38>)
 8004b60:	601a      	str	r2, [r3, #0]
 8004b62:	4620      	mov	r0, r4
 8004b64:	2200      	movs	r2, #0
 8004b66:	2104      	movs	r1, #4
 8004b68:	f7ff ff94 	bl	8004a94 <std>
 8004b6c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004b70:	2201      	movs	r2, #1
 8004b72:	2109      	movs	r1, #9
 8004b74:	f7ff ff8e 	bl	8004a94 <std>
 8004b78:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004b7c:	2202      	movs	r2, #2
 8004b7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b82:	2112      	movs	r1, #18
 8004b84:	f7ff bf86 	b.w	8004a94 <std>
 8004b88:	2000033c 	.word	0x2000033c
 8004b8c:	20000204 	.word	0x20000204
 8004b90:	08004b01 	.word	0x08004b01

08004b94 <__sfp_lock_acquire>:
 8004b94:	4801      	ldr	r0, [pc, #4]	; (8004b9c <__sfp_lock_acquire+0x8>)
 8004b96:	f000 b9fe 	b.w	8004f96 <__retarget_lock_acquire_recursive>
 8004b9a:	bf00      	nop
 8004b9c:	20000345 	.word	0x20000345

08004ba0 <__sfp_lock_release>:
 8004ba0:	4801      	ldr	r0, [pc, #4]	; (8004ba8 <__sfp_lock_release+0x8>)
 8004ba2:	f000 b9f9 	b.w	8004f98 <__retarget_lock_release_recursive>
 8004ba6:	bf00      	nop
 8004ba8:	20000345 	.word	0x20000345

08004bac <__sinit>:
 8004bac:	b510      	push	{r4, lr}
 8004bae:	4604      	mov	r4, r0
 8004bb0:	f7ff fff0 	bl	8004b94 <__sfp_lock_acquire>
 8004bb4:	6a23      	ldr	r3, [r4, #32]
 8004bb6:	b11b      	cbz	r3, 8004bc0 <__sinit+0x14>
 8004bb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004bbc:	f7ff bff0 	b.w	8004ba0 <__sfp_lock_release>
 8004bc0:	4b04      	ldr	r3, [pc, #16]	; (8004bd4 <__sinit+0x28>)
 8004bc2:	6223      	str	r3, [r4, #32]
 8004bc4:	4b04      	ldr	r3, [pc, #16]	; (8004bd8 <__sinit+0x2c>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d1f5      	bne.n	8004bb8 <__sinit+0xc>
 8004bcc:	f7ff ffc4 	bl	8004b58 <global_stdio_init.part.0>
 8004bd0:	e7f2      	b.n	8004bb8 <__sinit+0xc>
 8004bd2:	bf00      	nop
 8004bd4:	08004b19 	.word	0x08004b19
 8004bd8:	2000033c 	.word	0x2000033c

08004bdc <_fwalk_sglue>:
 8004bdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004be0:	4607      	mov	r7, r0
 8004be2:	4688      	mov	r8, r1
 8004be4:	4614      	mov	r4, r2
 8004be6:	2600      	movs	r6, #0
 8004be8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004bec:	f1b9 0901 	subs.w	r9, r9, #1
 8004bf0:	d505      	bpl.n	8004bfe <_fwalk_sglue+0x22>
 8004bf2:	6824      	ldr	r4, [r4, #0]
 8004bf4:	2c00      	cmp	r4, #0
 8004bf6:	d1f7      	bne.n	8004be8 <_fwalk_sglue+0xc>
 8004bf8:	4630      	mov	r0, r6
 8004bfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004bfe:	89ab      	ldrh	r3, [r5, #12]
 8004c00:	2b01      	cmp	r3, #1
 8004c02:	d907      	bls.n	8004c14 <_fwalk_sglue+0x38>
 8004c04:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004c08:	3301      	adds	r3, #1
 8004c0a:	d003      	beq.n	8004c14 <_fwalk_sglue+0x38>
 8004c0c:	4629      	mov	r1, r5
 8004c0e:	4638      	mov	r0, r7
 8004c10:	47c0      	blx	r8
 8004c12:	4306      	orrs	r6, r0
 8004c14:	3568      	adds	r5, #104	; 0x68
 8004c16:	e7e9      	b.n	8004bec <_fwalk_sglue+0x10>

08004c18 <iprintf>:
 8004c18:	b40f      	push	{r0, r1, r2, r3}
 8004c1a:	b507      	push	{r0, r1, r2, lr}
 8004c1c:	4906      	ldr	r1, [pc, #24]	; (8004c38 <iprintf+0x20>)
 8004c1e:	ab04      	add	r3, sp, #16
 8004c20:	6808      	ldr	r0, [r1, #0]
 8004c22:	f853 2b04 	ldr.w	r2, [r3], #4
 8004c26:	6881      	ldr	r1, [r0, #8]
 8004c28:	9301      	str	r3, [sp, #4]
 8004c2a:	f000 fad9 	bl	80051e0 <_vfiprintf_r>
 8004c2e:	b003      	add	sp, #12
 8004c30:	f85d eb04 	ldr.w	lr, [sp], #4
 8004c34:	b004      	add	sp, #16
 8004c36:	4770      	bx	lr
 8004c38:	20000088 	.word	0x20000088

08004c3c <_puts_r>:
 8004c3c:	6a03      	ldr	r3, [r0, #32]
 8004c3e:	b570      	push	{r4, r5, r6, lr}
 8004c40:	6884      	ldr	r4, [r0, #8]
 8004c42:	4605      	mov	r5, r0
 8004c44:	460e      	mov	r6, r1
 8004c46:	b90b      	cbnz	r3, 8004c4c <_puts_r+0x10>
 8004c48:	f7ff ffb0 	bl	8004bac <__sinit>
 8004c4c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004c4e:	07db      	lsls	r3, r3, #31
 8004c50:	d405      	bmi.n	8004c5e <_puts_r+0x22>
 8004c52:	89a3      	ldrh	r3, [r4, #12]
 8004c54:	0598      	lsls	r0, r3, #22
 8004c56:	d402      	bmi.n	8004c5e <_puts_r+0x22>
 8004c58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004c5a:	f000 f99c 	bl	8004f96 <__retarget_lock_acquire_recursive>
 8004c5e:	89a3      	ldrh	r3, [r4, #12]
 8004c60:	0719      	lsls	r1, r3, #28
 8004c62:	d513      	bpl.n	8004c8c <_puts_r+0x50>
 8004c64:	6923      	ldr	r3, [r4, #16]
 8004c66:	b18b      	cbz	r3, 8004c8c <_puts_r+0x50>
 8004c68:	3e01      	subs	r6, #1
 8004c6a:	68a3      	ldr	r3, [r4, #8]
 8004c6c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004c70:	3b01      	subs	r3, #1
 8004c72:	60a3      	str	r3, [r4, #8]
 8004c74:	b9e9      	cbnz	r1, 8004cb2 <_puts_r+0x76>
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	da2e      	bge.n	8004cd8 <_puts_r+0x9c>
 8004c7a:	4622      	mov	r2, r4
 8004c7c:	210a      	movs	r1, #10
 8004c7e:	4628      	mov	r0, r5
 8004c80:	f000 f87b 	bl	8004d7a <__swbuf_r>
 8004c84:	3001      	adds	r0, #1
 8004c86:	d007      	beq.n	8004c98 <_puts_r+0x5c>
 8004c88:	250a      	movs	r5, #10
 8004c8a:	e007      	b.n	8004c9c <_puts_r+0x60>
 8004c8c:	4621      	mov	r1, r4
 8004c8e:	4628      	mov	r0, r5
 8004c90:	f000 f8b0 	bl	8004df4 <__swsetup_r>
 8004c94:	2800      	cmp	r0, #0
 8004c96:	d0e7      	beq.n	8004c68 <_puts_r+0x2c>
 8004c98:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8004c9c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004c9e:	07da      	lsls	r2, r3, #31
 8004ca0:	d405      	bmi.n	8004cae <_puts_r+0x72>
 8004ca2:	89a3      	ldrh	r3, [r4, #12]
 8004ca4:	059b      	lsls	r3, r3, #22
 8004ca6:	d402      	bmi.n	8004cae <_puts_r+0x72>
 8004ca8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004caa:	f000 f975 	bl	8004f98 <__retarget_lock_release_recursive>
 8004cae:	4628      	mov	r0, r5
 8004cb0:	bd70      	pop	{r4, r5, r6, pc}
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	da04      	bge.n	8004cc0 <_puts_r+0x84>
 8004cb6:	69a2      	ldr	r2, [r4, #24]
 8004cb8:	429a      	cmp	r2, r3
 8004cba:	dc06      	bgt.n	8004cca <_puts_r+0x8e>
 8004cbc:	290a      	cmp	r1, #10
 8004cbe:	d004      	beq.n	8004cca <_puts_r+0x8e>
 8004cc0:	6823      	ldr	r3, [r4, #0]
 8004cc2:	1c5a      	adds	r2, r3, #1
 8004cc4:	6022      	str	r2, [r4, #0]
 8004cc6:	7019      	strb	r1, [r3, #0]
 8004cc8:	e7cf      	b.n	8004c6a <_puts_r+0x2e>
 8004cca:	4622      	mov	r2, r4
 8004ccc:	4628      	mov	r0, r5
 8004cce:	f000 f854 	bl	8004d7a <__swbuf_r>
 8004cd2:	3001      	adds	r0, #1
 8004cd4:	d1c9      	bne.n	8004c6a <_puts_r+0x2e>
 8004cd6:	e7df      	b.n	8004c98 <_puts_r+0x5c>
 8004cd8:	6823      	ldr	r3, [r4, #0]
 8004cda:	250a      	movs	r5, #10
 8004cdc:	1c5a      	adds	r2, r3, #1
 8004cde:	6022      	str	r2, [r4, #0]
 8004ce0:	701d      	strb	r5, [r3, #0]
 8004ce2:	e7db      	b.n	8004c9c <_puts_r+0x60>

08004ce4 <puts>:
 8004ce4:	4b02      	ldr	r3, [pc, #8]	; (8004cf0 <puts+0xc>)
 8004ce6:	4601      	mov	r1, r0
 8004ce8:	6818      	ldr	r0, [r3, #0]
 8004cea:	f7ff bfa7 	b.w	8004c3c <_puts_r>
 8004cee:	bf00      	nop
 8004cf0:	20000088 	.word	0x20000088

08004cf4 <__sread>:
 8004cf4:	b510      	push	{r4, lr}
 8004cf6:	460c      	mov	r4, r1
 8004cf8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004cfc:	f000 f8fc 	bl	8004ef8 <_read_r>
 8004d00:	2800      	cmp	r0, #0
 8004d02:	bfab      	itete	ge
 8004d04:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004d06:	89a3      	ldrhlt	r3, [r4, #12]
 8004d08:	181b      	addge	r3, r3, r0
 8004d0a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004d0e:	bfac      	ite	ge
 8004d10:	6563      	strge	r3, [r4, #84]	; 0x54
 8004d12:	81a3      	strhlt	r3, [r4, #12]
 8004d14:	bd10      	pop	{r4, pc}

08004d16 <__swrite>:
 8004d16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d1a:	461f      	mov	r7, r3
 8004d1c:	898b      	ldrh	r3, [r1, #12]
 8004d1e:	05db      	lsls	r3, r3, #23
 8004d20:	4605      	mov	r5, r0
 8004d22:	460c      	mov	r4, r1
 8004d24:	4616      	mov	r6, r2
 8004d26:	d505      	bpl.n	8004d34 <__swrite+0x1e>
 8004d28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d2c:	2302      	movs	r3, #2
 8004d2e:	2200      	movs	r2, #0
 8004d30:	f000 f8d0 	bl	8004ed4 <_lseek_r>
 8004d34:	89a3      	ldrh	r3, [r4, #12]
 8004d36:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004d3a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004d3e:	81a3      	strh	r3, [r4, #12]
 8004d40:	4632      	mov	r2, r6
 8004d42:	463b      	mov	r3, r7
 8004d44:	4628      	mov	r0, r5
 8004d46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004d4a:	f000 b8e7 	b.w	8004f1c <_write_r>

08004d4e <__sseek>:
 8004d4e:	b510      	push	{r4, lr}
 8004d50:	460c      	mov	r4, r1
 8004d52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d56:	f000 f8bd 	bl	8004ed4 <_lseek_r>
 8004d5a:	1c43      	adds	r3, r0, #1
 8004d5c:	89a3      	ldrh	r3, [r4, #12]
 8004d5e:	bf15      	itete	ne
 8004d60:	6560      	strne	r0, [r4, #84]	; 0x54
 8004d62:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004d66:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004d6a:	81a3      	strheq	r3, [r4, #12]
 8004d6c:	bf18      	it	ne
 8004d6e:	81a3      	strhne	r3, [r4, #12]
 8004d70:	bd10      	pop	{r4, pc}

08004d72 <__sclose>:
 8004d72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d76:	f000 b89d 	b.w	8004eb4 <_close_r>

08004d7a <__swbuf_r>:
 8004d7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d7c:	460e      	mov	r6, r1
 8004d7e:	4614      	mov	r4, r2
 8004d80:	4605      	mov	r5, r0
 8004d82:	b118      	cbz	r0, 8004d8c <__swbuf_r+0x12>
 8004d84:	6a03      	ldr	r3, [r0, #32]
 8004d86:	b90b      	cbnz	r3, 8004d8c <__swbuf_r+0x12>
 8004d88:	f7ff ff10 	bl	8004bac <__sinit>
 8004d8c:	69a3      	ldr	r3, [r4, #24]
 8004d8e:	60a3      	str	r3, [r4, #8]
 8004d90:	89a3      	ldrh	r3, [r4, #12]
 8004d92:	071a      	lsls	r2, r3, #28
 8004d94:	d525      	bpl.n	8004de2 <__swbuf_r+0x68>
 8004d96:	6923      	ldr	r3, [r4, #16]
 8004d98:	b31b      	cbz	r3, 8004de2 <__swbuf_r+0x68>
 8004d9a:	6823      	ldr	r3, [r4, #0]
 8004d9c:	6922      	ldr	r2, [r4, #16]
 8004d9e:	1a98      	subs	r0, r3, r2
 8004da0:	6963      	ldr	r3, [r4, #20]
 8004da2:	b2f6      	uxtb	r6, r6
 8004da4:	4283      	cmp	r3, r0
 8004da6:	4637      	mov	r7, r6
 8004da8:	dc04      	bgt.n	8004db4 <__swbuf_r+0x3a>
 8004daa:	4621      	mov	r1, r4
 8004dac:	4628      	mov	r0, r5
 8004dae:	f000 fd47 	bl	8005840 <_fflush_r>
 8004db2:	b9e0      	cbnz	r0, 8004dee <__swbuf_r+0x74>
 8004db4:	68a3      	ldr	r3, [r4, #8]
 8004db6:	3b01      	subs	r3, #1
 8004db8:	60a3      	str	r3, [r4, #8]
 8004dba:	6823      	ldr	r3, [r4, #0]
 8004dbc:	1c5a      	adds	r2, r3, #1
 8004dbe:	6022      	str	r2, [r4, #0]
 8004dc0:	701e      	strb	r6, [r3, #0]
 8004dc2:	6962      	ldr	r2, [r4, #20]
 8004dc4:	1c43      	adds	r3, r0, #1
 8004dc6:	429a      	cmp	r2, r3
 8004dc8:	d004      	beq.n	8004dd4 <__swbuf_r+0x5a>
 8004dca:	89a3      	ldrh	r3, [r4, #12]
 8004dcc:	07db      	lsls	r3, r3, #31
 8004dce:	d506      	bpl.n	8004dde <__swbuf_r+0x64>
 8004dd0:	2e0a      	cmp	r6, #10
 8004dd2:	d104      	bne.n	8004dde <__swbuf_r+0x64>
 8004dd4:	4621      	mov	r1, r4
 8004dd6:	4628      	mov	r0, r5
 8004dd8:	f000 fd32 	bl	8005840 <_fflush_r>
 8004ddc:	b938      	cbnz	r0, 8004dee <__swbuf_r+0x74>
 8004dde:	4638      	mov	r0, r7
 8004de0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004de2:	4621      	mov	r1, r4
 8004de4:	4628      	mov	r0, r5
 8004de6:	f000 f805 	bl	8004df4 <__swsetup_r>
 8004dea:	2800      	cmp	r0, #0
 8004dec:	d0d5      	beq.n	8004d9a <__swbuf_r+0x20>
 8004dee:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8004df2:	e7f4      	b.n	8004dde <__swbuf_r+0x64>

08004df4 <__swsetup_r>:
 8004df4:	b538      	push	{r3, r4, r5, lr}
 8004df6:	4b2a      	ldr	r3, [pc, #168]	; (8004ea0 <__swsetup_r+0xac>)
 8004df8:	4605      	mov	r5, r0
 8004dfa:	6818      	ldr	r0, [r3, #0]
 8004dfc:	460c      	mov	r4, r1
 8004dfe:	b118      	cbz	r0, 8004e08 <__swsetup_r+0x14>
 8004e00:	6a03      	ldr	r3, [r0, #32]
 8004e02:	b90b      	cbnz	r3, 8004e08 <__swsetup_r+0x14>
 8004e04:	f7ff fed2 	bl	8004bac <__sinit>
 8004e08:	89a3      	ldrh	r3, [r4, #12]
 8004e0a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004e0e:	0718      	lsls	r0, r3, #28
 8004e10:	d422      	bmi.n	8004e58 <__swsetup_r+0x64>
 8004e12:	06d9      	lsls	r1, r3, #27
 8004e14:	d407      	bmi.n	8004e26 <__swsetup_r+0x32>
 8004e16:	2309      	movs	r3, #9
 8004e18:	602b      	str	r3, [r5, #0]
 8004e1a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004e1e:	81a3      	strh	r3, [r4, #12]
 8004e20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004e24:	e034      	b.n	8004e90 <__swsetup_r+0x9c>
 8004e26:	0758      	lsls	r0, r3, #29
 8004e28:	d512      	bpl.n	8004e50 <__swsetup_r+0x5c>
 8004e2a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004e2c:	b141      	cbz	r1, 8004e40 <__swsetup_r+0x4c>
 8004e2e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004e32:	4299      	cmp	r1, r3
 8004e34:	d002      	beq.n	8004e3c <__swsetup_r+0x48>
 8004e36:	4628      	mov	r0, r5
 8004e38:	f000 f8b0 	bl	8004f9c <_free_r>
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	6363      	str	r3, [r4, #52]	; 0x34
 8004e40:	89a3      	ldrh	r3, [r4, #12]
 8004e42:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004e46:	81a3      	strh	r3, [r4, #12]
 8004e48:	2300      	movs	r3, #0
 8004e4a:	6063      	str	r3, [r4, #4]
 8004e4c:	6923      	ldr	r3, [r4, #16]
 8004e4e:	6023      	str	r3, [r4, #0]
 8004e50:	89a3      	ldrh	r3, [r4, #12]
 8004e52:	f043 0308 	orr.w	r3, r3, #8
 8004e56:	81a3      	strh	r3, [r4, #12]
 8004e58:	6923      	ldr	r3, [r4, #16]
 8004e5a:	b94b      	cbnz	r3, 8004e70 <__swsetup_r+0x7c>
 8004e5c:	89a3      	ldrh	r3, [r4, #12]
 8004e5e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004e62:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e66:	d003      	beq.n	8004e70 <__swsetup_r+0x7c>
 8004e68:	4621      	mov	r1, r4
 8004e6a:	4628      	mov	r0, r5
 8004e6c:	f000 fd36 	bl	80058dc <__smakebuf_r>
 8004e70:	89a0      	ldrh	r0, [r4, #12]
 8004e72:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004e76:	f010 0301 	ands.w	r3, r0, #1
 8004e7a:	d00a      	beq.n	8004e92 <__swsetup_r+0x9e>
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	60a3      	str	r3, [r4, #8]
 8004e80:	6963      	ldr	r3, [r4, #20]
 8004e82:	425b      	negs	r3, r3
 8004e84:	61a3      	str	r3, [r4, #24]
 8004e86:	6923      	ldr	r3, [r4, #16]
 8004e88:	b943      	cbnz	r3, 8004e9c <__swsetup_r+0xa8>
 8004e8a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004e8e:	d1c4      	bne.n	8004e1a <__swsetup_r+0x26>
 8004e90:	bd38      	pop	{r3, r4, r5, pc}
 8004e92:	0781      	lsls	r1, r0, #30
 8004e94:	bf58      	it	pl
 8004e96:	6963      	ldrpl	r3, [r4, #20]
 8004e98:	60a3      	str	r3, [r4, #8]
 8004e9a:	e7f4      	b.n	8004e86 <__swsetup_r+0x92>
 8004e9c:	2000      	movs	r0, #0
 8004e9e:	e7f7      	b.n	8004e90 <__swsetup_r+0x9c>
 8004ea0:	20000088 	.word	0x20000088

08004ea4 <memset>:
 8004ea4:	4402      	add	r2, r0
 8004ea6:	4603      	mov	r3, r0
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d100      	bne.n	8004eae <memset+0xa>
 8004eac:	4770      	bx	lr
 8004eae:	f803 1b01 	strb.w	r1, [r3], #1
 8004eb2:	e7f9      	b.n	8004ea8 <memset+0x4>

08004eb4 <_close_r>:
 8004eb4:	b538      	push	{r3, r4, r5, lr}
 8004eb6:	4d06      	ldr	r5, [pc, #24]	; (8004ed0 <_close_r+0x1c>)
 8004eb8:	2300      	movs	r3, #0
 8004eba:	4604      	mov	r4, r0
 8004ebc:	4608      	mov	r0, r1
 8004ebe:	602b      	str	r3, [r5, #0]
 8004ec0:	f7fc f82b 	bl	8000f1a <_close>
 8004ec4:	1c43      	adds	r3, r0, #1
 8004ec6:	d102      	bne.n	8004ece <_close_r+0x1a>
 8004ec8:	682b      	ldr	r3, [r5, #0]
 8004eca:	b103      	cbz	r3, 8004ece <_close_r+0x1a>
 8004ecc:	6023      	str	r3, [r4, #0]
 8004ece:	bd38      	pop	{r3, r4, r5, pc}
 8004ed0:	20000340 	.word	0x20000340

08004ed4 <_lseek_r>:
 8004ed4:	b538      	push	{r3, r4, r5, lr}
 8004ed6:	4d07      	ldr	r5, [pc, #28]	; (8004ef4 <_lseek_r+0x20>)
 8004ed8:	4604      	mov	r4, r0
 8004eda:	4608      	mov	r0, r1
 8004edc:	4611      	mov	r1, r2
 8004ede:	2200      	movs	r2, #0
 8004ee0:	602a      	str	r2, [r5, #0]
 8004ee2:	461a      	mov	r2, r3
 8004ee4:	f7fc f840 	bl	8000f68 <_lseek>
 8004ee8:	1c43      	adds	r3, r0, #1
 8004eea:	d102      	bne.n	8004ef2 <_lseek_r+0x1e>
 8004eec:	682b      	ldr	r3, [r5, #0]
 8004eee:	b103      	cbz	r3, 8004ef2 <_lseek_r+0x1e>
 8004ef0:	6023      	str	r3, [r4, #0]
 8004ef2:	bd38      	pop	{r3, r4, r5, pc}
 8004ef4:	20000340 	.word	0x20000340

08004ef8 <_read_r>:
 8004ef8:	b538      	push	{r3, r4, r5, lr}
 8004efa:	4d07      	ldr	r5, [pc, #28]	; (8004f18 <_read_r+0x20>)
 8004efc:	4604      	mov	r4, r0
 8004efe:	4608      	mov	r0, r1
 8004f00:	4611      	mov	r1, r2
 8004f02:	2200      	movs	r2, #0
 8004f04:	602a      	str	r2, [r5, #0]
 8004f06:	461a      	mov	r2, r3
 8004f08:	f7fb ffea 	bl	8000ee0 <_read>
 8004f0c:	1c43      	adds	r3, r0, #1
 8004f0e:	d102      	bne.n	8004f16 <_read_r+0x1e>
 8004f10:	682b      	ldr	r3, [r5, #0]
 8004f12:	b103      	cbz	r3, 8004f16 <_read_r+0x1e>
 8004f14:	6023      	str	r3, [r4, #0]
 8004f16:	bd38      	pop	{r3, r4, r5, pc}
 8004f18:	20000340 	.word	0x20000340

08004f1c <_write_r>:
 8004f1c:	b538      	push	{r3, r4, r5, lr}
 8004f1e:	4d07      	ldr	r5, [pc, #28]	; (8004f3c <_write_r+0x20>)
 8004f20:	4604      	mov	r4, r0
 8004f22:	4608      	mov	r0, r1
 8004f24:	4611      	mov	r1, r2
 8004f26:	2200      	movs	r2, #0
 8004f28:	602a      	str	r2, [r5, #0]
 8004f2a:	461a      	mov	r2, r3
 8004f2c:	f7fb fb56 	bl	80005dc <_write>
 8004f30:	1c43      	adds	r3, r0, #1
 8004f32:	d102      	bne.n	8004f3a <_write_r+0x1e>
 8004f34:	682b      	ldr	r3, [r5, #0]
 8004f36:	b103      	cbz	r3, 8004f3a <_write_r+0x1e>
 8004f38:	6023      	str	r3, [r4, #0]
 8004f3a:	bd38      	pop	{r3, r4, r5, pc}
 8004f3c:	20000340 	.word	0x20000340

08004f40 <__errno>:
 8004f40:	4b01      	ldr	r3, [pc, #4]	; (8004f48 <__errno+0x8>)
 8004f42:	6818      	ldr	r0, [r3, #0]
 8004f44:	4770      	bx	lr
 8004f46:	bf00      	nop
 8004f48:	20000088 	.word	0x20000088

08004f4c <__libc_init_array>:
 8004f4c:	b570      	push	{r4, r5, r6, lr}
 8004f4e:	4d0d      	ldr	r5, [pc, #52]	; (8004f84 <__libc_init_array+0x38>)
 8004f50:	4c0d      	ldr	r4, [pc, #52]	; (8004f88 <__libc_init_array+0x3c>)
 8004f52:	1b64      	subs	r4, r4, r5
 8004f54:	10a4      	asrs	r4, r4, #2
 8004f56:	2600      	movs	r6, #0
 8004f58:	42a6      	cmp	r6, r4
 8004f5a:	d109      	bne.n	8004f70 <__libc_init_array+0x24>
 8004f5c:	4d0b      	ldr	r5, [pc, #44]	; (8004f8c <__libc_init_array+0x40>)
 8004f5e:	4c0c      	ldr	r4, [pc, #48]	; (8004f90 <__libc_init_array+0x44>)
 8004f60:	f000 fd2a 	bl	80059b8 <_init>
 8004f64:	1b64      	subs	r4, r4, r5
 8004f66:	10a4      	asrs	r4, r4, #2
 8004f68:	2600      	movs	r6, #0
 8004f6a:	42a6      	cmp	r6, r4
 8004f6c:	d105      	bne.n	8004f7a <__libc_init_array+0x2e>
 8004f6e:	bd70      	pop	{r4, r5, r6, pc}
 8004f70:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f74:	4798      	blx	r3
 8004f76:	3601      	adds	r6, #1
 8004f78:	e7ee      	b.n	8004f58 <__libc_init_array+0xc>
 8004f7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f7e:	4798      	blx	r3
 8004f80:	3601      	adds	r6, #1
 8004f82:	e7f2      	b.n	8004f6a <__libc_init_array+0x1e>
 8004f84:	08005ab0 	.word	0x08005ab0
 8004f88:	08005ab0 	.word	0x08005ab0
 8004f8c:	08005ab0 	.word	0x08005ab0
 8004f90:	08005ab4 	.word	0x08005ab4

08004f94 <__retarget_lock_init_recursive>:
 8004f94:	4770      	bx	lr

08004f96 <__retarget_lock_acquire_recursive>:
 8004f96:	4770      	bx	lr

08004f98 <__retarget_lock_release_recursive>:
 8004f98:	4770      	bx	lr
	...

08004f9c <_free_r>:
 8004f9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004f9e:	2900      	cmp	r1, #0
 8004fa0:	d044      	beq.n	800502c <_free_r+0x90>
 8004fa2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004fa6:	9001      	str	r0, [sp, #4]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	f1a1 0404 	sub.w	r4, r1, #4
 8004fae:	bfb8      	it	lt
 8004fb0:	18e4      	addlt	r4, r4, r3
 8004fb2:	f000 f8df 	bl	8005174 <__malloc_lock>
 8004fb6:	4a1e      	ldr	r2, [pc, #120]	; (8005030 <_free_r+0x94>)
 8004fb8:	9801      	ldr	r0, [sp, #4]
 8004fba:	6813      	ldr	r3, [r2, #0]
 8004fbc:	b933      	cbnz	r3, 8004fcc <_free_r+0x30>
 8004fbe:	6063      	str	r3, [r4, #4]
 8004fc0:	6014      	str	r4, [r2, #0]
 8004fc2:	b003      	add	sp, #12
 8004fc4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004fc8:	f000 b8da 	b.w	8005180 <__malloc_unlock>
 8004fcc:	42a3      	cmp	r3, r4
 8004fce:	d908      	bls.n	8004fe2 <_free_r+0x46>
 8004fd0:	6825      	ldr	r5, [r4, #0]
 8004fd2:	1961      	adds	r1, r4, r5
 8004fd4:	428b      	cmp	r3, r1
 8004fd6:	bf01      	itttt	eq
 8004fd8:	6819      	ldreq	r1, [r3, #0]
 8004fda:	685b      	ldreq	r3, [r3, #4]
 8004fdc:	1949      	addeq	r1, r1, r5
 8004fde:	6021      	streq	r1, [r4, #0]
 8004fe0:	e7ed      	b.n	8004fbe <_free_r+0x22>
 8004fe2:	461a      	mov	r2, r3
 8004fe4:	685b      	ldr	r3, [r3, #4]
 8004fe6:	b10b      	cbz	r3, 8004fec <_free_r+0x50>
 8004fe8:	42a3      	cmp	r3, r4
 8004fea:	d9fa      	bls.n	8004fe2 <_free_r+0x46>
 8004fec:	6811      	ldr	r1, [r2, #0]
 8004fee:	1855      	adds	r5, r2, r1
 8004ff0:	42a5      	cmp	r5, r4
 8004ff2:	d10b      	bne.n	800500c <_free_r+0x70>
 8004ff4:	6824      	ldr	r4, [r4, #0]
 8004ff6:	4421      	add	r1, r4
 8004ff8:	1854      	adds	r4, r2, r1
 8004ffa:	42a3      	cmp	r3, r4
 8004ffc:	6011      	str	r1, [r2, #0]
 8004ffe:	d1e0      	bne.n	8004fc2 <_free_r+0x26>
 8005000:	681c      	ldr	r4, [r3, #0]
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	6053      	str	r3, [r2, #4]
 8005006:	440c      	add	r4, r1
 8005008:	6014      	str	r4, [r2, #0]
 800500a:	e7da      	b.n	8004fc2 <_free_r+0x26>
 800500c:	d902      	bls.n	8005014 <_free_r+0x78>
 800500e:	230c      	movs	r3, #12
 8005010:	6003      	str	r3, [r0, #0]
 8005012:	e7d6      	b.n	8004fc2 <_free_r+0x26>
 8005014:	6825      	ldr	r5, [r4, #0]
 8005016:	1961      	adds	r1, r4, r5
 8005018:	428b      	cmp	r3, r1
 800501a:	bf04      	itt	eq
 800501c:	6819      	ldreq	r1, [r3, #0]
 800501e:	685b      	ldreq	r3, [r3, #4]
 8005020:	6063      	str	r3, [r4, #4]
 8005022:	bf04      	itt	eq
 8005024:	1949      	addeq	r1, r1, r5
 8005026:	6021      	streq	r1, [r4, #0]
 8005028:	6054      	str	r4, [r2, #4]
 800502a:	e7ca      	b.n	8004fc2 <_free_r+0x26>
 800502c:	b003      	add	sp, #12
 800502e:	bd30      	pop	{r4, r5, pc}
 8005030:	20000348 	.word	0x20000348

08005034 <sbrk_aligned>:
 8005034:	b570      	push	{r4, r5, r6, lr}
 8005036:	4e0e      	ldr	r6, [pc, #56]	; (8005070 <sbrk_aligned+0x3c>)
 8005038:	460c      	mov	r4, r1
 800503a:	6831      	ldr	r1, [r6, #0]
 800503c:	4605      	mov	r5, r0
 800503e:	b911      	cbnz	r1, 8005046 <sbrk_aligned+0x12>
 8005040:	f000 fcaa 	bl	8005998 <_sbrk_r>
 8005044:	6030      	str	r0, [r6, #0]
 8005046:	4621      	mov	r1, r4
 8005048:	4628      	mov	r0, r5
 800504a:	f000 fca5 	bl	8005998 <_sbrk_r>
 800504e:	1c43      	adds	r3, r0, #1
 8005050:	d00a      	beq.n	8005068 <sbrk_aligned+0x34>
 8005052:	1cc4      	adds	r4, r0, #3
 8005054:	f024 0403 	bic.w	r4, r4, #3
 8005058:	42a0      	cmp	r0, r4
 800505a:	d007      	beq.n	800506c <sbrk_aligned+0x38>
 800505c:	1a21      	subs	r1, r4, r0
 800505e:	4628      	mov	r0, r5
 8005060:	f000 fc9a 	bl	8005998 <_sbrk_r>
 8005064:	3001      	adds	r0, #1
 8005066:	d101      	bne.n	800506c <sbrk_aligned+0x38>
 8005068:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800506c:	4620      	mov	r0, r4
 800506e:	bd70      	pop	{r4, r5, r6, pc}
 8005070:	2000034c 	.word	0x2000034c

08005074 <_malloc_r>:
 8005074:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005078:	1ccd      	adds	r5, r1, #3
 800507a:	f025 0503 	bic.w	r5, r5, #3
 800507e:	3508      	adds	r5, #8
 8005080:	2d0c      	cmp	r5, #12
 8005082:	bf38      	it	cc
 8005084:	250c      	movcc	r5, #12
 8005086:	2d00      	cmp	r5, #0
 8005088:	4607      	mov	r7, r0
 800508a:	db01      	blt.n	8005090 <_malloc_r+0x1c>
 800508c:	42a9      	cmp	r1, r5
 800508e:	d905      	bls.n	800509c <_malloc_r+0x28>
 8005090:	230c      	movs	r3, #12
 8005092:	603b      	str	r3, [r7, #0]
 8005094:	2600      	movs	r6, #0
 8005096:	4630      	mov	r0, r6
 8005098:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800509c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005170 <_malloc_r+0xfc>
 80050a0:	f000 f868 	bl	8005174 <__malloc_lock>
 80050a4:	f8d8 3000 	ldr.w	r3, [r8]
 80050a8:	461c      	mov	r4, r3
 80050aa:	bb5c      	cbnz	r4, 8005104 <_malloc_r+0x90>
 80050ac:	4629      	mov	r1, r5
 80050ae:	4638      	mov	r0, r7
 80050b0:	f7ff ffc0 	bl	8005034 <sbrk_aligned>
 80050b4:	1c43      	adds	r3, r0, #1
 80050b6:	4604      	mov	r4, r0
 80050b8:	d155      	bne.n	8005166 <_malloc_r+0xf2>
 80050ba:	f8d8 4000 	ldr.w	r4, [r8]
 80050be:	4626      	mov	r6, r4
 80050c0:	2e00      	cmp	r6, #0
 80050c2:	d145      	bne.n	8005150 <_malloc_r+0xdc>
 80050c4:	2c00      	cmp	r4, #0
 80050c6:	d048      	beq.n	800515a <_malloc_r+0xe6>
 80050c8:	6823      	ldr	r3, [r4, #0]
 80050ca:	4631      	mov	r1, r6
 80050cc:	4638      	mov	r0, r7
 80050ce:	eb04 0903 	add.w	r9, r4, r3
 80050d2:	f000 fc61 	bl	8005998 <_sbrk_r>
 80050d6:	4581      	cmp	r9, r0
 80050d8:	d13f      	bne.n	800515a <_malloc_r+0xe6>
 80050da:	6821      	ldr	r1, [r4, #0]
 80050dc:	1a6d      	subs	r5, r5, r1
 80050de:	4629      	mov	r1, r5
 80050e0:	4638      	mov	r0, r7
 80050e2:	f7ff ffa7 	bl	8005034 <sbrk_aligned>
 80050e6:	3001      	adds	r0, #1
 80050e8:	d037      	beq.n	800515a <_malloc_r+0xe6>
 80050ea:	6823      	ldr	r3, [r4, #0]
 80050ec:	442b      	add	r3, r5
 80050ee:	6023      	str	r3, [r4, #0]
 80050f0:	f8d8 3000 	ldr.w	r3, [r8]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d038      	beq.n	800516a <_malloc_r+0xf6>
 80050f8:	685a      	ldr	r2, [r3, #4]
 80050fa:	42a2      	cmp	r2, r4
 80050fc:	d12b      	bne.n	8005156 <_malloc_r+0xe2>
 80050fe:	2200      	movs	r2, #0
 8005100:	605a      	str	r2, [r3, #4]
 8005102:	e00f      	b.n	8005124 <_malloc_r+0xb0>
 8005104:	6822      	ldr	r2, [r4, #0]
 8005106:	1b52      	subs	r2, r2, r5
 8005108:	d41f      	bmi.n	800514a <_malloc_r+0xd6>
 800510a:	2a0b      	cmp	r2, #11
 800510c:	d917      	bls.n	800513e <_malloc_r+0xca>
 800510e:	1961      	adds	r1, r4, r5
 8005110:	42a3      	cmp	r3, r4
 8005112:	6025      	str	r5, [r4, #0]
 8005114:	bf18      	it	ne
 8005116:	6059      	strne	r1, [r3, #4]
 8005118:	6863      	ldr	r3, [r4, #4]
 800511a:	bf08      	it	eq
 800511c:	f8c8 1000 	streq.w	r1, [r8]
 8005120:	5162      	str	r2, [r4, r5]
 8005122:	604b      	str	r3, [r1, #4]
 8005124:	4638      	mov	r0, r7
 8005126:	f104 060b 	add.w	r6, r4, #11
 800512a:	f000 f829 	bl	8005180 <__malloc_unlock>
 800512e:	f026 0607 	bic.w	r6, r6, #7
 8005132:	1d23      	adds	r3, r4, #4
 8005134:	1af2      	subs	r2, r6, r3
 8005136:	d0ae      	beq.n	8005096 <_malloc_r+0x22>
 8005138:	1b9b      	subs	r3, r3, r6
 800513a:	50a3      	str	r3, [r4, r2]
 800513c:	e7ab      	b.n	8005096 <_malloc_r+0x22>
 800513e:	42a3      	cmp	r3, r4
 8005140:	6862      	ldr	r2, [r4, #4]
 8005142:	d1dd      	bne.n	8005100 <_malloc_r+0x8c>
 8005144:	f8c8 2000 	str.w	r2, [r8]
 8005148:	e7ec      	b.n	8005124 <_malloc_r+0xb0>
 800514a:	4623      	mov	r3, r4
 800514c:	6864      	ldr	r4, [r4, #4]
 800514e:	e7ac      	b.n	80050aa <_malloc_r+0x36>
 8005150:	4634      	mov	r4, r6
 8005152:	6876      	ldr	r6, [r6, #4]
 8005154:	e7b4      	b.n	80050c0 <_malloc_r+0x4c>
 8005156:	4613      	mov	r3, r2
 8005158:	e7cc      	b.n	80050f4 <_malloc_r+0x80>
 800515a:	230c      	movs	r3, #12
 800515c:	603b      	str	r3, [r7, #0]
 800515e:	4638      	mov	r0, r7
 8005160:	f000 f80e 	bl	8005180 <__malloc_unlock>
 8005164:	e797      	b.n	8005096 <_malloc_r+0x22>
 8005166:	6025      	str	r5, [r4, #0]
 8005168:	e7dc      	b.n	8005124 <_malloc_r+0xb0>
 800516a:	605b      	str	r3, [r3, #4]
 800516c:	deff      	udf	#255	; 0xff
 800516e:	bf00      	nop
 8005170:	20000348 	.word	0x20000348

08005174 <__malloc_lock>:
 8005174:	4801      	ldr	r0, [pc, #4]	; (800517c <__malloc_lock+0x8>)
 8005176:	f7ff bf0e 	b.w	8004f96 <__retarget_lock_acquire_recursive>
 800517a:	bf00      	nop
 800517c:	20000344 	.word	0x20000344

08005180 <__malloc_unlock>:
 8005180:	4801      	ldr	r0, [pc, #4]	; (8005188 <__malloc_unlock+0x8>)
 8005182:	f7ff bf09 	b.w	8004f98 <__retarget_lock_release_recursive>
 8005186:	bf00      	nop
 8005188:	20000344 	.word	0x20000344

0800518c <__sfputc_r>:
 800518c:	6893      	ldr	r3, [r2, #8]
 800518e:	3b01      	subs	r3, #1
 8005190:	2b00      	cmp	r3, #0
 8005192:	b410      	push	{r4}
 8005194:	6093      	str	r3, [r2, #8]
 8005196:	da08      	bge.n	80051aa <__sfputc_r+0x1e>
 8005198:	6994      	ldr	r4, [r2, #24]
 800519a:	42a3      	cmp	r3, r4
 800519c:	db01      	blt.n	80051a2 <__sfputc_r+0x16>
 800519e:	290a      	cmp	r1, #10
 80051a0:	d103      	bne.n	80051aa <__sfputc_r+0x1e>
 80051a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80051a6:	f7ff bde8 	b.w	8004d7a <__swbuf_r>
 80051aa:	6813      	ldr	r3, [r2, #0]
 80051ac:	1c58      	adds	r0, r3, #1
 80051ae:	6010      	str	r0, [r2, #0]
 80051b0:	7019      	strb	r1, [r3, #0]
 80051b2:	4608      	mov	r0, r1
 80051b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80051b8:	4770      	bx	lr

080051ba <__sfputs_r>:
 80051ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051bc:	4606      	mov	r6, r0
 80051be:	460f      	mov	r7, r1
 80051c0:	4614      	mov	r4, r2
 80051c2:	18d5      	adds	r5, r2, r3
 80051c4:	42ac      	cmp	r4, r5
 80051c6:	d101      	bne.n	80051cc <__sfputs_r+0x12>
 80051c8:	2000      	movs	r0, #0
 80051ca:	e007      	b.n	80051dc <__sfputs_r+0x22>
 80051cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80051d0:	463a      	mov	r2, r7
 80051d2:	4630      	mov	r0, r6
 80051d4:	f7ff ffda 	bl	800518c <__sfputc_r>
 80051d8:	1c43      	adds	r3, r0, #1
 80051da:	d1f3      	bne.n	80051c4 <__sfputs_r+0xa>
 80051dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080051e0 <_vfiprintf_r>:
 80051e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051e4:	460d      	mov	r5, r1
 80051e6:	b09d      	sub	sp, #116	; 0x74
 80051e8:	4614      	mov	r4, r2
 80051ea:	4698      	mov	r8, r3
 80051ec:	4606      	mov	r6, r0
 80051ee:	b118      	cbz	r0, 80051f8 <_vfiprintf_r+0x18>
 80051f0:	6a03      	ldr	r3, [r0, #32]
 80051f2:	b90b      	cbnz	r3, 80051f8 <_vfiprintf_r+0x18>
 80051f4:	f7ff fcda 	bl	8004bac <__sinit>
 80051f8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80051fa:	07d9      	lsls	r1, r3, #31
 80051fc:	d405      	bmi.n	800520a <_vfiprintf_r+0x2a>
 80051fe:	89ab      	ldrh	r3, [r5, #12]
 8005200:	059a      	lsls	r2, r3, #22
 8005202:	d402      	bmi.n	800520a <_vfiprintf_r+0x2a>
 8005204:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005206:	f7ff fec6 	bl	8004f96 <__retarget_lock_acquire_recursive>
 800520a:	89ab      	ldrh	r3, [r5, #12]
 800520c:	071b      	lsls	r3, r3, #28
 800520e:	d501      	bpl.n	8005214 <_vfiprintf_r+0x34>
 8005210:	692b      	ldr	r3, [r5, #16]
 8005212:	b99b      	cbnz	r3, 800523c <_vfiprintf_r+0x5c>
 8005214:	4629      	mov	r1, r5
 8005216:	4630      	mov	r0, r6
 8005218:	f7ff fdec 	bl	8004df4 <__swsetup_r>
 800521c:	b170      	cbz	r0, 800523c <_vfiprintf_r+0x5c>
 800521e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005220:	07dc      	lsls	r4, r3, #31
 8005222:	d504      	bpl.n	800522e <_vfiprintf_r+0x4e>
 8005224:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005228:	b01d      	add	sp, #116	; 0x74
 800522a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800522e:	89ab      	ldrh	r3, [r5, #12]
 8005230:	0598      	lsls	r0, r3, #22
 8005232:	d4f7      	bmi.n	8005224 <_vfiprintf_r+0x44>
 8005234:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005236:	f7ff feaf 	bl	8004f98 <__retarget_lock_release_recursive>
 800523a:	e7f3      	b.n	8005224 <_vfiprintf_r+0x44>
 800523c:	2300      	movs	r3, #0
 800523e:	9309      	str	r3, [sp, #36]	; 0x24
 8005240:	2320      	movs	r3, #32
 8005242:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005246:	f8cd 800c 	str.w	r8, [sp, #12]
 800524a:	2330      	movs	r3, #48	; 0x30
 800524c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8005400 <_vfiprintf_r+0x220>
 8005250:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005254:	f04f 0901 	mov.w	r9, #1
 8005258:	4623      	mov	r3, r4
 800525a:	469a      	mov	sl, r3
 800525c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005260:	b10a      	cbz	r2, 8005266 <_vfiprintf_r+0x86>
 8005262:	2a25      	cmp	r2, #37	; 0x25
 8005264:	d1f9      	bne.n	800525a <_vfiprintf_r+0x7a>
 8005266:	ebba 0b04 	subs.w	fp, sl, r4
 800526a:	d00b      	beq.n	8005284 <_vfiprintf_r+0xa4>
 800526c:	465b      	mov	r3, fp
 800526e:	4622      	mov	r2, r4
 8005270:	4629      	mov	r1, r5
 8005272:	4630      	mov	r0, r6
 8005274:	f7ff ffa1 	bl	80051ba <__sfputs_r>
 8005278:	3001      	adds	r0, #1
 800527a:	f000 80a9 	beq.w	80053d0 <_vfiprintf_r+0x1f0>
 800527e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005280:	445a      	add	r2, fp
 8005282:	9209      	str	r2, [sp, #36]	; 0x24
 8005284:	f89a 3000 	ldrb.w	r3, [sl]
 8005288:	2b00      	cmp	r3, #0
 800528a:	f000 80a1 	beq.w	80053d0 <_vfiprintf_r+0x1f0>
 800528e:	2300      	movs	r3, #0
 8005290:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005294:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005298:	f10a 0a01 	add.w	sl, sl, #1
 800529c:	9304      	str	r3, [sp, #16]
 800529e:	9307      	str	r3, [sp, #28]
 80052a0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80052a4:	931a      	str	r3, [sp, #104]	; 0x68
 80052a6:	4654      	mov	r4, sl
 80052a8:	2205      	movs	r2, #5
 80052aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80052ae:	4854      	ldr	r0, [pc, #336]	; (8005400 <_vfiprintf_r+0x220>)
 80052b0:	f7fa ffc6 	bl	8000240 <memchr>
 80052b4:	9a04      	ldr	r2, [sp, #16]
 80052b6:	b9d8      	cbnz	r0, 80052f0 <_vfiprintf_r+0x110>
 80052b8:	06d1      	lsls	r1, r2, #27
 80052ba:	bf44      	itt	mi
 80052bc:	2320      	movmi	r3, #32
 80052be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80052c2:	0713      	lsls	r3, r2, #28
 80052c4:	bf44      	itt	mi
 80052c6:	232b      	movmi	r3, #43	; 0x2b
 80052c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80052cc:	f89a 3000 	ldrb.w	r3, [sl]
 80052d0:	2b2a      	cmp	r3, #42	; 0x2a
 80052d2:	d015      	beq.n	8005300 <_vfiprintf_r+0x120>
 80052d4:	9a07      	ldr	r2, [sp, #28]
 80052d6:	4654      	mov	r4, sl
 80052d8:	2000      	movs	r0, #0
 80052da:	f04f 0c0a 	mov.w	ip, #10
 80052de:	4621      	mov	r1, r4
 80052e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80052e4:	3b30      	subs	r3, #48	; 0x30
 80052e6:	2b09      	cmp	r3, #9
 80052e8:	d94d      	bls.n	8005386 <_vfiprintf_r+0x1a6>
 80052ea:	b1b0      	cbz	r0, 800531a <_vfiprintf_r+0x13a>
 80052ec:	9207      	str	r2, [sp, #28]
 80052ee:	e014      	b.n	800531a <_vfiprintf_r+0x13a>
 80052f0:	eba0 0308 	sub.w	r3, r0, r8
 80052f4:	fa09 f303 	lsl.w	r3, r9, r3
 80052f8:	4313      	orrs	r3, r2
 80052fa:	9304      	str	r3, [sp, #16]
 80052fc:	46a2      	mov	sl, r4
 80052fe:	e7d2      	b.n	80052a6 <_vfiprintf_r+0xc6>
 8005300:	9b03      	ldr	r3, [sp, #12]
 8005302:	1d19      	adds	r1, r3, #4
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	9103      	str	r1, [sp, #12]
 8005308:	2b00      	cmp	r3, #0
 800530a:	bfbb      	ittet	lt
 800530c:	425b      	neglt	r3, r3
 800530e:	f042 0202 	orrlt.w	r2, r2, #2
 8005312:	9307      	strge	r3, [sp, #28]
 8005314:	9307      	strlt	r3, [sp, #28]
 8005316:	bfb8      	it	lt
 8005318:	9204      	strlt	r2, [sp, #16]
 800531a:	7823      	ldrb	r3, [r4, #0]
 800531c:	2b2e      	cmp	r3, #46	; 0x2e
 800531e:	d10c      	bne.n	800533a <_vfiprintf_r+0x15a>
 8005320:	7863      	ldrb	r3, [r4, #1]
 8005322:	2b2a      	cmp	r3, #42	; 0x2a
 8005324:	d134      	bne.n	8005390 <_vfiprintf_r+0x1b0>
 8005326:	9b03      	ldr	r3, [sp, #12]
 8005328:	1d1a      	adds	r2, r3, #4
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	9203      	str	r2, [sp, #12]
 800532e:	2b00      	cmp	r3, #0
 8005330:	bfb8      	it	lt
 8005332:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005336:	3402      	adds	r4, #2
 8005338:	9305      	str	r3, [sp, #20]
 800533a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8005410 <_vfiprintf_r+0x230>
 800533e:	7821      	ldrb	r1, [r4, #0]
 8005340:	2203      	movs	r2, #3
 8005342:	4650      	mov	r0, sl
 8005344:	f7fa ff7c 	bl	8000240 <memchr>
 8005348:	b138      	cbz	r0, 800535a <_vfiprintf_r+0x17a>
 800534a:	9b04      	ldr	r3, [sp, #16]
 800534c:	eba0 000a 	sub.w	r0, r0, sl
 8005350:	2240      	movs	r2, #64	; 0x40
 8005352:	4082      	lsls	r2, r0
 8005354:	4313      	orrs	r3, r2
 8005356:	3401      	adds	r4, #1
 8005358:	9304      	str	r3, [sp, #16]
 800535a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800535e:	4829      	ldr	r0, [pc, #164]	; (8005404 <_vfiprintf_r+0x224>)
 8005360:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005364:	2206      	movs	r2, #6
 8005366:	f7fa ff6b 	bl	8000240 <memchr>
 800536a:	2800      	cmp	r0, #0
 800536c:	d03f      	beq.n	80053ee <_vfiprintf_r+0x20e>
 800536e:	4b26      	ldr	r3, [pc, #152]	; (8005408 <_vfiprintf_r+0x228>)
 8005370:	bb1b      	cbnz	r3, 80053ba <_vfiprintf_r+0x1da>
 8005372:	9b03      	ldr	r3, [sp, #12]
 8005374:	3307      	adds	r3, #7
 8005376:	f023 0307 	bic.w	r3, r3, #7
 800537a:	3308      	adds	r3, #8
 800537c:	9303      	str	r3, [sp, #12]
 800537e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005380:	443b      	add	r3, r7
 8005382:	9309      	str	r3, [sp, #36]	; 0x24
 8005384:	e768      	b.n	8005258 <_vfiprintf_r+0x78>
 8005386:	fb0c 3202 	mla	r2, ip, r2, r3
 800538a:	460c      	mov	r4, r1
 800538c:	2001      	movs	r0, #1
 800538e:	e7a6      	b.n	80052de <_vfiprintf_r+0xfe>
 8005390:	2300      	movs	r3, #0
 8005392:	3401      	adds	r4, #1
 8005394:	9305      	str	r3, [sp, #20]
 8005396:	4619      	mov	r1, r3
 8005398:	f04f 0c0a 	mov.w	ip, #10
 800539c:	4620      	mov	r0, r4
 800539e:	f810 2b01 	ldrb.w	r2, [r0], #1
 80053a2:	3a30      	subs	r2, #48	; 0x30
 80053a4:	2a09      	cmp	r2, #9
 80053a6:	d903      	bls.n	80053b0 <_vfiprintf_r+0x1d0>
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d0c6      	beq.n	800533a <_vfiprintf_r+0x15a>
 80053ac:	9105      	str	r1, [sp, #20]
 80053ae:	e7c4      	b.n	800533a <_vfiprintf_r+0x15a>
 80053b0:	fb0c 2101 	mla	r1, ip, r1, r2
 80053b4:	4604      	mov	r4, r0
 80053b6:	2301      	movs	r3, #1
 80053b8:	e7f0      	b.n	800539c <_vfiprintf_r+0x1bc>
 80053ba:	ab03      	add	r3, sp, #12
 80053bc:	9300      	str	r3, [sp, #0]
 80053be:	462a      	mov	r2, r5
 80053c0:	4b12      	ldr	r3, [pc, #72]	; (800540c <_vfiprintf_r+0x22c>)
 80053c2:	a904      	add	r1, sp, #16
 80053c4:	4630      	mov	r0, r6
 80053c6:	f3af 8000 	nop.w
 80053ca:	4607      	mov	r7, r0
 80053cc:	1c78      	adds	r0, r7, #1
 80053ce:	d1d6      	bne.n	800537e <_vfiprintf_r+0x19e>
 80053d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80053d2:	07d9      	lsls	r1, r3, #31
 80053d4:	d405      	bmi.n	80053e2 <_vfiprintf_r+0x202>
 80053d6:	89ab      	ldrh	r3, [r5, #12]
 80053d8:	059a      	lsls	r2, r3, #22
 80053da:	d402      	bmi.n	80053e2 <_vfiprintf_r+0x202>
 80053dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80053de:	f7ff fddb 	bl	8004f98 <__retarget_lock_release_recursive>
 80053e2:	89ab      	ldrh	r3, [r5, #12]
 80053e4:	065b      	lsls	r3, r3, #25
 80053e6:	f53f af1d 	bmi.w	8005224 <_vfiprintf_r+0x44>
 80053ea:	9809      	ldr	r0, [sp, #36]	; 0x24
 80053ec:	e71c      	b.n	8005228 <_vfiprintf_r+0x48>
 80053ee:	ab03      	add	r3, sp, #12
 80053f0:	9300      	str	r3, [sp, #0]
 80053f2:	462a      	mov	r2, r5
 80053f4:	4b05      	ldr	r3, [pc, #20]	; (800540c <_vfiprintf_r+0x22c>)
 80053f6:	a904      	add	r1, sp, #16
 80053f8:	4630      	mov	r0, r6
 80053fa:	f000 f879 	bl	80054f0 <_printf_i>
 80053fe:	e7e4      	b.n	80053ca <_vfiprintf_r+0x1ea>
 8005400:	08005a74 	.word	0x08005a74
 8005404:	08005a7e 	.word	0x08005a7e
 8005408:	00000000 	.word	0x00000000
 800540c:	080051bb 	.word	0x080051bb
 8005410:	08005a7a 	.word	0x08005a7a

08005414 <_printf_common>:
 8005414:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005418:	4616      	mov	r6, r2
 800541a:	4699      	mov	r9, r3
 800541c:	688a      	ldr	r2, [r1, #8]
 800541e:	690b      	ldr	r3, [r1, #16]
 8005420:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005424:	4293      	cmp	r3, r2
 8005426:	bfb8      	it	lt
 8005428:	4613      	movlt	r3, r2
 800542a:	6033      	str	r3, [r6, #0]
 800542c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005430:	4607      	mov	r7, r0
 8005432:	460c      	mov	r4, r1
 8005434:	b10a      	cbz	r2, 800543a <_printf_common+0x26>
 8005436:	3301      	adds	r3, #1
 8005438:	6033      	str	r3, [r6, #0]
 800543a:	6823      	ldr	r3, [r4, #0]
 800543c:	0699      	lsls	r1, r3, #26
 800543e:	bf42      	ittt	mi
 8005440:	6833      	ldrmi	r3, [r6, #0]
 8005442:	3302      	addmi	r3, #2
 8005444:	6033      	strmi	r3, [r6, #0]
 8005446:	6825      	ldr	r5, [r4, #0]
 8005448:	f015 0506 	ands.w	r5, r5, #6
 800544c:	d106      	bne.n	800545c <_printf_common+0x48>
 800544e:	f104 0a19 	add.w	sl, r4, #25
 8005452:	68e3      	ldr	r3, [r4, #12]
 8005454:	6832      	ldr	r2, [r6, #0]
 8005456:	1a9b      	subs	r3, r3, r2
 8005458:	42ab      	cmp	r3, r5
 800545a:	dc26      	bgt.n	80054aa <_printf_common+0x96>
 800545c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005460:	1e13      	subs	r3, r2, #0
 8005462:	6822      	ldr	r2, [r4, #0]
 8005464:	bf18      	it	ne
 8005466:	2301      	movne	r3, #1
 8005468:	0692      	lsls	r2, r2, #26
 800546a:	d42b      	bmi.n	80054c4 <_printf_common+0xb0>
 800546c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005470:	4649      	mov	r1, r9
 8005472:	4638      	mov	r0, r7
 8005474:	47c0      	blx	r8
 8005476:	3001      	adds	r0, #1
 8005478:	d01e      	beq.n	80054b8 <_printf_common+0xa4>
 800547a:	6823      	ldr	r3, [r4, #0]
 800547c:	6922      	ldr	r2, [r4, #16]
 800547e:	f003 0306 	and.w	r3, r3, #6
 8005482:	2b04      	cmp	r3, #4
 8005484:	bf02      	ittt	eq
 8005486:	68e5      	ldreq	r5, [r4, #12]
 8005488:	6833      	ldreq	r3, [r6, #0]
 800548a:	1aed      	subeq	r5, r5, r3
 800548c:	68a3      	ldr	r3, [r4, #8]
 800548e:	bf0c      	ite	eq
 8005490:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005494:	2500      	movne	r5, #0
 8005496:	4293      	cmp	r3, r2
 8005498:	bfc4      	itt	gt
 800549a:	1a9b      	subgt	r3, r3, r2
 800549c:	18ed      	addgt	r5, r5, r3
 800549e:	2600      	movs	r6, #0
 80054a0:	341a      	adds	r4, #26
 80054a2:	42b5      	cmp	r5, r6
 80054a4:	d11a      	bne.n	80054dc <_printf_common+0xc8>
 80054a6:	2000      	movs	r0, #0
 80054a8:	e008      	b.n	80054bc <_printf_common+0xa8>
 80054aa:	2301      	movs	r3, #1
 80054ac:	4652      	mov	r2, sl
 80054ae:	4649      	mov	r1, r9
 80054b0:	4638      	mov	r0, r7
 80054b2:	47c0      	blx	r8
 80054b4:	3001      	adds	r0, #1
 80054b6:	d103      	bne.n	80054c0 <_printf_common+0xac>
 80054b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80054bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054c0:	3501      	adds	r5, #1
 80054c2:	e7c6      	b.n	8005452 <_printf_common+0x3e>
 80054c4:	18e1      	adds	r1, r4, r3
 80054c6:	1c5a      	adds	r2, r3, #1
 80054c8:	2030      	movs	r0, #48	; 0x30
 80054ca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80054ce:	4422      	add	r2, r4
 80054d0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80054d4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80054d8:	3302      	adds	r3, #2
 80054da:	e7c7      	b.n	800546c <_printf_common+0x58>
 80054dc:	2301      	movs	r3, #1
 80054de:	4622      	mov	r2, r4
 80054e0:	4649      	mov	r1, r9
 80054e2:	4638      	mov	r0, r7
 80054e4:	47c0      	blx	r8
 80054e6:	3001      	adds	r0, #1
 80054e8:	d0e6      	beq.n	80054b8 <_printf_common+0xa4>
 80054ea:	3601      	adds	r6, #1
 80054ec:	e7d9      	b.n	80054a2 <_printf_common+0x8e>
	...

080054f0 <_printf_i>:
 80054f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80054f4:	7e0f      	ldrb	r7, [r1, #24]
 80054f6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80054f8:	2f78      	cmp	r7, #120	; 0x78
 80054fa:	4691      	mov	r9, r2
 80054fc:	4680      	mov	r8, r0
 80054fe:	460c      	mov	r4, r1
 8005500:	469a      	mov	sl, r3
 8005502:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005506:	d807      	bhi.n	8005518 <_printf_i+0x28>
 8005508:	2f62      	cmp	r7, #98	; 0x62
 800550a:	d80a      	bhi.n	8005522 <_printf_i+0x32>
 800550c:	2f00      	cmp	r7, #0
 800550e:	f000 80d4 	beq.w	80056ba <_printf_i+0x1ca>
 8005512:	2f58      	cmp	r7, #88	; 0x58
 8005514:	f000 80c0 	beq.w	8005698 <_printf_i+0x1a8>
 8005518:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800551c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005520:	e03a      	b.n	8005598 <_printf_i+0xa8>
 8005522:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005526:	2b15      	cmp	r3, #21
 8005528:	d8f6      	bhi.n	8005518 <_printf_i+0x28>
 800552a:	a101      	add	r1, pc, #4	; (adr r1, 8005530 <_printf_i+0x40>)
 800552c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005530:	08005589 	.word	0x08005589
 8005534:	0800559d 	.word	0x0800559d
 8005538:	08005519 	.word	0x08005519
 800553c:	08005519 	.word	0x08005519
 8005540:	08005519 	.word	0x08005519
 8005544:	08005519 	.word	0x08005519
 8005548:	0800559d 	.word	0x0800559d
 800554c:	08005519 	.word	0x08005519
 8005550:	08005519 	.word	0x08005519
 8005554:	08005519 	.word	0x08005519
 8005558:	08005519 	.word	0x08005519
 800555c:	080056a1 	.word	0x080056a1
 8005560:	080055c9 	.word	0x080055c9
 8005564:	0800565b 	.word	0x0800565b
 8005568:	08005519 	.word	0x08005519
 800556c:	08005519 	.word	0x08005519
 8005570:	080056c3 	.word	0x080056c3
 8005574:	08005519 	.word	0x08005519
 8005578:	080055c9 	.word	0x080055c9
 800557c:	08005519 	.word	0x08005519
 8005580:	08005519 	.word	0x08005519
 8005584:	08005663 	.word	0x08005663
 8005588:	682b      	ldr	r3, [r5, #0]
 800558a:	1d1a      	adds	r2, r3, #4
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	602a      	str	r2, [r5, #0]
 8005590:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005594:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005598:	2301      	movs	r3, #1
 800559a:	e09f      	b.n	80056dc <_printf_i+0x1ec>
 800559c:	6820      	ldr	r0, [r4, #0]
 800559e:	682b      	ldr	r3, [r5, #0]
 80055a0:	0607      	lsls	r7, r0, #24
 80055a2:	f103 0104 	add.w	r1, r3, #4
 80055a6:	6029      	str	r1, [r5, #0]
 80055a8:	d501      	bpl.n	80055ae <_printf_i+0xbe>
 80055aa:	681e      	ldr	r6, [r3, #0]
 80055ac:	e003      	b.n	80055b6 <_printf_i+0xc6>
 80055ae:	0646      	lsls	r6, r0, #25
 80055b0:	d5fb      	bpl.n	80055aa <_printf_i+0xba>
 80055b2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80055b6:	2e00      	cmp	r6, #0
 80055b8:	da03      	bge.n	80055c2 <_printf_i+0xd2>
 80055ba:	232d      	movs	r3, #45	; 0x2d
 80055bc:	4276      	negs	r6, r6
 80055be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80055c2:	485a      	ldr	r0, [pc, #360]	; (800572c <_printf_i+0x23c>)
 80055c4:	230a      	movs	r3, #10
 80055c6:	e012      	b.n	80055ee <_printf_i+0xfe>
 80055c8:	682b      	ldr	r3, [r5, #0]
 80055ca:	6820      	ldr	r0, [r4, #0]
 80055cc:	1d19      	adds	r1, r3, #4
 80055ce:	6029      	str	r1, [r5, #0]
 80055d0:	0605      	lsls	r5, r0, #24
 80055d2:	d501      	bpl.n	80055d8 <_printf_i+0xe8>
 80055d4:	681e      	ldr	r6, [r3, #0]
 80055d6:	e002      	b.n	80055de <_printf_i+0xee>
 80055d8:	0641      	lsls	r1, r0, #25
 80055da:	d5fb      	bpl.n	80055d4 <_printf_i+0xe4>
 80055dc:	881e      	ldrh	r6, [r3, #0]
 80055de:	4853      	ldr	r0, [pc, #332]	; (800572c <_printf_i+0x23c>)
 80055e0:	2f6f      	cmp	r7, #111	; 0x6f
 80055e2:	bf0c      	ite	eq
 80055e4:	2308      	moveq	r3, #8
 80055e6:	230a      	movne	r3, #10
 80055e8:	2100      	movs	r1, #0
 80055ea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80055ee:	6865      	ldr	r5, [r4, #4]
 80055f0:	60a5      	str	r5, [r4, #8]
 80055f2:	2d00      	cmp	r5, #0
 80055f4:	bfa2      	ittt	ge
 80055f6:	6821      	ldrge	r1, [r4, #0]
 80055f8:	f021 0104 	bicge.w	r1, r1, #4
 80055fc:	6021      	strge	r1, [r4, #0]
 80055fe:	b90e      	cbnz	r6, 8005604 <_printf_i+0x114>
 8005600:	2d00      	cmp	r5, #0
 8005602:	d04b      	beq.n	800569c <_printf_i+0x1ac>
 8005604:	4615      	mov	r5, r2
 8005606:	fbb6 f1f3 	udiv	r1, r6, r3
 800560a:	fb03 6711 	mls	r7, r3, r1, r6
 800560e:	5dc7      	ldrb	r7, [r0, r7]
 8005610:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005614:	4637      	mov	r7, r6
 8005616:	42bb      	cmp	r3, r7
 8005618:	460e      	mov	r6, r1
 800561a:	d9f4      	bls.n	8005606 <_printf_i+0x116>
 800561c:	2b08      	cmp	r3, #8
 800561e:	d10b      	bne.n	8005638 <_printf_i+0x148>
 8005620:	6823      	ldr	r3, [r4, #0]
 8005622:	07de      	lsls	r6, r3, #31
 8005624:	d508      	bpl.n	8005638 <_printf_i+0x148>
 8005626:	6923      	ldr	r3, [r4, #16]
 8005628:	6861      	ldr	r1, [r4, #4]
 800562a:	4299      	cmp	r1, r3
 800562c:	bfde      	ittt	le
 800562e:	2330      	movle	r3, #48	; 0x30
 8005630:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005634:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005638:	1b52      	subs	r2, r2, r5
 800563a:	6122      	str	r2, [r4, #16]
 800563c:	f8cd a000 	str.w	sl, [sp]
 8005640:	464b      	mov	r3, r9
 8005642:	aa03      	add	r2, sp, #12
 8005644:	4621      	mov	r1, r4
 8005646:	4640      	mov	r0, r8
 8005648:	f7ff fee4 	bl	8005414 <_printf_common>
 800564c:	3001      	adds	r0, #1
 800564e:	d14a      	bne.n	80056e6 <_printf_i+0x1f6>
 8005650:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005654:	b004      	add	sp, #16
 8005656:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800565a:	6823      	ldr	r3, [r4, #0]
 800565c:	f043 0320 	orr.w	r3, r3, #32
 8005660:	6023      	str	r3, [r4, #0]
 8005662:	4833      	ldr	r0, [pc, #204]	; (8005730 <_printf_i+0x240>)
 8005664:	2778      	movs	r7, #120	; 0x78
 8005666:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800566a:	6823      	ldr	r3, [r4, #0]
 800566c:	6829      	ldr	r1, [r5, #0]
 800566e:	061f      	lsls	r7, r3, #24
 8005670:	f851 6b04 	ldr.w	r6, [r1], #4
 8005674:	d402      	bmi.n	800567c <_printf_i+0x18c>
 8005676:	065f      	lsls	r7, r3, #25
 8005678:	bf48      	it	mi
 800567a:	b2b6      	uxthmi	r6, r6
 800567c:	07df      	lsls	r7, r3, #31
 800567e:	bf48      	it	mi
 8005680:	f043 0320 	orrmi.w	r3, r3, #32
 8005684:	6029      	str	r1, [r5, #0]
 8005686:	bf48      	it	mi
 8005688:	6023      	strmi	r3, [r4, #0]
 800568a:	b91e      	cbnz	r6, 8005694 <_printf_i+0x1a4>
 800568c:	6823      	ldr	r3, [r4, #0]
 800568e:	f023 0320 	bic.w	r3, r3, #32
 8005692:	6023      	str	r3, [r4, #0]
 8005694:	2310      	movs	r3, #16
 8005696:	e7a7      	b.n	80055e8 <_printf_i+0xf8>
 8005698:	4824      	ldr	r0, [pc, #144]	; (800572c <_printf_i+0x23c>)
 800569a:	e7e4      	b.n	8005666 <_printf_i+0x176>
 800569c:	4615      	mov	r5, r2
 800569e:	e7bd      	b.n	800561c <_printf_i+0x12c>
 80056a0:	682b      	ldr	r3, [r5, #0]
 80056a2:	6826      	ldr	r6, [r4, #0]
 80056a4:	6961      	ldr	r1, [r4, #20]
 80056a6:	1d18      	adds	r0, r3, #4
 80056a8:	6028      	str	r0, [r5, #0]
 80056aa:	0635      	lsls	r5, r6, #24
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	d501      	bpl.n	80056b4 <_printf_i+0x1c4>
 80056b0:	6019      	str	r1, [r3, #0]
 80056b2:	e002      	b.n	80056ba <_printf_i+0x1ca>
 80056b4:	0670      	lsls	r0, r6, #25
 80056b6:	d5fb      	bpl.n	80056b0 <_printf_i+0x1c0>
 80056b8:	8019      	strh	r1, [r3, #0]
 80056ba:	2300      	movs	r3, #0
 80056bc:	6123      	str	r3, [r4, #16]
 80056be:	4615      	mov	r5, r2
 80056c0:	e7bc      	b.n	800563c <_printf_i+0x14c>
 80056c2:	682b      	ldr	r3, [r5, #0]
 80056c4:	1d1a      	adds	r2, r3, #4
 80056c6:	602a      	str	r2, [r5, #0]
 80056c8:	681d      	ldr	r5, [r3, #0]
 80056ca:	6862      	ldr	r2, [r4, #4]
 80056cc:	2100      	movs	r1, #0
 80056ce:	4628      	mov	r0, r5
 80056d0:	f7fa fdb6 	bl	8000240 <memchr>
 80056d4:	b108      	cbz	r0, 80056da <_printf_i+0x1ea>
 80056d6:	1b40      	subs	r0, r0, r5
 80056d8:	6060      	str	r0, [r4, #4]
 80056da:	6863      	ldr	r3, [r4, #4]
 80056dc:	6123      	str	r3, [r4, #16]
 80056de:	2300      	movs	r3, #0
 80056e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80056e4:	e7aa      	b.n	800563c <_printf_i+0x14c>
 80056e6:	6923      	ldr	r3, [r4, #16]
 80056e8:	462a      	mov	r2, r5
 80056ea:	4649      	mov	r1, r9
 80056ec:	4640      	mov	r0, r8
 80056ee:	47d0      	blx	sl
 80056f0:	3001      	adds	r0, #1
 80056f2:	d0ad      	beq.n	8005650 <_printf_i+0x160>
 80056f4:	6823      	ldr	r3, [r4, #0]
 80056f6:	079b      	lsls	r3, r3, #30
 80056f8:	d413      	bmi.n	8005722 <_printf_i+0x232>
 80056fa:	68e0      	ldr	r0, [r4, #12]
 80056fc:	9b03      	ldr	r3, [sp, #12]
 80056fe:	4298      	cmp	r0, r3
 8005700:	bfb8      	it	lt
 8005702:	4618      	movlt	r0, r3
 8005704:	e7a6      	b.n	8005654 <_printf_i+0x164>
 8005706:	2301      	movs	r3, #1
 8005708:	4632      	mov	r2, r6
 800570a:	4649      	mov	r1, r9
 800570c:	4640      	mov	r0, r8
 800570e:	47d0      	blx	sl
 8005710:	3001      	adds	r0, #1
 8005712:	d09d      	beq.n	8005650 <_printf_i+0x160>
 8005714:	3501      	adds	r5, #1
 8005716:	68e3      	ldr	r3, [r4, #12]
 8005718:	9903      	ldr	r1, [sp, #12]
 800571a:	1a5b      	subs	r3, r3, r1
 800571c:	42ab      	cmp	r3, r5
 800571e:	dcf2      	bgt.n	8005706 <_printf_i+0x216>
 8005720:	e7eb      	b.n	80056fa <_printf_i+0x20a>
 8005722:	2500      	movs	r5, #0
 8005724:	f104 0619 	add.w	r6, r4, #25
 8005728:	e7f5      	b.n	8005716 <_printf_i+0x226>
 800572a:	bf00      	nop
 800572c:	08005a85 	.word	0x08005a85
 8005730:	08005a96 	.word	0x08005a96

08005734 <__sflush_r>:
 8005734:	898a      	ldrh	r2, [r1, #12]
 8005736:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800573a:	4605      	mov	r5, r0
 800573c:	0710      	lsls	r0, r2, #28
 800573e:	460c      	mov	r4, r1
 8005740:	d458      	bmi.n	80057f4 <__sflush_r+0xc0>
 8005742:	684b      	ldr	r3, [r1, #4]
 8005744:	2b00      	cmp	r3, #0
 8005746:	dc05      	bgt.n	8005754 <__sflush_r+0x20>
 8005748:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800574a:	2b00      	cmp	r3, #0
 800574c:	dc02      	bgt.n	8005754 <__sflush_r+0x20>
 800574e:	2000      	movs	r0, #0
 8005750:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005754:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005756:	2e00      	cmp	r6, #0
 8005758:	d0f9      	beq.n	800574e <__sflush_r+0x1a>
 800575a:	2300      	movs	r3, #0
 800575c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005760:	682f      	ldr	r7, [r5, #0]
 8005762:	6a21      	ldr	r1, [r4, #32]
 8005764:	602b      	str	r3, [r5, #0]
 8005766:	d032      	beq.n	80057ce <__sflush_r+0x9a>
 8005768:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800576a:	89a3      	ldrh	r3, [r4, #12]
 800576c:	075a      	lsls	r2, r3, #29
 800576e:	d505      	bpl.n	800577c <__sflush_r+0x48>
 8005770:	6863      	ldr	r3, [r4, #4]
 8005772:	1ac0      	subs	r0, r0, r3
 8005774:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005776:	b10b      	cbz	r3, 800577c <__sflush_r+0x48>
 8005778:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800577a:	1ac0      	subs	r0, r0, r3
 800577c:	2300      	movs	r3, #0
 800577e:	4602      	mov	r2, r0
 8005780:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005782:	6a21      	ldr	r1, [r4, #32]
 8005784:	4628      	mov	r0, r5
 8005786:	47b0      	blx	r6
 8005788:	1c43      	adds	r3, r0, #1
 800578a:	89a3      	ldrh	r3, [r4, #12]
 800578c:	d106      	bne.n	800579c <__sflush_r+0x68>
 800578e:	6829      	ldr	r1, [r5, #0]
 8005790:	291d      	cmp	r1, #29
 8005792:	d82b      	bhi.n	80057ec <__sflush_r+0xb8>
 8005794:	4a29      	ldr	r2, [pc, #164]	; (800583c <__sflush_r+0x108>)
 8005796:	410a      	asrs	r2, r1
 8005798:	07d6      	lsls	r6, r2, #31
 800579a:	d427      	bmi.n	80057ec <__sflush_r+0xb8>
 800579c:	2200      	movs	r2, #0
 800579e:	6062      	str	r2, [r4, #4]
 80057a0:	04d9      	lsls	r1, r3, #19
 80057a2:	6922      	ldr	r2, [r4, #16]
 80057a4:	6022      	str	r2, [r4, #0]
 80057a6:	d504      	bpl.n	80057b2 <__sflush_r+0x7e>
 80057a8:	1c42      	adds	r2, r0, #1
 80057aa:	d101      	bne.n	80057b0 <__sflush_r+0x7c>
 80057ac:	682b      	ldr	r3, [r5, #0]
 80057ae:	b903      	cbnz	r3, 80057b2 <__sflush_r+0x7e>
 80057b0:	6560      	str	r0, [r4, #84]	; 0x54
 80057b2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80057b4:	602f      	str	r7, [r5, #0]
 80057b6:	2900      	cmp	r1, #0
 80057b8:	d0c9      	beq.n	800574e <__sflush_r+0x1a>
 80057ba:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80057be:	4299      	cmp	r1, r3
 80057c0:	d002      	beq.n	80057c8 <__sflush_r+0x94>
 80057c2:	4628      	mov	r0, r5
 80057c4:	f7ff fbea 	bl	8004f9c <_free_r>
 80057c8:	2000      	movs	r0, #0
 80057ca:	6360      	str	r0, [r4, #52]	; 0x34
 80057cc:	e7c0      	b.n	8005750 <__sflush_r+0x1c>
 80057ce:	2301      	movs	r3, #1
 80057d0:	4628      	mov	r0, r5
 80057d2:	47b0      	blx	r6
 80057d4:	1c41      	adds	r1, r0, #1
 80057d6:	d1c8      	bne.n	800576a <__sflush_r+0x36>
 80057d8:	682b      	ldr	r3, [r5, #0]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d0c5      	beq.n	800576a <__sflush_r+0x36>
 80057de:	2b1d      	cmp	r3, #29
 80057e0:	d001      	beq.n	80057e6 <__sflush_r+0xb2>
 80057e2:	2b16      	cmp	r3, #22
 80057e4:	d101      	bne.n	80057ea <__sflush_r+0xb6>
 80057e6:	602f      	str	r7, [r5, #0]
 80057e8:	e7b1      	b.n	800574e <__sflush_r+0x1a>
 80057ea:	89a3      	ldrh	r3, [r4, #12]
 80057ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80057f0:	81a3      	strh	r3, [r4, #12]
 80057f2:	e7ad      	b.n	8005750 <__sflush_r+0x1c>
 80057f4:	690f      	ldr	r7, [r1, #16]
 80057f6:	2f00      	cmp	r7, #0
 80057f8:	d0a9      	beq.n	800574e <__sflush_r+0x1a>
 80057fa:	0793      	lsls	r3, r2, #30
 80057fc:	680e      	ldr	r6, [r1, #0]
 80057fe:	bf08      	it	eq
 8005800:	694b      	ldreq	r3, [r1, #20]
 8005802:	600f      	str	r7, [r1, #0]
 8005804:	bf18      	it	ne
 8005806:	2300      	movne	r3, #0
 8005808:	eba6 0807 	sub.w	r8, r6, r7
 800580c:	608b      	str	r3, [r1, #8]
 800580e:	f1b8 0f00 	cmp.w	r8, #0
 8005812:	dd9c      	ble.n	800574e <__sflush_r+0x1a>
 8005814:	6a21      	ldr	r1, [r4, #32]
 8005816:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005818:	4643      	mov	r3, r8
 800581a:	463a      	mov	r2, r7
 800581c:	4628      	mov	r0, r5
 800581e:	47b0      	blx	r6
 8005820:	2800      	cmp	r0, #0
 8005822:	dc06      	bgt.n	8005832 <__sflush_r+0xfe>
 8005824:	89a3      	ldrh	r3, [r4, #12]
 8005826:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800582a:	81a3      	strh	r3, [r4, #12]
 800582c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005830:	e78e      	b.n	8005750 <__sflush_r+0x1c>
 8005832:	4407      	add	r7, r0
 8005834:	eba8 0800 	sub.w	r8, r8, r0
 8005838:	e7e9      	b.n	800580e <__sflush_r+0xda>
 800583a:	bf00      	nop
 800583c:	dfbffffe 	.word	0xdfbffffe

08005840 <_fflush_r>:
 8005840:	b538      	push	{r3, r4, r5, lr}
 8005842:	690b      	ldr	r3, [r1, #16]
 8005844:	4605      	mov	r5, r0
 8005846:	460c      	mov	r4, r1
 8005848:	b913      	cbnz	r3, 8005850 <_fflush_r+0x10>
 800584a:	2500      	movs	r5, #0
 800584c:	4628      	mov	r0, r5
 800584e:	bd38      	pop	{r3, r4, r5, pc}
 8005850:	b118      	cbz	r0, 800585a <_fflush_r+0x1a>
 8005852:	6a03      	ldr	r3, [r0, #32]
 8005854:	b90b      	cbnz	r3, 800585a <_fflush_r+0x1a>
 8005856:	f7ff f9a9 	bl	8004bac <__sinit>
 800585a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d0f3      	beq.n	800584a <_fflush_r+0xa>
 8005862:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005864:	07d0      	lsls	r0, r2, #31
 8005866:	d404      	bmi.n	8005872 <_fflush_r+0x32>
 8005868:	0599      	lsls	r1, r3, #22
 800586a:	d402      	bmi.n	8005872 <_fflush_r+0x32>
 800586c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800586e:	f7ff fb92 	bl	8004f96 <__retarget_lock_acquire_recursive>
 8005872:	4628      	mov	r0, r5
 8005874:	4621      	mov	r1, r4
 8005876:	f7ff ff5d 	bl	8005734 <__sflush_r>
 800587a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800587c:	07da      	lsls	r2, r3, #31
 800587e:	4605      	mov	r5, r0
 8005880:	d4e4      	bmi.n	800584c <_fflush_r+0xc>
 8005882:	89a3      	ldrh	r3, [r4, #12]
 8005884:	059b      	lsls	r3, r3, #22
 8005886:	d4e1      	bmi.n	800584c <_fflush_r+0xc>
 8005888:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800588a:	f7ff fb85 	bl	8004f98 <__retarget_lock_release_recursive>
 800588e:	e7dd      	b.n	800584c <_fflush_r+0xc>

08005890 <__swhatbuf_r>:
 8005890:	b570      	push	{r4, r5, r6, lr}
 8005892:	460c      	mov	r4, r1
 8005894:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005898:	2900      	cmp	r1, #0
 800589a:	b096      	sub	sp, #88	; 0x58
 800589c:	4615      	mov	r5, r2
 800589e:	461e      	mov	r6, r3
 80058a0:	da0d      	bge.n	80058be <__swhatbuf_r+0x2e>
 80058a2:	89a3      	ldrh	r3, [r4, #12]
 80058a4:	f013 0f80 	tst.w	r3, #128	; 0x80
 80058a8:	f04f 0100 	mov.w	r1, #0
 80058ac:	bf0c      	ite	eq
 80058ae:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80058b2:	2340      	movne	r3, #64	; 0x40
 80058b4:	2000      	movs	r0, #0
 80058b6:	6031      	str	r1, [r6, #0]
 80058b8:	602b      	str	r3, [r5, #0]
 80058ba:	b016      	add	sp, #88	; 0x58
 80058bc:	bd70      	pop	{r4, r5, r6, pc}
 80058be:	466a      	mov	r2, sp
 80058c0:	f000 f848 	bl	8005954 <_fstat_r>
 80058c4:	2800      	cmp	r0, #0
 80058c6:	dbec      	blt.n	80058a2 <__swhatbuf_r+0x12>
 80058c8:	9901      	ldr	r1, [sp, #4]
 80058ca:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80058ce:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80058d2:	4259      	negs	r1, r3
 80058d4:	4159      	adcs	r1, r3
 80058d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80058da:	e7eb      	b.n	80058b4 <__swhatbuf_r+0x24>

080058dc <__smakebuf_r>:
 80058dc:	898b      	ldrh	r3, [r1, #12]
 80058de:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80058e0:	079d      	lsls	r5, r3, #30
 80058e2:	4606      	mov	r6, r0
 80058e4:	460c      	mov	r4, r1
 80058e6:	d507      	bpl.n	80058f8 <__smakebuf_r+0x1c>
 80058e8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80058ec:	6023      	str	r3, [r4, #0]
 80058ee:	6123      	str	r3, [r4, #16]
 80058f0:	2301      	movs	r3, #1
 80058f2:	6163      	str	r3, [r4, #20]
 80058f4:	b002      	add	sp, #8
 80058f6:	bd70      	pop	{r4, r5, r6, pc}
 80058f8:	ab01      	add	r3, sp, #4
 80058fa:	466a      	mov	r2, sp
 80058fc:	f7ff ffc8 	bl	8005890 <__swhatbuf_r>
 8005900:	9900      	ldr	r1, [sp, #0]
 8005902:	4605      	mov	r5, r0
 8005904:	4630      	mov	r0, r6
 8005906:	f7ff fbb5 	bl	8005074 <_malloc_r>
 800590a:	b948      	cbnz	r0, 8005920 <__smakebuf_r+0x44>
 800590c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005910:	059a      	lsls	r2, r3, #22
 8005912:	d4ef      	bmi.n	80058f4 <__smakebuf_r+0x18>
 8005914:	f023 0303 	bic.w	r3, r3, #3
 8005918:	f043 0302 	orr.w	r3, r3, #2
 800591c:	81a3      	strh	r3, [r4, #12]
 800591e:	e7e3      	b.n	80058e8 <__smakebuf_r+0xc>
 8005920:	89a3      	ldrh	r3, [r4, #12]
 8005922:	6020      	str	r0, [r4, #0]
 8005924:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005928:	81a3      	strh	r3, [r4, #12]
 800592a:	9b00      	ldr	r3, [sp, #0]
 800592c:	6163      	str	r3, [r4, #20]
 800592e:	9b01      	ldr	r3, [sp, #4]
 8005930:	6120      	str	r0, [r4, #16]
 8005932:	b15b      	cbz	r3, 800594c <__smakebuf_r+0x70>
 8005934:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005938:	4630      	mov	r0, r6
 800593a:	f000 f81d 	bl	8005978 <_isatty_r>
 800593e:	b128      	cbz	r0, 800594c <__smakebuf_r+0x70>
 8005940:	89a3      	ldrh	r3, [r4, #12]
 8005942:	f023 0303 	bic.w	r3, r3, #3
 8005946:	f043 0301 	orr.w	r3, r3, #1
 800594a:	81a3      	strh	r3, [r4, #12]
 800594c:	89a3      	ldrh	r3, [r4, #12]
 800594e:	431d      	orrs	r5, r3
 8005950:	81a5      	strh	r5, [r4, #12]
 8005952:	e7cf      	b.n	80058f4 <__smakebuf_r+0x18>

08005954 <_fstat_r>:
 8005954:	b538      	push	{r3, r4, r5, lr}
 8005956:	4d07      	ldr	r5, [pc, #28]	; (8005974 <_fstat_r+0x20>)
 8005958:	2300      	movs	r3, #0
 800595a:	4604      	mov	r4, r0
 800595c:	4608      	mov	r0, r1
 800595e:	4611      	mov	r1, r2
 8005960:	602b      	str	r3, [r5, #0]
 8005962:	f7fb fae6 	bl	8000f32 <_fstat>
 8005966:	1c43      	adds	r3, r0, #1
 8005968:	d102      	bne.n	8005970 <_fstat_r+0x1c>
 800596a:	682b      	ldr	r3, [r5, #0]
 800596c:	b103      	cbz	r3, 8005970 <_fstat_r+0x1c>
 800596e:	6023      	str	r3, [r4, #0]
 8005970:	bd38      	pop	{r3, r4, r5, pc}
 8005972:	bf00      	nop
 8005974:	20000340 	.word	0x20000340

08005978 <_isatty_r>:
 8005978:	b538      	push	{r3, r4, r5, lr}
 800597a:	4d06      	ldr	r5, [pc, #24]	; (8005994 <_isatty_r+0x1c>)
 800597c:	2300      	movs	r3, #0
 800597e:	4604      	mov	r4, r0
 8005980:	4608      	mov	r0, r1
 8005982:	602b      	str	r3, [r5, #0]
 8005984:	f7fb fae5 	bl	8000f52 <_isatty>
 8005988:	1c43      	adds	r3, r0, #1
 800598a:	d102      	bne.n	8005992 <_isatty_r+0x1a>
 800598c:	682b      	ldr	r3, [r5, #0]
 800598e:	b103      	cbz	r3, 8005992 <_isatty_r+0x1a>
 8005990:	6023      	str	r3, [r4, #0]
 8005992:	bd38      	pop	{r3, r4, r5, pc}
 8005994:	20000340 	.word	0x20000340

08005998 <_sbrk_r>:
 8005998:	b538      	push	{r3, r4, r5, lr}
 800599a:	4d06      	ldr	r5, [pc, #24]	; (80059b4 <_sbrk_r+0x1c>)
 800599c:	2300      	movs	r3, #0
 800599e:	4604      	mov	r4, r0
 80059a0:	4608      	mov	r0, r1
 80059a2:	602b      	str	r3, [r5, #0]
 80059a4:	f7fb faee 	bl	8000f84 <_sbrk>
 80059a8:	1c43      	adds	r3, r0, #1
 80059aa:	d102      	bne.n	80059b2 <_sbrk_r+0x1a>
 80059ac:	682b      	ldr	r3, [r5, #0]
 80059ae:	b103      	cbz	r3, 80059b2 <_sbrk_r+0x1a>
 80059b0:	6023      	str	r3, [r4, #0]
 80059b2:	bd38      	pop	{r3, r4, r5, pc}
 80059b4:	20000340 	.word	0x20000340

080059b8 <_init>:
 80059b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059ba:	bf00      	nop
 80059bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059be:	bc08      	pop	{r3}
 80059c0:	469e      	mov	lr, r3
 80059c2:	4770      	bx	lr

080059c4 <_fini>:
 80059c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059c6:	bf00      	nop
 80059c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059ca:	bc08      	pop	{r3}
 80059cc:	469e      	mov	lr, r3
 80059ce:	4770      	bx	lr
