
stm_spi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005104  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  080052fc  080052fc  000152fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800538c  0800538c  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  0800538c  0800538c  0001538c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005394  08005394  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005394  08005394  00015394  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005398  08005398  00015398  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  0800539c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002c8  20000088  08005424  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000350  08005424  00020350  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200b6  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d700  00000000  00000000  000200f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000217d  00000000  00000000  0002d7f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ab8  00000000  00000000  0002f978  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000082e  00000000  00000000  00030430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002de84  00000000  00000000  00030c5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000dacf  00000000  00000000  0005eae2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00111daa  00000000  00000000  0006c5b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003130  00000000  00000000  0017e35c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  0018148c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000088 	.word	0x20000088
 8000214:	00000000 	.word	0x00000000
 8000218:	080052e4 	.word	0x080052e4

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	2000008c 	.word	0x2000008c
 8000234:	080052e4 	.word	0x080052e4

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000248:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800024c:	f000 b970 	b.w	8000530 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9e08      	ldr	r6, [sp, #32]
 800026e:	460d      	mov	r5, r1
 8000270:	4604      	mov	r4, r0
 8000272:	460f      	mov	r7, r1
 8000274:	2b00      	cmp	r3, #0
 8000276:	d14a      	bne.n	800030e <__udivmoddi4+0xa6>
 8000278:	428a      	cmp	r2, r1
 800027a:	4694      	mov	ip, r2
 800027c:	d965      	bls.n	800034a <__udivmoddi4+0xe2>
 800027e:	fab2 f382 	clz	r3, r2
 8000282:	b143      	cbz	r3, 8000296 <__udivmoddi4+0x2e>
 8000284:	fa02 fc03 	lsl.w	ip, r2, r3
 8000288:	f1c3 0220 	rsb	r2, r3, #32
 800028c:	409f      	lsls	r7, r3
 800028e:	fa20 f202 	lsr.w	r2, r0, r2
 8000292:	4317      	orrs	r7, r2
 8000294:	409c      	lsls	r4, r3
 8000296:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800029a:	fa1f f58c 	uxth.w	r5, ip
 800029e:	fbb7 f1fe 	udiv	r1, r7, lr
 80002a2:	0c22      	lsrs	r2, r4, #16
 80002a4:	fb0e 7711 	mls	r7, lr, r1, r7
 80002a8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002ac:	fb01 f005 	mul.w	r0, r1, r5
 80002b0:	4290      	cmp	r0, r2
 80002b2:	d90a      	bls.n	80002ca <__udivmoddi4+0x62>
 80002b4:	eb1c 0202 	adds.w	r2, ip, r2
 80002b8:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 80002bc:	f080 811c 	bcs.w	80004f8 <__udivmoddi4+0x290>
 80002c0:	4290      	cmp	r0, r2
 80002c2:	f240 8119 	bls.w	80004f8 <__udivmoddi4+0x290>
 80002c6:	3902      	subs	r1, #2
 80002c8:	4462      	add	r2, ip
 80002ca:	1a12      	subs	r2, r2, r0
 80002cc:	b2a4      	uxth	r4, r4
 80002ce:	fbb2 f0fe 	udiv	r0, r2, lr
 80002d2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002d6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002da:	fb00 f505 	mul.w	r5, r0, r5
 80002de:	42a5      	cmp	r5, r4
 80002e0:	d90a      	bls.n	80002f8 <__udivmoddi4+0x90>
 80002e2:	eb1c 0404 	adds.w	r4, ip, r4
 80002e6:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80002ea:	f080 8107 	bcs.w	80004fc <__udivmoddi4+0x294>
 80002ee:	42a5      	cmp	r5, r4
 80002f0:	f240 8104 	bls.w	80004fc <__udivmoddi4+0x294>
 80002f4:	4464      	add	r4, ip
 80002f6:	3802      	subs	r0, #2
 80002f8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002fc:	1b64      	subs	r4, r4, r5
 80002fe:	2100      	movs	r1, #0
 8000300:	b11e      	cbz	r6, 800030a <__udivmoddi4+0xa2>
 8000302:	40dc      	lsrs	r4, r3
 8000304:	2300      	movs	r3, #0
 8000306:	e9c6 4300 	strd	r4, r3, [r6]
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	428b      	cmp	r3, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0xbc>
 8000312:	2e00      	cmp	r6, #0
 8000314:	f000 80ed 	beq.w	80004f2 <__udivmoddi4+0x28a>
 8000318:	2100      	movs	r1, #0
 800031a:	e9c6 0500 	strd	r0, r5, [r6]
 800031e:	4608      	mov	r0, r1
 8000320:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000324:	fab3 f183 	clz	r1, r3
 8000328:	2900      	cmp	r1, #0
 800032a:	d149      	bne.n	80003c0 <__udivmoddi4+0x158>
 800032c:	42ab      	cmp	r3, r5
 800032e:	d302      	bcc.n	8000336 <__udivmoddi4+0xce>
 8000330:	4282      	cmp	r2, r0
 8000332:	f200 80f8 	bhi.w	8000526 <__udivmoddi4+0x2be>
 8000336:	1a84      	subs	r4, r0, r2
 8000338:	eb65 0203 	sbc.w	r2, r5, r3
 800033c:	2001      	movs	r0, #1
 800033e:	4617      	mov	r7, r2
 8000340:	2e00      	cmp	r6, #0
 8000342:	d0e2      	beq.n	800030a <__udivmoddi4+0xa2>
 8000344:	e9c6 4700 	strd	r4, r7, [r6]
 8000348:	e7df      	b.n	800030a <__udivmoddi4+0xa2>
 800034a:	b902      	cbnz	r2, 800034e <__udivmoddi4+0xe6>
 800034c:	deff      	udf	#255	; 0xff
 800034e:	fab2 f382 	clz	r3, r2
 8000352:	2b00      	cmp	r3, #0
 8000354:	f040 8090 	bne.w	8000478 <__udivmoddi4+0x210>
 8000358:	1a8a      	subs	r2, r1, r2
 800035a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800035e:	fa1f fe8c 	uxth.w	lr, ip
 8000362:	2101      	movs	r1, #1
 8000364:	fbb2 f5f7 	udiv	r5, r2, r7
 8000368:	fb07 2015 	mls	r0, r7, r5, r2
 800036c:	0c22      	lsrs	r2, r4, #16
 800036e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000372:	fb0e f005 	mul.w	r0, lr, r5
 8000376:	4290      	cmp	r0, r2
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0x124>
 800037a:	eb1c 0202 	adds.w	r2, ip, r2
 800037e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x122>
 8000384:	4290      	cmp	r0, r2
 8000386:	f200 80cb 	bhi.w	8000520 <__udivmoddi4+0x2b8>
 800038a:	4645      	mov	r5, r8
 800038c:	1a12      	subs	r2, r2, r0
 800038e:	b2a4      	uxth	r4, r4
 8000390:	fbb2 f0f7 	udiv	r0, r2, r7
 8000394:	fb07 2210 	mls	r2, r7, r0, r2
 8000398:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800039c:	fb0e fe00 	mul.w	lr, lr, r0
 80003a0:	45a6      	cmp	lr, r4
 80003a2:	d908      	bls.n	80003b6 <__udivmoddi4+0x14e>
 80003a4:	eb1c 0404 	adds.w	r4, ip, r4
 80003a8:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80003ac:	d202      	bcs.n	80003b4 <__udivmoddi4+0x14c>
 80003ae:	45a6      	cmp	lr, r4
 80003b0:	f200 80bb 	bhi.w	800052a <__udivmoddi4+0x2c2>
 80003b4:	4610      	mov	r0, r2
 80003b6:	eba4 040e 	sub.w	r4, r4, lr
 80003ba:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003be:	e79f      	b.n	8000300 <__udivmoddi4+0x98>
 80003c0:	f1c1 0720 	rsb	r7, r1, #32
 80003c4:	408b      	lsls	r3, r1
 80003c6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ca:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ce:	fa05 f401 	lsl.w	r4, r5, r1
 80003d2:	fa20 f307 	lsr.w	r3, r0, r7
 80003d6:	40fd      	lsrs	r5, r7
 80003d8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003dc:	4323      	orrs	r3, r4
 80003de:	fbb5 f8f9 	udiv	r8, r5, r9
 80003e2:	fa1f fe8c 	uxth.w	lr, ip
 80003e6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ea:	0c1c      	lsrs	r4, r3, #16
 80003ec:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003f0:	fb08 f50e 	mul.w	r5, r8, lr
 80003f4:	42a5      	cmp	r5, r4
 80003f6:	fa02 f201 	lsl.w	r2, r2, r1
 80003fa:	fa00 f001 	lsl.w	r0, r0, r1
 80003fe:	d90b      	bls.n	8000418 <__udivmoddi4+0x1b0>
 8000400:	eb1c 0404 	adds.w	r4, ip, r4
 8000404:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000408:	f080 8088 	bcs.w	800051c <__udivmoddi4+0x2b4>
 800040c:	42a5      	cmp	r5, r4
 800040e:	f240 8085 	bls.w	800051c <__udivmoddi4+0x2b4>
 8000412:	f1a8 0802 	sub.w	r8, r8, #2
 8000416:	4464      	add	r4, ip
 8000418:	1b64      	subs	r4, r4, r5
 800041a:	b29d      	uxth	r5, r3
 800041c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000420:	fb09 4413 	mls	r4, r9, r3, r4
 8000424:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000428:	fb03 fe0e 	mul.w	lr, r3, lr
 800042c:	45a6      	cmp	lr, r4
 800042e:	d908      	bls.n	8000442 <__udivmoddi4+0x1da>
 8000430:	eb1c 0404 	adds.w	r4, ip, r4
 8000434:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000438:	d26c      	bcs.n	8000514 <__udivmoddi4+0x2ac>
 800043a:	45a6      	cmp	lr, r4
 800043c:	d96a      	bls.n	8000514 <__udivmoddi4+0x2ac>
 800043e:	3b02      	subs	r3, #2
 8000440:	4464      	add	r4, ip
 8000442:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000446:	fba3 9502 	umull	r9, r5, r3, r2
 800044a:	eba4 040e 	sub.w	r4, r4, lr
 800044e:	42ac      	cmp	r4, r5
 8000450:	46c8      	mov	r8, r9
 8000452:	46ae      	mov	lr, r5
 8000454:	d356      	bcc.n	8000504 <__udivmoddi4+0x29c>
 8000456:	d053      	beq.n	8000500 <__udivmoddi4+0x298>
 8000458:	b156      	cbz	r6, 8000470 <__udivmoddi4+0x208>
 800045a:	ebb0 0208 	subs.w	r2, r0, r8
 800045e:	eb64 040e 	sbc.w	r4, r4, lr
 8000462:	fa04 f707 	lsl.w	r7, r4, r7
 8000466:	40ca      	lsrs	r2, r1
 8000468:	40cc      	lsrs	r4, r1
 800046a:	4317      	orrs	r7, r2
 800046c:	e9c6 7400 	strd	r7, r4, [r6]
 8000470:	4618      	mov	r0, r3
 8000472:	2100      	movs	r1, #0
 8000474:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000478:	f1c3 0120 	rsb	r1, r3, #32
 800047c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000480:	fa20 f201 	lsr.w	r2, r0, r1
 8000484:	fa25 f101 	lsr.w	r1, r5, r1
 8000488:	409d      	lsls	r5, r3
 800048a:	432a      	orrs	r2, r5
 800048c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fbb1 f0f7 	udiv	r0, r1, r7
 8000498:	fb07 1510 	mls	r5, r7, r0, r1
 800049c:	0c11      	lsrs	r1, r2, #16
 800049e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004a2:	fb00 f50e 	mul.w	r5, r0, lr
 80004a6:	428d      	cmp	r5, r1
 80004a8:	fa04 f403 	lsl.w	r4, r4, r3
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x258>
 80004ae:	eb1c 0101 	adds.w	r1, ip, r1
 80004b2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004b6:	d22f      	bcs.n	8000518 <__udivmoddi4+0x2b0>
 80004b8:	428d      	cmp	r5, r1
 80004ba:	d92d      	bls.n	8000518 <__udivmoddi4+0x2b0>
 80004bc:	3802      	subs	r0, #2
 80004be:	4461      	add	r1, ip
 80004c0:	1b49      	subs	r1, r1, r5
 80004c2:	b292      	uxth	r2, r2
 80004c4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004c8:	fb07 1115 	mls	r1, r7, r5, r1
 80004cc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004d0:	fb05 f10e 	mul.w	r1, r5, lr
 80004d4:	4291      	cmp	r1, r2
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x282>
 80004d8:	eb1c 0202 	adds.w	r2, ip, r2
 80004dc:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004e0:	d216      	bcs.n	8000510 <__udivmoddi4+0x2a8>
 80004e2:	4291      	cmp	r1, r2
 80004e4:	d914      	bls.n	8000510 <__udivmoddi4+0x2a8>
 80004e6:	3d02      	subs	r5, #2
 80004e8:	4462      	add	r2, ip
 80004ea:	1a52      	subs	r2, r2, r1
 80004ec:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004f0:	e738      	b.n	8000364 <__udivmoddi4+0xfc>
 80004f2:	4631      	mov	r1, r6
 80004f4:	4630      	mov	r0, r6
 80004f6:	e708      	b.n	800030a <__udivmoddi4+0xa2>
 80004f8:	4639      	mov	r1, r7
 80004fa:	e6e6      	b.n	80002ca <__udivmoddi4+0x62>
 80004fc:	4610      	mov	r0, r2
 80004fe:	e6fb      	b.n	80002f8 <__udivmoddi4+0x90>
 8000500:	4548      	cmp	r0, r9
 8000502:	d2a9      	bcs.n	8000458 <__udivmoddi4+0x1f0>
 8000504:	ebb9 0802 	subs.w	r8, r9, r2
 8000508:	eb65 0e0c 	sbc.w	lr, r5, ip
 800050c:	3b01      	subs	r3, #1
 800050e:	e7a3      	b.n	8000458 <__udivmoddi4+0x1f0>
 8000510:	4645      	mov	r5, r8
 8000512:	e7ea      	b.n	80004ea <__udivmoddi4+0x282>
 8000514:	462b      	mov	r3, r5
 8000516:	e794      	b.n	8000442 <__udivmoddi4+0x1da>
 8000518:	4640      	mov	r0, r8
 800051a:	e7d1      	b.n	80004c0 <__udivmoddi4+0x258>
 800051c:	46d0      	mov	r8, sl
 800051e:	e77b      	b.n	8000418 <__udivmoddi4+0x1b0>
 8000520:	3d02      	subs	r5, #2
 8000522:	4462      	add	r2, ip
 8000524:	e732      	b.n	800038c <__udivmoddi4+0x124>
 8000526:	4608      	mov	r0, r1
 8000528:	e70a      	b.n	8000340 <__udivmoddi4+0xd8>
 800052a:	4464      	add	r4, ip
 800052c:	3802      	subs	r0, #2
 800052e:	e742      	b.n	80003b6 <__udivmoddi4+0x14e>

08000530 <__aeabi_idiv0>:
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop

08000534 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b084      	sub	sp, #16
 8000538:	af00      	add	r7, sp, #0
 800053a:	60f8      	str	r0, [r7, #12]
 800053c:	60b9      	str	r1, [r7, #8]
 800053e:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)ptr, len, 100);
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	b29a      	uxth	r2, r3
 8000544:	2364      	movs	r3, #100	; 0x64
 8000546:	68b9      	ldr	r1, [r7, #8]
 8000548:	4803      	ldr	r0, [pc, #12]	; (8000558 <_write+0x24>)
 800054a:	f003 f9cc 	bl	80038e6 <HAL_UART_Transmit>
	return len;
 800054e:	687b      	ldr	r3, [r7, #4]
}
 8000550:	4618      	mov	r0, r3
 8000552:	3710      	adds	r7, #16
 8000554:	46bd      	mov	sp, r7
 8000556:	bd80      	pop	{r7, pc}
 8000558:	2000016c 	.word	0x2000016c

0800055c <HAL_SPI_TxCpltCallback>:

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b082      	sub	sp, #8
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
	if (hspi->Instance == hspi5.Instance) {
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	681a      	ldr	r2, [r3, #0]
 8000568:	4b0d      	ldr	r3, [pc, #52]	; (80005a0 <HAL_SPI_TxCpltCallback+0x44>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	429a      	cmp	r2, r3
 800056e:	d109      	bne.n	8000584 <HAL_SPI_TxCpltCallback+0x28>
		master_transmit = 1;
 8000570:	4b0c      	ldr	r3, [pc, #48]	; (80005a4 <HAL_SPI_TxCpltCallback+0x48>)
 8000572:	2201      	movs	r2, #1
 8000574:	701a      	strb	r2, [r3, #0]
		slave_transmit = 0;
 8000576:	4b0c      	ldr	r3, [pc, #48]	; (80005a8 <HAL_SPI_TxCpltCallback+0x4c>)
 8000578:	2200      	movs	r2, #0
 800057a:	701a      	strb	r2, [r3, #0]
		printf("Master T callback\r\n");
 800057c:	480b      	ldr	r0, [pc, #44]	; (80005ac <HAL_SPI_TxCpltCallback+0x50>)
 800057e:	f004 fb1b 	bl	8004bb8 <puts>
	} else {
		slave_transmit = 1;
		master_transmit = 0;
		printf("Slave T callback\r\n");
	}
}
 8000582:	e008      	b.n	8000596 <HAL_SPI_TxCpltCallback+0x3a>
		slave_transmit = 1;
 8000584:	4b08      	ldr	r3, [pc, #32]	; (80005a8 <HAL_SPI_TxCpltCallback+0x4c>)
 8000586:	2201      	movs	r2, #1
 8000588:	701a      	strb	r2, [r3, #0]
		master_transmit = 0;
 800058a:	4b06      	ldr	r3, [pc, #24]	; (80005a4 <HAL_SPI_TxCpltCallback+0x48>)
 800058c:	2200      	movs	r2, #0
 800058e:	701a      	strb	r2, [r3, #0]
		printf("Slave T callback\r\n");
 8000590:	4807      	ldr	r0, [pc, #28]	; (80005b0 <HAL_SPI_TxCpltCallback+0x54>)
 8000592:	f004 fb11 	bl	8004bb8 <puts>
}
 8000596:	bf00      	nop
 8000598:	3708      	adds	r7, #8
 800059a:	46bd      	mov	sp, r7
 800059c:	bd80      	pop	{r7, pc}
 800059e:	bf00      	nop
 80005a0:	20000108 	.word	0x20000108
 80005a4:	200001f4 	.word	0x200001f4
 80005a8:	200001f5 	.word	0x200001f5
 80005ac:	080052fc 	.word	0x080052fc
 80005b0:	08005310 	.word	0x08005310

080005b4 <HAL_SPI_RxCpltCallback>:

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
	if (hspi->Instance == hspi5.Instance) {
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	681a      	ldr	r2, [r3, #0]
 80005c0:	4b07      	ldr	r3, [pc, #28]	; (80005e0 <HAL_SPI_RxCpltCallback+0x2c>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	429a      	cmp	r2, r3
 80005c6:	d103      	bne.n	80005d0 <HAL_SPI_RxCpltCallback+0x1c>
		//slave_transmit = 0;
		printf("Master R callback\r\n");
 80005c8:	4806      	ldr	r0, [pc, #24]	; (80005e4 <HAL_SPI_RxCpltCallback+0x30>)
 80005ca:	f004 faf5 	bl	8004bb8 <puts>
	} else {
		//master_transmit = 0;
		printf("Slave R callback\r\n");
	}
}
 80005ce:	e002      	b.n	80005d6 <HAL_SPI_RxCpltCallback+0x22>
		printf("Slave R callback\r\n");
 80005d0:	4805      	ldr	r0, [pc, #20]	; (80005e8 <HAL_SPI_RxCpltCallback+0x34>)
 80005d2:	f004 faf1 	bl	8004bb8 <puts>
}
 80005d6:	bf00      	nop
 80005d8:	3708      	adds	r7, #8
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	20000108 	.word	0x20000108
 80005e4:	08005324 	.word	0x08005324
 80005e8:	08005338 	.word	0x08005338

080005ec <HAL_SPI_ErrorCallback>:

void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b082      	sub	sp, #8
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
	if (hspi->Instance == hspi5.Instance) {
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	681a      	ldr	r2, [r3, #0]
 80005f8:	4b07      	ldr	r3, [pc, #28]	; (8000618 <HAL_SPI_ErrorCallback+0x2c>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	429a      	cmp	r2, r3
 80005fe:	d103      	bne.n	8000608 <HAL_SPI_ErrorCallback+0x1c>
			printf("Master er callback\r\n");
 8000600:	4806      	ldr	r0, [pc, #24]	; (800061c <HAL_SPI_ErrorCallback+0x30>)
 8000602:	f004 fad9 	bl	8004bb8 <puts>
	} else {
			printf("Slave er callback\r\n");
	}
}
 8000606:	e002      	b.n	800060e <HAL_SPI_ErrorCallback+0x22>
			printf("Slave er callback\r\n");
 8000608:	4805      	ldr	r0, [pc, #20]	; (8000620 <HAL_SPI_ErrorCallback+0x34>)
 800060a:	f004 fad5 	bl	8004bb8 <puts>
}
 800060e:	bf00      	nop
 8000610:	3708      	adds	r7, #8
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	20000108 	.word	0x20000108
 800061c:	0800534c 	.word	0x0800534c
 8000620:	08005360 	.word	0x08005360

08000624 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b082      	sub	sp, #8
 8000628:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800062a:	f000 fca4 	bl	8000f76 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800062e:	f000 f84b 	bl	80006c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000632:	f000 f94d 	bl	80008d0 <MX_GPIO_Init>
  MX_SPI2_Init();
 8000636:	f000 f8a3 	bl	8000780 <MX_SPI2_Init>
  MX_SPI5_Init();
 800063a:	f000 f8db 	bl	80007f4 <MX_SPI5_Init>
  MX_USART1_UART_Init();
 800063e:	f000 f917 	bl	8000870 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  uint16_t data = 0;
 8000642:	2300      	movs	r3, #0
 8000644:	80bb      	strh	r3, [r7, #4]
  uint8_t address = HYSTERESIS;
 8000646:	2305      	movs	r3, #5
 8000648:	70fb      	strb	r3, [r7, #3]
  uint8_t state = 0;
 800064a:	2300      	movs	r3, #0
 800064c:	71fb      	strb	r3, [r7, #7]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  slave_listen_for_reg_address(&hspi2);
 800064e:	481c      	ldr	r0, [pc, #112]	; (80006c0 <main+0x9c>)
 8000650:	f000 f9a6 	bl	80009a0 <slave_listen_for_reg_address>
	  my_spi_transmit_reg_adr(&hspi5, &address);
 8000654:	1cfb      	adds	r3, r7, #3
 8000656:	4619      	mov	r1, r3
 8000658:	481a      	ldr	r0, [pc, #104]	; (80006c4 <main+0xa0>)
 800065a:	f000 f96e 	bl	800093a <my_spi_transmit_reg_adr>
	  slave_set_reg_address(&hspi2);
 800065e:	4818      	ldr	r0, [pc, #96]	; (80006c0 <main+0x9c>)
 8000660:	f000 f9b2 	bl	80009c8 <slave_set_reg_address>
	  //
	  my_spi_listen_for_req_data(&hspi5, &data);
 8000664:	1d3b      	adds	r3, r7, #4
 8000666:	4619      	mov	r1, r3
 8000668:	4816      	ldr	r0, [pc, #88]	; (80006c4 <main+0xa0>)
 800066a:	f000 f977 	bl	800095c <my_spi_listen_for_req_data>
	  slave_transimt_reg_data(&hspi2);
 800066e:	4814      	ldr	r0, [pc, #80]	; (80006c0 <main+0x9c>)
 8000670:	f000 f9bc 	bl	80009ec <slave_transimt_reg_data>
	  while(hspi5.State != HAL_SPI_STATE_READY) {};
 8000674:	bf00      	nop
 8000676:	4b13      	ldr	r3, [pc, #76]	; (80006c4 <main+0xa0>)
 8000678:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800067c:	b2db      	uxtb	r3, r3
 800067e:	2b01      	cmp	r3, #1
 8000680:	d1f9      	bne.n	8000676 <main+0x52>
	  //
	  data = (uint16_t) (~0u) & HYSTERESIS_MASK;
 8000682:	f640 73ff 	movw	r3, #4095	; 0xfff
 8000686:	80bb      	strh	r3, [r7, #4]
	  slave_listen_for_reg_data(&hspi2);
 8000688:	480d      	ldr	r0, [pc, #52]	; (80006c0 <main+0x9c>)
 800068a:	f000 f9c9 	bl	8000a20 <slave_listen_for_reg_data>
	  my_spi_transmit_reg_data(&hspi5, &data);
 800068e:	1d3b      	adds	r3, r7, #4
 8000690:	4619      	mov	r1, r3
 8000692:	480c      	ldr	r0, [pc, #48]	; (80006c4 <main+0xa0>)
 8000694:	f000 f973 	bl	800097e <my_spi_transmit_reg_data>
	  slave_set_reg_data(&hspi2);
 8000698:	4809      	ldr	r0, [pc, #36]	; (80006c0 <main+0x9c>)
 800069a:	f000 f9d5 	bl	8000a48 <slave_set_reg_data>
	  //
	  my_spi_listen_for_req_data(&hspi5, &data);
 800069e:	1d3b      	adds	r3, r7, #4
 80006a0:	4619      	mov	r1, r3
 80006a2:	4808      	ldr	r0, [pc, #32]	; (80006c4 <main+0xa0>)
 80006a4:	f000 f95a 	bl	800095c <my_spi_listen_for_req_data>
	  slave_transimt_reg_data(&hspi2);
 80006a8:	4805      	ldr	r0, [pc, #20]	; (80006c0 <main+0x9c>)
 80006aa:	f000 f99f 	bl	80009ec <slave_transimt_reg_data>
	  while(hspi5.State != HAL_SPI_STATE_READY) {};
 80006ae:	bf00      	nop
 80006b0:	4b04      	ldr	r3, [pc, #16]	; (80006c4 <main+0xa0>)
 80006b2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80006b6:	b2db      	uxtb	r3, r3
 80006b8:	2b01      	cmp	r3, #1
 80006ba:	d1f9      	bne.n	80006b0 <main+0x8c>
	  slave_listen_for_reg_address(&hspi2);
 80006bc:	e7c7      	b.n	800064e <main+0x2a>
 80006be:	bf00      	nop
 80006c0:	200000a4 	.word	0x200000a4
 80006c4:	20000108 	.word	0x20000108

080006c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b094      	sub	sp, #80	; 0x50
 80006cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ce:	f107 031c 	add.w	r3, r7, #28
 80006d2:	2234      	movs	r2, #52	; 0x34
 80006d4:	2100      	movs	r1, #0
 80006d6:	4618      	mov	r0, r3
 80006d8:	f004 fb4e 	bl	8004d78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006dc:	f107 0308 	add.w	r3, r7, #8
 80006e0:	2200      	movs	r2, #0
 80006e2:	601a      	str	r2, [r3, #0]
 80006e4:	605a      	str	r2, [r3, #4]
 80006e6:	609a      	str	r2, [r3, #8]
 80006e8:	60da      	str	r2, [r3, #12]
 80006ea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ec:	4b22      	ldr	r3, [pc, #136]	; (8000778 <SystemClock_Config+0xb0>)
 80006ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f0:	4a21      	ldr	r2, [pc, #132]	; (8000778 <SystemClock_Config+0xb0>)
 80006f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006f6:	6413      	str	r3, [r2, #64]	; 0x40
 80006f8:	4b1f      	ldr	r3, [pc, #124]	; (8000778 <SystemClock_Config+0xb0>)
 80006fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000700:	607b      	str	r3, [r7, #4]
 8000702:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000704:	4b1d      	ldr	r3, [pc, #116]	; (800077c <SystemClock_Config+0xb4>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800070c:	4a1b      	ldr	r2, [pc, #108]	; (800077c <SystemClock_Config+0xb4>)
 800070e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000712:	6013      	str	r3, [r2, #0]
 8000714:	4b19      	ldr	r3, [pc, #100]	; (800077c <SystemClock_Config+0xb4>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800071c:	603b      	str	r3, [r7, #0]
 800071e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000720:	2302      	movs	r3, #2
 8000722:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000724:	2301      	movs	r3, #1
 8000726:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000728:	2310      	movs	r3, #16
 800072a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800072c:	2300      	movs	r3, #0
 800072e:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000730:	f107 031c 	add.w	r3, r7, #28
 8000734:	4618      	mov	r0, r3
 8000736:	f000 ffcb 	bl	80016d0 <HAL_RCC_OscConfig>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8000740:	f000 f8f6 	bl	8000930 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000744:	230f      	movs	r3, #15
 8000746:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000748:	2300      	movs	r3, #0
 800074a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800074c:	2300      	movs	r3, #0
 800074e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000750:	2300      	movs	r3, #0
 8000752:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000754:	2300      	movs	r3, #0
 8000756:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000758:	f107 0308 	add.w	r3, r7, #8
 800075c:	2100      	movs	r1, #0
 800075e:	4618      	mov	r0, r3
 8000760:	f001 fa64 	bl	8001c2c <HAL_RCC_ClockConfig>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800076a:	f000 f8e1 	bl	8000930 <Error_Handler>
  }
}
 800076e:	bf00      	nop
 8000770:	3750      	adds	r7, #80	; 0x50
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	40023800 	.word	0x40023800
 800077c:	40007000 	.word	0x40007000

08000780 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000784:	4b19      	ldr	r3, [pc, #100]	; (80007ec <MX_SPI2_Init+0x6c>)
 8000786:	4a1a      	ldr	r2, [pc, #104]	; (80007f0 <MX_SPI2_Init+0x70>)
 8000788:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 800078a:	4b18      	ldr	r3, [pc, #96]	; (80007ec <MX_SPI2_Init+0x6c>)
 800078c:	2200      	movs	r2, #0
 800078e:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000790:	4b16      	ldr	r3, [pc, #88]	; (80007ec <MX_SPI2_Init+0x6c>)
 8000792:	2200      	movs	r2, #0
 8000794:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8000796:	4b15      	ldr	r3, [pc, #84]	; (80007ec <MX_SPI2_Init+0x6c>)
 8000798:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 800079c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800079e:	4b13      	ldr	r3, [pc, #76]	; (80007ec <MX_SPI2_Init+0x6c>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007a4:	4b11      	ldr	r3, [pc, #68]	; (80007ec <MX_SPI2_Init+0x6c>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80007aa:	4b10      	ldr	r3, [pc, #64]	; (80007ec <MX_SPI2_Init+0x6c>)
 80007ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007b0:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007b2:	4b0e      	ldr	r3, [pc, #56]	; (80007ec <MX_SPI2_Init+0x6c>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80007b8:	4b0c      	ldr	r3, [pc, #48]	; (80007ec <MX_SPI2_Init+0x6c>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007be:	4b0b      	ldr	r3, [pc, #44]	; (80007ec <MX_SPI2_Init+0x6c>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80007c4:	4b09      	ldr	r3, [pc, #36]	; (80007ec <MX_SPI2_Init+0x6c>)
 80007c6:	2207      	movs	r2, #7
 80007c8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80007ca:	4b08      	ldr	r3, [pc, #32]	; (80007ec <MX_SPI2_Init+0x6c>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80007d0:	4b06      	ldr	r3, [pc, #24]	; (80007ec <MX_SPI2_Init+0x6c>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80007d6:	4805      	ldr	r0, [pc, #20]	; (80007ec <MX_SPI2_Init+0x6c>)
 80007d8:	f002 f836 	bl	8002848 <HAL_SPI_Init>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <MX_SPI2_Init+0x66>
  {
    Error_Handler();
 80007e2:	f000 f8a5 	bl	8000930 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80007e6:	bf00      	nop
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	200000a4 	.word	0x200000a4
 80007f0:	40003800 	.word	0x40003800

080007f4 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 80007f8:	4b1b      	ldr	r3, [pc, #108]	; (8000868 <MX_SPI5_Init+0x74>)
 80007fa:	4a1c      	ldr	r2, [pc, #112]	; (800086c <MX_SPI5_Init+0x78>)
 80007fc:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80007fe:	4b1a      	ldr	r3, [pc, #104]	; (8000868 <MX_SPI5_Init+0x74>)
 8000800:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000804:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8000806:	4b18      	ldr	r3, [pc, #96]	; (8000868 <MX_SPI5_Init+0x74>)
 8000808:	2200      	movs	r2, #0
 800080a:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_16BIT;
 800080c:	4b16      	ldr	r3, [pc, #88]	; (8000868 <MX_SPI5_Init+0x74>)
 800080e:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 8000812:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000814:	4b14      	ldr	r3, [pc, #80]	; (8000868 <MX_SPI5_Init+0x74>)
 8000816:	2200      	movs	r2, #0
 8000818:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 800081a:	4b13      	ldr	r3, [pc, #76]	; (8000868 <MX_SPI5_Init+0x74>)
 800081c:	2200      	movs	r2, #0
 800081e:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8000820:	4b11      	ldr	r3, [pc, #68]	; (8000868 <MX_SPI5_Init+0x74>)
 8000822:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000826:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000828:	4b0f      	ldr	r3, [pc, #60]	; (8000868 <MX_SPI5_Init+0x74>)
 800082a:	2200      	movs	r2, #0
 800082c:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800082e:	4b0e      	ldr	r3, [pc, #56]	; (8000868 <MX_SPI5_Init+0x74>)
 8000830:	2200      	movs	r2, #0
 8000832:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8000834:	4b0c      	ldr	r3, [pc, #48]	; (8000868 <MX_SPI5_Init+0x74>)
 8000836:	2200      	movs	r2, #0
 8000838:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800083a:	4b0b      	ldr	r3, [pc, #44]	; (8000868 <MX_SPI5_Init+0x74>)
 800083c:	2200      	movs	r2, #0
 800083e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 7;
 8000840:	4b09      	ldr	r3, [pc, #36]	; (8000868 <MX_SPI5_Init+0x74>)
 8000842:	2207      	movs	r2, #7
 8000844:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi5.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000846:	4b08      	ldr	r3, [pc, #32]	; (8000868 <MX_SPI5_Init+0x74>)
 8000848:	2200      	movs	r2, #0
 800084a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800084c:	4b06      	ldr	r3, [pc, #24]	; (8000868 <MX_SPI5_Init+0x74>)
 800084e:	2208      	movs	r2, #8
 8000850:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8000852:	4805      	ldr	r0, [pc, #20]	; (8000868 <MX_SPI5_Init+0x74>)
 8000854:	f001 fff8 	bl	8002848 <HAL_SPI_Init>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <MX_SPI5_Init+0x6e>
  {
    Error_Handler();
 800085e:	f000 f867 	bl	8000930 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8000862:	bf00      	nop
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	20000108 	.word	0x20000108
 800086c:	40015000 	.word	0x40015000

08000870 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000874:	4b14      	ldr	r3, [pc, #80]	; (80008c8 <MX_USART1_UART_Init+0x58>)
 8000876:	4a15      	ldr	r2, [pc, #84]	; (80008cc <MX_USART1_UART_Init+0x5c>)
 8000878:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800087a:	4b13      	ldr	r3, [pc, #76]	; (80008c8 <MX_USART1_UART_Init+0x58>)
 800087c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000880:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000882:	4b11      	ldr	r3, [pc, #68]	; (80008c8 <MX_USART1_UART_Init+0x58>)
 8000884:	2200      	movs	r2, #0
 8000886:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000888:	4b0f      	ldr	r3, [pc, #60]	; (80008c8 <MX_USART1_UART_Init+0x58>)
 800088a:	2200      	movs	r2, #0
 800088c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800088e:	4b0e      	ldr	r3, [pc, #56]	; (80008c8 <MX_USART1_UART_Init+0x58>)
 8000890:	2200      	movs	r2, #0
 8000892:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000894:	4b0c      	ldr	r3, [pc, #48]	; (80008c8 <MX_USART1_UART_Init+0x58>)
 8000896:	220c      	movs	r2, #12
 8000898:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800089a:	4b0b      	ldr	r3, [pc, #44]	; (80008c8 <MX_USART1_UART_Init+0x58>)
 800089c:	2200      	movs	r2, #0
 800089e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008a0:	4b09      	ldr	r3, [pc, #36]	; (80008c8 <MX_USART1_UART_Init+0x58>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008a6:	4b08      	ldr	r3, [pc, #32]	; (80008c8 <MX_USART1_UART_Init+0x58>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008ac:	4b06      	ldr	r3, [pc, #24]	; (80008c8 <MX_USART1_UART_Init+0x58>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008b2:	4805      	ldr	r0, [pc, #20]	; (80008c8 <MX_USART1_UART_Init+0x58>)
 80008b4:	f002 ffc9 	bl	800384a <HAL_UART_Init>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80008be:	f000 f837 	bl	8000930 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80008c2:	bf00      	nop
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	2000016c 	.word	0x2000016c
 80008cc:	40011000 	.word	0x40011000

080008d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	b085      	sub	sp, #20
 80008d4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008d6:	4b15      	ldr	r3, [pc, #84]	; (800092c <MX_GPIO_Init+0x5c>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008da:	4a14      	ldr	r2, [pc, #80]	; (800092c <MX_GPIO_Init+0x5c>)
 80008dc:	f043 0302 	orr.w	r3, r3, #2
 80008e0:	6313      	str	r3, [r2, #48]	; 0x30
 80008e2:	4b12      	ldr	r3, [pc, #72]	; (800092c <MX_GPIO_Init+0x5c>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e6:	f003 0302 	and.w	r3, r3, #2
 80008ea:	60fb      	str	r3, [r7, #12]
 80008ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ee:	4b0f      	ldr	r3, [pc, #60]	; (800092c <MX_GPIO_Init+0x5c>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f2:	4a0e      	ldr	r2, [pc, #56]	; (800092c <MX_GPIO_Init+0x5c>)
 80008f4:	f043 0301 	orr.w	r3, r3, #1
 80008f8:	6313      	str	r3, [r2, #48]	; 0x30
 80008fa:	4b0c      	ldr	r3, [pc, #48]	; (800092c <MX_GPIO_Init+0x5c>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fe:	f003 0301 	and.w	r3, r3, #1
 8000902:	60bb      	str	r3, [r7, #8]
 8000904:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000906:	4b09      	ldr	r3, [pc, #36]	; (800092c <MX_GPIO_Init+0x5c>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090a:	4a08      	ldr	r2, [pc, #32]	; (800092c <MX_GPIO_Init+0x5c>)
 800090c:	f043 0320 	orr.w	r3, r3, #32
 8000910:	6313      	str	r3, [r2, #48]	; 0x30
 8000912:	4b06      	ldr	r3, [pc, #24]	; (800092c <MX_GPIO_Init+0x5c>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000916:	f003 0320 	and.w	r3, r3, #32
 800091a:	607b      	str	r3, [r7, #4]
 800091c:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800091e:	bf00      	nop
 8000920:	3714      	adds	r7, #20
 8000922:	46bd      	mov	sp, r7
 8000924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000928:	4770      	bx	lr
 800092a:	bf00      	nop
 800092c:	40023800 	.word	0x40023800

08000930 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000934:	b672      	cpsid	i
}
 8000936:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000938:	e7fe      	b.n	8000938 <Error_Handler+0x8>

0800093a <my_spi_transmit_reg_adr>:

#include "my_spi_driver.h"

// Function to set register address
uint16_t my_spi_transmit_reg_adr(SPI_HandleTypeDef* hspi, uint8_t* address)
{
 800093a:	b580      	push	{r7, lr}
 800093c:	b084      	sub	sp, #16
 800093e:	af00      	add	r7, sp, #0
 8000940:	6078      	str	r0, [r7, #4]
 8000942:	6039      	str	r1, [r7, #0]
	uint16_t error;
	error = HAL_SPI_Transmit_IT(hspi, (uint8_t*) address, 1);
 8000944:	2201      	movs	r2, #1
 8000946:	6839      	ldr	r1, [r7, #0]
 8000948:	6878      	ldr	r0, [r7, #4]
 800094a:	f002 f829 	bl	80029a0 <HAL_SPI_Transmit_IT>
 800094e:	4603      	mov	r3, r0
 8000950:	81fb      	strh	r3, [r7, #14]
	return error;
 8000952:	89fb      	ldrh	r3, [r7, #14]
}
 8000954:	4618      	mov	r0, r3
 8000956:	3710      	adds	r7, #16
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}

0800095c <my_spi_listen_for_req_data>:

// Function to get register data
uint16_t my_spi_listen_for_req_data(SPI_HandleTypeDef* hspi, uint16_t* data)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b084      	sub	sp, #16
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
 8000964:	6039      	str	r1, [r7, #0]
	uint16_t error;
	error = HAL_SPI_Receive_IT(hspi, (uint8_t*) data, 2);
 8000966:	2202      	movs	r2, #2
 8000968:	6839      	ldr	r1, [r7, #0]
 800096a:	6878      	ldr	r0, [r7, #4]
 800096c:	f002 f8a6 	bl	8002abc <HAL_SPI_Receive_IT>
 8000970:	4603      	mov	r3, r0
 8000972:	81fb      	strh	r3, [r7, #14]
	return error;
 8000974:	89fb      	ldrh	r3, [r7, #14]
}
 8000976:	4618      	mov	r0, r3
 8000978:	3710      	adds	r7, #16
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}

0800097e <my_spi_transmit_reg_data>:

// Function to set register data
uint16_t my_spi_transmit_reg_data(SPI_HandleTypeDef* hspi, uint16_t* data)
{
 800097e:	b580      	push	{r7, lr}
 8000980:	b084      	sub	sp, #16
 8000982:	af00      	add	r7, sp, #0
 8000984:	6078      	str	r0, [r7, #4]
 8000986:	6039      	str	r1, [r7, #0]
	uint16_t error;
	error = HAL_SPI_Transmit_IT(hspi, (uint8_t*) data, 2);
 8000988:	2202      	movs	r2, #2
 800098a:	6839      	ldr	r1, [r7, #0]
 800098c:	6878      	ldr	r0, [r7, #4]
 800098e:	f002 f807 	bl	80029a0 <HAL_SPI_Transmit_IT>
 8000992:	4603      	mov	r3, r0
 8000994:	81fb      	strh	r3, [r7, #14]
	return error;
 8000996:	89fb      	ldrh	r3, [r7, #14]
}
 8000998:	4618      	mov	r0, r3
 800099a:	3710      	adds	r7, #16
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}

080009a0 <slave_listen_for_reg_address>:
/*-------------------------------------*/

/*----------------FUNCTIONS FOR SPI COMUNICATION-----------------*/
// Resiving address of a register that master want to get/set
uint16_t slave_listen_for_reg_address(SPI_HandleTypeDef *hspi)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b084      	sub	sp, #16
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef error;
	error = HAL_SPI_Receive_IT(hspi, &address, 1);
 80009a8:	2201      	movs	r2, #1
 80009aa:	4906      	ldr	r1, [pc, #24]	; (80009c4 <slave_listen_for_reg_address+0x24>)
 80009ac:	6878      	ldr	r0, [r7, #4]
 80009ae:	f002 f885 	bl	8002abc <HAL_SPI_Receive_IT>
 80009b2:	4603      	mov	r3, r0
 80009b4:	73fb      	strb	r3, [r7, #15]
	return (uint16_t) error;
 80009b6:	7bfb      	ldrb	r3, [r7, #15]
 80009b8:	b29b      	uxth	r3, r3
}
 80009ba:	4618      	mov	r0, r3
 80009bc:	3710      	adds	r7, #16
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	200001f6 	.word	0x200001f6

080009c8 <slave_set_reg_address>:

uint16_t slave_set_reg_address(SPI_HandleTypeDef *hspi)
{
 80009c8:	b480      	push	{r7}
 80009ca:	b083      	sub	sp, #12
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
	while(hspi->State != HAL_SPI_STATE_READY){};
 80009d0:	bf00      	nop
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80009d8:	b2db      	uxtb	r3, r3
 80009da:	2b01      	cmp	r3, #1
 80009dc:	d1f9      	bne.n	80009d2 <slave_set_reg_address+0xa>
}
 80009de:	bf00      	nop
 80009e0:	4618      	mov	r0, r3
 80009e2:	370c      	adds	r7, #12
 80009e4:	46bd      	mov	sp, r7
 80009e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ea:	4770      	bx	lr

080009ec <slave_transimt_reg_data>:

// Transmitting register to master
uint16_t slave_transimt_reg_data(SPI_HandleTypeDef *hspi)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b084      	sub	sp, #16
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
	uint16_t Ldata = get_reg(address);
 80009f4:	4b09      	ldr	r3, [pc, #36]	; (8000a1c <slave_transimt_reg_data+0x30>)
 80009f6:	781b      	ldrb	r3, [r3, #0]
 80009f8:	4618      	mov	r0, r3
 80009fa:	f000 f841 	bl	8000a80 <get_reg>
 80009fe:	4603      	mov	r3, r0
 8000a00:	81fb      	strh	r3, [r7, #14]
	return (uint16_t) HAL_SPI_Transmit_IT(hspi, (uint8_t*) &Ldata, 2);
 8000a02:	f107 030e 	add.w	r3, r7, #14
 8000a06:	2202      	movs	r2, #2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	6878      	ldr	r0, [r7, #4]
 8000a0c:	f001 ffc8 	bl	80029a0 <HAL_SPI_Transmit_IT>
 8000a10:	4603      	mov	r3, r0
 8000a12:	b29b      	uxth	r3, r3
}
 8000a14:	4618      	mov	r0, r3
 8000a16:	3710      	adds	r7, #16
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	200001f6 	.word	0x200001f6

08000a20 <slave_listen_for_reg_data>:

// Resiving register value from master to set it to desired register
uint16_t slave_listen_for_reg_data(SPI_HandleTypeDef *hspi)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b084      	sub	sp, #16
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef err;
	err = HAL_SPI_Receive_IT(hspi, (uint8_t*) &data, 2);
 8000a28:	2202      	movs	r2, #2
 8000a2a:	4906      	ldr	r1, [pc, #24]	; (8000a44 <slave_listen_for_reg_data+0x24>)
 8000a2c:	6878      	ldr	r0, [r7, #4]
 8000a2e:	f002 f845 	bl	8002abc <HAL_SPI_Receive_IT>
 8000a32:	4603      	mov	r3, r0
 8000a34:	73fb      	strb	r3, [r7, #15]
	return (uint16_t) err;
 8000a36:	7bfb      	ldrb	r3, [r7, #15]
 8000a38:	b29b      	uxth	r3, r3
}
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	3710      	adds	r7, #16
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	200001f8 	.word	0x200001f8

08000a48 <slave_set_reg_data>:

uint16_t slave_set_reg_data(SPI_HandleTypeDef *hspi)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b082      	sub	sp, #8
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
	while (hspi->State != HAL_SPI_STATE_READY) {};
 8000a50:	bf00      	nop
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8000a58:	b2db      	uxtb	r3, r3
 8000a5a:	2b01      	cmp	r3, #1
 8000a5c:	d1f9      	bne.n	8000a52 <slave_set_reg_data+0xa>
	return (uint16_t) set_reg__(address, data);
 8000a5e:	4b06      	ldr	r3, [pc, #24]	; (8000a78 <slave_set_reg_data+0x30>)
 8000a60:	781b      	ldrb	r3, [r3, #0]
 8000a62:	4a06      	ldr	r2, [pc, #24]	; (8000a7c <slave_set_reg_data+0x34>)
 8000a64:	8812      	ldrh	r2, [r2, #0]
 8000a66:	4611      	mov	r1, r2
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f000 f823 	bl	8000ab4 <set_reg__>
 8000a6e:	4603      	mov	r3, r0
}
 8000a70:	4618      	mov	r0, r3
 8000a72:	3708      	adds	r7, #8
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	200001f6 	.word	0x200001f6
 8000a7c:	200001f8 	.word	0x200001f8

08000a80 <get_reg>:
}
/*----------------------------------------------------------------*/

/*--------------Function helpers----------------*/
static uint16_t get_reg(uint8_t adress)
{
 8000a80:	b480      	push	{r7}
 8000a82:	b085      	sub	sp, #20
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	4603      	mov	r3, r0
 8000a88:	71fb      	strb	r3, [r7, #7]
	if (adress >= 0 && adress <= 7) {
 8000a8a:	79fb      	ldrb	r3, [r7, #7]
 8000a8c:	2b07      	cmp	r3, #7
 8000a8e:	d806      	bhi.n	8000a9e <get_reg+0x1e>
		uint16_t reg = regs[adress];
 8000a90:	79fb      	ldrb	r3, [r7, #7]
 8000a92:	4a07      	ldr	r2, [pc, #28]	; (8000ab0 <get_reg+0x30>)
 8000a94:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a98:	81fb      	strh	r3, [r7, #14]
		return reg;
 8000a9a:	89fb      	ldrh	r3, [r7, #14]
 8000a9c:	e001      	b.n	8000aa2 <get_reg+0x22>
	}
	return (uint16_t) WRONG_ADRESS;
 8000a9e:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	3714      	adds	r7, #20
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop
 8000ab0:	20000000 	.word	0x20000000

08000ab4 <set_reg__>:

static uint16_t set_reg__(uint8_t adress, uint16_t data)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	b085      	sub	sp, #20
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	4603      	mov	r3, r0
 8000abc:	460a      	mov	r2, r1
 8000abe:	71fb      	strb	r3, [r7, #7]
 8000ac0:	4613      	mov	r3, r2
 8000ac2:	80bb      	strh	r3, [r7, #4]
	if (data & (~masks[adress])) {
 8000ac4:	88ba      	ldrh	r2, [r7, #4]
 8000ac6:	79fb      	ldrb	r3, [r7, #7]
 8000ac8:	490b      	ldr	r1, [pc, #44]	; (8000af8 <set_reg__+0x44>)
 8000aca:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000ace:	43db      	mvns	r3, r3
 8000ad0:	4013      	ands	r3, r2
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d004      	beq.n	8000ae0 <set_reg__+0x2c>
		uint16_t err = (uint16_t) WRONG_VAL;
 8000ad6:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8000ada:	81fb      	strh	r3, [r7, #14]
		return err;
 8000adc:	89fb      	ldrh	r3, [r7, #14]
 8000ade:	e005      	b.n	8000aec <set_reg__+0x38>
	}
	regs[adress] = data;
 8000ae0:	79fb      	ldrb	r3, [r7, #7]
 8000ae2:	4906      	ldr	r1, [pc, #24]	; (8000afc <set_reg__+0x48>)
 8000ae4:	88ba      	ldrh	r2, [r7, #4]
 8000ae6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	return 0;
 8000aea:	2300      	movs	r3, #0
}
 8000aec:	4618      	mov	r0, r3
 8000aee:	3714      	adds	r7, #20
 8000af0:	46bd      	mov	sp, r7
 8000af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af6:	4770      	bx	lr
 8000af8:	20000010 	.word	0x20000010
 8000afc:	20000000 	.word	0x20000000

08000b00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	b083      	sub	sp, #12
 8000b04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000b06:	4b0f      	ldr	r3, [pc, #60]	; (8000b44 <HAL_MspInit+0x44>)
 8000b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b0a:	4a0e      	ldr	r2, [pc, #56]	; (8000b44 <HAL_MspInit+0x44>)
 8000b0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b10:	6413      	str	r3, [r2, #64]	; 0x40
 8000b12:	4b0c      	ldr	r3, [pc, #48]	; (8000b44 <HAL_MspInit+0x44>)
 8000b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b1a:	607b      	str	r3, [r7, #4]
 8000b1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b1e:	4b09      	ldr	r3, [pc, #36]	; (8000b44 <HAL_MspInit+0x44>)
 8000b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b22:	4a08      	ldr	r2, [pc, #32]	; (8000b44 <HAL_MspInit+0x44>)
 8000b24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b28:	6453      	str	r3, [r2, #68]	; 0x44
 8000b2a:	4b06      	ldr	r3, [pc, #24]	; (8000b44 <HAL_MspInit+0x44>)
 8000b2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b32:	603b      	str	r3, [r7, #0]
 8000b34:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b36:	bf00      	nop
 8000b38:	370c      	adds	r7, #12
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b40:	4770      	bx	lr
 8000b42:	bf00      	nop
 8000b44:	40023800 	.word	0x40023800

08000b48 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b08c      	sub	sp, #48	; 0x30
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b50:	f107 031c 	add.w	r3, r7, #28
 8000b54:	2200      	movs	r2, #0
 8000b56:	601a      	str	r2, [r3, #0]
 8000b58:	605a      	str	r2, [r3, #4]
 8000b5a:	609a      	str	r2, [r3, #8]
 8000b5c:	60da      	str	r2, [r3, #12]
 8000b5e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	4a45      	ldr	r2, [pc, #276]	; (8000c7c <HAL_SPI_MspInit+0x134>)
 8000b66:	4293      	cmp	r3, r2
 8000b68:	d14e      	bne.n	8000c08 <HAL_SPI_MspInit+0xc0>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000b6a:	4b45      	ldr	r3, [pc, #276]	; (8000c80 <HAL_SPI_MspInit+0x138>)
 8000b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b6e:	4a44      	ldr	r2, [pc, #272]	; (8000c80 <HAL_SPI_MspInit+0x138>)
 8000b70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b74:	6413      	str	r3, [r2, #64]	; 0x40
 8000b76:	4b42      	ldr	r3, [pc, #264]	; (8000c80 <HAL_SPI_MspInit+0x138>)
 8000b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b7e:	61bb      	str	r3, [r7, #24]
 8000b80:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b82:	4b3f      	ldr	r3, [pc, #252]	; (8000c80 <HAL_SPI_MspInit+0x138>)
 8000b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b86:	4a3e      	ldr	r2, [pc, #248]	; (8000c80 <HAL_SPI_MspInit+0x138>)
 8000b88:	f043 0301 	orr.w	r3, r3, #1
 8000b8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b8e:	4b3c      	ldr	r3, [pc, #240]	; (8000c80 <HAL_SPI_MspInit+0x138>)
 8000b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b92:	f003 0301 	and.w	r3, r3, #1
 8000b96:	617b      	str	r3, [r7, #20]
 8000b98:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b9a:	4b39      	ldr	r3, [pc, #228]	; (8000c80 <HAL_SPI_MspInit+0x138>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9e:	4a38      	ldr	r2, [pc, #224]	; (8000c80 <HAL_SPI_MspInit+0x138>)
 8000ba0:	f043 0302 	orr.w	r3, r3, #2
 8000ba4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba6:	4b36      	ldr	r3, [pc, #216]	; (8000c80 <HAL_SPI_MspInit+0x138>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000baa:	f003 0302 	and.w	r3, r3, #2
 8000bae:	613b      	str	r3, [r7, #16]
 8000bb0:	693b      	ldr	r3, [r7, #16]
    /**SPI2 GPIO Configuration
    PA12     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000bb2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb8:	2302      	movs	r3, #2
 8000bba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bc0:	2303      	movs	r3, #3
 8000bc2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000bc4:	2305      	movs	r3, #5
 8000bc6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bc8:	f107 031c 	add.w	r3, r7, #28
 8000bcc:	4619      	mov	r1, r3
 8000bce:	482d      	ldr	r0, [pc, #180]	; (8000c84 <HAL_SPI_MspInit+0x13c>)
 8000bd0:	f000 fbd2 	bl	8001378 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000bd4:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000bd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bda:	2302      	movs	r3, #2
 8000bdc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bde:	2300      	movs	r3, #0
 8000be0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000be2:	2303      	movs	r3, #3
 8000be4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000be6:	2305      	movs	r3, #5
 8000be8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bea:	f107 031c 	add.w	r3, r7, #28
 8000bee:	4619      	mov	r1, r3
 8000bf0:	4825      	ldr	r0, [pc, #148]	; (8000c88 <HAL_SPI_MspInit+0x140>)
 8000bf2:	f000 fbc1 	bl	8001378 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	2100      	movs	r1, #0
 8000bfa:	2024      	movs	r0, #36	; 0x24
 8000bfc:	f000 faf3 	bl	80011e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8000c00:	2024      	movs	r0, #36	; 0x24
 8000c02:	f000 fb0c 	bl	800121e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8000c06:	e035      	b.n	8000c74 <HAL_SPI_MspInit+0x12c>
  else if(hspi->Instance==SPI5)
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4a1f      	ldr	r2, [pc, #124]	; (8000c8c <HAL_SPI_MspInit+0x144>)
 8000c0e:	4293      	cmp	r3, r2
 8000c10:	d130      	bne.n	8000c74 <HAL_SPI_MspInit+0x12c>
    __HAL_RCC_SPI5_CLK_ENABLE();
 8000c12:	4b1b      	ldr	r3, [pc, #108]	; (8000c80 <HAL_SPI_MspInit+0x138>)
 8000c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c16:	4a1a      	ldr	r2, [pc, #104]	; (8000c80 <HAL_SPI_MspInit+0x138>)
 8000c18:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000c1c:	6453      	str	r3, [r2, #68]	; 0x44
 8000c1e:	4b18      	ldr	r3, [pc, #96]	; (8000c80 <HAL_SPI_MspInit+0x138>)
 8000c20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c26:	60fb      	str	r3, [r7, #12]
 8000c28:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c2a:	4b15      	ldr	r3, [pc, #84]	; (8000c80 <HAL_SPI_MspInit+0x138>)
 8000c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2e:	4a14      	ldr	r2, [pc, #80]	; (8000c80 <HAL_SPI_MspInit+0x138>)
 8000c30:	f043 0320 	orr.w	r3, r3, #32
 8000c34:	6313      	str	r3, [r2, #48]	; 0x30
 8000c36:	4b12      	ldr	r3, [pc, #72]	; (8000c80 <HAL_SPI_MspInit+0x138>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3a:	f003 0320 	and.w	r3, r3, #32
 8000c3e:	60bb      	str	r3, [r7, #8]
 8000c40:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_8;
 8000c42:	f44f 7360 	mov.w	r3, #896	; 0x380
 8000c46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c48:	2302      	movs	r3, #2
 8000c4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c50:	2303      	movs	r3, #3
 8000c52:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8000c54:	2305      	movs	r3, #5
 8000c56:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000c58:	f107 031c 	add.w	r3, r7, #28
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	480c      	ldr	r0, [pc, #48]	; (8000c90 <HAL_SPI_MspInit+0x148>)
 8000c60:	f000 fb8a 	bl	8001378 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI5_IRQn, 0, 0);
 8000c64:	2200      	movs	r2, #0
 8000c66:	2100      	movs	r1, #0
 8000c68:	2055      	movs	r0, #85	; 0x55
 8000c6a:	f000 fabc 	bl	80011e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI5_IRQn);
 8000c6e:	2055      	movs	r0, #85	; 0x55
 8000c70:	f000 fad5 	bl	800121e <HAL_NVIC_EnableIRQ>
}
 8000c74:	bf00      	nop
 8000c76:	3730      	adds	r7, #48	; 0x30
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	40003800 	.word	0x40003800
 8000c80:	40023800 	.word	0x40023800
 8000c84:	40020000 	.word	0x40020000
 8000c88:	40020400 	.word	0x40020400
 8000c8c:	40015000 	.word	0x40015000
 8000c90:	40021400 	.word	0x40021400

08000c94 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b0ae      	sub	sp, #184	; 0xb8
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c9c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	601a      	str	r2, [r3, #0]
 8000ca4:	605a      	str	r2, [r3, #4]
 8000ca6:	609a      	str	r2, [r3, #8]
 8000ca8:	60da      	str	r2, [r3, #12]
 8000caa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000cac:	f107 0314 	add.w	r3, r7, #20
 8000cb0:	2290      	movs	r2, #144	; 0x90
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f004 f85f 	bl	8004d78 <memset>
  if(huart->Instance==USART1)
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	4a25      	ldr	r2, [pc, #148]	; (8000d54 <HAL_UART_MspInit+0xc0>)
 8000cc0:	4293      	cmp	r3, r2
 8000cc2:	d142      	bne.n	8000d4a <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000cc4:	2340      	movs	r3, #64	; 0x40
 8000cc6:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ccc:	f107 0314 	add.w	r3, r7, #20
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f001 f991 	bl	8001ff8 <HAL_RCCEx_PeriphCLKConfig>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d001      	beq.n	8000ce0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000cdc:	f7ff fe28 	bl	8000930 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ce0:	4b1d      	ldr	r3, [pc, #116]	; (8000d58 <HAL_UART_MspInit+0xc4>)
 8000ce2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ce4:	4a1c      	ldr	r2, [pc, #112]	; (8000d58 <HAL_UART_MspInit+0xc4>)
 8000ce6:	f043 0310 	orr.w	r3, r3, #16
 8000cea:	6453      	str	r3, [r2, #68]	; 0x44
 8000cec:	4b1a      	ldr	r3, [pc, #104]	; (8000d58 <HAL_UART_MspInit+0xc4>)
 8000cee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cf0:	f003 0310 	and.w	r3, r3, #16
 8000cf4:	613b      	str	r3, [r7, #16]
 8000cf6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cf8:	4b17      	ldr	r3, [pc, #92]	; (8000d58 <HAL_UART_MspInit+0xc4>)
 8000cfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfc:	4a16      	ldr	r2, [pc, #88]	; (8000d58 <HAL_UART_MspInit+0xc4>)
 8000cfe:	f043 0302 	orr.w	r3, r3, #2
 8000d02:	6313      	str	r3, [r2, #48]	; 0x30
 8000d04:	4b14      	ldr	r3, [pc, #80]	; (8000d58 <HAL_UART_MspInit+0xc4>)
 8000d06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d08:	f003 0302 	and.w	r3, r3, #2
 8000d0c:	60fb      	str	r3, [r7, #12]
 8000d0e:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8000d10:	23c0      	movs	r3, #192	; 0xc0
 8000d12:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d16:	2302      	movs	r3, #2
 8000d18:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d22:	2303      	movs	r3, #3
 8000d24:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000d28:	2307      	movs	r3, #7
 8000d2a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d2e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000d32:	4619      	mov	r1, r3
 8000d34:	4809      	ldr	r0, [pc, #36]	; (8000d5c <HAL_UART_MspInit+0xc8>)
 8000d36:	f000 fb1f 	bl	8001378 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	2025      	movs	r0, #37	; 0x25
 8000d40:	f000 fa51 	bl	80011e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000d44:	2025      	movs	r0, #37	; 0x25
 8000d46:	f000 fa6a 	bl	800121e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000d4a:	bf00      	nop
 8000d4c:	37b8      	adds	r7, #184	; 0xb8
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	40011000 	.word	0x40011000
 8000d58:	40023800 	.word	0x40023800
 8000d5c:	40020400 	.word	0x40020400

08000d60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d64:	e7fe      	b.n	8000d64 <NMI_Handler+0x4>

08000d66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d66:	b480      	push	{r7}
 8000d68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d6a:	e7fe      	b.n	8000d6a <HardFault_Handler+0x4>

08000d6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d70:	e7fe      	b.n	8000d70 <MemManage_Handler+0x4>

08000d72 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d72:	b480      	push	{r7}
 8000d74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d76:	e7fe      	b.n	8000d76 <BusFault_Handler+0x4>

08000d78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d7c:	e7fe      	b.n	8000d7c <UsageFault_Handler+0x4>

08000d7e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d7e:	b480      	push	{r7}
 8000d80:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d82:	bf00      	nop
 8000d84:	46bd      	mov	sp, r7
 8000d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8a:	4770      	bx	lr

08000d8c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d90:	bf00      	nop
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr

08000d9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d9a:	b480      	push	{r7}
 8000d9c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d9e:	bf00      	nop
 8000da0:	46bd      	mov	sp, r7
 8000da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da6:	4770      	bx	lr

08000da8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dac:	f000 f920 	bl	8000ff0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000db0:	bf00      	nop
 8000db2:	bd80      	pop	{r7, pc}

08000db4 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8000db8:	4802      	ldr	r0, [pc, #8]	; (8000dc4 <SPI2_IRQHandler+0x10>)
 8000dba:	f001 ffdf 	bl	8002d7c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8000dbe:	bf00      	nop
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	200000a4 	.word	0x200000a4

08000dc8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000dcc:	4802      	ldr	r0, [pc, #8]	; (8000dd8 <USART1_IRQHandler+0x10>)
 8000dce:	f002 fe0d 	bl	80039ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000dd2:	bf00      	nop
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	2000016c 	.word	0x2000016c

08000ddc <SPI5_IRQHandler>:

/**
  * @brief This function handles SPI5 global interrupt.
  */
void SPI5_IRQHandler(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI5_IRQn 0 */

  /* USER CODE END SPI5_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi5);
 8000de0:	4802      	ldr	r0, [pc, #8]	; (8000dec <SPI5_IRQHandler+0x10>)
 8000de2:	f001 ffcb 	bl	8002d7c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI5_IRQn 1 */

  /* USER CODE END SPI5_IRQn 1 */
}
 8000de6:	bf00      	nop
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	20000108 	.word	0x20000108

08000df0 <_read>:
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b086      	sub	sp, #24
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	60f8      	str	r0, [r7, #12]
 8000df8:	60b9      	str	r1, [r7, #8]
 8000dfa:	607a      	str	r2, [r7, #4]
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	617b      	str	r3, [r7, #20]
 8000e00:	e00a      	b.n	8000e18 <_read+0x28>
 8000e02:	f3af 8000 	nop.w
 8000e06:	4601      	mov	r1, r0
 8000e08:	68bb      	ldr	r3, [r7, #8]
 8000e0a:	1c5a      	adds	r2, r3, #1
 8000e0c:	60ba      	str	r2, [r7, #8]
 8000e0e:	b2ca      	uxtb	r2, r1
 8000e10:	701a      	strb	r2, [r3, #0]
 8000e12:	697b      	ldr	r3, [r7, #20]
 8000e14:	3301      	adds	r3, #1
 8000e16:	617b      	str	r3, [r7, #20]
 8000e18:	697a      	ldr	r2, [r7, #20]
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	429a      	cmp	r2, r3
 8000e1e:	dbf0      	blt.n	8000e02 <_read+0x12>
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	4618      	mov	r0, r3
 8000e24:	3718      	adds	r7, #24
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}

08000e2a <_close>:
 8000e2a:	b480      	push	{r7}
 8000e2c:	b083      	sub	sp, #12
 8000e2e:	af00      	add	r7, sp, #0
 8000e30:	6078      	str	r0, [r7, #4]
 8000e32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e36:	4618      	mov	r0, r3
 8000e38:	370c      	adds	r7, #12
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr

08000e42 <_fstat>:
 8000e42:	b480      	push	{r7}
 8000e44:	b083      	sub	sp, #12
 8000e46:	af00      	add	r7, sp, #0
 8000e48:	6078      	str	r0, [r7, #4]
 8000e4a:	6039      	str	r1, [r7, #0]
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e52:	605a      	str	r2, [r3, #4]
 8000e54:	2300      	movs	r3, #0
 8000e56:	4618      	mov	r0, r3
 8000e58:	370c      	adds	r7, #12
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr

08000e62 <_isatty>:
 8000e62:	b480      	push	{r7}
 8000e64:	b083      	sub	sp, #12
 8000e66:	af00      	add	r7, sp, #0
 8000e68:	6078      	str	r0, [r7, #4]
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	370c      	adds	r7, #12
 8000e70:	46bd      	mov	sp, r7
 8000e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e76:	4770      	bx	lr

08000e78 <_lseek>:
 8000e78:	b480      	push	{r7}
 8000e7a:	b085      	sub	sp, #20
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	60f8      	str	r0, [r7, #12]
 8000e80:	60b9      	str	r1, [r7, #8]
 8000e82:	607a      	str	r2, [r7, #4]
 8000e84:	2300      	movs	r3, #0
 8000e86:	4618      	mov	r0, r3
 8000e88:	3714      	adds	r7, #20
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr
	...

08000e94 <_sbrk>:
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b086      	sub	sp, #24
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
 8000e9c:	4a14      	ldr	r2, [pc, #80]	; (8000ef0 <_sbrk+0x5c>)
 8000e9e:	4b15      	ldr	r3, [pc, #84]	; (8000ef4 <_sbrk+0x60>)
 8000ea0:	1ad3      	subs	r3, r2, r3
 8000ea2:	617b      	str	r3, [r7, #20]
 8000ea4:	697b      	ldr	r3, [r7, #20]
 8000ea6:	613b      	str	r3, [r7, #16]
 8000ea8:	4b13      	ldr	r3, [pc, #76]	; (8000ef8 <_sbrk+0x64>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d102      	bne.n	8000eb6 <_sbrk+0x22>
 8000eb0:	4b11      	ldr	r3, [pc, #68]	; (8000ef8 <_sbrk+0x64>)
 8000eb2:	4a12      	ldr	r2, [pc, #72]	; (8000efc <_sbrk+0x68>)
 8000eb4:	601a      	str	r2, [r3, #0]
 8000eb6:	4b10      	ldr	r3, [pc, #64]	; (8000ef8 <_sbrk+0x64>)
 8000eb8:	681a      	ldr	r2, [r3, #0]
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	4413      	add	r3, r2
 8000ebe:	693a      	ldr	r2, [r7, #16]
 8000ec0:	429a      	cmp	r2, r3
 8000ec2:	d207      	bcs.n	8000ed4 <_sbrk+0x40>
 8000ec4:	f003 ffa6 	bl	8004e14 <__errno>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	220c      	movs	r2, #12
 8000ecc:	601a      	str	r2, [r3, #0]
 8000ece:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ed2:	e009      	b.n	8000ee8 <_sbrk+0x54>
 8000ed4:	4b08      	ldr	r3, [pc, #32]	; (8000ef8 <_sbrk+0x64>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	60fb      	str	r3, [r7, #12]
 8000eda:	4b07      	ldr	r3, [pc, #28]	; (8000ef8 <_sbrk+0x64>)
 8000edc:	681a      	ldr	r2, [r3, #0]
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	4413      	add	r3, r2
 8000ee2:	4a05      	ldr	r2, [pc, #20]	; (8000ef8 <_sbrk+0x64>)
 8000ee4:	6013      	str	r3, [r2, #0]
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	4618      	mov	r0, r3
 8000eea:	3718      	adds	r7, #24
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	20080000 	.word	0x20080000
 8000ef4:	00000400 	.word	0x00000400
 8000ef8:	200001fc 	.word	0x200001fc
 8000efc:	20000350 	.word	0x20000350

08000f00 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f04:	4b06      	ldr	r3, [pc, #24]	; (8000f20 <SystemInit+0x20>)
 8000f06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f0a:	4a05      	ldr	r2, [pc, #20]	; (8000f20 <SystemInit+0x20>)
 8000f0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f14:	bf00      	nop
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop
 8000f20:	e000ed00 	.word	0xe000ed00

08000f24 <Reset_Handler>:
 8000f24:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f5c <LoopFillZerobss+0x12>
 8000f28:	480d      	ldr	r0, [pc, #52]	; (8000f60 <LoopFillZerobss+0x16>)
 8000f2a:	490e      	ldr	r1, [pc, #56]	; (8000f64 <LoopFillZerobss+0x1a>)
 8000f2c:	4a0e      	ldr	r2, [pc, #56]	; (8000f68 <LoopFillZerobss+0x1e>)
 8000f2e:	2300      	movs	r3, #0
 8000f30:	e002      	b.n	8000f38 <LoopCopyDataInit>

08000f32 <CopyDataInit>:
 8000f32:	58d4      	ldr	r4, [r2, r3]
 8000f34:	50c4      	str	r4, [r0, r3]
 8000f36:	3304      	adds	r3, #4

08000f38 <LoopCopyDataInit>:
 8000f38:	18c4      	adds	r4, r0, r3
 8000f3a:	428c      	cmp	r4, r1
 8000f3c:	d3f9      	bcc.n	8000f32 <CopyDataInit>
 8000f3e:	4a0b      	ldr	r2, [pc, #44]	; (8000f6c <LoopFillZerobss+0x22>)
 8000f40:	4c0b      	ldr	r4, [pc, #44]	; (8000f70 <LoopFillZerobss+0x26>)
 8000f42:	2300      	movs	r3, #0
 8000f44:	e001      	b.n	8000f4a <LoopFillZerobss>

08000f46 <FillZerobss>:
 8000f46:	6013      	str	r3, [r2, #0]
 8000f48:	3204      	adds	r2, #4

08000f4a <LoopFillZerobss>:
 8000f4a:	42a2      	cmp	r2, r4
 8000f4c:	d3fb      	bcc.n	8000f46 <FillZerobss>
 8000f4e:	f7ff ffd7 	bl	8000f00 <SystemInit>
 8000f52:	f003 ff65 	bl	8004e20 <__libc_init_array>
 8000f56:	f7ff fb65 	bl	8000624 <main>
 8000f5a:	4770      	bx	lr
 8000f5c:	20080000 	.word	0x20080000
 8000f60:	20000000 	.word	0x20000000
 8000f64:	20000088 	.word	0x20000088
 8000f68:	0800539c 	.word	0x0800539c
 8000f6c:	20000088 	.word	0x20000088
 8000f70:	20000350 	.word	0x20000350

08000f74 <ADC_IRQHandler>:
 8000f74:	e7fe      	b.n	8000f74 <ADC_IRQHandler>

08000f76 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f76:	b580      	push	{r7, lr}
 8000f78:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f7a:	2003      	movs	r0, #3
 8000f7c:	f000 f928 	bl	80011d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f80:	200f      	movs	r0, #15
 8000f82:	f000 f805 	bl	8000f90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f86:	f7ff fdbb 	bl	8000b00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f8a:	2300      	movs	r3, #0
}
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	bd80      	pop	{r7, pc}

08000f90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f98:	4b12      	ldr	r3, [pc, #72]	; (8000fe4 <HAL_InitTick+0x54>)
 8000f9a:	681a      	ldr	r2, [r3, #0]
 8000f9c:	4b12      	ldr	r3, [pc, #72]	; (8000fe8 <HAL_InitTick+0x58>)
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fa6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000faa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f000 f943 	bl	800123a <HAL_SYSTICK_Config>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d001      	beq.n	8000fbe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fba:	2301      	movs	r3, #1
 8000fbc:	e00e      	b.n	8000fdc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	2b0f      	cmp	r3, #15
 8000fc2:	d80a      	bhi.n	8000fda <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	6879      	ldr	r1, [r7, #4]
 8000fc8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000fcc:	f000 f90b 	bl	80011e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fd0:	4a06      	ldr	r2, [pc, #24]	; (8000fec <HAL_InitTick+0x5c>)
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	e000      	b.n	8000fdc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fda:	2301      	movs	r3, #1
}
 8000fdc:	4618      	mov	r0, r3
 8000fde:	3708      	adds	r7, #8
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	20000020 	.word	0x20000020
 8000fe8:	20000028 	.word	0x20000028
 8000fec:	20000024 	.word	0x20000024

08000ff0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ff4:	4b06      	ldr	r3, [pc, #24]	; (8001010 <HAL_IncTick+0x20>)
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	461a      	mov	r2, r3
 8000ffa:	4b06      	ldr	r3, [pc, #24]	; (8001014 <HAL_IncTick+0x24>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	4413      	add	r3, r2
 8001000:	4a04      	ldr	r2, [pc, #16]	; (8001014 <HAL_IncTick+0x24>)
 8001002:	6013      	str	r3, [r2, #0]
}
 8001004:	bf00      	nop
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop
 8001010:	20000028 	.word	0x20000028
 8001014:	20000200 	.word	0x20000200

08001018 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
  return uwTick;
 800101c:	4b03      	ldr	r3, [pc, #12]	; (800102c <HAL_GetTick+0x14>)
 800101e:	681b      	ldr	r3, [r3, #0]
}
 8001020:	4618      	mov	r0, r3
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop
 800102c:	20000200 	.word	0x20000200

08001030 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001030:	b480      	push	{r7}
 8001032:	b085      	sub	sp, #20
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	f003 0307 	and.w	r3, r3, #7
 800103e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001040:	4b0b      	ldr	r3, [pc, #44]	; (8001070 <__NVIC_SetPriorityGrouping+0x40>)
 8001042:	68db      	ldr	r3, [r3, #12]
 8001044:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001046:	68ba      	ldr	r2, [r7, #8]
 8001048:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800104c:	4013      	ands	r3, r2
 800104e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001054:	68bb      	ldr	r3, [r7, #8]
 8001056:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001058:	4b06      	ldr	r3, [pc, #24]	; (8001074 <__NVIC_SetPriorityGrouping+0x44>)
 800105a:	4313      	orrs	r3, r2
 800105c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800105e:	4a04      	ldr	r2, [pc, #16]	; (8001070 <__NVIC_SetPriorityGrouping+0x40>)
 8001060:	68bb      	ldr	r3, [r7, #8]
 8001062:	60d3      	str	r3, [r2, #12]
}
 8001064:	bf00      	nop
 8001066:	3714      	adds	r7, #20
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr
 8001070:	e000ed00 	.word	0xe000ed00
 8001074:	05fa0000 	.word	0x05fa0000

08001078 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800107c:	4b04      	ldr	r3, [pc, #16]	; (8001090 <__NVIC_GetPriorityGrouping+0x18>)
 800107e:	68db      	ldr	r3, [r3, #12]
 8001080:	0a1b      	lsrs	r3, r3, #8
 8001082:	f003 0307 	and.w	r3, r3, #7
}
 8001086:	4618      	mov	r0, r3
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr
 8001090:	e000ed00 	.word	0xe000ed00

08001094 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001094:	b480      	push	{r7}
 8001096:	b083      	sub	sp, #12
 8001098:	af00      	add	r7, sp, #0
 800109a:	4603      	mov	r3, r0
 800109c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800109e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	db0b      	blt.n	80010be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010a6:	79fb      	ldrb	r3, [r7, #7]
 80010a8:	f003 021f 	and.w	r2, r3, #31
 80010ac:	4907      	ldr	r1, [pc, #28]	; (80010cc <__NVIC_EnableIRQ+0x38>)
 80010ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010b2:	095b      	lsrs	r3, r3, #5
 80010b4:	2001      	movs	r0, #1
 80010b6:	fa00 f202 	lsl.w	r2, r0, r2
 80010ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010be:	bf00      	nop
 80010c0:	370c      	adds	r7, #12
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop
 80010cc:	e000e100 	.word	0xe000e100

080010d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b083      	sub	sp, #12
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	4603      	mov	r3, r0
 80010d8:	6039      	str	r1, [r7, #0]
 80010da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	db0a      	blt.n	80010fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	b2da      	uxtb	r2, r3
 80010e8:	490c      	ldr	r1, [pc, #48]	; (800111c <__NVIC_SetPriority+0x4c>)
 80010ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ee:	0112      	lsls	r2, r2, #4
 80010f0:	b2d2      	uxtb	r2, r2
 80010f2:	440b      	add	r3, r1
 80010f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010f8:	e00a      	b.n	8001110 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	b2da      	uxtb	r2, r3
 80010fe:	4908      	ldr	r1, [pc, #32]	; (8001120 <__NVIC_SetPriority+0x50>)
 8001100:	79fb      	ldrb	r3, [r7, #7]
 8001102:	f003 030f 	and.w	r3, r3, #15
 8001106:	3b04      	subs	r3, #4
 8001108:	0112      	lsls	r2, r2, #4
 800110a:	b2d2      	uxtb	r2, r2
 800110c:	440b      	add	r3, r1
 800110e:	761a      	strb	r2, [r3, #24]
}
 8001110:	bf00      	nop
 8001112:	370c      	adds	r7, #12
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr
 800111c:	e000e100 	.word	0xe000e100
 8001120:	e000ed00 	.word	0xe000ed00

08001124 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001124:	b480      	push	{r7}
 8001126:	b089      	sub	sp, #36	; 0x24
 8001128:	af00      	add	r7, sp, #0
 800112a:	60f8      	str	r0, [r7, #12]
 800112c:	60b9      	str	r1, [r7, #8]
 800112e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	f003 0307 	and.w	r3, r3, #7
 8001136:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001138:	69fb      	ldr	r3, [r7, #28]
 800113a:	f1c3 0307 	rsb	r3, r3, #7
 800113e:	2b04      	cmp	r3, #4
 8001140:	bf28      	it	cs
 8001142:	2304      	movcs	r3, #4
 8001144:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001146:	69fb      	ldr	r3, [r7, #28]
 8001148:	3304      	adds	r3, #4
 800114a:	2b06      	cmp	r3, #6
 800114c:	d902      	bls.n	8001154 <NVIC_EncodePriority+0x30>
 800114e:	69fb      	ldr	r3, [r7, #28]
 8001150:	3b03      	subs	r3, #3
 8001152:	e000      	b.n	8001156 <NVIC_EncodePriority+0x32>
 8001154:	2300      	movs	r3, #0
 8001156:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001158:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800115c:	69bb      	ldr	r3, [r7, #24]
 800115e:	fa02 f303 	lsl.w	r3, r2, r3
 8001162:	43da      	mvns	r2, r3
 8001164:	68bb      	ldr	r3, [r7, #8]
 8001166:	401a      	ands	r2, r3
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800116c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	fa01 f303 	lsl.w	r3, r1, r3
 8001176:	43d9      	mvns	r1, r3
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800117c:	4313      	orrs	r3, r2
         );
}
 800117e:	4618      	mov	r0, r3
 8001180:	3724      	adds	r7, #36	; 0x24
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr
	...

0800118c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	3b01      	subs	r3, #1
 8001198:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800119c:	d301      	bcc.n	80011a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800119e:	2301      	movs	r3, #1
 80011a0:	e00f      	b.n	80011c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011a2:	4a0a      	ldr	r2, [pc, #40]	; (80011cc <SysTick_Config+0x40>)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	3b01      	subs	r3, #1
 80011a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011aa:	210f      	movs	r1, #15
 80011ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80011b0:	f7ff ff8e 	bl	80010d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011b4:	4b05      	ldr	r3, [pc, #20]	; (80011cc <SysTick_Config+0x40>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011ba:	4b04      	ldr	r3, [pc, #16]	; (80011cc <SysTick_Config+0x40>)
 80011bc:	2207      	movs	r2, #7
 80011be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011c0:	2300      	movs	r3, #0
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	3708      	adds	r7, #8
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	e000e010 	.word	0xe000e010

080011d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011d8:	6878      	ldr	r0, [r7, #4]
 80011da:	f7ff ff29 	bl	8001030 <__NVIC_SetPriorityGrouping>
}
 80011de:	bf00      	nop
 80011e0:	3708      	adds	r7, #8
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}

080011e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011e6:	b580      	push	{r7, lr}
 80011e8:	b086      	sub	sp, #24
 80011ea:	af00      	add	r7, sp, #0
 80011ec:	4603      	mov	r3, r0
 80011ee:	60b9      	str	r1, [r7, #8]
 80011f0:	607a      	str	r2, [r7, #4]
 80011f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80011f4:	2300      	movs	r3, #0
 80011f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011f8:	f7ff ff3e 	bl	8001078 <__NVIC_GetPriorityGrouping>
 80011fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011fe:	687a      	ldr	r2, [r7, #4]
 8001200:	68b9      	ldr	r1, [r7, #8]
 8001202:	6978      	ldr	r0, [r7, #20]
 8001204:	f7ff ff8e 	bl	8001124 <NVIC_EncodePriority>
 8001208:	4602      	mov	r2, r0
 800120a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800120e:	4611      	mov	r1, r2
 8001210:	4618      	mov	r0, r3
 8001212:	f7ff ff5d 	bl	80010d0 <__NVIC_SetPriority>
}
 8001216:	bf00      	nop
 8001218:	3718      	adds	r7, #24
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}

0800121e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800121e:	b580      	push	{r7, lr}
 8001220:	b082      	sub	sp, #8
 8001222:	af00      	add	r7, sp, #0
 8001224:	4603      	mov	r3, r0
 8001226:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001228:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800122c:	4618      	mov	r0, r3
 800122e:	f7ff ff31 	bl	8001094 <__NVIC_EnableIRQ>
}
 8001232:	bf00      	nop
 8001234:	3708      	adds	r7, #8
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}

0800123a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800123a:	b580      	push	{r7, lr}
 800123c:	b082      	sub	sp, #8
 800123e:	af00      	add	r7, sp, #0
 8001240:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001242:	6878      	ldr	r0, [r7, #4]
 8001244:	f7ff ffa2 	bl	800118c <SysTick_Config>
 8001248:	4603      	mov	r3, r0
}
 800124a:	4618      	mov	r0, r3
 800124c:	3708      	adds	r7, #8
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}

08001252 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001252:	b580      	push	{r7, lr}
 8001254:	b084      	sub	sp, #16
 8001256:	af00      	add	r7, sp, #0
 8001258:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800125e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001260:	f7ff feda 	bl	8001018 <HAL_GetTick>
 8001264:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800126c:	b2db      	uxtb	r3, r3
 800126e:	2b02      	cmp	r3, #2
 8001270:	d008      	beq.n	8001284 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	2280      	movs	r2, #128	; 0x80
 8001276:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	2200      	movs	r2, #0
 800127c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001280:	2301      	movs	r3, #1
 8001282:	e052      	b.n	800132a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	681a      	ldr	r2, [r3, #0]
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f022 0216 	bic.w	r2, r2, #22
 8001292:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	695a      	ldr	r2, [r3, #20]
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80012a2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d103      	bne.n	80012b4 <HAL_DMA_Abort+0x62>
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d007      	beq.n	80012c4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	681a      	ldr	r2, [r3, #0]
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f022 0208 	bic.w	r2, r2, #8
 80012c2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	681a      	ldr	r2, [r3, #0]
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f022 0201 	bic.w	r2, r2, #1
 80012d2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80012d4:	e013      	b.n	80012fe <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80012d6:	f7ff fe9f 	bl	8001018 <HAL_GetTick>
 80012da:	4602      	mov	r2, r0
 80012dc:	68bb      	ldr	r3, [r7, #8]
 80012de:	1ad3      	subs	r3, r2, r3
 80012e0:	2b05      	cmp	r3, #5
 80012e2:	d90c      	bls.n	80012fe <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	2220      	movs	r2, #32
 80012e8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	2203      	movs	r2, #3
 80012ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	2200      	movs	r2, #0
 80012f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 80012fa:	2303      	movs	r3, #3
 80012fc:	e015      	b.n	800132a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f003 0301 	and.w	r3, r3, #1
 8001308:	2b00      	cmp	r3, #0
 800130a:	d1e4      	bne.n	80012d6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001310:	223f      	movs	r2, #63	; 0x3f
 8001312:	409a      	lsls	r2, r3
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2201      	movs	r2, #1
 800131c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2200      	movs	r2, #0
 8001324:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8001328:	2300      	movs	r3, #0
}
 800132a:	4618      	mov	r0, r3
 800132c:	3710      	adds	r7, #16
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}

08001332 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001332:	b480      	push	{r7}
 8001334:	b083      	sub	sp, #12
 8001336:	af00      	add	r7, sp, #0
 8001338:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001340:	b2db      	uxtb	r3, r3
 8001342:	2b02      	cmp	r3, #2
 8001344:	d004      	beq.n	8001350 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2280      	movs	r2, #128	; 0x80
 800134a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800134c:	2301      	movs	r3, #1
 800134e:	e00c      	b.n	800136a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2205      	movs	r2, #5
 8001354:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	681a      	ldr	r2, [r3, #0]
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f022 0201 	bic.w	r2, r2, #1
 8001366:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001368:	2300      	movs	r3, #0
}
 800136a:	4618      	mov	r0, r3
 800136c:	370c      	adds	r7, #12
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr
	...

08001378 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001378:	b480      	push	{r7}
 800137a:	b089      	sub	sp, #36	; 0x24
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
 8001380:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001382:	2300      	movs	r3, #0
 8001384:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001386:	2300      	movs	r3, #0
 8001388:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800138a:	2300      	movs	r3, #0
 800138c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800138e:	2300      	movs	r3, #0
 8001390:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001392:	2300      	movs	r3, #0
 8001394:	61fb      	str	r3, [r7, #28]
 8001396:	e175      	b.n	8001684 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001398:	2201      	movs	r2, #1
 800139a:	69fb      	ldr	r3, [r7, #28]
 800139c:	fa02 f303 	lsl.w	r3, r2, r3
 80013a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	697a      	ldr	r2, [r7, #20]
 80013a8:	4013      	ands	r3, r2
 80013aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80013ac:	693a      	ldr	r2, [r7, #16]
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	429a      	cmp	r2, r3
 80013b2:	f040 8164 	bne.w	800167e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	f003 0303 	and.w	r3, r3, #3
 80013be:	2b01      	cmp	r3, #1
 80013c0:	d005      	beq.n	80013ce <HAL_GPIO_Init+0x56>
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	f003 0303 	and.w	r3, r3, #3
 80013ca:	2b02      	cmp	r3, #2
 80013cc:	d130      	bne.n	8001430 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	689b      	ldr	r3, [r3, #8]
 80013d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80013d4:	69fb      	ldr	r3, [r7, #28]
 80013d6:	005b      	lsls	r3, r3, #1
 80013d8:	2203      	movs	r2, #3
 80013da:	fa02 f303 	lsl.w	r3, r2, r3
 80013de:	43db      	mvns	r3, r3
 80013e0:	69ba      	ldr	r2, [r7, #24]
 80013e2:	4013      	ands	r3, r2
 80013e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	68da      	ldr	r2, [r3, #12]
 80013ea:	69fb      	ldr	r3, [r7, #28]
 80013ec:	005b      	lsls	r3, r3, #1
 80013ee:	fa02 f303 	lsl.w	r3, r2, r3
 80013f2:	69ba      	ldr	r2, [r7, #24]
 80013f4:	4313      	orrs	r3, r2
 80013f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	69ba      	ldr	r2, [r7, #24]
 80013fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001404:	2201      	movs	r2, #1
 8001406:	69fb      	ldr	r3, [r7, #28]
 8001408:	fa02 f303 	lsl.w	r3, r2, r3
 800140c:	43db      	mvns	r3, r3
 800140e:	69ba      	ldr	r2, [r7, #24]
 8001410:	4013      	ands	r3, r2
 8001412:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	091b      	lsrs	r3, r3, #4
 800141a:	f003 0201 	and.w	r2, r3, #1
 800141e:	69fb      	ldr	r3, [r7, #28]
 8001420:	fa02 f303 	lsl.w	r3, r2, r3
 8001424:	69ba      	ldr	r2, [r7, #24]
 8001426:	4313      	orrs	r3, r2
 8001428:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	69ba      	ldr	r2, [r7, #24]
 800142e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	f003 0303 	and.w	r3, r3, #3
 8001438:	2b03      	cmp	r3, #3
 800143a:	d017      	beq.n	800146c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	68db      	ldr	r3, [r3, #12]
 8001440:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001442:	69fb      	ldr	r3, [r7, #28]
 8001444:	005b      	lsls	r3, r3, #1
 8001446:	2203      	movs	r2, #3
 8001448:	fa02 f303 	lsl.w	r3, r2, r3
 800144c:	43db      	mvns	r3, r3
 800144e:	69ba      	ldr	r2, [r7, #24]
 8001450:	4013      	ands	r3, r2
 8001452:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	689a      	ldr	r2, [r3, #8]
 8001458:	69fb      	ldr	r3, [r7, #28]
 800145a:	005b      	lsls	r3, r3, #1
 800145c:	fa02 f303 	lsl.w	r3, r2, r3
 8001460:	69ba      	ldr	r2, [r7, #24]
 8001462:	4313      	orrs	r3, r2
 8001464:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	69ba      	ldr	r2, [r7, #24]
 800146a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	f003 0303 	and.w	r3, r3, #3
 8001474:	2b02      	cmp	r3, #2
 8001476:	d123      	bne.n	80014c0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001478:	69fb      	ldr	r3, [r7, #28]
 800147a:	08da      	lsrs	r2, r3, #3
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	3208      	adds	r2, #8
 8001480:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001484:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001486:	69fb      	ldr	r3, [r7, #28]
 8001488:	f003 0307 	and.w	r3, r3, #7
 800148c:	009b      	lsls	r3, r3, #2
 800148e:	220f      	movs	r2, #15
 8001490:	fa02 f303 	lsl.w	r3, r2, r3
 8001494:	43db      	mvns	r3, r3
 8001496:	69ba      	ldr	r2, [r7, #24]
 8001498:	4013      	ands	r3, r2
 800149a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	691a      	ldr	r2, [r3, #16]
 80014a0:	69fb      	ldr	r3, [r7, #28]
 80014a2:	f003 0307 	and.w	r3, r3, #7
 80014a6:	009b      	lsls	r3, r3, #2
 80014a8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ac:	69ba      	ldr	r2, [r7, #24]
 80014ae:	4313      	orrs	r3, r2
 80014b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80014b2:	69fb      	ldr	r3, [r7, #28]
 80014b4:	08da      	lsrs	r2, r3, #3
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	3208      	adds	r2, #8
 80014ba:	69b9      	ldr	r1, [r7, #24]
 80014bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80014c6:	69fb      	ldr	r3, [r7, #28]
 80014c8:	005b      	lsls	r3, r3, #1
 80014ca:	2203      	movs	r2, #3
 80014cc:	fa02 f303 	lsl.w	r3, r2, r3
 80014d0:	43db      	mvns	r3, r3
 80014d2:	69ba      	ldr	r2, [r7, #24]
 80014d4:	4013      	ands	r3, r2
 80014d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	f003 0203 	and.w	r2, r3, #3
 80014e0:	69fb      	ldr	r3, [r7, #28]
 80014e2:	005b      	lsls	r3, r3, #1
 80014e4:	fa02 f303 	lsl.w	r3, r2, r3
 80014e8:	69ba      	ldr	r2, [r7, #24]
 80014ea:	4313      	orrs	r3, r2
 80014ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	69ba      	ldr	r2, [r7, #24]
 80014f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	f000 80be 	beq.w	800167e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001502:	4b66      	ldr	r3, [pc, #408]	; (800169c <HAL_GPIO_Init+0x324>)
 8001504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001506:	4a65      	ldr	r2, [pc, #404]	; (800169c <HAL_GPIO_Init+0x324>)
 8001508:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800150c:	6453      	str	r3, [r2, #68]	; 0x44
 800150e:	4b63      	ldr	r3, [pc, #396]	; (800169c <HAL_GPIO_Init+0x324>)
 8001510:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001512:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001516:	60fb      	str	r3, [r7, #12]
 8001518:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800151a:	4a61      	ldr	r2, [pc, #388]	; (80016a0 <HAL_GPIO_Init+0x328>)
 800151c:	69fb      	ldr	r3, [r7, #28]
 800151e:	089b      	lsrs	r3, r3, #2
 8001520:	3302      	adds	r3, #2
 8001522:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001526:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001528:	69fb      	ldr	r3, [r7, #28]
 800152a:	f003 0303 	and.w	r3, r3, #3
 800152e:	009b      	lsls	r3, r3, #2
 8001530:	220f      	movs	r2, #15
 8001532:	fa02 f303 	lsl.w	r3, r2, r3
 8001536:	43db      	mvns	r3, r3
 8001538:	69ba      	ldr	r2, [r7, #24]
 800153a:	4013      	ands	r3, r2
 800153c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	4a58      	ldr	r2, [pc, #352]	; (80016a4 <HAL_GPIO_Init+0x32c>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d037      	beq.n	80015b6 <HAL_GPIO_Init+0x23e>
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	4a57      	ldr	r2, [pc, #348]	; (80016a8 <HAL_GPIO_Init+0x330>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d031      	beq.n	80015b2 <HAL_GPIO_Init+0x23a>
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	4a56      	ldr	r2, [pc, #344]	; (80016ac <HAL_GPIO_Init+0x334>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d02b      	beq.n	80015ae <HAL_GPIO_Init+0x236>
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	4a55      	ldr	r2, [pc, #340]	; (80016b0 <HAL_GPIO_Init+0x338>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d025      	beq.n	80015aa <HAL_GPIO_Init+0x232>
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	4a54      	ldr	r2, [pc, #336]	; (80016b4 <HAL_GPIO_Init+0x33c>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d01f      	beq.n	80015a6 <HAL_GPIO_Init+0x22e>
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	4a53      	ldr	r2, [pc, #332]	; (80016b8 <HAL_GPIO_Init+0x340>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d019      	beq.n	80015a2 <HAL_GPIO_Init+0x22a>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	4a52      	ldr	r2, [pc, #328]	; (80016bc <HAL_GPIO_Init+0x344>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d013      	beq.n	800159e <HAL_GPIO_Init+0x226>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	4a51      	ldr	r2, [pc, #324]	; (80016c0 <HAL_GPIO_Init+0x348>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d00d      	beq.n	800159a <HAL_GPIO_Init+0x222>
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	4a50      	ldr	r2, [pc, #320]	; (80016c4 <HAL_GPIO_Init+0x34c>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d007      	beq.n	8001596 <HAL_GPIO_Init+0x21e>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	4a4f      	ldr	r2, [pc, #316]	; (80016c8 <HAL_GPIO_Init+0x350>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d101      	bne.n	8001592 <HAL_GPIO_Init+0x21a>
 800158e:	2309      	movs	r3, #9
 8001590:	e012      	b.n	80015b8 <HAL_GPIO_Init+0x240>
 8001592:	230a      	movs	r3, #10
 8001594:	e010      	b.n	80015b8 <HAL_GPIO_Init+0x240>
 8001596:	2308      	movs	r3, #8
 8001598:	e00e      	b.n	80015b8 <HAL_GPIO_Init+0x240>
 800159a:	2307      	movs	r3, #7
 800159c:	e00c      	b.n	80015b8 <HAL_GPIO_Init+0x240>
 800159e:	2306      	movs	r3, #6
 80015a0:	e00a      	b.n	80015b8 <HAL_GPIO_Init+0x240>
 80015a2:	2305      	movs	r3, #5
 80015a4:	e008      	b.n	80015b8 <HAL_GPIO_Init+0x240>
 80015a6:	2304      	movs	r3, #4
 80015a8:	e006      	b.n	80015b8 <HAL_GPIO_Init+0x240>
 80015aa:	2303      	movs	r3, #3
 80015ac:	e004      	b.n	80015b8 <HAL_GPIO_Init+0x240>
 80015ae:	2302      	movs	r3, #2
 80015b0:	e002      	b.n	80015b8 <HAL_GPIO_Init+0x240>
 80015b2:	2301      	movs	r3, #1
 80015b4:	e000      	b.n	80015b8 <HAL_GPIO_Init+0x240>
 80015b6:	2300      	movs	r3, #0
 80015b8:	69fa      	ldr	r2, [r7, #28]
 80015ba:	f002 0203 	and.w	r2, r2, #3
 80015be:	0092      	lsls	r2, r2, #2
 80015c0:	4093      	lsls	r3, r2
 80015c2:	69ba      	ldr	r2, [r7, #24]
 80015c4:	4313      	orrs	r3, r2
 80015c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80015c8:	4935      	ldr	r1, [pc, #212]	; (80016a0 <HAL_GPIO_Init+0x328>)
 80015ca:	69fb      	ldr	r3, [r7, #28]
 80015cc:	089b      	lsrs	r3, r3, #2
 80015ce:	3302      	adds	r3, #2
 80015d0:	69ba      	ldr	r2, [r7, #24]
 80015d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80015d6:	4b3d      	ldr	r3, [pc, #244]	; (80016cc <HAL_GPIO_Init+0x354>)
 80015d8:	689b      	ldr	r3, [r3, #8]
 80015da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015dc:	693b      	ldr	r3, [r7, #16]
 80015de:	43db      	mvns	r3, r3
 80015e0:	69ba      	ldr	r2, [r7, #24]
 80015e2:	4013      	ands	r3, r2
 80015e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d003      	beq.n	80015fa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80015f2:	69ba      	ldr	r2, [r7, #24]
 80015f4:	693b      	ldr	r3, [r7, #16]
 80015f6:	4313      	orrs	r3, r2
 80015f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80015fa:	4a34      	ldr	r2, [pc, #208]	; (80016cc <HAL_GPIO_Init+0x354>)
 80015fc:	69bb      	ldr	r3, [r7, #24]
 80015fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001600:	4b32      	ldr	r3, [pc, #200]	; (80016cc <HAL_GPIO_Init+0x354>)
 8001602:	68db      	ldr	r3, [r3, #12]
 8001604:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001606:	693b      	ldr	r3, [r7, #16]
 8001608:	43db      	mvns	r3, r3
 800160a:	69ba      	ldr	r2, [r7, #24]
 800160c:	4013      	ands	r3, r2
 800160e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001618:	2b00      	cmp	r3, #0
 800161a:	d003      	beq.n	8001624 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800161c:	69ba      	ldr	r2, [r7, #24]
 800161e:	693b      	ldr	r3, [r7, #16]
 8001620:	4313      	orrs	r3, r2
 8001622:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001624:	4a29      	ldr	r2, [pc, #164]	; (80016cc <HAL_GPIO_Init+0x354>)
 8001626:	69bb      	ldr	r3, [r7, #24]
 8001628:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800162a:	4b28      	ldr	r3, [pc, #160]	; (80016cc <HAL_GPIO_Init+0x354>)
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001630:	693b      	ldr	r3, [r7, #16]
 8001632:	43db      	mvns	r3, r3
 8001634:	69ba      	ldr	r2, [r7, #24]
 8001636:	4013      	ands	r3, r2
 8001638:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001642:	2b00      	cmp	r3, #0
 8001644:	d003      	beq.n	800164e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001646:	69ba      	ldr	r2, [r7, #24]
 8001648:	693b      	ldr	r3, [r7, #16]
 800164a:	4313      	orrs	r3, r2
 800164c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800164e:	4a1f      	ldr	r2, [pc, #124]	; (80016cc <HAL_GPIO_Init+0x354>)
 8001650:	69bb      	ldr	r3, [r7, #24]
 8001652:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001654:	4b1d      	ldr	r3, [pc, #116]	; (80016cc <HAL_GPIO_Init+0x354>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800165a:	693b      	ldr	r3, [r7, #16]
 800165c:	43db      	mvns	r3, r3
 800165e:	69ba      	ldr	r2, [r7, #24]
 8001660:	4013      	ands	r3, r2
 8001662:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800166c:	2b00      	cmp	r3, #0
 800166e:	d003      	beq.n	8001678 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001670:	69ba      	ldr	r2, [r7, #24]
 8001672:	693b      	ldr	r3, [r7, #16]
 8001674:	4313      	orrs	r3, r2
 8001676:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001678:	4a14      	ldr	r2, [pc, #80]	; (80016cc <HAL_GPIO_Init+0x354>)
 800167a:	69bb      	ldr	r3, [r7, #24]
 800167c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800167e:	69fb      	ldr	r3, [r7, #28]
 8001680:	3301      	adds	r3, #1
 8001682:	61fb      	str	r3, [r7, #28]
 8001684:	69fb      	ldr	r3, [r7, #28]
 8001686:	2b0f      	cmp	r3, #15
 8001688:	f67f ae86 	bls.w	8001398 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800168c:	bf00      	nop
 800168e:	bf00      	nop
 8001690:	3724      	adds	r7, #36	; 0x24
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr
 800169a:	bf00      	nop
 800169c:	40023800 	.word	0x40023800
 80016a0:	40013800 	.word	0x40013800
 80016a4:	40020000 	.word	0x40020000
 80016a8:	40020400 	.word	0x40020400
 80016ac:	40020800 	.word	0x40020800
 80016b0:	40020c00 	.word	0x40020c00
 80016b4:	40021000 	.word	0x40021000
 80016b8:	40021400 	.word	0x40021400
 80016bc:	40021800 	.word	0x40021800
 80016c0:	40021c00 	.word	0x40021c00
 80016c4:	40022000 	.word	0x40022000
 80016c8:	40022400 	.word	0x40022400
 80016cc:	40013c00 	.word	0x40013c00

080016d0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b086      	sub	sp, #24
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80016d8:	2300      	movs	r3, #0
 80016da:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d101      	bne.n	80016e6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
 80016e4:	e29b      	b.n	8001c1e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f003 0301 	and.w	r3, r3, #1
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	f000 8087 	beq.w	8001802 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80016f4:	4b96      	ldr	r3, [pc, #600]	; (8001950 <HAL_RCC_OscConfig+0x280>)
 80016f6:	689b      	ldr	r3, [r3, #8]
 80016f8:	f003 030c 	and.w	r3, r3, #12
 80016fc:	2b04      	cmp	r3, #4
 80016fe:	d00c      	beq.n	800171a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001700:	4b93      	ldr	r3, [pc, #588]	; (8001950 <HAL_RCC_OscConfig+0x280>)
 8001702:	689b      	ldr	r3, [r3, #8]
 8001704:	f003 030c 	and.w	r3, r3, #12
 8001708:	2b08      	cmp	r3, #8
 800170a:	d112      	bne.n	8001732 <HAL_RCC_OscConfig+0x62>
 800170c:	4b90      	ldr	r3, [pc, #576]	; (8001950 <HAL_RCC_OscConfig+0x280>)
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001714:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001718:	d10b      	bne.n	8001732 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800171a:	4b8d      	ldr	r3, [pc, #564]	; (8001950 <HAL_RCC_OscConfig+0x280>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001722:	2b00      	cmp	r3, #0
 8001724:	d06c      	beq.n	8001800 <HAL_RCC_OscConfig+0x130>
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d168      	bne.n	8001800 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800172e:	2301      	movs	r3, #1
 8001730:	e275      	b.n	8001c1e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800173a:	d106      	bne.n	800174a <HAL_RCC_OscConfig+0x7a>
 800173c:	4b84      	ldr	r3, [pc, #528]	; (8001950 <HAL_RCC_OscConfig+0x280>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a83      	ldr	r2, [pc, #524]	; (8001950 <HAL_RCC_OscConfig+0x280>)
 8001742:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001746:	6013      	str	r3, [r2, #0]
 8001748:	e02e      	b.n	80017a8 <HAL_RCC_OscConfig+0xd8>
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d10c      	bne.n	800176c <HAL_RCC_OscConfig+0x9c>
 8001752:	4b7f      	ldr	r3, [pc, #508]	; (8001950 <HAL_RCC_OscConfig+0x280>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4a7e      	ldr	r2, [pc, #504]	; (8001950 <HAL_RCC_OscConfig+0x280>)
 8001758:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800175c:	6013      	str	r3, [r2, #0]
 800175e:	4b7c      	ldr	r3, [pc, #496]	; (8001950 <HAL_RCC_OscConfig+0x280>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4a7b      	ldr	r2, [pc, #492]	; (8001950 <HAL_RCC_OscConfig+0x280>)
 8001764:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001768:	6013      	str	r3, [r2, #0]
 800176a:	e01d      	b.n	80017a8 <HAL_RCC_OscConfig+0xd8>
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001774:	d10c      	bne.n	8001790 <HAL_RCC_OscConfig+0xc0>
 8001776:	4b76      	ldr	r3, [pc, #472]	; (8001950 <HAL_RCC_OscConfig+0x280>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4a75      	ldr	r2, [pc, #468]	; (8001950 <HAL_RCC_OscConfig+0x280>)
 800177c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001780:	6013      	str	r3, [r2, #0]
 8001782:	4b73      	ldr	r3, [pc, #460]	; (8001950 <HAL_RCC_OscConfig+0x280>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4a72      	ldr	r2, [pc, #456]	; (8001950 <HAL_RCC_OscConfig+0x280>)
 8001788:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800178c:	6013      	str	r3, [r2, #0]
 800178e:	e00b      	b.n	80017a8 <HAL_RCC_OscConfig+0xd8>
 8001790:	4b6f      	ldr	r3, [pc, #444]	; (8001950 <HAL_RCC_OscConfig+0x280>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a6e      	ldr	r2, [pc, #440]	; (8001950 <HAL_RCC_OscConfig+0x280>)
 8001796:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800179a:	6013      	str	r3, [r2, #0]
 800179c:	4b6c      	ldr	r3, [pc, #432]	; (8001950 <HAL_RCC_OscConfig+0x280>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a6b      	ldr	r2, [pc, #428]	; (8001950 <HAL_RCC_OscConfig+0x280>)
 80017a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d013      	beq.n	80017d8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017b0:	f7ff fc32 	bl	8001018 <HAL_GetTick>
 80017b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017b6:	e008      	b.n	80017ca <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017b8:	f7ff fc2e 	bl	8001018 <HAL_GetTick>
 80017bc:	4602      	mov	r2, r0
 80017be:	693b      	ldr	r3, [r7, #16]
 80017c0:	1ad3      	subs	r3, r2, r3
 80017c2:	2b64      	cmp	r3, #100	; 0x64
 80017c4:	d901      	bls.n	80017ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80017c6:	2303      	movs	r3, #3
 80017c8:	e229      	b.n	8001c1e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017ca:	4b61      	ldr	r3, [pc, #388]	; (8001950 <HAL_RCC_OscConfig+0x280>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d0f0      	beq.n	80017b8 <HAL_RCC_OscConfig+0xe8>
 80017d6:	e014      	b.n	8001802 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017d8:	f7ff fc1e 	bl	8001018 <HAL_GetTick>
 80017dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017de:	e008      	b.n	80017f2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017e0:	f7ff fc1a 	bl	8001018 <HAL_GetTick>
 80017e4:	4602      	mov	r2, r0
 80017e6:	693b      	ldr	r3, [r7, #16]
 80017e8:	1ad3      	subs	r3, r2, r3
 80017ea:	2b64      	cmp	r3, #100	; 0x64
 80017ec:	d901      	bls.n	80017f2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80017ee:	2303      	movs	r3, #3
 80017f0:	e215      	b.n	8001c1e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017f2:	4b57      	ldr	r3, [pc, #348]	; (8001950 <HAL_RCC_OscConfig+0x280>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d1f0      	bne.n	80017e0 <HAL_RCC_OscConfig+0x110>
 80017fe:	e000      	b.n	8001802 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001800:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f003 0302 	and.w	r3, r3, #2
 800180a:	2b00      	cmp	r3, #0
 800180c:	d069      	beq.n	80018e2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800180e:	4b50      	ldr	r3, [pc, #320]	; (8001950 <HAL_RCC_OscConfig+0x280>)
 8001810:	689b      	ldr	r3, [r3, #8]
 8001812:	f003 030c 	and.w	r3, r3, #12
 8001816:	2b00      	cmp	r3, #0
 8001818:	d00b      	beq.n	8001832 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800181a:	4b4d      	ldr	r3, [pc, #308]	; (8001950 <HAL_RCC_OscConfig+0x280>)
 800181c:	689b      	ldr	r3, [r3, #8]
 800181e:	f003 030c 	and.w	r3, r3, #12
 8001822:	2b08      	cmp	r3, #8
 8001824:	d11c      	bne.n	8001860 <HAL_RCC_OscConfig+0x190>
 8001826:	4b4a      	ldr	r3, [pc, #296]	; (8001950 <HAL_RCC_OscConfig+0x280>)
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800182e:	2b00      	cmp	r3, #0
 8001830:	d116      	bne.n	8001860 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001832:	4b47      	ldr	r3, [pc, #284]	; (8001950 <HAL_RCC_OscConfig+0x280>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f003 0302 	and.w	r3, r3, #2
 800183a:	2b00      	cmp	r3, #0
 800183c:	d005      	beq.n	800184a <HAL_RCC_OscConfig+0x17a>
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	68db      	ldr	r3, [r3, #12]
 8001842:	2b01      	cmp	r3, #1
 8001844:	d001      	beq.n	800184a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001846:	2301      	movs	r3, #1
 8001848:	e1e9      	b.n	8001c1e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800184a:	4b41      	ldr	r3, [pc, #260]	; (8001950 <HAL_RCC_OscConfig+0x280>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	691b      	ldr	r3, [r3, #16]
 8001856:	00db      	lsls	r3, r3, #3
 8001858:	493d      	ldr	r1, [pc, #244]	; (8001950 <HAL_RCC_OscConfig+0x280>)
 800185a:	4313      	orrs	r3, r2
 800185c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800185e:	e040      	b.n	80018e2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	68db      	ldr	r3, [r3, #12]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d023      	beq.n	80018b0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001868:	4b39      	ldr	r3, [pc, #228]	; (8001950 <HAL_RCC_OscConfig+0x280>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a38      	ldr	r2, [pc, #224]	; (8001950 <HAL_RCC_OscConfig+0x280>)
 800186e:	f043 0301 	orr.w	r3, r3, #1
 8001872:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001874:	f7ff fbd0 	bl	8001018 <HAL_GetTick>
 8001878:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800187a:	e008      	b.n	800188e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800187c:	f7ff fbcc 	bl	8001018 <HAL_GetTick>
 8001880:	4602      	mov	r2, r0
 8001882:	693b      	ldr	r3, [r7, #16]
 8001884:	1ad3      	subs	r3, r2, r3
 8001886:	2b02      	cmp	r3, #2
 8001888:	d901      	bls.n	800188e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800188a:	2303      	movs	r3, #3
 800188c:	e1c7      	b.n	8001c1e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800188e:	4b30      	ldr	r3, [pc, #192]	; (8001950 <HAL_RCC_OscConfig+0x280>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f003 0302 	and.w	r3, r3, #2
 8001896:	2b00      	cmp	r3, #0
 8001898:	d0f0      	beq.n	800187c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800189a:	4b2d      	ldr	r3, [pc, #180]	; (8001950 <HAL_RCC_OscConfig+0x280>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	691b      	ldr	r3, [r3, #16]
 80018a6:	00db      	lsls	r3, r3, #3
 80018a8:	4929      	ldr	r1, [pc, #164]	; (8001950 <HAL_RCC_OscConfig+0x280>)
 80018aa:	4313      	orrs	r3, r2
 80018ac:	600b      	str	r3, [r1, #0]
 80018ae:	e018      	b.n	80018e2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018b0:	4b27      	ldr	r3, [pc, #156]	; (8001950 <HAL_RCC_OscConfig+0x280>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a26      	ldr	r2, [pc, #152]	; (8001950 <HAL_RCC_OscConfig+0x280>)
 80018b6:	f023 0301 	bic.w	r3, r3, #1
 80018ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018bc:	f7ff fbac 	bl	8001018 <HAL_GetTick>
 80018c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018c2:	e008      	b.n	80018d6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018c4:	f7ff fba8 	bl	8001018 <HAL_GetTick>
 80018c8:	4602      	mov	r2, r0
 80018ca:	693b      	ldr	r3, [r7, #16]
 80018cc:	1ad3      	subs	r3, r2, r3
 80018ce:	2b02      	cmp	r3, #2
 80018d0:	d901      	bls.n	80018d6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80018d2:	2303      	movs	r3, #3
 80018d4:	e1a3      	b.n	8001c1e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018d6:	4b1e      	ldr	r3, [pc, #120]	; (8001950 <HAL_RCC_OscConfig+0x280>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f003 0302 	and.w	r3, r3, #2
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d1f0      	bne.n	80018c4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f003 0308 	and.w	r3, r3, #8
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d038      	beq.n	8001960 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	695b      	ldr	r3, [r3, #20]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d019      	beq.n	800192a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018f6:	4b16      	ldr	r3, [pc, #88]	; (8001950 <HAL_RCC_OscConfig+0x280>)
 80018f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018fa:	4a15      	ldr	r2, [pc, #84]	; (8001950 <HAL_RCC_OscConfig+0x280>)
 80018fc:	f043 0301 	orr.w	r3, r3, #1
 8001900:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001902:	f7ff fb89 	bl	8001018 <HAL_GetTick>
 8001906:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001908:	e008      	b.n	800191c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800190a:	f7ff fb85 	bl	8001018 <HAL_GetTick>
 800190e:	4602      	mov	r2, r0
 8001910:	693b      	ldr	r3, [r7, #16]
 8001912:	1ad3      	subs	r3, r2, r3
 8001914:	2b02      	cmp	r3, #2
 8001916:	d901      	bls.n	800191c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001918:	2303      	movs	r3, #3
 800191a:	e180      	b.n	8001c1e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800191c:	4b0c      	ldr	r3, [pc, #48]	; (8001950 <HAL_RCC_OscConfig+0x280>)
 800191e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001920:	f003 0302 	and.w	r3, r3, #2
 8001924:	2b00      	cmp	r3, #0
 8001926:	d0f0      	beq.n	800190a <HAL_RCC_OscConfig+0x23a>
 8001928:	e01a      	b.n	8001960 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800192a:	4b09      	ldr	r3, [pc, #36]	; (8001950 <HAL_RCC_OscConfig+0x280>)
 800192c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800192e:	4a08      	ldr	r2, [pc, #32]	; (8001950 <HAL_RCC_OscConfig+0x280>)
 8001930:	f023 0301 	bic.w	r3, r3, #1
 8001934:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001936:	f7ff fb6f 	bl	8001018 <HAL_GetTick>
 800193a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800193c:	e00a      	b.n	8001954 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800193e:	f7ff fb6b 	bl	8001018 <HAL_GetTick>
 8001942:	4602      	mov	r2, r0
 8001944:	693b      	ldr	r3, [r7, #16]
 8001946:	1ad3      	subs	r3, r2, r3
 8001948:	2b02      	cmp	r3, #2
 800194a:	d903      	bls.n	8001954 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800194c:	2303      	movs	r3, #3
 800194e:	e166      	b.n	8001c1e <HAL_RCC_OscConfig+0x54e>
 8001950:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001954:	4b92      	ldr	r3, [pc, #584]	; (8001ba0 <HAL_RCC_OscConfig+0x4d0>)
 8001956:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001958:	f003 0302 	and.w	r3, r3, #2
 800195c:	2b00      	cmp	r3, #0
 800195e:	d1ee      	bne.n	800193e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f003 0304 	and.w	r3, r3, #4
 8001968:	2b00      	cmp	r3, #0
 800196a:	f000 80a4 	beq.w	8001ab6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800196e:	4b8c      	ldr	r3, [pc, #560]	; (8001ba0 <HAL_RCC_OscConfig+0x4d0>)
 8001970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001972:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001976:	2b00      	cmp	r3, #0
 8001978:	d10d      	bne.n	8001996 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800197a:	4b89      	ldr	r3, [pc, #548]	; (8001ba0 <HAL_RCC_OscConfig+0x4d0>)
 800197c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800197e:	4a88      	ldr	r2, [pc, #544]	; (8001ba0 <HAL_RCC_OscConfig+0x4d0>)
 8001980:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001984:	6413      	str	r3, [r2, #64]	; 0x40
 8001986:	4b86      	ldr	r3, [pc, #536]	; (8001ba0 <HAL_RCC_OscConfig+0x4d0>)
 8001988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800198a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800198e:	60bb      	str	r3, [r7, #8]
 8001990:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001992:	2301      	movs	r3, #1
 8001994:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001996:	4b83      	ldr	r3, [pc, #524]	; (8001ba4 <HAL_RCC_OscConfig+0x4d4>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d118      	bne.n	80019d4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80019a2:	4b80      	ldr	r3, [pc, #512]	; (8001ba4 <HAL_RCC_OscConfig+0x4d4>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4a7f      	ldr	r2, [pc, #508]	; (8001ba4 <HAL_RCC_OscConfig+0x4d4>)
 80019a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019ae:	f7ff fb33 	bl	8001018 <HAL_GetTick>
 80019b2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019b4:	e008      	b.n	80019c8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019b6:	f7ff fb2f 	bl	8001018 <HAL_GetTick>
 80019ba:	4602      	mov	r2, r0
 80019bc:	693b      	ldr	r3, [r7, #16]
 80019be:	1ad3      	subs	r3, r2, r3
 80019c0:	2b64      	cmp	r3, #100	; 0x64
 80019c2:	d901      	bls.n	80019c8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80019c4:	2303      	movs	r3, #3
 80019c6:	e12a      	b.n	8001c1e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019c8:	4b76      	ldr	r3, [pc, #472]	; (8001ba4 <HAL_RCC_OscConfig+0x4d4>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d0f0      	beq.n	80019b6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	689b      	ldr	r3, [r3, #8]
 80019d8:	2b01      	cmp	r3, #1
 80019da:	d106      	bne.n	80019ea <HAL_RCC_OscConfig+0x31a>
 80019dc:	4b70      	ldr	r3, [pc, #448]	; (8001ba0 <HAL_RCC_OscConfig+0x4d0>)
 80019de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019e0:	4a6f      	ldr	r2, [pc, #444]	; (8001ba0 <HAL_RCC_OscConfig+0x4d0>)
 80019e2:	f043 0301 	orr.w	r3, r3, #1
 80019e6:	6713      	str	r3, [r2, #112]	; 0x70
 80019e8:	e02d      	b.n	8001a46 <HAL_RCC_OscConfig+0x376>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	689b      	ldr	r3, [r3, #8]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d10c      	bne.n	8001a0c <HAL_RCC_OscConfig+0x33c>
 80019f2:	4b6b      	ldr	r3, [pc, #428]	; (8001ba0 <HAL_RCC_OscConfig+0x4d0>)
 80019f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019f6:	4a6a      	ldr	r2, [pc, #424]	; (8001ba0 <HAL_RCC_OscConfig+0x4d0>)
 80019f8:	f023 0301 	bic.w	r3, r3, #1
 80019fc:	6713      	str	r3, [r2, #112]	; 0x70
 80019fe:	4b68      	ldr	r3, [pc, #416]	; (8001ba0 <HAL_RCC_OscConfig+0x4d0>)
 8001a00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a02:	4a67      	ldr	r2, [pc, #412]	; (8001ba0 <HAL_RCC_OscConfig+0x4d0>)
 8001a04:	f023 0304 	bic.w	r3, r3, #4
 8001a08:	6713      	str	r3, [r2, #112]	; 0x70
 8001a0a:	e01c      	b.n	8001a46 <HAL_RCC_OscConfig+0x376>
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	689b      	ldr	r3, [r3, #8]
 8001a10:	2b05      	cmp	r3, #5
 8001a12:	d10c      	bne.n	8001a2e <HAL_RCC_OscConfig+0x35e>
 8001a14:	4b62      	ldr	r3, [pc, #392]	; (8001ba0 <HAL_RCC_OscConfig+0x4d0>)
 8001a16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a18:	4a61      	ldr	r2, [pc, #388]	; (8001ba0 <HAL_RCC_OscConfig+0x4d0>)
 8001a1a:	f043 0304 	orr.w	r3, r3, #4
 8001a1e:	6713      	str	r3, [r2, #112]	; 0x70
 8001a20:	4b5f      	ldr	r3, [pc, #380]	; (8001ba0 <HAL_RCC_OscConfig+0x4d0>)
 8001a22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a24:	4a5e      	ldr	r2, [pc, #376]	; (8001ba0 <HAL_RCC_OscConfig+0x4d0>)
 8001a26:	f043 0301 	orr.w	r3, r3, #1
 8001a2a:	6713      	str	r3, [r2, #112]	; 0x70
 8001a2c:	e00b      	b.n	8001a46 <HAL_RCC_OscConfig+0x376>
 8001a2e:	4b5c      	ldr	r3, [pc, #368]	; (8001ba0 <HAL_RCC_OscConfig+0x4d0>)
 8001a30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a32:	4a5b      	ldr	r2, [pc, #364]	; (8001ba0 <HAL_RCC_OscConfig+0x4d0>)
 8001a34:	f023 0301 	bic.w	r3, r3, #1
 8001a38:	6713      	str	r3, [r2, #112]	; 0x70
 8001a3a:	4b59      	ldr	r3, [pc, #356]	; (8001ba0 <HAL_RCC_OscConfig+0x4d0>)
 8001a3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a3e:	4a58      	ldr	r2, [pc, #352]	; (8001ba0 <HAL_RCC_OscConfig+0x4d0>)
 8001a40:	f023 0304 	bic.w	r3, r3, #4
 8001a44:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	689b      	ldr	r3, [r3, #8]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d015      	beq.n	8001a7a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a4e:	f7ff fae3 	bl	8001018 <HAL_GetTick>
 8001a52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a54:	e00a      	b.n	8001a6c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a56:	f7ff fadf 	bl	8001018 <HAL_GetTick>
 8001a5a:	4602      	mov	r2, r0
 8001a5c:	693b      	ldr	r3, [r7, #16]
 8001a5e:	1ad3      	subs	r3, r2, r3
 8001a60:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d901      	bls.n	8001a6c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001a68:	2303      	movs	r3, #3
 8001a6a:	e0d8      	b.n	8001c1e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a6c:	4b4c      	ldr	r3, [pc, #304]	; (8001ba0 <HAL_RCC_OscConfig+0x4d0>)
 8001a6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a70:	f003 0302 	and.w	r3, r3, #2
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d0ee      	beq.n	8001a56 <HAL_RCC_OscConfig+0x386>
 8001a78:	e014      	b.n	8001aa4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a7a:	f7ff facd 	bl	8001018 <HAL_GetTick>
 8001a7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a80:	e00a      	b.n	8001a98 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a82:	f7ff fac9 	bl	8001018 <HAL_GetTick>
 8001a86:	4602      	mov	r2, r0
 8001a88:	693b      	ldr	r3, [r7, #16]
 8001a8a:	1ad3      	subs	r3, r2, r3
 8001a8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d901      	bls.n	8001a98 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001a94:	2303      	movs	r3, #3
 8001a96:	e0c2      	b.n	8001c1e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a98:	4b41      	ldr	r3, [pc, #260]	; (8001ba0 <HAL_RCC_OscConfig+0x4d0>)
 8001a9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a9c:	f003 0302 	and.w	r3, r3, #2
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d1ee      	bne.n	8001a82 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001aa4:	7dfb      	ldrb	r3, [r7, #23]
 8001aa6:	2b01      	cmp	r3, #1
 8001aa8:	d105      	bne.n	8001ab6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001aaa:	4b3d      	ldr	r3, [pc, #244]	; (8001ba0 <HAL_RCC_OscConfig+0x4d0>)
 8001aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aae:	4a3c      	ldr	r2, [pc, #240]	; (8001ba0 <HAL_RCC_OscConfig+0x4d0>)
 8001ab0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ab4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	699b      	ldr	r3, [r3, #24]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	f000 80ae 	beq.w	8001c1c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ac0:	4b37      	ldr	r3, [pc, #220]	; (8001ba0 <HAL_RCC_OscConfig+0x4d0>)
 8001ac2:	689b      	ldr	r3, [r3, #8]
 8001ac4:	f003 030c 	and.w	r3, r3, #12
 8001ac8:	2b08      	cmp	r3, #8
 8001aca:	d06d      	beq.n	8001ba8 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	699b      	ldr	r3, [r3, #24]
 8001ad0:	2b02      	cmp	r3, #2
 8001ad2:	d14b      	bne.n	8001b6c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ad4:	4b32      	ldr	r3, [pc, #200]	; (8001ba0 <HAL_RCC_OscConfig+0x4d0>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a31      	ldr	r2, [pc, #196]	; (8001ba0 <HAL_RCC_OscConfig+0x4d0>)
 8001ada:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ade:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ae0:	f7ff fa9a 	bl	8001018 <HAL_GetTick>
 8001ae4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ae6:	e008      	b.n	8001afa <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ae8:	f7ff fa96 	bl	8001018 <HAL_GetTick>
 8001aec:	4602      	mov	r2, r0
 8001aee:	693b      	ldr	r3, [r7, #16]
 8001af0:	1ad3      	subs	r3, r2, r3
 8001af2:	2b02      	cmp	r3, #2
 8001af4:	d901      	bls.n	8001afa <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001af6:	2303      	movs	r3, #3
 8001af8:	e091      	b.n	8001c1e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001afa:	4b29      	ldr	r3, [pc, #164]	; (8001ba0 <HAL_RCC_OscConfig+0x4d0>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d1f0      	bne.n	8001ae8 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	69da      	ldr	r2, [r3, #28]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6a1b      	ldr	r3, [r3, #32]
 8001b0e:	431a      	orrs	r2, r3
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b14:	019b      	lsls	r3, r3, #6
 8001b16:	431a      	orrs	r2, r3
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b1c:	085b      	lsrs	r3, r3, #1
 8001b1e:	3b01      	subs	r3, #1
 8001b20:	041b      	lsls	r3, r3, #16
 8001b22:	431a      	orrs	r2, r3
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b28:	061b      	lsls	r3, r3, #24
 8001b2a:	431a      	orrs	r2, r3
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b30:	071b      	lsls	r3, r3, #28
 8001b32:	491b      	ldr	r1, [pc, #108]	; (8001ba0 <HAL_RCC_OscConfig+0x4d0>)
 8001b34:	4313      	orrs	r3, r2
 8001b36:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b38:	4b19      	ldr	r3, [pc, #100]	; (8001ba0 <HAL_RCC_OscConfig+0x4d0>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a18      	ldr	r2, [pc, #96]	; (8001ba0 <HAL_RCC_OscConfig+0x4d0>)
 8001b3e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b44:	f7ff fa68 	bl	8001018 <HAL_GetTick>
 8001b48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b4a:	e008      	b.n	8001b5e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b4c:	f7ff fa64 	bl	8001018 <HAL_GetTick>
 8001b50:	4602      	mov	r2, r0
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	1ad3      	subs	r3, r2, r3
 8001b56:	2b02      	cmp	r3, #2
 8001b58:	d901      	bls.n	8001b5e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001b5a:	2303      	movs	r3, #3
 8001b5c:	e05f      	b.n	8001c1e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b5e:	4b10      	ldr	r3, [pc, #64]	; (8001ba0 <HAL_RCC_OscConfig+0x4d0>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d0f0      	beq.n	8001b4c <HAL_RCC_OscConfig+0x47c>
 8001b6a:	e057      	b.n	8001c1c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b6c:	4b0c      	ldr	r3, [pc, #48]	; (8001ba0 <HAL_RCC_OscConfig+0x4d0>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a0b      	ldr	r2, [pc, #44]	; (8001ba0 <HAL_RCC_OscConfig+0x4d0>)
 8001b72:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b78:	f7ff fa4e 	bl	8001018 <HAL_GetTick>
 8001b7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b7e:	e008      	b.n	8001b92 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b80:	f7ff fa4a 	bl	8001018 <HAL_GetTick>
 8001b84:	4602      	mov	r2, r0
 8001b86:	693b      	ldr	r3, [r7, #16]
 8001b88:	1ad3      	subs	r3, r2, r3
 8001b8a:	2b02      	cmp	r3, #2
 8001b8c:	d901      	bls.n	8001b92 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8001b8e:	2303      	movs	r3, #3
 8001b90:	e045      	b.n	8001c1e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b92:	4b03      	ldr	r3, [pc, #12]	; (8001ba0 <HAL_RCC_OscConfig+0x4d0>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d1f0      	bne.n	8001b80 <HAL_RCC_OscConfig+0x4b0>
 8001b9e:	e03d      	b.n	8001c1c <HAL_RCC_OscConfig+0x54c>
 8001ba0:	40023800 	.word	0x40023800
 8001ba4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001ba8:	4b1f      	ldr	r3, [pc, #124]	; (8001c28 <HAL_RCC_OscConfig+0x558>)
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	699b      	ldr	r3, [r3, #24]
 8001bb2:	2b01      	cmp	r3, #1
 8001bb4:	d030      	beq.n	8001c18 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	d129      	bne.n	8001c18 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bce:	429a      	cmp	r2, r3
 8001bd0:	d122      	bne.n	8001c18 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001bd2:	68fa      	ldr	r2, [r7, #12]
 8001bd4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001bd8:	4013      	ands	r3, r2
 8001bda:	687a      	ldr	r2, [r7, #4]
 8001bdc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001bde:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d119      	bne.n	8001c18 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bee:	085b      	lsrs	r3, r3, #1
 8001bf0:	3b01      	subs	r3, #1
 8001bf2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	d10f      	bne.n	8001c18 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c02:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001c04:	429a      	cmp	r2, r3
 8001c06:	d107      	bne.n	8001c18 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c12:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c14:	429a      	cmp	r2, r3
 8001c16:	d001      	beq.n	8001c1c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	e000      	b.n	8001c1e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8001c1c:	2300      	movs	r3, #0
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	3718      	adds	r7, #24
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	40023800 	.word	0x40023800

08001c2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b084      	sub	sp, #16
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
 8001c34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001c36:	2300      	movs	r3, #0
 8001c38:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d101      	bne.n	8001c44 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001c40:	2301      	movs	r3, #1
 8001c42:	e0d0      	b.n	8001de6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c44:	4b6a      	ldr	r3, [pc, #424]	; (8001df0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f003 030f 	and.w	r3, r3, #15
 8001c4c:	683a      	ldr	r2, [r7, #0]
 8001c4e:	429a      	cmp	r2, r3
 8001c50:	d910      	bls.n	8001c74 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c52:	4b67      	ldr	r3, [pc, #412]	; (8001df0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f023 020f 	bic.w	r2, r3, #15
 8001c5a:	4965      	ldr	r1, [pc, #404]	; (8001df0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c62:	4b63      	ldr	r3, [pc, #396]	; (8001df0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f003 030f 	and.w	r3, r3, #15
 8001c6a:	683a      	ldr	r2, [r7, #0]
 8001c6c:	429a      	cmp	r2, r3
 8001c6e:	d001      	beq.n	8001c74 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001c70:	2301      	movs	r3, #1
 8001c72:	e0b8      	b.n	8001de6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f003 0302 	and.w	r3, r3, #2
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d020      	beq.n	8001cc2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f003 0304 	and.w	r3, r3, #4
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d005      	beq.n	8001c98 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c8c:	4b59      	ldr	r3, [pc, #356]	; (8001df4 <HAL_RCC_ClockConfig+0x1c8>)
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	4a58      	ldr	r2, [pc, #352]	; (8001df4 <HAL_RCC_ClockConfig+0x1c8>)
 8001c92:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001c96:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f003 0308 	and.w	r3, r3, #8
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d005      	beq.n	8001cb0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ca4:	4b53      	ldr	r3, [pc, #332]	; (8001df4 <HAL_RCC_ClockConfig+0x1c8>)
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	4a52      	ldr	r2, [pc, #328]	; (8001df4 <HAL_RCC_ClockConfig+0x1c8>)
 8001caa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001cae:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cb0:	4b50      	ldr	r3, [pc, #320]	; (8001df4 <HAL_RCC_ClockConfig+0x1c8>)
 8001cb2:	689b      	ldr	r3, [r3, #8]
 8001cb4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	689b      	ldr	r3, [r3, #8]
 8001cbc:	494d      	ldr	r1, [pc, #308]	; (8001df4 <HAL_RCC_ClockConfig+0x1c8>)
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f003 0301 	and.w	r3, r3, #1
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d040      	beq.n	8001d50 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	2b01      	cmp	r3, #1
 8001cd4:	d107      	bne.n	8001ce6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cd6:	4b47      	ldr	r3, [pc, #284]	; (8001df4 <HAL_RCC_ClockConfig+0x1c8>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d115      	bne.n	8001d0e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e07f      	b.n	8001de6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	2b02      	cmp	r3, #2
 8001cec:	d107      	bne.n	8001cfe <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cee:	4b41      	ldr	r3, [pc, #260]	; (8001df4 <HAL_RCC_ClockConfig+0x1c8>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d109      	bne.n	8001d0e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e073      	b.n	8001de6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cfe:	4b3d      	ldr	r3, [pc, #244]	; (8001df4 <HAL_RCC_ClockConfig+0x1c8>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f003 0302 	and.w	r3, r3, #2
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d101      	bne.n	8001d0e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e06b      	b.n	8001de6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d0e:	4b39      	ldr	r3, [pc, #228]	; (8001df4 <HAL_RCC_ClockConfig+0x1c8>)
 8001d10:	689b      	ldr	r3, [r3, #8]
 8001d12:	f023 0203 	bic.w	r2, r3, #3
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	4936      	ldr	r1, [pc, #216]	; (8001df4 <HAL_RCC_ClockConfig+0x1c8>)
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001d20:	f7ff f97a 	bl	8001018 <HAL_GetTick>
 8001d24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d26:	e00a      	b.n	8001d3e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d28:	f7ff f976 	bl	8001018 <HAL_GetTick>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	1ad3      	subs	r3, r2, r3
 8001d32:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d901      	bls.n	8001d3e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001d3a:	2303      	movs	r3, #3
 8001d3c:	e053      	b.n	8001de6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d3e:	4b2d      	ldr	r3, [pc, #180]	; (8001df4 <HAL_RCC_ClockConfig+0x1c8>)
 8001d40:	689b      	ldr	r3, [r3, #8]
 8001d42:	f003 020c 	and.w	r2, r3, #12
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	009b      	lsls	r3, r3, #2
 8001d4c:	429a      	cmp	r2, r3
 8001d4e:	d1eb      	bne.n	8001d28 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d50:	4b27      	ldr	r3, [pc, #156]	; (8001df0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f003 030f 	and.w	r3, r3, #15
 8001d58:	683a      	ldr	r2, [r7, #0]
 8001d5a:	429a      	cmp	r2, r3
 8001d5c:	d210      	bcs.n	8001d80 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d5e:	4b24      	ldr	r3, [pc, #144]	; (8001df0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f023 020f 	bic.w	r2, r3, #15
 8001d66:	4922      	ldr	r1, [pc, #136]	; (8001df0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d6e:	4b20      	ldr	r3, [pc, #128]	; (8001df0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f003 030f 	and.w	r3, r3, #15
 8001d76:	683a      	ldr	r2, [r7, #0]
 8001d78:	429a      	cmp	r2, r3
 8001d7a:	d001      	beq.n	8001d80 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	e032      	b.n	8001de6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f003 0304 	and.w	r3, r3, #4
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d008      	beq.n	8001d9e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d8c:	4b19      	ldr	r3, [pc, #100]	; (8001df4 <HAL_RCC_ClockConfig+0x1c8>)
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	68db      	ldr	r3, [r3, #12]
 8001d98:	4916      	ldr	r1, [pc, #88]	; (8001df4 <HAL_RCC_ClockConfig+0x1c8>)
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f003 0308 	and.w	r3, r3, #8
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d009      	beq.n	8001dbe <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001daa:	4b12      	ldr	r3, [pc, #72]	; (8001df4 <HAL_RCC_ClockConfig+0x1c8>)
 8001dac:	689b      	ldr	r3, [r3, #8]
 8001dae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	691b      	ldr	r3, [r3, #16]
 8001db6:	00db      	lsls	r3, r3, #3
 8001db8:	490e      	ldr	r1, [pc, #56]	; (8001df4 <HAL_RCC_ClockConfig+0x1c8>)
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001dbe:	f000 f821 	bl	8001e04 <HAL_RCC_GetSysClockFreq>
 8001dc2:	4602      	mov	r2, r0
 8001dc4:	4b0b      	ldr	r3, [pc, #44]	; (8001df4 <HAL_RCC_ClockConfig+0x1c8>)
 8001dc6:	689b      	ldr	r3, [r3, #8]
 8001dc8:	091b      	lsrs	r3, r3, #4
 8001dca:	f003 030f 	and.w	r3, r3, #15
 8001dce:	490a      	ldr	r1, [pc, #40]	; (8001df8 <HAL_RCC_ClockConfig+0x1cc>)
 8001dd0:	5ccb      	ldrb	r3, [r1, r3]
 8001dd2:	fa22 f303 	lsr.w	r3, r2, r3
 8001dd6:	4a09      	ldr	r2, [pc, #36]	; (8001dfc <HAL_RCC_ClockConfig+0x1d0>)
 8001dd8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001dda:	4b09      	ldr	r3, [pc, #36]	; (8001e00 <HAL_RCC_ClockConfig+0x1d4>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4618      	mov	r0, r3
 8001de0:	f7ff f8d6 	bl	8000f90 <HAL_InitTick>

  return HAL_OK;
 8001de4:	2300      	movs	r3, #0
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	3710      	adds	r7, #16
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	40023c00 	.word	0x40023c00
 8001df4:	40023800 	.word	0x40023800
 8001df8:	08005374 	.word	0x08005374
 8001dfc:	20000020 	.word	0x20000020
 8001e00:	20000024 	.word	0x20000024

08001e04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001e08:	b090      	sub	sp, #64	; 0x40
 8001e0a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	637b      	str	r3, [r7, #52]	; 0x34
 8001e10:	2300      	movs	r3, #0
 8001e12:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001e14:	2300      	movs	r3, #0
 8001e16:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e1c:	4b59      	ldr	r3, [pc, #356]	; (8001f84 <HAL_RCC_GetSysClockFreq+0x180>)
 8001e1e:	689b      	ldr	r3, [r3, #8]
 8001e20:	f003 030c 	and.w	r3, r3, #12
 8001e24:	2b08      	cmp	r3, #8
 8001e26:	d00d      	beq.n	8001e44 <HAL_RCC_GetSysClockFreq+0x40>
 8001e28:	2b08      	cmp	r3, #8
 8001e2a:	f200 80a1 	bhi.w	8001f70 <HAL_RCC_GetSysClockFreq+0x16c>
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d002      	beq.n	8001e38 <HAL_RCC_GetSysClockFreq+0x34>
 8001e32:	2b04      	cmp	r3, #4
 8001e34:	d003      	beq.n	8001e3e <HAL_RCC_GetSysClockFreq+0x3a>
 8001e36:	e09b      	b.n	8001f70 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001e38:	4b53      	ldr	r3, [pc, #332]	; (8001f88 <HAL_RCC_GetSysClockFreq+0x184>)
 8001e3a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001e3c:	e09b      	b.n	8001f76 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001e3e:	4b53      	ldr	r3, [pc, #332]	; (8001f8c <HAL_RCC_GetSysClockFreq+0x188>)
 8001e40:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001e42:	e098      	b.n	8001f76 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e44:	4b4f      	ldr	r3, [pc, #316]	; (8001f84 <HAL_RCC_GetSysClockFreq+0x180>)
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001e4c:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001e4e:	4b4d      	ldr	r3, [pc, #308]	; (8001f84 <HAL_RCC_GetSysClockFreq+0x180>)
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d028      	beq.n	8001eac <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e5a:	4b4a      	ldr	r3, [pc, #296]	; (8001f84 <HAL_RCC_GetSysClockFreq+0x180>)
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	099b      	lsrs	r3, r3, #6
 8001e60:	2200      	movs	r2, #0
 8001e62:	623b      	str	r3, [r7, #32]
 8001e64:	627a      	str	r2, [r7, #36]	; 0x24
 8001e66:	6a3b      	ldr	r3, [r7, #32]
 8001e68:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001e6c:	2100      	movs	r1, #0
 8001e6e:	4b47      	ldr	r3, [pc, #284]	; (8001f8c <HAL_RCC_GetSysClockFreq+0x188>)
 8001e70:	fb03 f201 	mul.w	r2, r3, r1
 8001e74:	2300      	movs	r3, #0
 8001e76:	fb00 f303 	mul.w	r3, r0, r3
 8001e7a:	4413      	add	r3, r2
 8001e7c:	4a43      	ldr	r2, [pc, #268]	; (8001f8c <HAL_RCC_GetSysClockFreq+0x188>)
 8001e7e:	fba0 1202 	umull	r1, r2, r0, r2
 8001e82:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001e84:	460a      	mov	r2, r1
 8001e86:	62ba      	str	r2, [r7, #40]	; 0x28
 8001e88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e8a:	4413      	add	r3, r2
 8001e8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e90:	2200      	movs	r2, #0
 8001e92:	61bb      	str	r3, [r7, #24]
 8001e94:	61fa      	str	r2, [r7, #28]
 8001e96:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001e9a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001e9e:	f7fe f9cb 	bl	8000238 <__aeabi_uldivmod>
 8001ea2:	4602      	mov	r2, r0
 8001ea4:	460b      	mov	r3, r1
 8001ea6:	4613      	mov	r3, r2
 8001ea8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001eaa:	e053      	b.n	8001f54 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001eac:	4b35      	ldr	r3, [pc, #212]	; (8001f84 <HAL_RCC_GetSysClockFreq+0x180>)
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	099b      	lsrs	r3, r3, #6
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	613b      	str	r3, [r7, #16]
 8001eb6:	617a      	str	r2, [r7, #20]
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001ebe:	f04f 0b00 	mov.w	fp, #0
 8001ec2:	4652      	mov	r2, sl
 8001ec4:	465b      	mov	r3, fp
 8001ec6:	f04f 0000 	mov.w	r0, #0
 8001eca:	f04f 0100 	mov.w	r1, #0
 8001ece:	0159      	lsls	r1, r3, #5
 8001ed0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ed4:	0150      	lsls	r0, r2, #5
 8001ed6:	4602      	mov	r2, r0
 8001ed8:	460b      	mov	r3, r1
 8001eda:	ebb2 080a 	subs.w	r8, r2, sl
 8001ede:	eb63 090b 	sbc.w	r9, r3, fp
 8001ee2:	f04f 0200 	mov.w	r2, #0
 8001ee6:	f04f 0300 	mov.w	r3, #0
 8001eea:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001eee:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001ef2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001ef6:	ebb2 0408 	subs.w	r4, r2, r8
 8001efa:	eb63 0509 	sbc.w	r5, r3, r9
 8001efe:	f04f 0200 	mov.w	r2, #0
 8001f02:	f04f 0300 	mov.w	r3, #0
 8001f06:	00eb      	lsls	r3, r5, #3
 8001f08:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001f0c:	00e2      	lsls	r2, r4, #3
 8001f0e:	4614      	mov	r4, r2
 8001f10:	461d      	mov	r5, r3
 8001f12:	eb14 030a 	adds.w	r3, r4, sl
 8001f16:	603b      	str	r3, [r7, #0]
 8001f18:	eb45 030b 	adc.w	r3, r5, fp
 8001f1c:	607b      	str	r3, [r7, #4]
 8001f1e:	f04f 0200 	mov.w	r2, #0
 8001f22:	f04f 0300 	mov.w	r3, #0
 8001f26:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001f2a:	4629      	mov	r1, r5
 8001f2c:	028b      	lsls	r3, r1, #10
 8001f2e:	4621      	mov	r1, r4
 8001f30:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001f34:	4621      	mov	r1, r4
 8001f36:	028a      	lsls	r2, r1, #10
 8001f38:	4610      	mov	r0, r2
 8001f3a:	4619      	mov	r1, r3
 8001f3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f3e:	2200      	movs	r2, #0
 8001f40:	60bb      	str	r3, [r7, #8]
 8001f42:	60fa      	str	r2, [r7, #12]
 8001f44:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001f48:	f7fe f976 	bl	8000238 <__aeabi_uldivmod>
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	460b      	mov	r3, r1
 8001f50:	4613      	mov	r3, r2
 8001f52:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001f54:	4b0b      	ldr	r3, [pc, #44]	; (8001f84 <HAL_RCC_GetSysClockFreq+0x180>)
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	0c1b      	lsrs	r3, r3, #16
 8001f5a:	f003 0303 	and.w	r3, r3, #3
 8001f5e:	3301      	adds	r3, #1
 8001f60:	005b      	lsls	r3, r3, #1
 8001f62:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8001f64:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f68:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f6c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001f6e:	e002      	b.n	8001f76 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001f70:	4b05      	ldr	r3, [pc, #20]	; (8001f88 <HAL_RCC_GetSysClockFreq+0x184>)
 8001f72:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001f74:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	3740      	adds	r7, #64	; 0x40
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001f82:	bf00      	nop
 8001f84:	40023800 	.word	0x40023800
 8001f88:	00f42400 	.word	0x00f42400
 8001f8c:	017d7840 	.word	0x017d7840

08001f90 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f90:	b480      	push	{r7}
 8001f92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f94:	4b03      	ldr	r3, [pc, #12]	; (8001fa4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001f96:	681b      	ldr	r3, [r3, #0]
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr
 8001fa2:	bf00      	nop
 8001fa4:	20000020 	.word	0x20000020

08001fa8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001fac:	f7ff fff0 	bl	8001f90 <HAL_RCC_GetHCLKFreq>
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	4b05      	ldr	r3, [pc, #20]	; (8001fc8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001fb4:	689b      	ldr	r3, [r3, #8]
 8001fb6:	0a9b      	lsrs	r3, r3, #10
 8001fb8:	f003 0307 	and.w	r3, r3, #7
 8001fbc:	4903      	ldr	r1, [pc, #12]	; (8001fcc <HAL_RCC_GetPCLK1Freq+0x24>)
 8001fbe:	5ccb      	ldrb	r3, [r1, r3]
 8001fc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	bd80      	pop	{r7, pc}
 8001fc8:	40023800 	.word	0x40023800
 8001fcc:	08005384 	.word	0x08005384

08001fd0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001fd4:	f7ff ffdc 	bl	8001f90 <HAL_RCC_GetHCLKFreq>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	4b05      	ldr	r3, [pc, #20]	; (8001ff0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001fdc:	689b      	ldr	r3, [r3, #8]
 8001fde:	0b5b      	lsrs	r3, r3, #13
 8001fe0:	f003 0307 	and.w	r3, r3, #7
 8001fe4:	4903      	ldr	r1, [pc, #12]	; (8001ff4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001fe6:	5ccb      	ldrb	r3, [r1, r3]
 8001fe8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	bd80      	pop	{r7, pc}
 8001ff0:	40023800 	.word	0x40023800
 8001ff4:	08005384 	.word	0x08005384

08001ff8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b088      	sub	sp, #32
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002000:	2300      	movs	r3, #0
 8002002:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002004:	2300      	movs	r3, #0
 8002006:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002008:	2300      	movs	r3, #0
 800200a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800200c:	2300      	movs	r3, #0
 800200e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002010:	2300      	movs	r3, #0
 8002012:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f003 0301 	and.w	r3, r3, #1
 800201c:	2b00      	cmp	r3, #0
 800201e:	d012      	beq.n	8002046 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002020:	4b69      	ldr	r3, [pc, #420]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002022:	689b      	ldr	r3, [r3, #8]
 8002024:	4a68      	ldr	r2, [pc, #416]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002026:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800202a:	6093      	str	r3, [r2, #8]
 800202c:	4b66      	ldr	r3, [pc, #408]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800202e:	689a      	ldr	r2, [r3, #8]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002034:	4964      	ldr	r1, [pc, #400]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002036:	4313      	orrs	r3, r2
 8002038:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800203e:	2b00      	cmp	r3, #0
 8002040:	d101      	bne.n	8002046 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002042:	2301      	movs	r3, #1
 8002044:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800204e:	2b00      	cmp	r3, #0
 8002050:	d017      	beq.n	8002082 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002052:	4b5d      	ldr	r3, [pc, #372]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002054:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002058:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002060:	4959      	ldr	r1, [pc, #356]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002062:	4313      	orrs	r3, r2
 8002064:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800206c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002070:	d101      	bne.n	8002076 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002072:	2301      	movs	r3, #1
 8002074:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800207a:	2b00      	cmp	r3, #0
 800207c:	d101      	bne.n	8002082 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800207e:	2301      	movs	r3, #1
 8002080:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800208a:	2b00      	cmp	r3, #0
 800208c:	d017      	beq.n	80020be <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800208e:	4b4e      	ldr	r3, [pc, #312]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002090:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002094:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800209c:	494a      	ldr	r1, [pc, #296]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800209e:	4313      	orrs	r3, r2
 80020a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80020ac:	d101      	bne.n	80020b2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80020ae:	2301      	movs	r3, #1
 80020b0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d101      	bne.n	80020be <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80020ba:	2301      	movs	r3, #1
 80020bc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d001      	beq.n	80020ce <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80020ca:	2301      	movs	r3, #1
 80020cc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f003 0320 	and.w	r3, r3, #32
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	f000 808b 	beq.w	80021f2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80020dc:	4b3a      	ldr	r3, [pc, #232]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e0:	4a39      	ldr	r2, [pc, #228]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020e6:	6413      	str	r3, [r2, #64]	; 0x40
 80020e8:	4b37      	ldr	r3, [pc, #220]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020f0:	60bb      	str	r3, [r7, #8]
 80020f2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80020f4:	4b35      	ldr	r3, [pc, #212]	; (80021cc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a34      	ldr	r2, [pc, #208]	; (80021cc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80020fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020fe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002100:	f7fe ff8a 	bl	8001018 <HAL_GetTick>
 8002104:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002106:	e008      	b.n	800211a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002108:	f7fe ff86 	bl	8001018 <HAL_GetTick>
 800210c:	4602      	mov	r2, r0
 800210e:	697b      	ldr	r3, [r7, #20]
 8002110:	1ad3      	subs	r3, r2, r3
 8002112:	2b64      	cmp	r3, #100	; 0x64
 8002114:	d901      	bls.n	800211a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002116:	2303      	movs	r3, #3
 8002118:	e38f      	b.n	800283a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800211a:	4b2c      	ldr	r3, [pc, #176]	; (80021cc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002122:	2b00      	cmp	r3, #0
 8002124:	d0f0      	beq.n	8002108 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002126:	4b28      	ldr	r3, [pc, #160]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002128:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800212a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800212e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002130:	693b      	ldr	r3, [r7, #16]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d035      	beq.n	80021a2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800213a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800213e:	693a      	ldr	r2, [r7, #16]
 8002140:	429a      	cmp	r2, r3
 8002142:	d02e      	beq.n	80021a2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002144:	4b20      	ldr	r3, [pc, #128]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002146:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002148:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800214c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800214e:	4b1e      	ldr	r3, [pc, #120]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002150:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002152:	4a1d      	ldr	r2, [pc, #116]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002154:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002158:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800215a:	4b1b      	ldr	r3, [pc, #108]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800215c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800215e:	4a1a      	ldr	r2, [pc, #104]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002160:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002164:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002166:	4a18      	ldr	r2, [pc, #96]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002168:	693b      	ldr	r3, [r7, #16]
 800216a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800216c:	4b16      	ldr	r3, [pc, #88]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800216e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002170:	f003 0301 	and.w	r3, r3, #1
 8002174:	2b01      	cmp	r3, #1
 8002176:	d114      	bne.n	80021a2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002178:	f7fe ff4e 	bl	8001018 <HAL_GetTick>
 800217c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800217e:	e00a      	b.n	8002196 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002180:	f7fe ff4a 	bl	8001018 <HAL_GetTick>
 8002184:	4602      	mov	r2, r0
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	1ad3      	subs	r3, r2, r3
 800218a:	f241 3288 	movw	r2, #5000	; 0x1388
 800218e:	4293      	cmp	r3, r2
 8002190:	d901      	bls.n	8002196 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002192:	2303      	movs	r3, #3
 8002194:	e351      	b.n	800283a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002196:	4b0c      	ldr	r3, [pc, #48]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002198:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800219a:	f003 0302 	and.w	r3, r3, #2
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d0ee      	beq.n	8002180 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80021ae:	d111      	bne.n	80021d4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80021b0:	4b05      	ldr	r3, [pc, #20]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80021bc:	4b04      	ldr	r3, [pc, #16]	; (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80021be:	400b      	ands	r3, r1
 80021c0:	4901      	ldr	r1, [pc, #4]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021c2:	4313      	orrs	r3, r2
 80021c4:	608b      	str	r3, [r1, #8]
 80021c6:	e00b      	b.n	80021e0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80021c8:	40023800 	.word	0x40023800
 80021cc:	40007000 	.word	0x40007000
 80021d0:	0ffffcff 	.word	0x0ffffcff
 80021d4:	4bac      	ldr	r3, [pc, #688]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	4aab      	ldr	r2, [pc, #684]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021da:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80021de:	6093      	str	r3, [r2, #8]
 80021e0:	4ba9      	ldr	r3, [pc, #676]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021e2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021ec:	49a6      	ldr	r1, [pc, #664]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021ee:	4313      	orrs	r3, r2
 80021f0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 0310 	and.w	r3, r3, #16
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d010      	beq.n	8002220 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80021fe:	4ba2      	ldr	r3, [pc, #648]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002200:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002204:	4aa0      	ldr	r2, [pc, #640]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002206:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800220a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800220e:	4b9e      	ldr	r3, [pc, #632]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002210:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002218:	499b      	ldr	r1, [pc, #620]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800221a:	4313      	orrs	r3, r2
 800221c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002228:	2b00      	cmp	r3, #0
 800222a:	d00a      	beq.n	8002242 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800222c:	4b96      	ldr	r3, [pc, #600]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800222e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002232:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800223a:	4993      	ldr	r1, [pc, #588]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800223c:	4313      	orrs	r3, r2
 800223e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800224a:	2b00      	cmp	r3, #0
 800224c:	d00a      	beq.n	8002264 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800224e:	4b8e      	ldr	r3, [pc, #568]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002250:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002254:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800225c:	498a      	ldr	r1, [pc, #552]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800225e:	4313      	orrs	r3, r2
 8002260:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800226c:	2b00      	cmp	r3, #0
 800226e:	d00a      	beq.n	8002286 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002270:	4b85      	ldr	r3, [pc, #532]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002272:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002276:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800227e:	4982      	ldr	r1, [pc, #520]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002280:	4313      	orrs	r3, r2
 8002282:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800228e:	2b00      	cmp	r3, #0
 8002290:	d00a      	beq.n	80022a8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002292:	4b7d      	ldr	r3, [pc, #500]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002294:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002298:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022a0:	4979      	ldr	r1, [pc, #484]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022a2:	4313      	orrs	r3, r2
 80022a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d00a      	beq.n	80022ca <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80022b4:	4b74      	ldr	r3, [pc, #464]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022ba:	f023 0203 	bic.w	r2, r3, #3
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022c2:	4971      	ldr	r1, [pc, #452]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022c4:	4313      	orrs	r3, r2
 80022c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d00a      	beq.n	80022ec <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80022d6:	4b6c      	ldr	r3, [pc, #432]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022dc:	f023 020c 	bic.w	r2, r3, #12
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022e4:	4968      	ldr	r1, [pc, #416]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022e6:	4313      	orrs	r3, r2
 80022e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d00a      	beq.n	800230e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80022f8:	4b63      	ldr	r3, [pc, #396]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022fe:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002306:	4960      	ldr	r1, [pc, #384]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002308:	4313      	orrs	r3, r2
 800230a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002316:	2b00      	cmp	r3, #0
 8002318:	d00a      	beq.n	8002330 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800231a:	4b5b      	ldr	r3, [pc, #364]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800231c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002320:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002328:	4957      	ldr	r1, [pc, #348]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800232a:	4313      	orrs	r3, r2
 800232c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002338:	2b00      	cmp	r3, #0
 800233a:	d00a      	beq.n	8002352 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800233c:	4b52      	ldr	r3, [pc, #328]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800233e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002342:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800234a:	494f      	ldr	r1, [pc, #316]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800234c:	4313      	orrs	r3, r2
 800234e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800235a:	2b00      	cmp	r3, #0
 800235c:	d00a      	beq.n	8002374 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800235e:	4b4a      	ldr	r3, [pc, #296]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002360:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002364:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800236c:	4946      	ldr	r1, [pc, #280]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800236e:	4313      	orrs	r3, r2
 8002370:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800237c:	2b00      	cmp	r3, #0
 800237e:	d00a      	beq.n	8002396 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002380:	4b41      	ldr	r3, [pc, #260]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002382:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002386:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800238e:	493e      	ldr	r1, [pc, #248]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002390:	4313      	orrs	r3, r2
 8002392:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d00a      	beq.n	80023b8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80023a2:	4b39      	ldr	r3, [pc, #228]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023a8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023b0:	4935      	ldr	r1, [pc, #212]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023b2:	4313      	orrs	r3, r2
 80023b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d00a      	beq.n	80023da <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80023c4:	4b30      	ldr	r3, [pc, #192]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023ca:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80023d2:	492d      	ldr	r1, [pc, #180]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023d4:	4313      	orrs	r3, r2
 80023d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d011      	beq.n	800240a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80023e6:	4b28      	ldr	r3, [pc, #160]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023ec:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80023f4:	4924      	ldr	r1, [pc, #144]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023f6:	4313      	orrs	r3, r2
 80023f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002400:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002404:	d101      	bne.n	800240a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002406:	2301      	movs	r3, #1
 8002408:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f003 0308 	and.w	r3, r3, #8
 8002412:	2b00      	cmp	r3, #0
 8002414:	d001      	beq.n	800241a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002416:	2301      	movs	r3, #1
 8002418:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002422:	2b00      	cmp	r3, #0
 8002424:	d00a      	beq.n	800243c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002426:	4b18      	ldr	r3, [pc, #96]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002428:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800242c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002434:	4914      	ldr	r1, [pc, #80]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002436:	4313      	orrs	r3, r2
 8002438:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002444:	2b00      	cmp	r3, #0
 8002446:	d00b      	beq.n	8002460 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002448:	4b0f      	ldr	r3, [pc, #60]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800244a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800244e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002458:	490b      	ldr	r1, [pc, #44]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800245a:	4313      	orrs	r3, r2
 800245c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002468:	2b00      	cmp	r3, #0
 800246a:	d00f      	beq.n	800248c <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800246c:	4b06      	ldr	r3, [pc, #24]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800246e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002472:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800247c:	4902      	ldr	r1, [pc, #8]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800247e:	4313      	orrs	r3, r2
 8002480:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002484:	e002      	b.n	800248c <HAL_RCCEx_PeriphCLKConfig+0x494>
 8002486:	bf00      	nop
 8002488:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002494:	2b00      	cmp	r3, #0
 8002496:	d00b      	beq.n	80024b0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002498:	4b8a      	ldr	r3, [pc, #552]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800249a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800249e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024a8:	4986      	ldr	r1, [pc, #536]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80024aa:	4313      	orrs	r3, r2
 80024ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d00b      	beq.n	80024d4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80024bc:	4b81      	ldr	r3, [pc, #516]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80024be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80024c2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80024cc:	497d      	ldr	r1, [pc, #500]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80024ce:	4313      	orrs	r3, r2
 80024d0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80024d4:	69fb      	ldr	r3, [r7, #28]
 80024d6:	2b01      	cmp	r3, #1
 80024d8:	d006      	beq.n	80024e8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	f000 80d6 	beq.w	8002694 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80024e8:	4b76      	ldr	r3, [pc, #472]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a75      	ldr	r2, [pc, #468]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80024ee:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80024f2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024f4:	f7fe fd90 	bl	8001018 <HAL_GetTick>
 80024f8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80024fa:	e008      	b.n	800250e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80024fc:	f7fe fd8c 	bl	8001018 <HAL_GetTick>
 8002500:	4602      	mov	r2, r0
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	1ad3      	subs	r3, r2, r3
 8002506:	2b64      	cmp	r3, #100	; 0x64
 8002508:	d901      	bls.n	800250e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800250a:	2303      	movs	r3, #3
 800250c:	e195      	b.n	800283a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800250e:	4b6d      	ldr	r3, [pc, #436]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002516:	2b00      	cmp	r3, #0
 8002518:	d1f0      	bne.n	80024fc <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f003 0301 	and.w	r3, r3, #1
 8002522:	2b00      	cmp	r3, #0
 8002524:	d021      	beq.n	800256a <HAL_RCCEx_PeriphCLKConfig+0x572>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800252a:	2b00      	cmp	r3, #0
 800252c:	d11d      	bne.n	800256a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800252e:	4b65      	ldr	r3, [pc, #404]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002530:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002534:	0c1b      	lsrs	r3, r3, #16
 8002536:	f003 0303 	and.w	r3, r3, #3
 800253a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800253c:	4b61      	ldr	r3, [pc, #388]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800253e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002542:	0e1b      	lsrs	r3, r3, #24
 8002544:	f003 030f 	and.w	r3, r3, #15
 8002548:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	019a      	lsls	r2, r3, #6
 8002550:	693b      	ldr	r3, [r7, #16]
 8002552:	041b      	lsls	r3, r3, #16
 8002554:	431a      	orrs	r2, r3
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	061b      	lsls	r3, r3, #24
 800255a:	431a      	orrs	r2, r3
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	071b      	lsls	r3, r3, #28
 8002562:	4958      	ldr	r1, [pc, #352]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002564:	4313      	orrs	r3, r2
 8002566:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002572:	2b00      	cmp	r3, #0
 8002574:	d004      	beq.n	8002580 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800257a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800257e:	d00a      	beq.n	8002596 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002588:	2b00      	cmp	r3, #0
 800258a:	d02e      	beq.n	80025ea <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002590:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002594:	d129      	bne.n	80025ea <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002596:	4b4b      	ldr	r3, [pc, #300]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002598:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800259c:	0c1b      	lsrs	r3, r3, #16
 800259e:	f003 0303 	and.w	r3, r3, #3
 80025a2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80025a4:	4b47      	ldr	r3, [pc, #284]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80025a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80025aa:	0f1b      	lsrs	r3, r3, #28
 80025ac:	f003 0307 	and.w	r3, r3, #7
 80025b0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	019a      	lsls	r2, r3, #6
 80025b8:	693b      	ldr	r3, [r7, #16]
 80025ba:	041b      	lsls	r3, r3, #16
 80025bc:	431a      	orrs	r2, r3
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	68db      	ldr	r3, [r3, #12]
 80025c2:	061b      	lsls	r3, r3, #24
 80025c4:	431a      	orrs	r2, r3
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	071b      	lsls	r3, r3, #28
 80025ca:	493e      	ldr	r1, [pc, #248]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80025cc:	4313      	orrs	r3, r2
 80025ce:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80025d2:	4b3c      	ldr	r3, [pc, #240]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80025d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80025d8:	f023 021f 	bic.w	r2, r3, #31
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e0:	3b01      	subs	r3, #1
 80025e2:	4938      	ldr	r1, [pc, #224]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80025e4:	4313      	orrs	r3, r2
 80025e6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d01d      	beq.n	8002632 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80025f6:	4b33      	ldr	r3, [pc, #204]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80025f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80025fc:	0e1b      	lsrs	r3, r3, #24
 80025fe:	f003 030f 	and.w	r3, r3, #15
 8002602:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002604:	4b2f      	ldr	r3, [pc, #188]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002606:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800260a:	0f1b      	lsrs	r3, r3, #28
 800260c:	f003 0307 	and.w	r3, r3, #7
 8002610:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	019a      	lsls	r2, r3, #6
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	691b      	ldr	r3, [r3, #16]
 800261c:	041b      	lsls	r3, r3, #16
 800261e:	431a      	orrs	r2, r3
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	061b      	lsls	r3, r3, #24
 8002624:	431a      	orrs	r2, r3
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	071b      	lsls	r3, r3, #28
 800262a:	4926      	ldr	r1, [pc, #152]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800262c:	4313      	orrs	r3, r2
 800262e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800263a:	2b00      	cmp	r3, #0
 800263c:	d011      	beq.n	8002662 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	019a      	lsls	r2, r3, #6
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	691b      	ldr	r3, [r3, #16]
 8002648:	041b      	lsls	r3, r3, #16
 800264a:	431a      	orrs	r2, r3
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	68db      	ldr	r3, [r3, #12]
 8002650:	061b      	lsls	r3, r3, #24
 8002652:	431a      	orrs	r2, r3
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	689b      	ldr	r3, [r3, #8]
 8002658:	071b      	lsls	r3, r3, #28
 800265a:	491a      	ldr	r1, [pc, #104]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800265c:	4313      	orrs	r3, r2
 800265e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002662:	4b18      	ldr	r3, [pc, #96]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4a17      	ldr	r2, [pc, #92]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002668:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800266c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800266e:	f7fe fcd3 	bl	8001018 <HAL_GetTick>
 8002672:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002674:	e008      	b.n	8002688 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002676:	f7fe fccf 	bl	8001018 <HAL_GetTick>
 800267a:	4602      	mov	r2, r0
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	1ad3      	subs	r3, r2, r3
 8002680:	2b64      	cmp	r3, #100	; 0x64
 8002682:	d901      	bls.n	8002688 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002684:	2303      	movs	r3, #3
 8002686:	e0d8      	b.n	800283a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002688:	4b0e      	ldr	r3, [pc, #56]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002690:	2b00      	cmp	r3, #0
 8002692:	d0f0      	beq.n	8002676 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002694:	69bb      	ldr	r3, [r7, #24]
 8002696:	2b01      	cmp	r3, #1
 8002698:	f040 80ce 	bne.w	8002838 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800269c:	4b09      	ldr	r3, [pc, #36]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a08      	ldr	r2, [pc, #32]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80026a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026a6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026a8:	f7fe fcb6 	bl	8001018 <HAL_GetTick>
 80026ac:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80026ae:	e00b      	b.n	80026c8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80026b0:	f7fe fcb2 	bl	8001018 <HAL_GetTick>
 80026b4:	4602      	mov	r2, r0
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	1ad3      	subs	r3, r2, r3
 80026ba:	2b64      	cmp	r3, #100	; 0x64
 80026bc:	d904      	bls.n	80026c8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80026be:	2303      	movs	r3, #3
 80026c0:	e0bb      	b.n	800283a <HAL_RCCEx_PeriphCLKConfig+0x842>
 80026c2:	bf00      	nop
 80026c4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80026c8:	4b5e      	ldr	r3, [pc, #376]	; (8002844 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80026d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80026d4:	d0ec      	beq.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d003      	beq.n	80026ea <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d009      	beq.n	80026fe <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d02e      	beq.n	8002754 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d12a      	bne.n	8002754 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80026fe:	4b51      	ldr	r3, [pc, #324]	; (8002844 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002700:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002704:	0c1b      	lsrs	r3, r3, #16
 8002706:	f003 0303 	and.w	r3, r3, #3
 800270a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800270c:	4b4d      	ldr	r3, [pc, #308]	; (8002844 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800270e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002712:	0f1b      	lsrs	r3, r3, #28
 8002714:	f003 0307 	and.w	r3, r3, #7
 8002718:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	695b      	ldr	r3, [r3, #20]
 800271e:	019a      	lsls	r2, r3, #6
 8002720:	693b      	ldr	r3, [r7, #16]
 8002722:	041b      	lsls	r3, r3, #16
 8002724:	431a      	orrs	r2, r3
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	699b      	ldr	r3, [r3, #24]
 800272a:	061b      	lsls	r3, r3, #24
 800272c:	431a      	orrs	r2, r3
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	071b      	lsls	r3, r3, #28
 8002732:	4944      	ldr	r1, [pc, #272]	; (8002844 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002734:	4313      	orrs	r3, r2
 8002736:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800273a:	4b42      	ldr	r3, [pc, #264]	; (8002844 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800273c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002740:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002748:	3b01      	subs	r3, #1
 800274a:	021b      	lsls	r3, r3, #8
 800274c:	493d      	ldr	r1, [pc, #244]	; (8002844 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800274e:	4313      	orrs	r3, r2
 8002750:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800275c:	2b00      	cmp	r3, #0
 800275e:	d022      	beq.n	80027a6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002764:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002768:	d11d      	bne.n	80027a6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800276a:	4b36      	ldr	r3, [pc, #216]	; (8002844 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800276c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002770:	0e1b      	lsrs	r3, r3, #24
 8002772:	f003 030f 	and.w	r3, r3, #15
 8002776:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002778:	4b32      	ldr	r3, [pc, #200]	; (8002844 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800277a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800277e:	0f1b      	lsrs	r3, r3, #28
 8002780:	f003 0307 	and.w	r3, r3, #7
 8002784:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	695b      	ldr	r3, [r3, #20]
 800278a:	019a      	lsls	r2, r3, #6
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6a1b      	ldr	r3, [r3, #32]
 8002790:	041b      	lsls	r3, r3, #16
 8002792:	431a      	orrs	r2, r3
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	061b      	lsls	r3, r3, #24
 8002798:	431a      	orrs	r2, r3
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	071b      	lsls	r3, r3, #28
 800279e:	4929      	ldr	r1, [pc, #164]	; (8002844 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80027a0:	4313      	orrs	r3, r2
 80027a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f003 0308 	and.w	r3, r3, #8
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d028      	beq.n	8002804 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80027b2:	4b24      	ldr	r3, [pc, #144]	; (8002844 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80027b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027b8:	0e1b      	lsrs	r3, r3, #24
 80027ba:	f003 030f 	and.w	r3, r3, #15
 80027be:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80027c0:	4b20      	ldr	r3, [pc, #128]	; (8002844 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80027c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027c6:	0c1b      	lsrs	r3, r3, #16
 80027c8:	f003 0303 	and.w	r3, r3, #3
 80027cc:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	695b      	ldr	r3, [r3, #20]
 80027d2:	019a      	lsls	r2, r3, #6
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	041b      	lsls	r3, r3, #16
 80027d8:	431a      	orrs	r2, r3
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	061b      	lsls	r3, r3, #24
 80027de:	431a      	orrs	r2, r3
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	69db      	ldr	r3, [r3, #28]
 80027e4:	071b      	lsls	r3, r3, #28
 80027e6:	4917      	ldr	r1, [pc, #92]	; (8002844 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80027e8:	4313      	orrs	r3, r2
 80027ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80027ee:	4b15      	ldr	r3, [pc, #84]	; (8002844 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80027f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80027f4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027fc:	4911      	ldr	r1, [pc, #68]	; (8002844 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80027fe:	4313      	orrs	r3, r2
 8002800:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002804:	4b0f      	ldr	r3, [pc, #60]	; (8002844 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a0e      	ldr	r2, [pc, #56]	; (8002844 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800280a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800280e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002810:	f7fe fc02 	bl	8001018 <HAL_GetTick>
 8002814:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002816:	e008      	b.n	800282a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002818:	f7fe fbfe 	bl	8001018 <HAL_GetTick>
 800281c:	4602      	mov	r2, r0
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	1ad3      	subs	r3, r2, r3
 8002822:	2b64      	cmp	r3, #100	; 0x64
 8002824:	d901      	bls.n	800282a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002826:	2303      	movs	r3, #3
 8002828:	e007      	b.n	800283a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800282a:	4b06      	ldr	r3, [pc, #24]	; (8002844 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002832:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002836:	d1ef      	bne.n	8002818 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8002838:	2300      	movs	r3, #0
}
 800283a:	4618      	mov	r0, r3
 800283c:	3720      	adds	r7, #32
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}
 8002842:	bf00      	nop
 8002844:	40023800 	.word	0x40023800

08002848 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b084      	sub	sp, #16
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d101      	bne.n	800285a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	e09d      	b.n	8002996 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800285e:	2b00      	cmp	r3, #0
 8002860:	d108      	bne.n	8002874 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800286a:	d009      	beq.n	8002880 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2200      	movs	r2, #0
 8002870:	61da      	str	r2, [r3, #28]
 8002872:	e005      	b.n	8002880 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2200      	movs	r2, #0
 8002878:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2200      	movs	r2, #0
 800287e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2200      	movs	r2, #0
 8002884:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800288c:	b2db      	uxtb	r3, r3
 800288e:	2b00      	cmp	r3, #0
 8002890:	d106      	bne.n	80028a0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2200      	movs	r2, #0
 8002896:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800289a:	6878      	ldr	r0, [r7, #4]
 800289c:	f7fe f954 	bl	8000b48 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2202      	movs	r2, #2
 80028a4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	681a      	ldr	r2, [r3, #0]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80028b6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	68db      	ldr	r3, [r3, #12]
 80028bc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80028c0:	d902      	bls.n	80028c8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80028c2:	2300      	movs	r3, #0
 80028c4:	60fb      	str	r3, [r7, #12]
 80028c6:	e002      	b.n	80028ce <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80028c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80028cc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	68db      	ldr	r3, [r3, #12]
 80028d2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80028d6:	d007      	beq.n	80028e8 <HAL_SPI_Init+0xa0>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	68db      	ldr	r3, [r3, #12]
 80028dc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80028e0:	d002      	beq.n	80028e8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2200      	movs	r2, #0
 80028e6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80028f8:	431a      	orrs	r2, r3
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	691b      	ldr	r3, [r3, #16]
 80028fe:	f003 0302 	and.w	r3, r3, #2
 8002902:	431a      	orrs	r2, r3
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	695b      	ldr	r3, [r3, #20]
 8002908:	f003 0301 	and.w	r3, r3, #1
 800290c:	431a      	orrs	r2, r3
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	699b      	ldr	r3, [r3, #24]
 8002912:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002916:	431a      	orrs	r2, r3
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	69db      	ldr	r3, [r3, #28]
 800291c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002920:	431a      	orrs	r2, r3
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6a1b      	ldr	r3, [r3, #32]
 8002926:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800292a:	ea42 0103 	orr.w	r1, r2, r3
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002932:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	430a      	orrs	r2, r1
 800293c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	699b      	ldr	r3, [r3, #24]
 8002942:	0c1b      	lsrs	r3, r3, #16
 8002944:	f003 0204 	and.w	r2, r3, #4
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800294c:	f003 0310 	and.w	r3, r3, #16
 8002950:	431a      	orrs	r2, r3
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002956:	f003 0308 	and.w	r3, r3, #8
 800295a:	431a      	orrs	r2, r3
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	68db      	ldr	r3, [r3, #12]
 8002960:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002964:	ea42 0103 	orr.w	r1, r2, r3
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	430a      	orrs	r2, r1
 8002974:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	69da      	ldr	r2, [r3, #28]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002984:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2200      	movs	r2, #0
 800298a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2201      	movs	r2, #1
 8002990:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002994:	2300      	movs	r3, #0
}
 8002996:	4618      	mov	r0, r3
 8002998:	3710      	adds	r7, #16
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}
	...

080029a0 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b087      	sub	sp, #28
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	60f8      	str	r0, [r7, #12]
 80029a8:	60b9      	str	r1, [r7, #8]
 80029aa:	4613      	mov	r3, r2
 80029ac:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80029ae:	2300      	movs	r3, #0
 80029b0:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80029b8:	2b01      	cmp	r3, #1
 80029ba:	d101      	bne.n	80029c0 <HAL_SPI_Transmit_IT+0x20>
 80029bc:	2302      	movs	r3, #2
 80029be:	e072      	b.n	8002aa6 <HAL_SPI_Transmit_IT+0x106>
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	2201      	movs	r2, #1
 80029c4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if ((pData == NULL) || (Size == 0U))
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d002      	beq.n	80029d4 <HAL_SPI_Transmit_IT+0x34>
 80029ce:	88fb      	ldrh	r3, [r7, #6]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d102      	bne.n	80029da <HAL_SPI_Transmit_IT+0x3a>
  {
    errorcode = HAL_ERROR;
 80029d4:	2301      	movs	r3, #1
 80029d6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80029d8:	e060      	b.n	8002a9c <HAL_SPI_Transmit_IT+0xfc>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80029e0:	b2db      	uxtb	r3, r3
 80029e2:	2b01      	cmp	r3, #1
 80029e4:	d002      	beq.n	80029ec <HAL_SPI_Transmit_IT+0x4c>
  {
    errorcode = HAL_BUSY;
 80029e6:	2302      	movs	r3, #2
 80029e8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80029ea:	e057      	b.n	8002a9c <HAL_SPI_Transmit_IT+0xfc>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	2203      	movs	r2, #3
 80029f0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	2200      	movs	r2, #0
 80029f8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	68ba      	ldr	r2, [r7, #8]
 80029fe:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	88fa      	ldrh	r2, [r7, #6]
 8002a04:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	88fa      	ldrh	r2, [r7, #6]
 8002a0a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	2200      	movs	r2, #0
 8002a16:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxISR       = NULL;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	2200      	movs	r2, #0
 8002a26:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	68db      	ldr	r3, [r3, #12]
 8002a2c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002a30:	d903      	bls.n	8002a3a <HAL_SPI_Transmit_IT+0x9a>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	4a1f      	ldr	r2, [pc, #124]	; (8002ab4 <HAL_SPI_Transmit_IT+0x114>)
 8002a36:	651a      	str	r2, [r3, #80]	; 0x50
 8002a38:	e002      	b.n	8002a40 <HAL_SPI_Transmit_IT+0xa0>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	4a1e      	ldr	r2, [pc, #120]	; (8002ab8 <HAL_SPI_Transmit_IT+0x118>)
 8002a3e:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a48:	d10f      	bne.n	8002a6a <HAL_SPI_Transmit_IT+0xca>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	681a      	ldr	r2, [r3, #0]
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a58:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	681a      	ldr	r2, [r3, #0]
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002a68:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	685a      	ldr	r2, [r3, #4]
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 8002a78:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a84:	2b40      	cmp	r3, #64	; 0x40
 8002a86:	d008      	beq.n	8002a9a <HAL_SPI_Transmit_IT+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	681a      	ldr	r2, [r3, #0]
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a96:	601a      	str	r2, [r3, #0]
 8002a98:	e000      	b.n	8002a9c <HAL_SPI_Transmit_IT+0xfc>
  }

error :
 8002a9a:	bf00      	nop
  __HAL_UNLOCK(hspi);
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002aa4:	7dfb      	ldrb	r3, [r7, #23]
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	371c      	adds	r7, #28
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab0:	4770      	bx	lr
 8002ab2:	bf00      	nop
 8002ab4:	0800329b 	.word	0x0800329b
 8002ab8:	08003255 	.word	0x08003255

08002abc <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b086      	sub	sp, #24
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	60f8      	str	r0, [r7, #12]
 8002ac4:	60b9      	str	r1, [r7, #8]
 8002ac6:	4613      	mov	r3, r2
 8002ac8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002aca:	2300      	movs	r3, #0
 8002acc:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d110      	bne.n	8002af8 <HAL_SPI_Receive_IT+0x3c>
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002ade:	d10b      	bne.n	8002af8 <HAL_SPI_Receive_IT+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	2204      	movs	r2, #4
 8002ae4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 8002ae8:	88fb      	ldrh	r3, [r7, #6]
 8002aea:	68ba      	ldr	r2, [r7, #8]
 8002aec:	68b9      	ldr	r1, [r7, #8]
 8002aee:	68f8      	ldr	r0, [r7, #12]
 8002af0:	f000 f894 	bl	8002c1c <HAL_SPI_TransmitReceive_IT>
 8002af4:	4603      	mov	r3, r0
 8002af6:	e089      	b.n	8002c0c <HAL_SPI_Receive_IT+0x150>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002afe:	2b01      	cmp	r3, #1
 8002b00:	d101      	bne.n	8002b06 <HAL_SPI_Receive_IT+0x4a>
 8002b02:	2302      	movs	r3, #2
 8002b04:	e082      	b.n	8002c0c <HAL_SPI_Receive_IT+0x150>
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	2201      	movs	r2, #1
 8002b0a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002b14:	b2db      	uxtb	r3, r3
 8002b16:	2b01      	cmp	r3, #1
 8002b18:	d002      	beq.n	8002b20 <HAL_SPI_Receive_IT+0x64>
  {
    errorcode = HAL_BUSY;
 8002b1a:	2302      	movs	r3, #2
 8002b1c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002b1e:	e070      	b.n	8002c02 <HAL_SPI_Receive_IT+0x146>
  }

  if ((pData == NULL) || (Size == 0U))
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d002      	beq.n	8002b2c <HAL_SPI_Receive_IT+0x70>
 8002b26:	88fb      	ldrh	r3, [r7, #6]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d102      	bne.n	8002b32 <HAL_SPI_Receive_IT+0x76>
  {
    errorcode = HAL_ERROR;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002b30:	e067      	b.n	8002c02 <HAL_SPI_Receive_IT+0x146>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	2204      	movs	r2, #4
 8002b36:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	68ba      	ldr	r2, [r7, #8]
 8002b44:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	88fa      	ldrh	r2, [r7, #6]
 8002b4a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	88fa      	ldrh	r2, [r7, #6]
 8002b52:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	2200      	movs	r2, #0
 8002b66:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check the data size to adapt Rx threshold and the set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	68db      	ldr	r3, [r3, #12]
 8002b72:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002b76:	d90b      	bls.n	8002b90 <HAL_SPI_Receive_IT+0xd4>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	685a      	ldr	r2, [r3, #4]
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002b86:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	4a22      	ldr	r2, [pc, #136]	; (8002c14 <HAL_SPI_Receive_IT+0x158>)
 8002b8c:	64da      	str	r2, [r3, #76]	; 0x4c
 8002b8e:	e00a      	b.n	8002ba6 <HAL_SPI_Receive_IT+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	685a      	ldr	r2, [r3, #4]
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002b9e:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_8BIT;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	4a1d      	ldr	r2, [pc, #116]	; (8002c18 <HAL_SPI_Receive_IT+0x15c>)
 8002ba4:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	689b      	ldr	r3, [r3, #8]
 8002baa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002bae:	d10f      	bne.n	8002bd0 <HAL_SPI_Receive_IT+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	681a      	ldr	r2, [r3, #0]
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002bbe:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	681a      	ldr	r2, [r3, #0]
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002bce:	601a      	str	r2, [r3, #0]
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	685a      	ldr	r2, [r3, #4]
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8002bde:	605a      	str	r2, [r3, #4]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bea:	2b40      	cmp	r3, #64	; 0x40
 8002bec:	d008      	beq.n	8002c00 <HAL_SPI_Receive_IT+0x144>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	681a      	ldr	r2, [r3, #0]
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002bfc:	601a      	str	r2, [r3, #0]
 8002bfe:	e000      	b.n	8002c02 <HAL_SPI_Receive_IT+0x146>
  }

error :
 8002c00:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	2200      	movs	r2, #0
 8002c06:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002c0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	3718      	adds	r7, #24
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}
 8002c14:	08003209 	.word	0x08003209
 8002c18:	080031b9 	.word	0x080031b9

08002c1c <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b087      	sub	sp, #28
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	60f8      	str	r0, [r7, #12]
 8002c24:	60b9      	str	r1, [r7, #8]
 8002c26:	607a      	str	r2, [r7, #4]
 8002c28:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002c34:	2b01      	cmp	r3, #1
 8002c36:	d101      	bne.n	8002c3c <HAL_SPI_TransmitReceive_IT+0x20>
 8002c38:	2302      	movs	r3, #2
 8002c3a:	e091      	b.n	8002d60 <HAL_SPI_TransmitReceive_IT+0x144>
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	2201      	movs	r2, #1
 8002c40:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002c4a:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002c52:	7dbb      	ldrb	r3, [r7, #22]
 8002c54:	2b01      	cmp	r3, #1
 8002c56:	d00d      	beq.n	8002c74 <HAL_SPI_TransmitReceive_IT+0x58>
 8002c58:	693b      	ldr	r3, [r7, #16]
 8002c5a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002c5e:	d106      	bne.n	8002c6e <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	689b      	ldr	r3, [r3, #8]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d102      	bne.n	8002c6e <HAL_SPI_TransmitReceive_IT+0x52>
 8002c68:	7dbb      	ldrb	r3, [r7, #22]
 8002c6a:	2b04      	cmp	r3, #4
 8002c6c:	d002      	beq.n	8002c74 <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 8002c6e:	2302      	movs	r3, #2
 8002c70:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002c72:	e070      	b.n	8002d56 <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d005      	beq.n	8002c86 <HAL_SPI_TransmitReceive_IT+0x6a>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d002      	beq.n	8002c86 <HAL_SPI_TransmitReceive_IT+0x6a>
 8002c80:	887b      	ldrh	r3, [r7, #2]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d102      	bne.n	8002c8c <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002c8a:	e064      	b.n	8002d56 <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002c92:	b2db      	uxtb	r3, r3
 8002c94:	2b04      	cmp	r3, #4
 8002c96:	d003      	beq.n	8002ca0 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	2205      	movs	r2, #5
 8002c9c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	68ba      	ldr	r2, [r7, #8]
 8002caa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	887a      	ldrh	r2, [r7, #2]
 8002cb0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	887a      	ldrh	r2, [r7, #2]
 8002cb6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	687a      	ldr	r2, [r7, #4]
 8002cbc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	887a      	ldrh	r2, [r7, #2]
 8002cc2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	887a      	ldrh	r2, [r7, #2]
 8002cca:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	68db      	ldr	r3, [r3, #12]
 8002cd2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002cd6:	d906      	bls.n	8002ce6 <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	4a24      	ldr	r2, [pc, #144]	; (8002d6c <HAL_SPI_TransmitReceive_IT+0x150>)
 8002cdc:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	4a23      	ldr	r2, [pc, #140]	; (8002d70 <HAL_SPI_TransmitReceive_IT+0x154>)
 8002ce2:	651a      	str	r2, [r3, #80]	; 0x50
 8002ce4:	e005      	b.n	8002cf2 <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	4a22      	ldr	r2, [pc, #136]	; (8002d74 <HAL_SPI_TransmitReceive_IT+0x158>)
 8002cea:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	4a22      	ldr	r2, [pc, #136]	; (8002d78 <HAL_SPI_TransmitReceive_IT+0x15c>)
 8002cf0:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	68db      	ldr	r3, [r3, #12]
 8002cf6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002cfa:	d802      	bhi.n	8002d02 <HAL_SPI_TransmitReceive_IT+0xe6>
 8002cfc:	887b      	ldrh	r3, [r7, #2]
 8002cfe:	2b01      	cmp	r3, #1
 8002d00:	d908      	bls.n	8002d14 <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	685a      	ldr	r2, [r3, #4]
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002d10:	605a      	str	r2, [r3, #4]
 8002d12:	e007      	b.n	8002d24 <HAL_SPI_TransmitReceive_IT+0x108>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	685a      	ldr	r2, [r3, #4]
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002d22:	605a      	str	r2, [r3, #4]
  }

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	685a      	ldr	r2, [r3, #4]
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 8002d32:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d3e:	2b40      	cmp	r3, #64	; 0x40
 8002d40:	d008      	beq.n	8002d54 <HAL_SPI_TransmitReceive_IT+0x138>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	681a      	ldr	r2, [r3, #0]
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d50:	601a      	str	r2, [r3, #0]
 8002d52:	e000      	b.n	8002d56 <HAL_SPI_TransmitReceive_IT+0x13a>
  }

error :
 8002d54:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002d5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	371c      	adds	r7, #28
 8002d64:	46bd      	mov	sp, r7
 8002d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6a:	4770      	bx	lr
 8002d6c:	080030f3 	.word	0x080030f3
 8002d70:	08003159 	.word	0x08003159
 8002d74:	08002fa3 	.word	0x08002fa3
 8002d78:	08003061 	.word	0x08003061

08002d7c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b088      	sub	sp, #32
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	689b      	ldr	r3, [r3, #8]
 8002d92:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002d94:	69bb      	ldr	r3, [r7, #24]
 8002d96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d10e      	bne.n	8002dbc <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002d9e:	69bb      	ldr	r3, [r7, #24]
 8002da0:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d009      	beq.n	8002dbc <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002da8:	69fb      	ldr	r3, [r7, #28]
 8002daa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d004      	beq.n	8002dbc <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002db6:	6878      	ldr	r0, [r7, #4]
 8002db8:	4798      	blx	r3
    return;
 8002dba:	e0ce      	b.n	8002f5a <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8002dbc:	69bb      	ldr	r3, [r7, #24]
 8002dbe:	f003 0302 	and.w	r3, r3, #2
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d009      	beq.n	8002dda <HAL_SPI_IRQHandler+0x5e>
 8002dc6:	69fb      	ldr	r3, [r7, #28]
 8002dc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d004      	beq.n	8002dda <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002dd4:	6878      	ldr	r0, [r7, #4]
 8002dd6:	4798      	blx	r3
    return;
 8002dd8:	e0bf      	b.n	8002f5a <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002dda:	69bb      	ldr	r3, [r7, #24]
 8002ddc:	f003 0320 	and.w	r3, r3, #32
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d10a      	bne.n	8002dfa <HAL_SPI_IRQHandler+0x7e>
 8002de4:	69bb      	ldr	r3, [r7, #24]
 8002de6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d105      	bne.n	8002dfa <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8002dee:	69bb      	ldr	r3, [r7, #24]
 8002df0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	f000 80b0 	beq.w	8002f5a <HAL_SPI_IRQHandler+0x1de>
 8002dfa:	69fb      	ldr	r3, [r7, #28]
 8002dfc:	f003 0320 	and.w	r3, r3, #32
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	f000 80aa 	beq.w	8002f5a <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002e06:	69bb      	ldr	r3, [r7, #24]
 8002e08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d023      	beq.n	8002e58 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002e16:	b2db      	uxtb	r3, r3
 8002e18:	2b03      	cmp	r3, #3
 8002e1a:	d011      	beq.n	8002e40 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e20:	f043 0204 	orr.w	r2, r3, #4
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002e28:	2300      	movs	r3, #0
 8002e2a:	617b      	str	r3, [r7, #20]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	68db      	ldr	r3, [r3, #12]
 8002e32:	617b      	str	r3, [r7, #20]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	689b      	ldr	r3, [r3, #8]
 8002e3a:	617b      	str	r3, [r7, #20]
 8002e3c:	697b      	ldr	r3, [r7, #20]
 8002e3e:	e00b      	b.n	8002e58 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002e40:	2300      	movs	r3, #0
 8002e42:	613b      	str	r3, [r7, #16]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	68db      	ldr	r3, [r3, #12]
 8002e4a:	613b      	str	r3, [r7, #16]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	613b      	str	r3, [r7, #16]
 8002e54:	693b      	ldr	r3, [r7, #16]
        return;
 8002e56:	e080      	b.n	8002f5a <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8002e58:	69bb      	ldr	r3, [r7, #24]
 8002e5a:	f003 0320 	and.w	r3, r3, #32
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d014      	beq.n	8002e8c <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e66:	f043 0201 	orr.w	r2, r3, #1
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8002e6e:	2300      	movs	r3, #0
 8002e70:	60fb      	str	r3, [r7, #12]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	689b      	ldr	r3, [r3, #8]
 8002e78:	60fb      	str	r3, [r7, #12]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	681a      	ldr	r2, [r3, #0]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e88:	601a      	str	r2, [r3, #0]
 8002e8a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8002e8c:	69bb      	ldr	r3, [r7, #24]
 8002e8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d00c      	beq.n	8002eb0 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e9a:	f043 0208 	orr.w	r2, r3, #8
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	60bb      	str	r3, [r7, #8]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	60bb      	str	r3, [r7, #8]
 8002eae:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d04f      	beq.n	8002f58 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	685a      	ldr	r2, [r3, #4]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002ec6:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2201      	movs	r2, #1
 8002ecc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8002ed0:	69fb      	ldr	r3, [r7, #28]
 8002ed2:	f003 0302 	and.w	r3, r3, #2
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d104      	bne.n	8002ee4 <HAL_SPI_IRQHandler+0x168>
 8002eda:	69fb      	ldr	r3, [r7, #28]
 8002edc:	f003 0301 	and.w	r3, r3, #1
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d034      	beq.n	8002f4e <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	685a      	ldr	r2, [r3, #4]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f022 0203 	bic.w	r2, r2, #3
 8002ef2:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d011      	beq.n	8002f20 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f00:	4a17      	ldr	r2, [pc, #92]	; (8002f60 <HAL_SPI_IRQHandler+0x1e4>)
 8002f02:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f7fe fa12 	bl	8001332 <HAL_DMA_Abort_IT>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d005      	beq.n	8002f20 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f18:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d016      	beq.n	8002f56 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f2c:	4a0c      	ldr	r2, [pc, #48]	; (8002f60 <HAL_SPI_IRQHandler+0x1e4>)
 8002f2e:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f34:	4618      	mov	r0, r3
 8002f36:	f7fe f9fc 	bl	8001332 <HAL_DMA_Abort_IT>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d00a      	beq.n	8002f56 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f44:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8002f4c:	e003      	b.n	8002f56 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8002f4e:	6878      	ldr	r0, [r7, #4]
 8002f50:	f7fd fb4c 	bl	80005ec <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8002f54:	e000      	b.n	8002f58 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8002f56:	bf00      	nop
    return;
 8002f58:	bf00      	nop
  }
}
 8002f5a:	3720      	adds	r7, #32
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd80      	pop	{r7, pc}
 8002f60:	08002f79 	.word	0x08002f79

08002f64 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002f64:	b480      	push	{r7}
 8002f66:	b083      	sub	sp, #12
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8002f6c:	bf00      	nop
 8002f6e:	370c      	adds	r7, #12
 8002f70:	46bd      	mov	sp, r7
 8002f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f76:	4770      	bx	lr

08002f78 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b084      	sub	sp, #16
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f84:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	2200      	movs	r2, #0
 8002f92:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002f94:	68f8      	ldr	r0, [r7, #12]
 8002f96:	f7fd fb29 	bl	80005ec <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002f9a:	bf00      	nop
 8002f9c:	3710      	adds	r7, #16
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}

08002fa2 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002fa2:	b580      	push	{r7, lr}
 8002fa4:	b082      	sub	sp, #8
 8002fa6:	af00      	add	r7, sp, #0
 8002fa8:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002fb0:	b29b      	uxth	r3, r3
 8002fb2:	2b01      	cmp	r3, #1
 8002fb4:	d923      	bls.n	8002ffe <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	68da      	ldr	r2, [r3, #12]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc0:	b292      	uxth	r2, r2
 8002fc2:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc8:	1c9a      	adds	r2, r3, #2
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002fd4:	b29b      	uxth	r3, r3
 8002fd6:	3b02      	subs	r3, #2
 8002fd8:	b29a      	uxth	r2, r3
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002fe6:	b29b      	uxth	r3, r3
 8002fe8:	2b01      	cmp	r3, #1
 8002fea:	d11f      	bne.n	800302c <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	685a      	ldr	r2, [r3, #4]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002ffa:	605a      	str	r2, [r3, #4]
 8002ffc:	e016      	b.n	800302c <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f103 020c 	add.w	r2, r3, #12
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800300a:	7812      	ldrb	r2, [r2, #0]
 800300c:	b2d2      	uxtb	r2, r2
 800300e:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003014:	1c5a      	adds	r2, r3, #1
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003020:	b29b      	uxth	r3, r3
 8003022:	3b01      	subs	r3, #1
 8003024:	b29a      	uxth	r2, r3
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003032:	b29b      	uxth	r3, r3
 8003034:	2b00      	cmp	r3, #0
 8003036:	d10f      	bne.n	8003058 <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	685a      	ldr	r2, [r3, #4]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003046:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800304c:	b29b      	uxth	r3, r3
 800304e:	2b00      	cmp	r3, #0
 8003050:	d102      	bne.n	8003058 <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 8003052:	6878      	ldr	r0, [r7, #4]
 8003054:	f000 fb48 	bl	80036e8 <SPI_CloseRxTx_ISR>
    }
  }
}
 8003058:	bf00      	nop
 800305a:	3708      	adds	r7, #8
 800305c:	46bd      	mov	sp, r7
 800305e:	bd80      	pop	{r7, pc}

08003060 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b082      	sub	sp, #8
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800306c:	b29b      	uxth	r3, r3
 800306e:	2b01      	cmp	r3, #1
 8003070:	d912      	bls.n	8003098 <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003076:	881a      	ldrh	r2, [r3, #0]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003082:	1c9a      	adds	r2, r3, #2
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800308c:	b29b      	uxth	r3, r3
 800308e:	3b02      	subs	r3, #2
 8003090:	b29a      	uxth	r2, r3
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003096:	e012      	b.n	80030be <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	330c      	adds	r3, #12
 80030a2:	7812      	ldrb	r2, [r2, #0]
 80030a4:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030aa:	1c5a      	adds	r2, r3, #1
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030b4:	b29b      	uxth	r3, r3
 80030b6:	3b01      	subs	r3, #1
 80030b8:	b29a      	uxth	r2, r3
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030c2:	b29b      	uxth	r3, r3
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d110      	bne.n	80030ea <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	685a      	ldr	r2, [r3, #4]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80030d6:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80030de:	b29b      	uxth	r3, r3
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d102      	bne.n	80030ea <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 80030e4:	6878      	ldr	r0, [r7, #4]
 80030e6:	f000 faff 	bl	80036e8 <SPI_CloseRxTx_ISR>
    }
  }
}
 80030ea:	bf00      	nop
 80030ec:	3708      	adds	r7, #8
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}

080030f2 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80030f2:	b580      	push	{r7, lr}
 80030f4:	b082      	sub	sp, #8
 80030f6:	af00      	add	r7, sp, #0
 80030f8:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	68da      	ldr	r2, [r3, #12]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003104:	b292      	uxth	r2, r2
 8003106:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800310c:	1c9a      	adds	r2, r3, #2
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003118:	b29b      	uxth	r3, r3
 800311a:	3b01      	subs	r3, #1
 800311c:	b29a      	uxth	r2, r3
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  if (hspi->RxXferCount == 0U)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800312a:	b29b      	uxth	r3, r3
 800312c:	2b00      	cmp	r3, #0
 800312e:	d10f      	bne.n	8003150 <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	685a      	ldr	r2, [r3, #4]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800313e:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003144:	b29b      	uxth	r3, r3
 8003146:	2b00      	cmp	r3, #0
 8003148:	d102      	bne.n	8003150 <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	f000 facc 	bl	80036e8 <SPI_CloseRxTx_ISR>
    }
  }
}
 8003150:	bf00      	nop
 8003152:	3708      	adds	r7, #8
 8003154:	46bd      	mov	sp, r7
 8003156:	bd80      	pop	{r7, pc}

08003158 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b082      	sub	sp, #8
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003164:	881a      	ldrh	r2, [r3, #0]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003170:	1c9a      	adds	r2, r3, #2
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800317a:	b29b      	uxth	r3, r3
 800317c:	3b01      	subs	r3, #1
 800317e:	b29a      	uxth	r2, r3
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003188:	b29b      	uxth	r3, r3
 800318a:	2b00      	cmp	r3, #0
 800318c:	d110      	bne.n	80031b0 <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	685a      	ldr	r2, [r3, #4]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800319c:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80031a4:	b29b      	uxth	r3, r3
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d102      	bne.n	80031b0 <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 80031aa:	6878      	ldr	r0, [r7, #4]
 80031ac:	f000 fa9c 	bl	80036e8 <SPI_CloseRxTx_ISR>
    }
  }
}
 80031b0:	bf00      	nop
 80031b2:	3708      	adds	r7, #8
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}

080031b8 <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b082      	sub	sp, #8
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f103 020c 	add.w	r2, r3, #12
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031cc:	7812      	ldrb	r2, [r2, #0]
 80031ce:	b2d2      	uxtb	r2, r2
 80031d0:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d6:	1c5a      	adds	r2, r3, #1
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80031e2:	b29b      	uxth	r3, r3
 80031e4:	3b01      	subs	r3, #1
 80031e6:	b29a      	uxth	r2, r3
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80031f4:	b29b      	uxth	r3, r3
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d102      	bne.n	8003200 <SPI_RxISR_8BIT+0x48>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 80031fa:	6878      	ldr	r0, [r7, #4]
 80031fc:	f000 fab6 	bl	800376c <SPI_CloseRx_ISR>
  }
}
 8003200:	bf00      	nop
 8003202:	3708      	adds	r7, #8
 8003204:	46bd      	mov	sp, r7
 8003206:	bd80      	pop	{r7, pc}

08003208 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b082      	sub	sp, #8
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	68da      	ldr	r2, [r3, #12]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800321a:	b292      	uxth	r2, r2
 800321c:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003222:	1c9a      	adds	r2, r3, #2
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800322e:	b29b      	uxth	r3, r3
 8003230:	3b01      	subs	r3, #1
 8003232:	b29a      	uxth	r2, r3
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003240:	b29b      	uxth	r3, r3
 8003242:	2b00      	cmp	r3, #0
 8003244:	d102      	bne.n	800324c <SPI_RxISR_16BIT+0x44>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8003246:	6878      	ldr	r0, [r7, #4]
 8003248:	f000 fa90 	bl	800376c <SPI_CloseRx_ISR>
  }
}
 800324c:	bf00      	nop
 800324e:	3708      	adds	r7, #8
 8003250:	46bd      	mov	sp, r7
 8003252:	bd80      	pop	{r7, pc}

08003254 <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b082      	sub	sp, #8
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	330c      	adds	r3, #12
 8003266:	7812      	ldrb	r2, [r2, #0]
 8003268:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800326e:	1c5a      	adds	r2, r3, #1
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003278:	b29b      	uxth	r3, r3
 800327a:	3b01      	subs	r3, #1
 800327c:	b29a      	uxth	r2, r3
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003286:	b29b      	uxth	r3, r3
 8003288:	2b00      	cmp	r3, #0
 800328a:	d102      	bne.n	8003292 <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 800328c:	6878      	ldr	r0, [r7, #4]
 800328e:	f000 fa9d 	bl	80037cc <SPI_CloseTx_ISR>
  }
}
 8003292:	bf00      	nop
 8003294:	3708      	adds	r7, #8
 8003296:	46bd      	mov	sp, r7
 8003298:	bd80      	pop	{r7, pc}

0800329a <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800329a:	b580      	push	{r7, lr}
 800329c:	b082      	sub	sp, #8
 800329e:	af00      	add	r7, sp, #0
 80032a0:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032a6:	881a      	ldrh	r2, [r3, #0]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032b2:	1c9a      	adds	r2, r3, #2
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032bc:	b29b      	uxth	r3, r3
 80032be:	3b01      	subs	r3, #1
 80032c0:	b29a      	uxth	r2, r3
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032ca:	b29b      	uxth	r3, r3
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d102      	bne.n	80032d6 <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 80032d0:	6878      	ldr	r0, [r7, #4]
 80032d2:	f000 fa7b 	bl	80037cc <SPI_CloseTx_ISR>
  }
}
 80032d6:	bf00      	nop
 80032d8:	3708      	adds	r7, #8
 80032da:	46bd      	mov	sp, r7
 80032dc:	bd80      	pop	{r7, pc}
	...

080032e0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b088      	sub	sp, #32
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	60f8      	str	r0, [r7, #12]
 80032e8:	60b9      	str	r1, [r7, #8]
 80032ea:	603b      	str	r3, [r7, #0]
 80032ec:	4613      	mov	r3, r2
 80032ee:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80032f0:	f7fd fe92 	bl	8001018 <HAL_GetTick>
 80032f4:	4602      	mov	r2, r0
 80032f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032f8:	1a9b      	subs	r3, r3, r2
 80032fa:	683a      	ldr	r2, [r7, #0]
 80032fc:	4413      	add	r3, r2
 80032fe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003300:	f7fd fe8a 	bl	8001018 <HAL_GetTick>
 8003304:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003306:	4b39      	ldr	r3, [pc, #228]	; (80033ec <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	015b      	lsls	r3, r3, #5
 800330c:	0d1b      	lsrs	r3, r3, #20
 800330e:	69fa      	ldr	r2, [r7, #28]
 8003310:	fb02 f303 	mul.w	r3, r2, r3
 8003314:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003316:	e054      	b.n	80033c2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800331e:	d050      	beq.n	80033c2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003320:	f7fd fe7a 	bl	8001018 <HAL_GetTick>
 8003324:	4602      	mov	r2, r0
 8003326:	69bb      	ldr	r3, [r7, #24]
 8003328:	1ad3      	subs	r3, r2, r3
 800332a:	69fa      	ldr	r2, [r7, #28]
 800332c:	429a      	cmp	r2, r3
 800332e:	d902      	bls.n	8003336 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003330:	69fb      	ldr	r3, [r7, #28]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d13d      	bne.n	80033b2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	685a      	ldr	r2, [r3, #4]
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003344:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800334e:	d111      	bne.n	8003374 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	689b      	ldr	r3, [r3, #8]
 8003354:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003358:	d004      	beq.n	8003364 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	689b      	ldr	r3, [r3, #8]
 800335e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003362:	d107      	bne.n	8003374 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	681a      	ldr	r2, [r3, #0]
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003372:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003378:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800337c:	d10f      	bne.n	800339e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	681a      	ldr	r2, [r3, #0]
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800338c:	601a      	str	r2, [r3, #0]
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	681a      	ldr	r2, [r3, #0]
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800339c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	2201      	movs	r2, #1
 80033a2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	2200      	movs	r2, #0
 80033aa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80033ae:	2303      	movs	r3, #3
 80033b0:	e017      	b.n	80033e2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d101      	bne.n	80033bc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80033b8:	2300      	movs	r3, #0
 80033ba:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80033bc:	697b      	ldr	r3, [r7, #20]
 80033be:	3b01      	subs	r3, #1
 80033c0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	689a      	ldr	r2, [r3, #8]
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	4013      	ands	r3, r2
 80033cc:	68ba      	ldr	r2, [r7, #8]
 80033ce:	429a      	cmp	r2, r3
 80033d0:	bf0c      	ite	eq
 80033d2:	2301      	moveq	r3, #1
 80033d4:	2300      	movne	r3, #0
 80033d6:	b2db      	uxtb	r3, r3
 80033d8:	461a      	mov	r2, r3
 80033da:	79fb      	ldrb	r3, [r7, #7]
 80033dc:	429a      	cmp	r2, r3
 80033de:	d19b      	bne.n	8003318 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80033e0:	2300      	movs	r3, #0
}
 80033e2:	4618      	mov	r0, r3
 80033e4:	3720      	adds	r7, #32
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}
 80033ea:	bf00      	nop
 80033ec:	20000020 	.word	0x20000020

080033f0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b08a      	sub	sp, #40	; 0x28
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	60f8      	str	r0, [r7, #12]
 80033f8:	60b9      	str	r1, [r7, #8]
 80033fa:	607a      	str	r2, [r7, #4]
 80033fc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80033fe:	2300      	movs	r3, #0
 8003400:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003402:	f7fd fe09 	bl	8001018 <HAL_GetTick>
 8003406:	4602      	mov	r2, r0
 8003408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800340a:	1a9b      	subs	r3, r3, r2
 800340c:	683a      	ldr	r2, [r7, #0]
 800340e:	4413      	add	r3, r2
 8003410:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8003412:	f7fd fe01 	bl	8001018 <HAL_GetTick>
 8003416:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	330c      	adds	r3, #12
 800341e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003420:	4b3d      	ldr	r3, [pc, #244]	; (8003518 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003422:	681a      	ldr	r2, [r3, #0]
 8003424:	4613      	mov	r3, r2
 8003426:	009b      	lsls	r3, r3, #2
 8003428:	4413      	add	r3, r2
 800342a:	00da      	lsls	r2, r3, #3
 800342c:	1ad3      	subs	r3, r2, r3
 800342e:	0d1b      	lsrs	r3, r3, #20
 8003430:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003432:	fb02 f303 	mul.w	r3, r2, r3
 8003436:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003438:	e060      	b.n	80034fc <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003440:	d107      	bne.n	8003452 <SPI_WaitFifoStateUntilTimeout+0x62>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d104      	bne.n	8003452 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003448:	69fb      	ldr	r3, [r7, #28]
 800344a:	781b      	ldrb	r3, [r3, #0]
 800344c:	b2db      	uxtb	r3, r3
 800344e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003450:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003458:	d050      	beq.n	80034fc <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800345a:	f7fd fddd 	bl	8001018 <HAL_GetTick>
 800345e:	4602      	mov	r2, r0
 8003460:	6a3b      	ldr	r3, [r7, #32]
 8003462:	1ad3      	subs	r3, r2, r3
 8003464:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003466:	429a      	cmp	r2, r3
 8003468:	d902      	bls.n	8003470 <SPI_WaitFifoStateUntilTimeout+0x80>
 800346a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800346c:	2b00      	cmp	r3, #0
 800346e:	d13d      	bne.n	80034ec <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	685a      	ldr	r2, [r3, #4]
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800347e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003488:	d111      	bne.n	80034ae <SPI_WaitFifoStateUntilTimeout+0xbe>
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	689b      	ldr	r3, [r3, #8]
 800348e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003492:	d004      	beq.n	800349e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800349c:	d107      	bne.n	80034ae <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	681a      	ldr	r2, [r3, #0]
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034ac:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034b6:	d10f      	bne.n	80034d8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	681a      	ldr	r2, [r3, #0]
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80034c6:	601a      	str	r2, [r3, #0]
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	681a      	ldr	r2, [r3, #0]
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80034d6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	2201      	movs	r2, #1
 80034dc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	2200      	movs	r2, #0
 80034e4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80034e8:	2303      	movs	r3, #3
 80034ea:	e010      	b.n	800350e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80034ec:	69bb      	ldr	r3, [r7, #24]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d101      	bne.n	80034f6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80034f2:	2300      	movs	r3, #0
 80034f4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80034f6:	69bb      	ldr	r3, [r7, #24]
 80034f8:	3b01      	subs	r3, #1
 80034fa:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	689a      	ldr	r2, [r3, #8]
 8003502:	68bb      	ldr	r3, [r7, #8]
 8003504:	4013      	ands	r3, r2
 8003506:	687a      	ldr	r2, [r7, #4]
 8003508:	429a      	cmp	r2, r3
 800350a:	d196      	bne.n	800343a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800350c:	2300      	movs	r3, #0
}
 800350e:	4618      	mov	r0, r3
 8003510:	3728      	adds	r7, #40	; 0x28
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}
 8003516:	bf00      	nop
 8003518:	20000020 	.word	0x20000020

0800351c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b088      	sub	sp, #32
 8003520:	af02      	add	r7, sp, #8
 8003522:	60f8      	str	r0, [r7, #12]
 8003524:	60b9      	str	r1, [r7, #8]
 8003526:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003530:	d111      	bne.n	8003556 <SPI_EndRxTransaction+0x3a>
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	689b      	ldr	r3, [r3, #8]
 8003536:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800353a:	d004      	beq.n	8003546 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	689b      	ldr	r3, [r3, #8]
 8003540:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003544:	d107      	bne.n	8003556 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	681a      	ldr	r2, [r3, #0]
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003554:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800355e:	d112      	bne.n	8003586 <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	9300      	str	r3, [sp, #0]
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	2200      	movs	r2, #0
 8003568:	2180      	movs	r1, #128	; 0x80
 800356a:	68f8      	ldr	r0, [r7, #12]
 800356c:	f7ff feb8 	bl	80032e0 <SPI_WaitFlagStateUntilTimeout>
 8003570:	4603      	mov	r3, r0
 8003572:	2b00      	cmp	r3, #0
 8003574:	d021      	beq.n	80035ba <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800357a:	f043 0220 	orr.w	r2, r3, #32
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8003582:	2303      	movs	r3, #3
 8003584:	e03d      	b.n	8003602 <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in µs */
    __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003586:	4b21      	ldr	r3, [pc, #132]	; (800360c <SPI_EndRxTransaction+0xf0>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a21      	ldr	r2, [pc, #132]	; (8003610 <SPI_EndRxTransaction+0xf4>)
 800358c:	fba2 2303 	umull	r2, r3, r2, r3
 8003590:	0d5b      	lsrs	r3, r3, #21
 8003592:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003596:	fb02 f303 	mul.w	r3, r2, r3
 800359a:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d00a      	beq.n	80035b8 <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 80035a2:	697b      	ldr	r3, [r7, #20]
 80035a4:	3b01      	subs	r3, #1
 80035a6:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035b2:	2b80      	cmp	r3, #128	; 0x80
 80035b4:	d0f2      	beq.n	800359c <SPI_EndRxTransaction+0x80>
 80035b6:	e000      	b.n	80035ba <SPI_EndRxTransaction+0x9e>
        break;
 80035b8:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80035c2:	d11d      	bne.n	8003600 <SPI_EndRxTransaction+0xe4>
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	689b      	ldr	r3, [r3, #8]
 80035c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035cc:	d004      	beq.n	80035d8 <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	689b      	ldr	r3, [r3, #8]
 80035d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035d6:	d113      	bne.n	8003600 <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	9300      	str	r3, [sp, #0]
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	2200      	movs	r2, #0
 80035e0:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80035e4:	68f8      	ldr	r0, [r7, #12]
 80035e6:	f7ff ff03 	bl	80033f0 <SPI_WaitFifoStateUntilTimeout>
 80035ea:	4603      	mov	r3, r0
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d007      	beq.n	8003600 <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035f4:	f043 0220 	orr.w	r2, r3, #32
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80035fc:	2303      	movs	r3, #3
 80035fe:	e000      	b.n	8003602 <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 8003600:	2300      	movs	r3, #0
}
 8003602:	4618      	mov	r0, r3
 8003604:	3718      	adds	r7, #24
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}
 800360a:	bf00      	nop
 800360c:	20000020 	.word	0x20000020
 8003610:	165e9f81 	.word	0x165e9f81

08003614 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b088      	sub	sp, #32
 8003618:	af02      	add	r7, sp, #8
 800361a:	60f8      	str	r0, [r7, #12]
 800361c:	60b9      	str	r1, [r7, #8]
 800361e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	9300      	str	r3, [sp, #0]
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	2200      	movs	r2, #0
 8003628:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800362c:	68f8      	ldr	r0, [r7, #12]
 800362e:	f7ff fedf 	bl	80033f0 <SPI_WaitFifoStateUntilTimeout>
 8003632:	4603      	mov	r3, r0
 8003634:	2b00      	cmp	r3, #0
 8003636:	d007      	beq.n	8003648 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800363c:	f043 0220 	orr.w	r2, r3, #32
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003644:	2303      	movs	r3, #3
 8003646:	e046      	b.n	80036d6 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003648:	4b25      	ldr	r3, [pc, #148]	; (80036e0 <SPI_EndRxTxTransaction+0xcc>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a25      	ldr	r2, [pc, #148]	; (80036e4 <SPI_EndRxTxTransaction+0xd0>)
 800364e:	fba2 2303 	umull	r2, r3, r2, r3
 8003652:	0d5b      	lsrs	r3, r3, #21
 8003654:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003658:	fb02 f303 	mul.w	r3, r2, r3
 800365c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003666:	d112      	bne.n	800368e <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	9300      	str	r3, [sp, #0]
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	2200      	movs	r2, #0
 8003670:	2180      	movs	r1, #128	; 0x80
 8003672:	68f8      	ldr	r0, [r7, #12]
 8003674:	f7ff fe34 	bl	80032e0 <SPI_WaitFlagStateUntilTimeout>
 8003678:	4603      	mov	r3, r0
 800367a:	2b00      	cmp	r3, #0
 800367c:	d016      	beq.n	80036ac <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003682:	f043 0220 	orr.w	r2, r3, #32
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800368a:	2303      	movs	r3, #3
 800368c:	e023      	b.n	80036d6 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d00a      	beq.n	80036aa <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	3b01      	subs	r3, #1
 8003698:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	689b      	ldr	r3, [r3, #8]
 80036a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036a4:	2b80      	cmp	r3, #128	; 0x80
 80036a6:	d0f2      	beq.n	800368e <SPI_EndRxTxTransaction+0x7a>
 80036a8:	e000      	b.n	80036ac <SPI_EndRxTxTransaction+0x98>
        break;
 80036aa:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	9300      	str	r3, [sp, #0]
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	2200      	movs	r2, #0
 80036b4:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80036b8:	68f8      	ldr	r0, [r7, #12]
 80036ba:	f7ff fe99 	bl	80033f0 <SPI_WaitFifoStateUntilTimeout>
 80036be:	4603      	mov	r3, r0
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d007      	beq.n	80036d4 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036c8:	f043 0220 	orr.w	r2, r3, #32
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80036d0:	2303      	movs	r3, #3
 80036d2:	e000      	b.n	80036d6 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 80036d4:	2300      	movs	r3, #0
}
 80036d6:	4618      	mov	r0, r3
 80036d8:	3718      	adds	r7, #24
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}
 80036de:	bf00      	nop
 80036e0:	20000020 	.word	0x20000020
 80036e4:	165e9f81 	.word	0x165e9f81

080036e8 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b084      	sub	sp, #16
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80036f0:	f7fd fc92 	bl	8001018 <HAL_GetTick>
 80036f4:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	685a      	ldr	r2, [r3, #4]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f022 0220 	bic.w	r2, r2, #32
 8003704:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003706:	68fa      	ldr	r2, [r7, #12]
 8003708:	2164      	movs	r1, #100	; 0x64
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	f7ff ff82 	bl	8003614 <SPI_EndRxTxTransaction>
 8003710:	4603      	mov	r3, r0
 8003712:	2b00      	cmp	r3, #0
 8003714:	d005      	beq.n	8003722 <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800371a:	f043 0220 	orr.w	r2, r3, #32
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	661a      	str	r2, [r3, #96]	; 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003726:	2b00      	cmp	r3, #0
 8003728:	d115      	bne.n	8003756 <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003730:	b2db      	uxtb	r3, r3
 8003732:	2b04      	cmp	r3, #4
 8003734:	d107      	bne.n	8003746 <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2201      	movs	r2, #1
 800373a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	f7fc ff38 	bl	80005b4 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8003744:	e00e      	b.n	8003764 <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2201      	movs	r2, #1
 800374a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	f7ff fc08 	bl	8002f64 <HAL_SPI_TxRxCpltCallback>
}
 8003754:	e006      	b.n	8003764 <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2201      	movs	r2, #1
 800375a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 800375e:	6878      	ldr	r0, [r7, #4]
 8003760:	f7fc ff44 	bl	80005ec <HAL_SPI_ErrorCallback>
}
 8003764:	bf00      	nop
 8003766:	3710      	adds	r7, #16
 8003768:	46bd      	mov	sp, r7
 800376a:	bd80      	pop	{r7, pc}

0800376c <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b082      	sub	sp, #8
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	685a      	ldr	r2, [r3, #4]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003782:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8003784:	f7fd fc48 	bl	8001018 <HAL_GetTick>
 8003788:	4603      	mov	r3, r0
 800378a:	461a      	mov	r2, r3
 800378c:	2164      	movs	r1, #100	; 0x64
 800378e:	6878      	ldr	r0, [r7, #4]
 8003790:	f7ff fec4 	bl	800351c <SPI_EndRxTransaction>
 8003794:	4603      	mov	r3, r0
 8003796:	2b00      	cmp	r3, #0
 8003798:	d005      	beq.n	80037a6 <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800379e:	f043 0220 	orr.w	r2, r3, #32
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	661a      	str	r2, [r3, #96]	; 0x60
  }
  hspi->State = HAL_SPI_STATE_READY;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2201      	movs	r2, #1
 80037aa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d103      	bne.n	80037be <SPI_CloseRx_ISR+0x52>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 80037b6:	6878      	ldr	r0, [r7, #4]
 80037b8:	f7fc fefc 	bl	80005b4 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 80037bc:	e002      	b.n	80037c4 <SPI_CloseRx_ISR+0x58>
      HAL_SPI_ErrorCallback(hspi);
 80037be:	6878      	ldr	r0, [r7, #4]
 80037c0:	f7fc ff14 	bl	80005ec <HAL_SPI_ErrorCallback>
}
 80037c4:	bf00      	nop
 80037c6:	3708      	adds	r7, #8
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}

080037cc <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b084      	sub	sp, #16
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80037d4:	f7fd fc20 	bl	8001018 <HAL_GetTick>
 80037d8:	60f8      	str	r0, [r7, #12]

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	685a      	ldr	r2, [r3, #4]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80037e8:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80037ea:	68fa      	ldr	r2, [r7, #12]
 80037ec:	2164      	movs	r1, #100	; 0x64
 80037ee:	6878      	ldr	r0, [r7, #4]
 80037f0:	f7ff ff10 	bl	8003614 <SPI_EndRxTxTransaction>
 80037f4:	4603      	mov	r3, r0
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d005      	beq.n	8003806 <SPI_CloseTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037fe:	f043 0220 	orr.w	r2, r3, #32
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	689b      	ldr	r3, [r3, #8]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d10a      	bne.n	8003824 <SPI_CloseTx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800380e:	2300      	movs	r3, #0
 8003810:	60bb      	str	r3, [r7, #8]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	68db      	ldr	r3, [r3, #12]
 8003818:	60bb      	str	r3, [r7, #8]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	689b      	ldr	r3, [r3, #8]
 8003820:	60bb      	str	r3, [r7, #8]
 8003822:	68bb      	ldr	r3, [r7, #8]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2201      	movs	r2, #1
 8003828:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003830:	2b00      	cmp	r3, #0
 8003832:	d003      	beq.n	800383c <SPI_CloseTx_ISR+0x70>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8003834:	6878      	ldr	r0, [r7, #4]
 8003836:	f7fc fed9 	bl	80005ec <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 800383a:	e002      	b.n	8003842 <SPI_CloseTx_ISR+0x76>
    HAL_SPI_TxCpltCallback(hspi);
 800383c:	6878      	ldr	r0, [r7, #4]
 800383e:	f7fc fe8d 	bl	800055c <HAL_SPI_TxCpltCallback>
}
 8003842:	bf00      	nop
 8003844:	3710      	adds	r7, #16
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}

0800384a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800384a:	b580      	push	{r7, lr}
 800384c:	b082      	sub	sp, #8
 800384e:	af00      	add	r7, sp, #0
 8003850:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d101      	bne.n	800385c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003858:	2301      	movs	r3, #1
 800385a:	e040      	b.n	80038de <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003860:	2b00      	cmp	r3, #0
 8003862:	d106      	bne.n	8003872 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2200      	movs	r2, #0
 8003868:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800386c:	6878      	ldr	r0, [r7, #4]
 800386e:	f7fd fa11 	bl	8000c94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2224      	movs	r2, #36	; 0x24
 8003876:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	681a      	ldr	r2, [r3, #0]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f022 0201 	bic.w	r2, r2, #1
 8003886:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003888:	6878      	ldr	r0, [r7, #4]
 800388a:	f000 fbc1 	bl	8004010 <UART_SetConfig>
 800388e:	4603      	mov	r3, r0
 8003890:	2b01      	cmp	r3, #1
 8003892:	d101      	bne.n	8003898 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003894:	2301      	movs	r3, #1
 8003896:	e022      	b.n	80038de <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800389c:	2b00      	cmp	r3, #0
 800389e:	d002      	beq.n	80038a6 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80038a0:	6878      	ldr	r0, [r7, #4]
 80038a2:	f000 fe19 	bl	80044d8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	685a      	ldr	r2, [r3, #4]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80038b4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	689a      	ldr	r2, [r3, #8]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80038c4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	681a      	ldr	r2, [r3, #0]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f042 0201 	orr.w	r2, r2, #1
 80038d4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80038d6:	6878      	ldr	r0, [r7, #4]
 80038d8:	f000 fea0 	bl	800461c <UART_CheckIdleState>
 80038dc:	4603      	mov	r3, r0
}
 80038de:	4618      	mov	r0, r3
 80038e0:	3708      	adds	r7, #8
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}

080038e6 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038e6:	b580      	push	{r7, lr}
 80038e8:	b08a      	sub	sp, #40	; 0x28
 80038ea:	af02      	add	r7, sp, #8
 80038ec:	60f8      	str	r0, [r7, #12]
 80038ee:	60b9      	str	r1, [r7, #8]
 80038f0:	603b      	str	r3, [r7, #0]
 80038f2:	4613      	mov	r3, r2
 80038f4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80038fa:	2b20      	cmp	r3, #32
 80038fc:	d171      	bne.n	80039e2 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d002      	beq.n	800390a <HAL_UART_Transmit+0x24>
 8003904:	88fb      	ldrh	r3, [r7, #6]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d101      	bne.n	800390e <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800390a:	2301      	movs	r3, #1
 800390c:	e06a      	b.n	80039e4 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	2200      	movs	r2, #0
 8003912:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2221      	movs	r2, #33	; 0x21
 800391a:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800391c:	f7fd fb7c 	bl	8001018 <HAL_GetTick>
 8003920:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	88fa      	ldrh	r2, [r7, #6]
 8003926:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	88fa      	ldrh	r2, [r7, #6]
 800392e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	689b      	ldr	r3, [r3, #8]
 8003936:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800393a:	d108      	bne.n	800394e <HAL_UART_Transmit+0x68>
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	691b      	ldr	r3, [r3, #16]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d104      	bne.n	800394e <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003944:	2300      	movs	r3, #0
 8003946:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003948:	68bb      	ldr	r3, [r7, #8]
 800394a:	61bb      	str	r3, [r7, #24]
 800394c:	e003      	b.n	8003956 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800394e:	68bb      	ldr	r3, [r7, #8]
 8003950:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003952:	2300      	movs	r3, #0
 8003954:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003956:	e02c      	b.n	80039b2 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	9300      	str	r3, [sp, #0]
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	2200      	movs	r2, #0
 8003960:	2180      	movs	r1, #128	; 0x80
 8003962:	68f8      	ldr	r0, [r7, #12]
 8003964:	f000 fea7 	bl	80046b6 <UART_WaitOnFlagUntilTimeout>
 8003968:	4603      	mov	r3, r0
 800396a:	2b00      	cmp	r3, #0
 800396c:	d001      	beq.n	8003972 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 800396e:	2303      	movs	r3, #3
 8003970:	e038      	b.n	80039e4 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003972:	69fb      	ldr	r3, [r7, #28]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d10b      	bne.n	8003990 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003978:	69bb      	ldr	r3, [r7, #24]
 800397a:	881b      	ldrh	r3, [r3, #0]
 800397c:	461a      	mov	r2, r3
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003986:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003988:	69bb      	ldr	r3, [r7, #24]
 800398a:	3302      	adds	r3, #2
 800398c:	61bb      	str	r3, [r7, #24]
 800398e:	e007      	b.n	80039a0 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003990:	69fb      	ldr	r3, [r7, #28]
 8003992:	781a      	ldrb	r2, [r3, #0]
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800399a:	69fb      	ldr	r3, [r7, #28]
 800399c:	3301      	adds	r3, #1
 800399e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80039a6:	b29b      	uxth	r3, r3
 80039a8:	3b01      	subs	r3, #1
 80039aa:	b29a      	uxth	r2, r3
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80039b8:	b29b      	uxth	r3, r3
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d1cc      	bne.n	8003958 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	9300      	str	r3, [sp, #0]
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	2200      	movs	r2, #0
 80039c6:	2140      	movs	r1, #64	; 0x40
 80039c8:	68f8      	ldr	r0, [r7, #12]
 80039ca:	f000 fe74 	bl	80046b6 <UART_WaitOnFlagUntilTimeout>
 80039ce:	4603      	mov	r3, r0
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d001      	beq.n	80039d8 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 80039d4:	2303      	movs	r3, #3
 80039d6:	e005      	b.n	80039e4 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	2220      	movs	r2, #32
 80039dc:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80039de:	2300      	movs	r3, #0
 80039e0:	e000      	b.n	80039e4 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80039e2:	2302      	movs	r3, #2
  }
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	3720      	adds	r7, #32
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}

080039ec <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b0ba      	sub	sp, #232	; 0xe8
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	69db      	ldr	r3, [r3, #28]
 80039fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	689b      	ldr	r3, [r3, #8]
 8003a0e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003a12:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003a16:	f640 030f 	movw	r3, #2063	; 0x80f
 8003a1a:	4013      	ands	r3, r2
 8003a1c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003a20:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d115      	bne.n	8003a54 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003a28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a2c:	f003 0320 	and.w	r3, r3, #32
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d00f      	beq.n	8003a54 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003a34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a38:	f003 0320 	and.w	r3, r3, #32
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d009      	beq.n	8003a54 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	f000 82ac 	beq.w	8003fa2 <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003a4e:	6878      	ldr	r0, [r7, #4]
 8003a50:	4798      	blx	r3
      }
      return;
 8003a52:	e2a6      	b.n	8003fa2 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003a54:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	f000 8117 	beq.w	8003c8c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003a5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a62:	f003 0301 	and.w	r3, r3, #1
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d106      	bne.n	8003a78 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003a6a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003a6e:	4b85      	ldr	r3, [pc, #532]	; (8003c84 <HAL_UART_IRQHandler+0x298>)
 8003a70:	4013      	ands	r3, r2
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	f000 810a 	beq.w	8003c8c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003a78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a7c:	f003 0301 	and.w	r3, r3, #1
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d011      	beq.n	8003aa8 <HAL_UART_IRQHandler+0xbc>
 8003a84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d00b      	beq.n	8003aa8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	2201      	movs	r2, #1
 8003a96:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a9e:	f043 0201 	orr.w	r2, r3, #1
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003aa8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003aac:	f003 0302 	and.w	r3, r3, #2
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d011      	beq.n	8003ad8 <HAL_UART_IRQHandler+0xec>
 8003ab4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ab8:	f003 0301 	and.w	r3, r3, #1
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d00b      	beq.n	8003ad8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	2202      	movs	r2, #2
 8003ac6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ace:	f043 0204 	orr.w	r2, r3, #4
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003ad8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003adc:	f003 0304 	and.w	r3, r3, #4
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d011      	beq.n	8003b08 <HAL_UART_IRQHandler+0x11c>
 8003ae4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ae8:	f003 0301 	and.w	r3, r3, #1
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d00b      	beq.n	8003b08 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	2204      	movs	r2, #4
 8003af6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003afe:	f043 0202 	orr.w	r2, r3, #2
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003b08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b0c:	f003 0308 	and.w	r3, r3, #8
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d017      	beq.n	8003b44 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003b14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b18:	f003 0320 	and.w	r3, r3, #32
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d105      	bne.n	8003b2c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003b20:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b24:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d00b      	beq.n	8003b44 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	2208      	movs	r2, #8
 8003b32:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b3a:	f043 0208 	orr.w	r2, r3, #8
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003b44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b48:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d012      	beq.n	8003b76 <HAL_UART_IRQHandler+0x18a>
 8003b50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b54:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d00c      	beq.n	8003b76 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003b64:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b6c:	f043 0220 	orr.w	r2, r3, #32
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	f000 8212 	beq.w	8003fa6 <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003b82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b86:	f003 0320 	and.w	r3, r3, #32
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d00d      	beq.n	8003baa <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003b8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b92:	f003 0320 	and.w	r3, r3, #32
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d007      	beq.n	8003baa <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d003      	beq.n	8003baa <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ba6:	6878      	ldr	r0, [r7, #4]
 8003ba8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003bb0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	689b      	ldr	r3, [r3, #8]
 8003bba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bbe:	2b40      	cmp	r3, #64	; 0x40
 8003bc0:	d005      	beq.n	8003bce <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003bc2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003bc6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d04f      	beq.n	8003c6e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003bce:	6878      	ldr	r0, [r7, #4]
 8003bd0:	f000 fe37 	bl	8004842 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	689b      	ldr	r3, [r3, #8]
 8003bda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bde:	2b40      	cmp	r3, #64	; 0x40
 8003be0:	d141      	bne.n	8003c66 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	3308      	adds	r3, #8
 8003be8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003bf0:	e853 3f00 	ldrex	r3, [r3]
 8003bf4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003bf8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003bfc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c00:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	3308      	adds	r3, #8
 8003c0a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003c0e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003c12:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c16:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003c1a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003c1e:	e841 2300 	strex	r3, r2, [r1]
 8003c22:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003c26:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d1d9      	bne.n	8003be2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d013      	beq.n	8003c5e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c3a:	4a13      	ldr	r2, [pc, #76]	; (8003c88 <HAL_UART_IRQHandler+0x29c>)
 8003c3c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c42:	4618      	mov	r0, r3
 8003c44:	f7fd fb75 	bl	8001332 <HAL_DMA_Abort_IT>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d017      	beq.n	8003c7e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c54:	687a      	ldr	r2, [r7, #4]
 8003c56:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003c58:	4610      	mov	r0, r2
 8003c5a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c5c:	e00f      	b.n	8003c7e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003c5e:	6878      	ldr	r0, [r7, #4]
 8003c60:	f000 f9b6 	bl	8003fd0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c64:	e00b      	b.n	8003c7e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003c66:	6878      	ldr	r0, [r7, #4]
 8003c68:	f000 f9b2 	bl	8003fd0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c6c:	e007      	b.n	8003c7e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	f000 f9ae 	bl	8003fd0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2200      	movs	r2, #0
 8003c78:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8003c7c:	e193      	b.n	8003fa6 <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c7e:	bf00      	nop
    return;
 8003c80:	e191      	b.n	8003fa6 <HAL_UART_IRQHandler+0x5ba>
 8003c82:	bf00      	nop
 8003c84:	04000120 	.word	0x04000120
 8003c88:	0800490b 	.word	0x0800490b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c90:	2b01      	cmp	r3, #1
 8003c92:	f040 814c 	bne.w	8003f2e <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003c96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c9a:	f003 0310 	and.w	r3, r3, #16
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	f000 8145 	beq.w	8003f2e <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003ca4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ca8:	f003 0310 	and.w	r3, r3, #16
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	f000 813e 	beq.w	8003f2e <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	2210      	movs	r2, #16
 8003cb8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	689b      	ldr	r3, [r3, #8]
 8003cc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cc4:	2b40      	cmp	r3, #64	; 0x40
 8003cc6:	f040 80b6 	bne.w	8003e36 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003cd6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	f000 8165 	beq.w	8003faa <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003ce6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003cea:	429a      	cmp	r2, r3
 8003cec:	f080 815d 	bcs.w	8003faa <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003cf6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cfe:	69db      	ldr	r3, [r3, #28]
 8003d00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d04:	f000 8086 	beq.w	8003e14 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d10:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003d14:	e853 3f00 	ldrex	r3, [r3]
 8003d18:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003d1c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003d20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d24:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	461a      	mov	r2, r3
 8003d2e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003d32:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003d36:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d3a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003d3e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003d42:	e841 2300 	strex	r3, r2, [r1]
 8003d46:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003d4a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d1da      	bne.n	8003d08 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	3308      	adds	r3, #8
 8003d58:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d5a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d5c:	e853 3f00 	ldrex	r3, [r3]
 8003d60:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003d62:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003d64:	f023 0301 	bic.w	r3, r3, #1
 8003d68:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	3308      	adds	r3, #8
 8003d72:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003d76:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003d7a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d7c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003d7e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003d82:	e841 2300 	strex	r3, r2, [r1]
 8003d86:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003d88:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d1e1      	bne.n	8003d52 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	3308      	adds	r3, #8
 8003d94:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d96:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003d98:	e853 3f00 	ldrex	r3, [r3]
 8003d9c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003d9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003da0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003da4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	3308      	adds	r3, #8
 8003dae:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003db2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003db4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003db6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003db8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003dba:	e841 2300 	strex	r3, r2, [r1]
 8003dbe:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003dc0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d1e3      	bne.n	8003d8e <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2220      	movs	r2, #32
 8003dca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ddc:	e853 3f00 	ldrex	r3, [r3]
 8003de0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003de2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003de4:	f023 0310 	bic.w	r3, r3, #16
 8003de8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	461a      	mov	r2, r3
 8003df2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003df6:	65bb      	str	r3, [r7, #88]	; 0x58
 8003df8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dfa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003dfc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003dfe:	e841 2300 	strex	r3, r2, [r1]
 8003e02:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003e04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d1e4      	bne.n	8003dd4 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e0e:	4618      	mov	r0, r3
 8003e10:	f7fd fa1f 	bl	8001252 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2202      	movs	r2, #2
 8003e18:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003e26:	b29b      	uxth	r3, r3
 8003e28:	1ad3      	subs	r3, r2, r3
 8003e2a:	b29b      	uxth	r3, r3
 8003e2c:	4619      	mov	r1, r3
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	f000 f8d8 	bl	8003fe4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003e34:	e0b9      	b.n	8003faa <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003e42:	b29b      	uxth	r3, r3
 8003e44:	1ad3      	subs	r3, r2, r3
 8003e46:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003e50:	b29b      	uxth	r3, r3
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	f000 80ab 	beq.w	8003fae <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8003e58:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	f000 80a6 	beq.w	8003fae <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e6a:	e853 3f00 	ldrex	r3, [r3]
 8003e6e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003e70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e72:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003e76:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	461a      	mov	r2, r3
 8003e80:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003e84:	647b      	str	r3, [r7, #68]	; 0x44
 8003e86:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e88:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003e8a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003e8c:	e841 2300 	strex	r3, r2, [r1]
 8003e90:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003e92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d1e4      	bne.n	8003e62 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	3308      	adds	r3, #8
 8003e9e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea2:	e853 3f00 	ldrex	r3, [r3]
 8003ea6:	623b      	str	r3, [r7, #32]
   return(result);
 8003ea8:	6a3b      	ldr	r3, [r7, #32]
 8003eaa:	f023 0301 	bic.w	r3, r3, #1
 8003eae:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	3308      	adds	r3, #8
 8003eb8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003ebc:	633a      	str	r2, [r7, #48]	; 0x30
 8003ebe:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ec0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003ec2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ec4:	e841 2300 	strex	r3, r2, [r1]
 8003ec8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d1e3      	bne.n	8003e98 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2220      	movs	r2, #32
 8003ed4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2200      	movs	r2, #0
 8003edc:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	e853 3f00 	ldrex	r3, [r3]
 8003ef0:	60fb      	str	r3, [r7, #12]
   return(result);
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	f023 0310 	bic.w	r3, r3, #16
 8003ef8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	461a      	mov	r2, r3
 8003f02:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003f06:	61fb      	str	r3, [r7, #28]
 8003f08:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f0a:	69b9      	ldr	r1, [r7, #24]
 8003f0c:	69fa      	ldr	r2, [r7, #28]
 8003f0e:	e841 2300 	strex	r3, r2, [r1]
 8003f12:	617b      	str	r3, [r7, #20]
   return(result);
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d1e4      	bne.n	8003ee4 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2202      	movs	r2, #2
 8003f1e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003f20:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003f24:	4619      	mov	r1, r3
 8003f26:	6878      	ldr	r0, [r7, #4]
 8003f28:	f000 f85c 	bl	8003fe4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003f2c:	e03f      	b.n	8003fae <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003f2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d00e      	beq.n	8003f58 <HAL_UART_IRQHandler+0x56c>
 8003f3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003f3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d008      	beq.n	8003f58 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003f4e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003f50:	6878      	ldr	r0, [r7, #4]
 8003f52:	f000 f853 	bl	8003ffc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003f56:	e02d      	b.n	8003fb4 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003f58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d00e      	beq.n	8003f82 <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003f64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d008      	beq.n	8003f82 <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d01c      	beq.n	8003fb2 <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f7c:	6878      	ldr	r0, [r7, #4]
 8003f7e:	4798      	blx	r3
    }
    return;
 8003f80:	e017      	b.n	8003fb2 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003f82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d012      	beq.n	8003fb4 <HAL_UART_IRQHandler+0x5c8>
 8003f8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d00c      	beq.n	8003fb4 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 8003f9a:	6878      	ldr	r0, [r7, #4]
 8003f9c:	f000 fccb 	bl	8004936 <UART_EndTransmit_IT>
    return;
 8003fa0:	e008      	b.n	8003fb4 <HAL_UART_IRQHandler+0x5c8>
      return;
 8003fa2:	bf00      	nop
 8003fa4:	e006      	b.n	8003fb4 <HAL_UART_IRQHandler+0x5c8>
    return;
 8003fa6:	bf00      	nop
 8003fa8:	e004      	b.n	8003fb4 <HAL_UART_IRQHandler+0x5c8>
      return;
 8003faa:	bf00      	nop
 8003fac:	e002      	b.n	8003fb4 <HAL_UART_IRQHandler+0x5c8>
      return;
 8003fae:	bf00      	nop
 8003fb0:	e000      	b.n	8003fb4 <HAL_UART_IRQHandler+0x5c8>
    return;
 8003fb2:	bf00      	nop
  }

}
 8003fb4:	37e8      	adds	r7, #232	; 0xe8
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bd80      	pop	{r7, pc}
 8003fba:	bf00      	nop

08003fbc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b083      	sub	sp, #12
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003fc4:	bf00      	nop
 8003fc6:	370c      	adds	r7, #12
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fce:	4770      	bx	lr

08003fd0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b083      	sub	sp, #12
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003fd8:	bf00      	nop
 8003fda:	370c      	adds	r7, #12
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe2:	4770      	bx	lr

08003fe4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b083      	sub	sp, #12
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
 8003fec:	460b      	mov	r3, r1
 8003fee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003ff0:	bf00      	nop
 8003ff2:	370c      	adds	r7, #12
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffa:	4770      	bx	lr

08003ffc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b083      	sub	sp, #12
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004004:	bf00      	nop
 8004006:	370c      	adds	r7, #12
 8004008:	46bd      	mov	sp, r7
 800400a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400e:	4770      	bx	lr

08004010 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b088      	sub	sp, #32
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004018:	2300      	movs	r3, #0
 800401a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	689a      	ldr	r2, [r3, #8]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	691b      	ldr	r3, [r3, #16]
 8004024:	431a      	orrs	r2, r3
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	695b      	ldr	r3, [r3, #20]
 800402a:	431a      	orrs	r2, r3
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	69db      	ldr	r3, [r3, #28]
 8004030:	4313      	orrs	r3, r2
 8004032:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	681a      	ldr	r2, [r3, #0]
 800403a:	4ba6      	ldr	r3, [pc, #664]	; (80042d4 <UART_SetConfig+0x2c4>)
 800403c:	4013      	ands	r3, r2
 800403e:	687a      	ldr	r2, [r7, #4]
 8004040:	6812      	ldr	r2, [r2, #0]
 8004042:	6979      	ldr	r1, [r7, #20]
 8004044:	430b      	orrs	r3, r1
 8004046:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	68da      	ldr	r2, [r3, #12]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	430a      	orrs	r2, r1
 800405c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	699b      	ldr	r3, [r3, #24]
 8004062:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6a1b      	ldr	r3, [r3, #32]
 8004068:	697a      	ldr	r2, [r7, #20]
 800406a:	4313      	orrs	r3, r2
 800406c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	689b      	ldr	r3, [r3, #8]
 8004074:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	697a      	ldr	r2, [r7, #20]
 800407e:	430a      	orrs	r2, r1
 8004080:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4a94      	ldr	r2, [pc, #592]	; (80042d8 <UART_SetConfig+0x2c8>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d120      	bne.n	80040ce <UART_SetConfig+0xbe>
 800408c:	4b93      	ldr	r3, [pc, #588]	; (80042dc <UART_SetConfig+0x2cc>)
 800408e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004092:	f003 0303 	and.w	r3, r3, #3
 8004096:	2b03      	cmp	r3, #3
 8004098:	d816      	bhi.n	80040c8 <UART_SetConfig+0xb8>
 800409a:	a201      	add	r2, pc, #4	; (adr r2, 80040a0 <UART_SetConfig+0x90>)
 800409c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040a0:	080040b1 	.word	0x080040b1
 80040a4:	080040bd 	.word	0x080040bd
 80040a8:	080040b7 	.word	0x080040b7
 80040ac:	080040c3 	.word	0x080040c3
 80040b0:	2301      	movs	r3, #1
 80040b2:	77fb      	strb	r3, [r7, #31]
 80040b4:	e150      	b.n	8004358 <UART_SetConfig+0x348>
 80040b6:	2302      	movs	r3, #2
 80040b8:	77fb      	strb	r3, [r7, #31]
 80040ba:	e14d      	b.n	8004358 <UART_SetConfig+0x348>
 80040bc:	2304      	movs	r3, #4
 80040be:	77fb      	strb	r3, [r7, #31]
 80040c0:	e14a      	b.n	8004358 <UART_SetConfig+0x348>
 80040c2:	2308      	movs	r3, #8
 80040c4:	77fb      	strb	r3, [r7, #31]
 80040c6:	e147      	b.n	8004358 <UART_SetConfig+0x348>
 80040c8:	2310      	movs	r3, #16
 80040ca:	77fb      	strb	r3, [r7, #31]
 80040cc:	e144      	b.n	8004358 <UART_SetConfig+0x348>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4a83      	ldr	r2, [pc, #524]	; (80042e0 <UART_SetConfig+0x2d0>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d132      	bne.n	800413e <UART_SetConfig+0x12e>
 80040d8:	4b80      	ldr	r3, [pc, #512]	; (80042dc <UART_SetConfig+0x2cc>)
 80040da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040de:	f003 030c 	and.w	r3, r3, #12
 80040e2:	2b0c      	cmp	r3, #12
 80040e4:	d828      	bhi.n	8004138 <UART_SetConfig+0x128>
 80040e6:	a201      	add	r2, pc, #4	; (adr r2, 80040ec <UART_SetConfig+0xdc>)
 80040e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040ec:	08004121 	.word	0x08004121
 80040f0:	08004139 	.word	0x08004139
 80040f4:	08004139 	.word	0x08004139
 80040f8:	08004139 	.word	0x08004139
 80040fc:	0800412d 	.word	0x0800412d
 8004100:	08004139 	.word	0x08004139
 8004104:	08004139 	.word	0x08004139
 8004108:	08004139 	.word	0x08004139
 800410c:	08004127 	.word	0x08004127
 8004110:	08004139 	.word	0x08004139
 8004114:	08004139 	.word	0x08004139
 8004118:	08004139 	.word	0x08004139
 800411c:	08004133 	.word	0x08004133
 8004120:	2300      	movs	r3, #0
 8004122:	77fb      	strb	r3, [r7, #31]
 8004124:	e118      	b.n	8004358 <UART_SetConfig+0x348>
 8004126:	2302      	movs	r3, #2
 8004128:	77fb      	strb	r3, [r7, #31]
 800412a:	e115      	b.n	8004358 <UART_SetConfig+0x348>
 800412c:	2304      	movs	r3, #4
 800412e:	77fb      	strb	r3, [r7, #31]
 8004130:	e112      	b.n	8004358 <UART_SetConfig+0x348>
 8004132:	2308      	movs	r3, #8
 8004134:	77fb      	strb	r3, [r7, #31]
 8004136:	e10f      	b.n	8004358 <UART_SetConfig+0x348>
 8004138:	2310      	movs	r3, #16
 800413a:	77fb      	strb	r3, [r7, #31]
 800413c:	e10c      	b.n	8004358 <UART_SetConfig+0x348>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4a68      	ldr	r2, [pc, #416]	; (80042e4 <UART_SetConfig+0x2d4>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d120      	bne.n	800418a <UART_SetConfig+0x17a>
 8004148:	4b64      	ldr	r3, [pc, #400]	; (80042dc <UART_SetConfig+0x2cc>)
 800414a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800414e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004152:	2b30      	cmp	r3, #48	; 0x30
 8004154:	d013      	beq.n	800417e <UART_SetConfig+0x16e>
 8004156:	2b30      	cmp	r3, #48	; 0x30
 8004158:	d814      	bhi.n	8004184 <UART_SetConfig+0x174>
 800415a:	2b20      	cmp	r3, #32
 800415c:	d009      	beq.n	8004172 <UART_SetConfig+0x162>
 800415e:	2b20      	cmp	r3, #32
 8004160:	d810      	bhi.n	8004184 <UART_SetConfig+0x174>
 8004162:	2b00      	cmp	r3, #0
 8004164:	d002      	beq.n	800416c <UART_SetConfig+0x15c>
 8004166:	2b10      	cmp	r3, #16
 8004168:	d006      	beq.n	8004178 <UART_SetConfig+0x168>
 800416a:	e00b      	b.n	8004184 <UART_SetConfig+0x174>
 800416c:	2300      	movs	r3, #0
 800416e:	77fb      	strb	r3, [r7, #31]
 8004170:	e0f2      	b.n	8004358 <UART_SetConfig+0x348>
 8004172:	2302      	movs	r3, #2
 8004174:	77fb      	strb	r3, [r7, #31]
 8004176:	e0ef      	b.n	8004358 <UART_SetConfig+0x348>
 8004178:	2304      	movs	r3, #4
 800417a:	77fb      	strb	r3, [r7, #31]
 800417c:	e0ec      	b.n	8004358 <UART_SetConfig+0x348>
 800417e:	2308      	movs	r3, #8
 8004180:	77fb      	strb	r3, [r7, #31]
 8004182:	e0e9      	b.n	8004358 <UART_SetConfig+0x348>
 8004184:	2310      	movs	r3, #16
 8004186:	77fb      	strb	r3, [r7, #31]
 8004188:	e0e6      	b.n	8004358 <UART_SetConfig+0x348>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4a56      	ldr	r2, [pc, #344]	; (80042e8 <UART_SetConfig+0x2d8>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d120      	bne.n	80041d6 <UART_SetConfig+0x1c6>
 8004194:	4b51      	ldr	r3, [pc, #324]	; (80042dc <UART_SetConfig+0x2cc>)
 8004196:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800419a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800419e:	2bc0      	cmp	r3, #192	; 0xc0
 80041a0:	d013      	beq.n	80041ca <UART_SetConfig+0x1ba>
 80041a2:	2bc0      	cmp	r3, #192	; 0xc0
 80041a4:	d814      	bhi.n	80041d0 <UART_SetConfig+0x1c0>
 80041a6:	2b80      	cmp	r3, #128	; 0x80
 80041a8:	d009      	beq.n	80041be <UART_SetConfig+0x1ae>
 80041aa:	2b80      	cmp	r3, #128	; 0x80
 80041ac:	d810      	bhi.n	80041d0 <UART_SetConfig+0x1c0>
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d002      	beq.n	80041b8 <UART_SetConfig+0x1a8>
 80041b2:	2b40      	cmp	r3, #64	; 0x40
 80041b4:	d006      	beq.n	80041c4 <UART_SetConfig+0x1b4>
 80041b6:	e00b      	b.n	80041d0 <UART_SetConfig+0x1c0>
 80041b8:	2300      	movs	r3, #0
 80041ba:	77fb      	strb	r3, [r7, #31]
 80041bc:	e0cc      	b.n	8004358 <UART_SetConfig+0x348>
 80041be:	2302      	movs	r3, #2
 80041c0:	77fb      	strb	r3, [r7, #31]
 80041c2:	e0c9      	b.n	8004358 <UART_SetConfig+0x348>
 80041c4:	2304      	movs	r3, #4
 80041c6:	77fb      	strb	r3, [r7, #31]
 80041c8:	e0c6      	b.n	8004358 <UART_SetConfig+0x348>
 80041ca:	2308      	movs	r3, #8
 80041cc:	77fb      	strb	r3, [r7, #31]
 80041ce:	e0c3      	b.n	8004358 <UART_SetConfig+0x348>
 80041d0:	2310      	movs	r3, #16
 80041d2:	77fb      	strb	r3, [r7, #31]
 80041d4:	e0c0      	b.n	8004358 <UART_SetConfig+0x348>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a44      	ldr	r2, [pc, #272]	; (80042ec <UART_SetConfig+0x2dc>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d125      	bne.n	800422c <UART_SetConfig+0x21c>
 80041e0:	4b3e      	ldr	r3, [pc, #248]	; (80042dc <UART_SetConfig+0x2cc>)
 80041e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80041ee:	d017      	beq.n	8004220 <UART_SetConfig+0x210>
 80041f0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80041f4:	d817      	bhi.n	8004226 <UART_SetConfig+0x216>
 80041f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041fa:	d00b      	beq.n	8004214 <UART_SetConfig+0x204>
 80041fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004200:	d811      	bhi.n	8004226 <UART_SetConfig+0x216>
 8004202:	2b00      	cmp	r3, #0
 8004204:	d003      	beq.n	800420e <UART_SetConfig+0x1fe>
 8004206:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800420a:	d006      	beq.n	800421a <UART_SetConfig+0x20a>
 800420c:	e00b      	b.n	8004226 <UART_SetConfig+0x216>
 800420e:	2300      	movs	r3, #0
 8004210:	77fb      	strb	r3, [r7, #31]
 8004212:	e0a1      	b.n	8004358 <UART_SetConfig+0x348>
 8004214:	2302      	movs	r3, #2
 8004216:	77fb      	strb	r3, [r7, #31]
 8004218:	e09e      	b.n	8004358 <UART_SetConfig+0x348>
 800421a:	2304      	movs	r3, #4
 800421c:	77fb      	strb	r3, [r7, #31]
 800421e:	e09b      	b.n	8004358 <UART_SetConfig+0x348>
 8004220:	2308      	movs	r3, #8
 8004222:	77fb      	strb	r3, [r7, #31]
 8004224:	e098      	b.n	8004358 <UART_SetConfig+0x348>
 8004226:	2310      	movs	r3, #16
 8004228:	77fb      	strb	r3, [r7, #31]
 800422a:	e095      	b.n	8004358 <UART_SetConfig+0x348>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a2f      	ldr	r2, [pc, #188]	; (80042f0 <UART_SetConfig+0x2e0>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d125      	bne.n	8004282 <UART_SetConfig+0x272>
 8004236:	4b29      	ldr	r3, [pc, #164]	; (80042dc <UART_SetConfig+0x2cc>)
 8004238:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800423c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004240:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004244:	d017      	beq.n	8004276 <UART_SetConfig+0x266>
 8004246:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800424a:	d817      	bhi.n	800427c <UART_SetConfig+0x26c>
 800424c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004250:	d00b      	beq.n	800426a <UART_SetConfig+0x25a>
 8004252:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004256:	d811      	bhi.n	800427c <UART_SetConfig+0x26c>
 8004258:	2b00      	cmp	r3, #0
 800425a:	d003      	beq.n	8004264 <UART_SetConfig+0x254>
 800425c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004260:	d006      	beq.n	8004270 <UART_SetConfig+0x260>
 8004262:	e00b      	b.n	800427c <UART_SetConfig+0x26c>
 8004264:	2301      	movs	r3, #1
 8004266:	77fb      	strb	r3, [r7, #31]
 8004268:	e076      	b.n	8004358 <UART_SetConfig+0x348>
 800426a:	2302      	movs	r3, #2
 800426c:	77fb      	strb	r3, [r7, #31]
 800426e:	e073      	b.n	8004358 <UART_SetConfig+0x348>
 8004270:	2304      	movs	r3, #4
 8004272:	77fb      	strb	r3, [r7, #31]
 8004274:	e070      	b.n	8004358 <UART_SetConfig+0x348>
 8004276:	2308      	movs	r3, #8
 8004278:	77fb      	strb	r3, [r7, #31]
 800427a:	e06d      	b.n	8004358 <UART_SetConfig+0x348>
 800427c:	2310      	movs	r3, #16
 800427e:	77fb      	strb	r3, [r7, #31]
 8004280:	e06a      	b.n	8004358 <UART_SetConfig+0x348>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4a1b      	ldr	r2, [pc, #108]	; (80042f4 <UART_SetConfig+0x2e4>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d138      	bne.n	80042fe <UART_SetConfig+0x2ee>
 800428c:	4b13      	ldr	r3, [pc, #76]	; (80042dc <UART_SetConfig+0x2cc>)
 800428e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004292:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004296:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800429a:	d017      	beq.n	80042cc <UART_SetConfig+0x2bc>
 800429c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80042a0:	d82a      	bhi.n	80042f8 <UART_SetConfig+0x2e8>
 80042a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042a6:	d00b      	beq.n	80042c0 <UART_SetConfig+0x2b0>
 80042a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042ac:	d824      	bhi.n	80042f8 <UART_SetConfig+0x2e8>
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d003      	beq.n	80042ba <UART_SetConfig+0x2aa>
 80042b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042b6:	d006      	beq.n	80042c6 <UART_SetConfig+0x2b6>
 80042b8:	e01e      	b.n	80042f8 <UART_SetConfig+0x2e8>
 80042ba:	2300      	movs	r3, #0
 80042bc:	77fb      	strb	r3, [r7, #31]
 80042be:	e04b      	b.n	8004358 <UART_SetConfig+0x348>
 80042c0:	2302      	movs	r3, #2
 80042c2:	77fb      	strb	r3, [r7, #31]
 80042c4:	e048      	b.n	8004358 <UART_SetConfig+0x348>
 80042c6:	2304      	movs	r3, #4
 80042c8:	77fb      	strb	r3, [r7, #31]
 80042ca:	e045      	b.n	8004358 <UART_SetConfig+0x348>
 80042cc:	2308      	movs	r3, #8
 80042ce:	77fb      	strb	r3, [r7, #31]
 80042d0:	e042      	b.n	8004358 <UART_SetConfig+0x348>
 80042d2:	bf00      	nop
 80042d4:	efff69f3 	.word	0xefff69f3
 80042d8:	40011000 	.word	0x40011000
 80042dc:	40023800 	.word	0x40023800
 80042e0:	40004400 	.word	0x40004400
 80042e4:	40004800 	.word	0x40004800
 80042e8:	40004c00 	.word	0x40004c00
 80042ec:	40005000 	.word	0x40005000
 80042f0:	40011400 	.word	0x40011400
 80042f4:	40007800 	.word	0x40007800
 80042f8:	2310      	movs	r3, #16
 80042fa:	77fb      	strb	r3, [r7, #31]
 80042fc:	e02c      	b.n	8004358 <UART_SetConfig+0x348>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a72      	ldr	r2, [pc, #456]	; (80044cc <UART_SetConfig+0x4bc>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d125      	bne.n	8004354 <UART_SetConfig+0x344>
 8004308:	4b71      	ldr	r3, [pc, #452]	; (80044d0 <UART_SetConfig+0x4c0>)
 800430a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800430e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004312:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004316:	d017      	beq.n	8004348 <UART_SetConfig+0x338>
 8004318:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800431c:	d817      	bhi.n	800434e <UART_SetConfig+0x33e>
 800431e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004322:	d00b      	beq.n	800433c <UART_SetConfig+0x32c>
 8004324:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004328:	d811      	bhi.n	800434e <UART_SetConfig+0x33e>
 800432a:	2b00      	cmp	r3, #0
 800432c:	d003      	beq.n	8004336 <UART_SetConfig+0x326>
 800432e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004332:	d006      	beq.n	8004342 <UART_SetConfig+0x332>
 8004334:	e00b      	b.n	800434e <UART_SetConfig+0x33e>
 8004336:	2300      	movs	r3, #0
 8004338:	77fb      	strb	r3, [r7, #31]
 800433a:	e00d      	b.n	8004358 <UART_SetConfig+0x348>
 800433c:	2302      	movs	r3, #2
 800433e:	77fb      	strb	r3, [r7, #31]
 8004340:	e00a      	b.n	8004358 <UART_SetConfig+0x348>
 8004342:	2304      	movs	r3, #4
 8004344:	77fb      	strb	r3, [r7, #31]
 8004346:	e007      	b.n	8004358 <UART_SetConfig+0x348>
 8004348:	2308      	movs	r3, #8
 800434a:	77fb      	strb	r3, [r7, #31]
 800434c:	e004      	b.n	8004358 <UART_SetConfig+0x348>
 800434e:	2310      	movs	r3, #16
 8004350:	77fb      	strb	r3, [r7, #31]
 8004352:	e001      	b.n	8004358 <UART_SetConfig+0x348>
 8004354:	2310      	movs	r3, #16
 8004356:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	69db      	ldr	r3, [r3, #28]
 800435c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004360:	d15b      	bne.n	800441a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8004362:	7ffb      	ldrb	r3, [r7, #31]
 8004364:	2b08      	cmp	r3, #8
 8004366:	d828      	bhi.n	80043ba <UART_SetConfig+0x3aa>
 8004368:	a201      	add	r2, pc, #4	; (adr r2, 8004370 <UART_SetConfig+0x360>)
 800436a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800436e:	bf00      	nop
 8004370:	08004395 	.word	0x08004395
 8004374:	0800439d 	.word	0x0800439d
 8004378:	080043a5 	.word	0x080043a5
 800437c:	080043bb 	.word	0x080043bb
 8004380:	080043ab 	.word	0x080043ab
 8004384:	080043bb 	.word	0x080043bb
 8004388:	080043bb 	.word	0x080043bb
 800438c:	080043bb 	.word	0x080043bb
 8004390:	080043b3 	.word	0x080043b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004394:	f7fd fe08 	bl	8001fa8 <HAL_RCC_GetPCLK1Freq>
 8004398:	61b8      	str	r0, [r7, #24]
        break;
 800439a:	e013      	b.n	80043c4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800439c:	f7fd fe18 	bl	8001fd0 <HAL_RCC_GetPCLK2Freq>
 80043a0:	61b8      	str	r0, [r7, #24]
        break;
 80043a2:	e00f      	b.n	80043c4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80043a4:	4b4b      	ldr	r3, [pc, #300]	; (80044d4 <UART_SetConfig+0x4c4>)
 80043a6:	61bb      	str	r3, [r7, #24]
        break;
 80043a8:	e00c      	b.n	80043c4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80043aa:	f7fd fd2b 	bl	8001e04 <HAL_RCC_GetSysClockFreq>
 80043ae:	61b8      	str	r0, [r7, #24]
        break;
 80043b0:	e008      	b.n	80043c4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80043b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80043b6:	61bb      	str	r3, [r7, #24]
        break;
 80043b8:	e004      	b.n	80043c4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80043ba:	2300      	movs	r3, #0
 80043bc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80043be:	2301      	movs	r3, #1
 80043c0:	77bb      	strb	r3, [r7, #30]
        break;
 80043c2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80043c4:	69bb      	ldr	r3, [r7, #24]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d074      	beq.n	80044b4 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80043ca:	69bb      	ldr	r3, [r7, #24]
 80043cc:	005a      	lsls	r2, r3, #1
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	085b      	lsrs	r3, r3, #1
 80043d4:	441a      	add	r2, r3
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	fbb2 f3f3 	udiv	r3, r2, r3
 80043de:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80043e0:	693b      	ldr	r3, [r7, #16]
 80043e2:	2b0f      	cmp	r3, #15
 80043e4:	d916      	bls.n	8004414 <UART_SetConfig+0x404>
 80043e6:	693b      	ldr	r3, [r7, #16]
 80043e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043ec:	d212      	bcs.n	8004414 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80043ee:	693b      	ldr	r3, [r7, #16]
 80043f0:	b29b      	uxth	r3, r3
 80043f2:	f023 030f 	bic.w	r3, r3, #15
 80043f6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80043f8:	693b      	ldr	r3, [r7, #16]
 80043fa:	085b      	lsrs	r3, r3, #1
 80043fc:	b29b      	uxth	r3, r3
 80043fe:	f003 0307 	and.w	r3, r3, #7
 8004402:	b29a      	uxth	r2, r3
 8004404:	89fb      	ldrh	r3, [r7, #14]
 8004406:	4313      	orrs	r3, r2
 8004408:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	89fa      	ldrh	r2, [r7, #14]
 8004410:	60da      	str	r2, [r3, #12]
 8004412:	e04f      	b.n	80044b4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004414:	2301      	movs	r3, #1
 8004416:	77bb      	strb	r3, [r7, #30]
 8004418:	e04c      	b.n	80044b4 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800441a:	7ffb      	ldrb	r3, [r7, #31]
 800441c:	2b08      	cmp	r3, #8
 800441e:	d828      	bhi.n	8004472 <UART_SetConfig+0x462>
 8004420:	a201      	add	r2, pc, #4	; (adr r2, 8004428 <UART_SetConfig+0x418>)
 8004422:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004426:	bf00      	nop
 8004428:	0800444d 	.word	0x0800444d
 800442c:	08004455 	.word	0x08004455
 8004430:	0800445d 	.word	0x0800445d
 8004434:	08004473 	.word	0x08004473
 8004438:	08004463 	.word	0x08004463
 800443c:	08004473 	.word	0x08004473
 8004440:	08004473 	.word	0x08004473
 8004444:	08004473 	.word	0x08004473
 8004448:	0800446b 	.word	0x0800446b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800444c:	f7fd fdac 	bl	8001fa8 <HAL_RCC_GetPCLK1Freq>
 8004450:	61b8      	str	r0, [r7, #24]
        break;
 8004452:	e013      	b.n	800447c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004454:	f7fd fdbc 	bl	8001fd0 <HAL_RCC_GetPCLK2Freq>
 8004458:	61b8      	str	r0, [r7, #24]
        break;
 800445a:	e00f      	b.n	800447c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800445c:	4b1d      	ldr	r3, [pc, #116]	; (80044d4 <UART_SetConfig+0x4c4>)
 800445e:	61bb      	str	r3, [r7, #24]
        break;
 8004460:	e00c      	b.n	800447c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004462:	f7fd fccf 	bl	8001e04 <HAL_RCC_GetSysClockFreq>
 8004466:	61b8      	str	r0, [r7, #24]
        break;
 8004468:	e008      	b.n	800447c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800446a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800446e:	61bb      	str	r3, [r7, #24]
        break;
 8004470:	e004      	b.n	800447c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8004472:	2300      	movs	r3, #0
 8004474:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004476:	2301      	movs	r3, #1
 8004478:	77bb      	strb	r3, [r7, #30]
        break;
 800447a:	bf00      	nop
    }

    if (pclk != 0U)
 800447c:	69bb      	ldr	r3, [r7, #24]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d018      	beq.n	80044b4 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	085a      	lsrs	r2, r3, #1
 8004488:	69bb      	ldr	r3, [r7, #24]
 800448a:	441a      	add	r2, r3
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	fbb2 f3f3 	udiv	r3, r2, r3
 8004494:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004496:	693b      	ldr	r3, [r7, #16]
 8004498:	2b0f      	cmp	r3, #15
 800449a:	d909      	bls.n	80044b0 <UART_SetConfig+0x4a0>
 800449c:	693b      	ldr	r3, [r7, #16]
 800449e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044a2:	d205      	bcs.n	80044b0 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80044a4:	693b      	ldr	r3, [r7, #16]
 80044a6:	b29a      	uxth	r2, r3
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	60da      	str	r2, [r3, #12]
 80044ae:	e001      	b.n	80044b4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80044b0:	2301      	movs	r3, #1
 80044b2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2200      	movs	r2, #0
 80044b8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2200      	movs	r2, #0
 80044be:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80044c0:	7fbb      	ldrb	r3, [r7, #30]
}
 80044c2:	4618      	mov	r0, r3
 80044c4:	3720      	adds	r7, #32
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}
 80044ca:	bf00      	nop
 80044cc:	40007c00 	.word	0x40007c00
 80044d0:	40023800 	.word	0x40023800
 80044d4:	00f42400 	.word	0x00f42400

080044d8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80044d8:	b480      	push	{r7}
 80044da:	b083      	sub	sp, #12
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e4:	f003 0301 	and.w	r3, r3, #1
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d00a      	beq.n	8004502 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	430a      	orrs	r2, r1
 8004500:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004506:	f003 0302 	and.w	r3, r3, #2
 800450a:	2b00      	cmp	r3, #0
 800450c:	d00a      	beq.n	8004524 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	430a      	orrs	r2, r1
 8004522:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004528:	f003 0304 	and.w	r3, r3, #4
 800452c:	2b00      	cmp	r3, #0
 800452e:	d00a      	beq.n	8004546 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	430a      	orrs	r2, r1
 8004544:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800454a:	f003 0308 	and.w	r3, r3, #8
 800454e:	2b00      	cmp	r3, #0
 8004550:	d00a      	beq.n	8004568 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	685b      	ldr	r3, [r3, #4]
 8004558:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	430a      	orrs	r2, r1
 8004566:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800456c:	f003 0310 	and.w	r3, r3, #16
 8004570:	2b00      	cmp	r3, #0
 8004572:	d00a      	beq.n	800458a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	689b      	ldr	r3, [r3, #8]
 800457a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	430a      	orrs	r2, r1
 8004588:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800458e:	f003 0320 	and.w	r3, r3, #32
 8004592:	2b00      	cmp	r3, #0
 8004594:	d00a      	beq.n	80045ac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	689b      	ldr	r3, [r3, #8]
 800459c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	430a      	orrs	r2, r1
 80045aa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d01a      	beq.n	80045ee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	685b      	ldr	r3, [r3, #4]
 80045be:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	430a      	orrs	r2, r1
 80045cc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80045d6:	d10a      	bne.n	80045ee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	430a      	orrs	r2, r1
 80045ec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d00a      	beq.n	8004610 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	430a      	orrs	r2, r1
 800460e:	605a      	str	r2, [r3, #4]
  }
}
 8004610:	bf00      	nop
 8004612:	370c      	adds	r7, #12
 8004614:	46bd      	mov	sp, r7
 8004616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461a:	4770      	bx	lr

0800461c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b086      	sub	sp, #24
 8004620:	af02      	add	r7, sp, #8
 8004622:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2200      	movs	r2, #0
 8004628:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800462c:	f7fc fcf4 	bl	8001018 <HAL_GetTick>
 8004630:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f003 0308 	and.w	r3, r3, #8
 800463c:	2b08      	cmp	r3, #8
 800463e:	d10e      	bne.n	800465e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004640:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004644:	9300      	str	r3, [sp, #0]
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	2200      	movs	r2, #0
 800464a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800464e:	6878      	ldr	r0, [r7, #4]
 8004650:	f000 f831 	bl	80046b6 <UART_WaitOnFlagUntilTimeout>
 8004654:	4603      	mov	r3, r0
 8004656:	2b00      	cmp	r3, #0
 8004658:	d001      	beq.n	800465e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800465a:	2303      	movs	r3, #3
 800465c:	e027      	b.n	80046ae <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f003 0304 	and.w	r3, r3, #4
 8004668:	2b04      	cmp	r3, #4
 800466a:	d10e      	bne.n	800468a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800466c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004670:	9300      	str	r3, [sp, #0]
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	2200      	movs	r2, #0
 8004676:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800467a:	6878      	ldr	r0, [r7, #4]
 800467c:	f000 f81b 	bl	80046b6 <UART_WaitOnFlagUntilTimeout>
 8004680:	4603      	mov	r3, r0
 8004682:	2b00      	cmp	r3, #0
 8004684:	d001      	beq.n	800468a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004686:	2303      	movs	r3, #3
 8004688:	e011      	b.n	80046ae <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2220      	movs	r2, #32
 800468e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2220      	movs	r2, #32
 8004694:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2200      	movs	r2, #0
 800469c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2200      	movs	r2, #0
 80046a2:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2200      	movs	r2, #0
 80046a8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80046ac:	2300      	movs	r3, #0
}
 80046ae:	4618      	mov	r0, r3
 80046b0:	3710      	adds	r7, #16
 80046b2:	46bd      	mov	sp, r7
 80046b4:	bd80      	pop	{r7, pc}

080046b6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80046b6:	b580      	push	{r7, lr}
 80046b8:	b09c      	sub	sp, #112	; 0x70
 80046ba:	af00      	add	r7, sp, #0
 80046bc:	60f8      	str	r0, [r7, #12]
 80046be:	60b9      	str	r1, [r7, #8]
 80046c0:	603b      	str	r3, [r7, #0]
 80046c2:	4613      	mov	r3, r2
 80046c4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046c6:	e0a7      	b.n	8004818 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80046ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80046ce:	f000 80a3 	beq.w	8004818 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046d2:	f7fc fca1 	bl	8001018 <HAL_GetTick>
 80046d6:	4602      	mov	r2, r0
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	1ad3      	subs	r3, r2, r3
 80046dc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80046de:	429a      	cmp	r2, r3
 80046e0:	d302      	bcc.n	80046e8 <UART_WaitOnFlagUntilTimeout+0x32>
 80046e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d13f      	bne.n	8004768 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80046f0:	e853 3f00 	ldrex	r3, [r3]
 80046f4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80046f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046f8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80046fc:	667b      	str	r3, [r7, #100]	; 0x64
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	461a      	mov	r2, r3
 8004704:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004706:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004708:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800470a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800470c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800470e:	e841 2300 	strex	r3, r2, [r1]
 8004712:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004714:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004716:	2b00      	cmp	r3, #0
 8004718:	d1e6      	bne.n	80046e8 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	3308      	adds	r3, #8
 8004720:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004722:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004724:	e853 3f00 	ldrex	r3, [r3]
 8004728:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800472a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800472c:	f023 0301 	bic.w	r3, r3, #1
 8004730:	663b      	str	r3, [r7, #96]	; 0x60
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	3308      	adds	r3, #8
 8004738:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800473a:	64ba      	str	r2, [r7, #72]	; 0x48
 800473c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800473e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004740:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004742:	e841 2300 	strex	r3, r2, [r1]
 8004746:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004748:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800474a:	2b00      	cmp	r3, #0
 800474c:	d1e5      	bne.n	800471a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	2220      	movs	r2, #32
 8004752:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	2220      	movs	r2, #32
 8004758:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	2200      	movs	r2, #0
 8004760:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8004764:	2303      	movs	r3, #3
 8004766:	e068      	b.n	800483a <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f003 0304 	and.w	r3, r3, #4
 8004772:	2b00      	cmp	r3, #0
 8004774:	d050      	beq.n	8004818 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	69db      	ldr	r3, [r3, #28]
 800477c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004780:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004784:	d148      	bne.n	8004818 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800478e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004798:	e853 3f00 	ldrex	r3, [r3]
 800479c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800479e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80047a4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	461a      	mov	r2, r3
 80047ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047ae:	637b      	str	r3, [r7, #52]	; 0x34
 80047b0:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047b2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80047b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80047b6:	e841 2300 	strex	r3, r2, [r1]
 80047ba:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80047bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d1e6      	bne.n	8004790 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	3308      	adds	r3, #8
 80047c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047ca:	697b      	ldr	r3, [r7, #20]
 80047cc:	e853 3f00 	ldrex	r3, [r3]
 80047d0:	613b      	str	r3, [r7, #16]
   return(result);
 80047d2:	693b      	ldr	r3, [r7, #16]
 80047d4:	f023 0301 	bic.w	r3, r3, #1
 80047d8:	66bb      	str	r3, [r7, #104]	; 0x68
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	3308      	adds	r3, #8
 80047e0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80047e2:	623a      	str	r2, [r7, #32]
 80047e4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047e6:	69f9      	ldr	r1, [r7, #28]
 80047e8:	6a3a      	ldr	r2, [r7, #32]
 80047ea:	e841 2300 	strex	r3, r2, [r1]
 80047ee:	61bb      	str	r3, [r7, #24]
   return(result);
 80047f0:	69bb      	ldr	r3, [r7, #24]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d1e5      	bne.n	80047c2 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	2220      	movs	r2, #32
 80047fa:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	2220      	movs	r2, #32
 8004800:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	2220      	movs	r2, #32
 8004808:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	2200      	movs	r2, #0
 8004810:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004814:	2303      	movs	r3, #3
 8004816:	e010      	b.n	800483a <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	69da      	ldr	r2, [r3, #28]
 800481e:	68bb      	ldr	r3, [r7, #8]
 8004820:	4013      	ands	r3, r2
 8004822:	68ba      	ldr	r2, [r7, #8]
 8004824:	429a      	cmp	r2, r3
 8004826:	bf0c      	ite	eq
 8004828:	2301      	moveq	r3, #1
 800482a:	2300      	movne	r3, #0
 800482c:	b2db      	uxtb	r3, r3
 800482e:	461a      	mov	r2, r3
 8004830:	79fb      	ldrb	r3, [r7, #7]
 8004832:	429a      	cmp	r2, r3
 8004834:	f43f af48 	beq.w	80046c8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004838:	2300      	movs	r3, #0
}
 800483a:	4618      	mov	r0, r3
 800483c:	3770      	adds	r7, #112	; 0x70
 800483e:	46bd      	mov	sp, r7
 8004840:	bd80      	pop	{r7, pc}

08004842 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004842:	b480      	push	{r7}
 8004844:	b095      	sub	sp, #84	; 0x54
 8004846:	af00      	add	r7, sp, #0
 8004848:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004850:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004852:	e853 3f00 	ldrex	r3, [r3]
 8004856:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800485a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800485e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	461a      	mov	r2, r3
 8004866:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004868:	643b      	str	r3, [r7, #64]	; 0x40
 800486a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800486c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800486e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004870:	e841 2300 	strex	r3, r2, [r1]
 8004874:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004876:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004878:	2b00      	cmp	r3, #0
 800487a:	d1e6      	bne.n	800484a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	3308      	adds	r3, #8
 8004882:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004884:	6a3b      	ldr	r3, [r7, #32]
 8004886:	e853 3f00 	ldrex	r3, [r3]
 800488a:	61fb      	str	r3, [r7, #28]
   return(result);
 800488c:	69fb      	ldr	r3, [r7, #28]
 800488e:	f023 0301 	bic.w	r3, r3, #1
 8004892:	64bb      	str	r3, [r7, #72]	; 0x48
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	3308      	adds	r3, #8
 800489a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800489c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800489e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80048a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80048a4:	e841 2300 	strex	r3, r2, [r1]
 80048a8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80048aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d1e5      	bne.n	800487c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048b4:	2b01      	cmp	r3, #1
 80048b6:	d118      	bne.n	80048ea <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	e853 3f00 	ldrex	r3, [r3]
 80048c4:	60bb      	str	r3, [r7, #8]
   return(result);
 80048c6:	68bb      	ldr	r3, [r7, #8]
 80048c8:	f023 0310 	bic.w	r3, r3, #16
 80048cc:	647b      	str	r3, [r7, #68]	; 0x44
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	461a      	mov	r2, r3
 80048d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80048d6:	61bb      	str	r3, [r7, #24]
 80048d8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048da:	6979      	ldr	r1, [r7, #20]
 80048dc:	69ba      	ldr	r2, [r7, #24]
 80048de:	e841 2300 	strex	r3, r2, [r1]
 80048e2:	613b      	str	r3, [r7, #16]
   return(result);
 80048e4:	693b      	ldr	r3, [r7, #16]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d1e6      	bne.n	80048b8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2220      	movs	r2, #32
 80048ee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2200      	movs	r2, #0
 80048f6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2200      	movs	r2, #0
 80048fc:	669a      	str	r2, [r3, #104]	; 0x68
}
 80048fe:	bf00      	nop
 8004900:	3754      	adds	r7, #84	; 0x54
 8004902:	46bd      	mov	sp, r7
 8004904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004908:	4770      	bx	lr

0800490a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800490a:	b580      	push	{r7, lr}
 800490c:	b084      	sub	sp, #16
 800490e:	af00      	add	r7, sp, #0
 8004910:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004916:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	2200      	movs	r2, #0
 800491c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	2200      	movs	r2, #0
 8004924:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004928:	68f8      	ldr	r0, [r7, #12]
 800492a:	f7ff fb51 	bl	8003fd0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800492e:	bf00      	nop
 8004930:	3710      	adds	r7, #16
 8004932:	46bd      	mov	sp, r7
 8004934:	bd80      	pop	{r7, pc}

08004936 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004936:	b580      	push	{r7, lr}
 8004938:	b088      	sub	sp, #32
 800493a:	af00      	add	r7, sp, #0
 800493c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	e853 3f00 	ldrex	r3, [r3]
 800494a:	60bb      	str	r3, [r7, #8]
   return(result);
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004952:	61fb      	str	r3, [r7, #28]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	461a      	mov	r2, r3
 800495a:	69fb      	ldr	r3, [r7, #28]
 800495c:	61bb      	str	r3, [r7, #24]
 800495e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004960:	6979      	ldr	r1, [r7, #20]
 8004962:	69ba      	ldr	r2, [r7, #24]
 8004964:	e841 2300 	strex	r3, r2, [r1]
 8004968:	613b      	str	r3, [r7, #16]
   return(result);
 800496a:	693b      	ldr	r3, [r7, #16]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d1e6      	bne.n	800493e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2220      	movs	r2, #32
 8004974:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2200      	movs	r2, #0
 800497a:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800497c:	6878      	ldr	r0, [r7, #4]
 800497e:	f7ff fb1d 	bl	8003fbc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004982:	bf00      	nop
 8004984:	3720      	adds	r7, #32
 8004986:	46bd      	mov	sp, r7
 8004988:	bd80      	pop	{r7, pc}
	...

0800498c <std>:
 800498c:	2300      	movs	r3, #0
 800498e:	b510      	push	{r4, lr}
 8004990:	4604      	mov	r4, r0
 8004992:	e9c0 3300 	strd	r3, r3, [r0]
 8004996:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800499a:	6083      	str	r3, [r0, #8]
 800499c:	8181      	strh	r1, [r0, #12]
 800499e:	6643      	str	r3, [r0, #100]	; 0x64
 80049a0:	81c2      	strh	r2, [r0, #14]
 80049a2:	6183      	str	r3, [r0, #24]
 80049a4:	4619      	mov	r1, r3
 80049a6:	2208      	movs	r2, #8
 80049a8:	305c      	adds	r0, #92	; 0x5c
 80049aa:	f000 f9e5 	bl	8004d78 <memset>
 80049ae:	4b0d      	ldr	r3, [pc, #52]	; (80049e4 <std+0x58>)
 80049b0:	6263      	str	r3, [r4, #36]	; 0x24
 80049b2:	4b0d      	ldr	r3, [pc, #52]	; (80049e8 <std+0x5c>)
 80049b4:	62a3      	str	r3, [r4, #40]	; 0x28
 80049b6:	4b0d      	ldr	r3, [pc, #52]	; (80049ec <std+0x60>)
 80049b8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80049ba:	4b0d      	ldr	r3, [pc, #52]	; (80049f0 <std+0x64>)
 80049bc:	6323      	str	r3, [r4, #48]	; 0x30
 80049be:	4b0d      	ldr	r3, [pc, #52]	; (80049f4 <std+0x68>)
 80049c0:	6224      	str	r4, [r4, #32]
 80049c2:	429c      	cmp	r4, r3
 80049c4:	d006      	beq.n	80049d4 <std+0x48>
 80049c6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80049ca:	4294      	cmp	r4, r2
 80049cc:	d002      	beq.n	80049d4 <std+0x48>
 80049ce:	33d0      	adds	r3, #208	; 0xd0
 80049d0:	429c      	cmp	r4, r3
 80049d2:	d105      	bne.n	80049e0 <std+0x54>
 80049d4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80049d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80049dc:	f000 ba44 	b.w	8004e68 <__retarget_lock_init_recursive>
 80049e0:	bd10      	pop	{r4, pc}
 80049e2:	bf00      	nop
 80049e4:	08004bc9 	.word	0x08004bc9
 80049e8:	08004beb 	.word	0x08004beb
 80049ec:	08004c23 	.word	0x08004c23
 80049f0:	08004c47 	.word	0x08004c47
 80049f4:	20000204 	.word	0x20000204

080049f8 <stdio_exit_handler>:
 80049f8:	4a02      	ldr	r2, [pc, #8]	; (8004a04 <stdio_exit_handler+0xc>)
 80049fa:	4903      	ldr	r1, [pc, #12]	; (8004a08 <stdio_exit_handler+0x10>)
 80049fc:	4803      	ldr	r0, [pc, #12]	; (8004a0c <stdio_exit_handler+0x14>)
 80049fe:	f000 b869 	b.w	8004ad4 <_fwalk_sglue>
 8004a02:	bf00      	nop
 8004a04:	2000002c 	.word	0x2000002c
 8004a08:	0800516d 	.word	0x0800516d
 8004a0c:	20000038 	.word	0x20000038

08004a10 <cleanup_stdio>:
 8004a10:	6841      	ldr	r1, [r0, #4]
 8004a12:	4b0c      	ldr	r3, [pc, #48]	; (8004a44 <cleanup_stdio+0x34>)
 8004a14:	4299      	cmp	r1, r3
 8004a16:	b510      	push	{r4, lr}
 8004a18:	4604      	mov	r4, r0
 8004a1a:	d001      	beq.n	8004a20 <cleanup_stdio+0x10>
 8004a1c:	f000 fba6 	bl	800516c <_fflush_r>
 8004a20:	68a1      	ldr	r1, [r4, #8]
 8004a22:	4b09      	ldr	r3, [pc, #36]	; (8004a48 <cleanup_stdio+0x38>)
 8004a24:	4299      	cmp	r1, r3
 8004a26:	d002      	beq.n	8004a2e <cleanup_stdio+0x1e>
 8004a28:	4620      	mov	r0, r4
 8004a2a:	f000 fb9f 	bl	800516c <_fflush_r>
 8004a2e:	68e1      	ldr	r1, [r4, #12]
 8004a30:	4b06      	ldr	r3, [pc, #24]	; (8004a4c <cleanup_stdio+0x3c>)
 8004a32:	4299      	cmp	r1, r3
 8004a34:	d004      	beq.n	8004a40 <cleanup_stdio+0x30>
 8004a36:	4620      	mov	r0, r4
 8004a38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004a3c:	f000 bb96 	b.w	800516c <_fflush_r>
 8004a40:	bd10      	pop	{r4, pc}
 8004a42:	bf00      	nop
 8004a44:	20000204 	.word	0x20000204
 8004a48:	2000026c 	.word	0x2000026c
 8004a4c:	200002d4 	.word	0x200002d4

08004a50 <global_stdio_init.part.0>:
 8004a50:	b510      	push	{r4, lr}
 8004a52:	4b0b      	ldr	r3, [pc, #44]	; (8004a80 <global_stdio_init.part.0+0x30>)
 8004a54:	4c0b      	ldr	r4, [pc, #44]	; (8004a84 <global_stdio_init.part.0+0x34>)
 8004a56:	4a0c      	ldr	r2, [pc, #48]	; (8004a88 <global_stdio_init.part.0+0x38>)
 8004a58:	601a      	str	r2, [r3, #0]
 8004a5a:	4620      	mov	r0, r4
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	2104      	movs	r1, #4
 8004a60:	f7ff ff94 	bl	800498c <std>
 8004a64:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004a68:	2201      	movs	r2, #1
 8004a6a:	2109      	movs	r1, #9
 8004a6c:	f7ff ff8e 	bl	800498c <std>
 8004a70:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004a74:	2202      	movs	r2, #2
 8004a76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004a7a:	2112      	movs	r1, #18
 8004a7c:	f7ff bf86 	b.w	800498c <std>
 8004a80:	2000033c 	.word	0x2000033c
 8004a84:	20000204 	.word	0x20000204
 8004a88:	080049f9 	.word	0x080049f9

08004a8c <__sfp_lock_acquire>:
 8004a8c:	4801      	ldr	r0, [pc, #4]	; (8004a94 <__sfp_lock_acquire+0x8>)
 8004a8e:	f000 b9ec 	b.w	8004e6a <__retarget_lock_acquire_recursive>
 8004a92:	bf00      	nop
 8004a94:	20000345 	.word	0x20000345

08004a98 <__sfp_lock_release>:
 8004a98:	4801      	ldr	r0, [pc, #4]	; (8004aa0 <__sfp_lock_release+0x8>)
 8004a9a:	f000 b9e7 	b.w	8004e6c <__retarget_lock_release_recursive>
 8004a9e:	bf00      	nop
 8004aa0:	20000345 	.word	0x20000345

08004aa4 <__sinit>:
 8004aa4:	b510      	push	{r4, lr}
 8004aa6:	4604      	mov	r4, r0
 8004aa8:	f7ff fff0 	bl	8004a8c <__sfp_lock_acquire>
 8004aac:	6a23      	ldr	r3, [r4, #32]
 8004aae:	b11b      	cbz	r3, 8004ab8 <__sinit+0x14>
 8004ab0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ab4:	f7ff bff0 	b.w	8004a98 <__sfp_lock_release>
 8004ab8:	4b04      	ldr	r3, [pc, #16]	; (8004acc <__sinit+0x28>)
 8004aba:	6223      	str	r3, [r4, #32]
 8004abc:	4b04      	ldr	r3, [pc, #16]	; (8004ad0 <__sinit+0x2c>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d1f5      	bne.n	8004ab0 <__sinit+0xc>
 8004ac4:	f7ff ffc4 	bl	8004a50 <global_stdio_init.part.0>
 8004ac8:	e7f2      	b.n	8004ab0 <__sinit+0xc>
 8004aca:	bf00      	nop
 8004acc:	08004a11 	.word	0x08004a11
 8004ad0:	2000033c 	.word	0x2000033c

08004ad4 <_fwalk_sglue>:
 8004ad4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004ad8:	4607      	mov	r7, r0
 8004ada:	4688      	mov	r8, r1
 8004adc:	4614      	mov	r4, r2
 8004ade:	2600      	movs	r6, #0
 8004ae0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004ae4:	f1b9 0901 	subs.w	r9, r9, #1
 8004ae8:	d505      	bpl.n	8004af6 <_fwalk_sglue+0x22>
 8004aea:	6824      	ldr	r4, [r4, #0]
 8004aec:	2c00      	cmp	r4, #0
 8004aee:	d1f7      	bne.n	8004ae0 <_fwalk_sglue+0xc>
 8004af0:	4630      	mov	r0, r6
 8004af2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004af6:	89ab      	ldrh	r3, [r5, #12]
 8004af8:	2b01      	cmp	r3, #1
 8004afa:	d907      	bls.n	8004b0c <_fwalk_sglue+0x38>
 8004afc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004b00:	3301      	adds	r3, #1
 8004b02:	d003      	beq.n	8004b0c <_fwalk_sglue+0x38>
 8004b04:	4629      	mov	r1, r5
 8004b06:	4638      	mov	r0, r7
 8004b08:	47c0      	blx	r8
 8004b0a:	4306      	orrs	r6, r0
 8004b0c:	3568      	adds	r5, #104	; 0x68
 8004b0e:	e7e9      	b.n	8004ae4 <_fwalk_sglue+0x10>

08004b10 <_puts_r>:
 8004b10:	6a03      	ldr	r3, [r0, #32]
 8004b12:	b570      	push	{r4, r5, r6, lr}
 8004b14:	6884      	ldr	r4, [r0, #8]
 8004b16:	4605      	mov	r5, r0
 8004b18:	460e      	mov	r6, r1
 8004b1a:	b90b      	cbnz	r3, 8004b20 <_puts_r+0x10>
 8004b1c:	f7ff ffc2 	bl	8004aa4 <__sinit>
 8004b20:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004b22:	07db      	lsls	r3, r3, #31
 8004b24:	d405      	bmi.n	8004b32 <_puts_r+0x22>
 8004b26:	89a3      	ldrh	r3, [r4, #12]
 8004b28:	0598      	lsls	r0, r3, #22
 8004b2a:	d402      	bmi.n	8004b32 <_puts_r+0x22>
 8004b2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004b2e:	f000 f99c 	bl	8004e6a <__retarget_lock_acquire_recursive>
 8004b32:	89a3      	ldrh	r3, [r4, #12]
 8004b34:	0719      	lsls	r1, r3, #28
 8004b36:	d513      	bpl.n	8004b60 <_puts_r+0x50>
 8004b38:	6923      	ldr	r3, [r4, #16]
 8004b3a:	b18b      	cbz	r3, 8004b60 <_puts_r+0x50>
 8004b3c:	3e01      	subs	r6, #1
 8004b3e:	68a3      	ldr	r3, [r4, #8]
 8004b40:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004b44:	3b01      	subs	r3, #1
 8004b46:	60a3      	str	r3, [r4, #8]
 8004b48:	b9e9      	cbnz	r1, 8004b86 <_puts_r+0x76>
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	da2e      	bge.n	8004bac <_puts_r+0x9c>
 8004b4e:	4622      	mov	r2, r4
 8004b50:	210a      	movs	r1, #10
 8004b52:	4628      	mov	r0, r5
 8004b54:	f000 f87b 	bl	8004c4e <__swbuf_r>
 8004b58:	3001      	adds	r0, #1
 8004b5a:	d007      	beq.n	8004b6c <_puts_r+0x5c>
 8004b5c:	250a      	movs	r5, #10
 8004b5e:	e007      	b.n	8004b70 <_puts_r+0x60>
 8004b60:	4621      	mov	r1, r4
 8004b62:	4628      	mov	r0, r5
 8004b64:	f000 f8b0 	bl	8004cc8 <__swsetup_r>
 8004b68:	2800      	cmp	r0, #0
 8004b6a:	d0e7      	beq.n	8004b3c <_puts_r+0x2c>
 8004b6c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8004b70:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004b72:	07da      	lsls	r2, r3, #31
 8004b74:	d405      	bmi.n	8004b82 <_puts_r+0x72>
 8004b76:	89a3      	ldrh	r3, [r4, #12]
 8004b78:	059b      	lsls	r3, r3, #22
 8004b7a:	d402      	bmi.n	8004b82 <_puts_r+0x72>
 8004b7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004b7e:	f000 f975 	bl	8004e6c <__retarget_lock_release_recursive>
 8004b82:	4628      	mov	r0, r5
 8004b84:	bd70      	pop	{r4, r5, r6, pc}
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	da04      	bge.n	8004b94 <_puts_r+0x84>
 8004b8a:	69a2      	ldr	r2, [r4, #24]
 8004b8c:	429a      	cmp	r2, r3
 8004b8e:	dc06      	bgt.n	8004b9e <_puts_r+0x8e>
 8004b90:	290a      	cmp	r1, #10
 8004b92:	d004      	beq.n	8004b9e <_puts_r+0x8e>
 8004b94:	6823      	ldr	r3, [r4, #0]
 8004b96:	1c5a      	adds	r2, r3, #1
 8004b98:	6022      	str	r2, [r4, #0]
 8004b9a:	7019      	strb	r1, [r3, #0]
 8004b9c:	e7cf      	b.n	8004b3e <_puts_r+0x2e>
 8004b9e:	4622      	mov	r2, r4
 8004ba0:	4628      	mov	r0, r5
 8004ba2:	f000 f854 	bl	8004c4e <__swbuf_r>
 8004ba6:	3001      	adds	r0, #1
 8004ba8:	d1c9      	bne.n	8004b3e <_puts_r+0x2e>
 8004baa:	e7df      	b.n	8004b6c <_puts_r+0x5c>
 8004bac:	6823      	ldr	r3, [r4, #0]
 8004bae:	250a      	movs	r5, #10
 8004bb0:	1c5a      	adds	r2, r3, #1
 8004bb2:	6022      	str	r2, [r4, #0]
 8004bb4:	701d      	strb	r5, [r3, #0]
 8004bb6:	e7db      	b.n	8004b70 <_puts_r+0x60>

08004bb8 <puts>:
 8004bb8:	4b02      	ldr	r3, [pc, #8]	; (8004bc4 <puts+0xc>)
 8004bba:	4601      	mov	r1, r0
 8004bbc:	6818      	ldr	r0, [r3, #0]
 8004bbe:	f7ff bfa7 	b.w	8004b10 <_puts_r>
 8004bc2:	bf00      	nop
 8004bc4:	20000084 	.word	0x20000084

08004bc8 <__sread>:
 8004bc8:	b510      	push	{r4, lr}
 8004bca:	460c      	mov	r4, r1
 8004bcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004bd0:	f000 f8fc 	bl	8004dcc <_read_r>
 8004bd4:	2800      	cmp	r0, #0
 8004bd6:	bfab      	itete	ge
 8004bd8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004bda:	89a3      	ldrhlt	r3, [r4, #12]
 8004bdc:	181b      	addge	r3, r3, r0
 8004bde:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004be2:	bfac      	ite	ge
 8004be4:	6563      	strge	r3, [r4, #84]	; 0x54
 8004be6:	81a3      	strhlt	r3, [r4, #12]
 8004be8:	bd10      	pop	{r4, pc}

08004bea <__swrite>:
 8004bea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004bee:	461f      	mov	r7, r3
 8004bf0:	898b      	ldrh	r3, [r1, #12]
 8004bf2:	05db      	lsls	r3, r3, #23
 8004bf4:	4605      	mov	r5, r0
 8004bf6:	460c      	mov	r4, r1
 8004bf8:	4616      	mov	r6, r2
 8004bfa:	d505      	bpl.n	8004c08 <__swrite+0x1e>
 8004bfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c00:	2302      	movs	r3, #2
 8004c02:	2200      	movs	r2, #0
 8004c04:	f000 f8d0 	bl	8004da8 <_lseek_r>
 8004c08:	89a3      	ldrh	r3, [r4, #12]
 8004c0a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004c0e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004c12:	81a3      	strh	r3, [r4, #12]
 8004c14:	4632      	mov	r2, r6
 8004c16:	463b      	mov	r3, r7
 8004c18:	4628      	mov	r0, r5
 8004c1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004c1e:	f000 b8e7 	b.w	8004df0 <_write_r>

08004c22 <__sseek>:
 8004c22:	b510      	push	{r4, lr}
 8004c24:	460c      	mov	r4, r1
 8004c26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c2a:	f000 f8bd 	bl	8004da8 <_lseek_r>
 8004c2e:	1c43      	adds	r3, r0, #1
 8004c30:	89a3      	ldrh	r3, [r4, #12]
 8004c32:	bf15      	itete	ne
 8004c34:	6560      	strne	r0, [r4, #84]	; 0x54
 8004c36:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004c3a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004c3e:	81a3      	strheq	r3, [r4, #12]
 8004c40:	bf18      	it	ne
 8004c42:	81a3      	strhne	r3, [r4, #12]
 8004c44:	bd10      	pop	{r4, pc}

08004c46 <__sclose>:
 8004c46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c4a:	f000 b89d 	b.w	8004d88 <_close_r>

08004c4e <__swbuf_r>:
 8004c4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c50:	460e      	mov	r6, r1
 8004c52:	4614      	mov	r4, r2
 8004c54:	4605      	mov	r5, r0
 8004c56:	b118      	cbz	r0, 8004c60 <__swbuf_r+0x12>
 8004c58:	6a03      	ldr	r3, [r0, #32]
 8004c5a:	b90b      	cbnz	r3, 8004c60 <__swbuf_r+0x12>
 8004c5c:	f7ff ff22 	bl	8004aa4 <__sinit>
 8004c60:	69a3      	ldr	r3, [r4, #24]
 8004c62:	60a3      	str	r3, [r4, #8]
 8004c64:	89a3      	ldrh	r3, [r4, #12]
 8004c66:	071a      	lsls	r2, r3, #28
 8004c68:	d525      	bpl.n	8004cb6 <__swbuf_r+0x68>
 8004c6a:	6923      	ldr	r3, [r4, #16]
 8004c6c:	b31b      	cbz	r3, 8004cb6 <__swbuf_r+0x68>
 8004c6e:	6823      	ldr	r3, [r4, #0]
 8004c70:	6922      	ldr	r2, [r4, #16]
 8004c72:	1a98      	subs	r0, r3, r2
 8004c74:	6963      	ldr	r3, [r4, #20]
 8004c76:	b2f6      	uxtb	r6, r6
 8004c78:	4283      	cmp	r3, r0
 8004c7a:	4637      	mov	r7, r6
 8004c7c:	dc04      	bgt.n	8004c88 <__swbuf_r+0x3a>
 8004c7e:	4621      	mov	r1, r4
 8004c80:	4628      	mov	r0, r5
 8004c82:	f000 fa73 	bl	800516c <_fflush_r>
 8004c86:	b9e0      	cbnz	r0, 8004cc2 <__swbuf_r+0x74>
 8004c88:	68a3      	ldr	r3, [r4, #8]
 8004c8a:	3b01      	subs	r3, #1
 8004c8c:	60a3      	str	r3, [r4, #8]
 8004c8e:	6823      	ldr	r3, [r4, #0]
 8004c90:	1c5a      	adds	r2, r3, #1
 8004c92:	6022      	str	r2, [r4, #0]
 8004c94:	701e      	strb	r6, [r3, #0]
 8004c96:	6962      	ldr	r2, [r4, #20]
 8004c98:	1c43      	adds	r3, r0, #1
 8004c9a:	429a      	cmp	r2, r3
 8004c9c:	d004      	beq.n	8004ca8 <__swbuf_r+0x5a>
 8004c9e:	89a3      	ldrh	r3, [r4, #12]
 8004ca0:	07db      	lsls	r3, r3, #31
 8004ca2:	d506      	bpl.n	8004cb2 <__swbuf_r+0x64>
 8004ca4:	2e0a      	cmp	r6, #10
 8004ca6:	d104      	bne.n	8004cb2 <__swbuf_r+0x64>
 8004ca8:	4621      	mov	r1, r4
 8004caa:	4628      	mov	r0, r5
 8004cac:	f000 fa5e 	bl	800516c <_fflush_r>
 8004cb0:	b938      	cbnz	r0, 8004cc2 <__swbuf_r+0x74>
 8004cb2:	4638      	mov	r0, r7
 8004cb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004cb6:	4621      	mov	r1, r4
 8004cb8:	4628      	mov	r0, r5
 8004cba:	f000 f805 	bl	8004cc8 <__swsetup_r>
 8004cbe:	2800      	cmp	r0, #0
 8004cc0:	d0d5      	beq.n	8004c6e <__swbuf_r+0x20>
 8004cc2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8004cc6:	e7f4      	b.n	8004cb2 <__swbuf_r+0x64>

08004cc8 <__swsetup_r>:
 8004cc8:	b538      	push	{r3, r4, r5, lr}
 8004cca:	4b2a      	ldr	r3, [pc, #168]	; (8004d74 <__swsetup_r+0xac>)
 8004ccc:	4605      	mov	r5, r0
 8004cce:	6818      	ldr	r0, [r3, #0]
 8004cd0:	460c      	mov	r4, r1
 8004cd2:	b118      	cbz	r0, 8004cdc <__swsetup_r+0x14>
 8004cd4:	6a03      	ldr	r3, [r0, #32]
 8004cd6:	b90b      	cbnz	r3, 8004cdc <__swsetup_r+0x14>
 8004cd8:	f7ff fee4 	bl	8004aa4 <__sinit>
 8004cdc:	89a3      	ldrh	r3, [r4, #12]
 8004cde:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004ce2:	0718      	lsls	r0, r3, #28
 8004ce4:	d422      	bmi.n	8004d2c <__swsetup_r+0x64>
 8004ce6:	06d9      	lsls	r1, r3, #27
 8004ce8:	d407      	bmi.n	8004cfa <__swsetup_r+0x32>
 8004cea:	2309      	movs	r3, #9
 8004cec:	602b      	str	r3, [r5, #0]
 8004cee:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004cf2:	81a3      	strh	r3, [r4, #12]
 8004cf4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004cf8:	e034      	b.n	8004d64 <__swsetup_r+0x9c>
 8004cfa:	0758      	lsls	r0, r3, #29
 8004cfc:	d512      	bpl.n	8004d24 <__swsetup_r+0x5c>
 8004cfe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004d00:	b141      	cbz	r1, 8004d14 <__swsetup_r+0x4c>
 8004d02:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004d06:	4299      	cmp	r1, r3
 8004d08:	d002      	beq.n	8004d10 <__swsetup_r+0x48>
 8004d0a:	4628      	mov	r0, r5
 8004d0c:	f000 f8b0 	bl	8004e70 <_free_r>
 8004d10:	2300      	movs	r3, #0
 8004d12:	6363      	str	r3, [r4, #52]	; 0x34
 8004d14:	89a3      	ldrh	r3, [r4, #12]
 8004d16:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004d1a:	81a3      	strh	r3, [r4, #12]
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	6063      	str	r3, [r4, #4]
 8004d20:	6923      	ldr	r3, [r4, #16]
 8004d22:	6023      	str	r3, [r4, #0]
 8004d24:	89a3      	ldrh	r3, [r4, #12]
 8004d26:	f043 0308 	orr.w	r3, r3, #8
 8004d2a:	81a3      	strh	r3, [r4, #12]
 8004d2c:	6923      	ldr	r3, [r4, #16]
 8004d2e:	b94b      	cbnz	r3, 8004d44 <__swsetup_r+0x7c>
 8004d30:	89a3      	ldrh	r3, [r4, #12]
 8004d32:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004d36:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d3a:	d003      	beq.n	8004d44 <__swsetup_r+0x7c>
 8004d3c:	4621      	mov	r1, r4
 8004d3e:	4628      	mov	r0, r5
 8004d40:	f000 fa62 	bl	8005208 <__smakebuf_r>
 8004d44:	89a0      	ldrh	r0, [r4, #12]
 8004d46:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004d4a:	f010 0301 	ands.w	r3, r0, #1
 8004d4e:	d00a      	beq.n	8004d66 <__swsetup_r+0x9e>
 8004d50:	2300      	movs	r3, #0
 8004d52:	60a3      	str	r3, [r4, #8]
 8004d54:	6963      	ldr	r3, [r4, #20]
 8004d56:	425b      	negs	r3, r3
 8004d58:	61a3      	str	r3, [r4, #24]
 8004d5a:	6923      	ldr	r3, [r4, #16]
 8004d5c:	b943      	cbnz	r3, 8004d70 <__swsetup_r+0xa8>
 8004d5e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004d62:	d1c4      	bne.n	8004cee <__swsetup_r+0x26>
 8004d64:	bd38      	pop	{r3, r4, r5, pc}
 8004d66:	0781      	lsls	r1, r0, #30
 8004d68:	bf58      	it	pl
 8004d6a:	6963      	ldrpl	r3, [r4, #20]
 8004d6c:	60a3      	str	r3, [r4, #8]
 8004d6e:	e7f4      	b.n	8004d5a <__swsetup_r+0x92>
 8004d70:	2000      	movs	r0, #0
 8004d72:	e7f7      	b.n	8004d64 <__swsetup_r+0x9c>
 8004d74:	20000084 	.word	0x20000084

08004d78 <memset>:
 8004d78:	4402      	add	r2, r0
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d100      	bne.n	8004d82 <memset+0xa>
 8004d80:	4770      	bx	lr
 8004d82:	f803 1b01 	strb.w	r1, [r3], #1
 8004d86:	e7f9      	b.n	8004d7c <memset+0x4>

08004d88 <_close_r>:
 8004d88:	b538      	push	{r3, r4, r5, lr}
 8004d8a:	4d06      	ldr	r5, [pc, #24]	; (8004da4 <_close_r+0x1c>)
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	4604      	mov	r4, r0
 8004d90:	4608      	mov	r0, r1
 8004d92:	602b      	str	r3, [r5, #0]
 8004d94:	f7fc f849 	bl	8000e2a <_close>
 8004d98:	1c43      	adds	r3, r0, #1
 8004d9a:	d102      	bne.n	8004da2 <_close_r+0x1a>
 8004d9c:	682b      	ldr	r3, [r5, #0]
 8004d9e:	b103      	cbz	r3, 8004da2 <_close_r+0x1a>
 8004da0:	6023      	str	r3, [r4, #0]
 8004da2:	bd38      	pop	{r3, r4, r5, pc}
 8004da4:	20000340 	.word	0x20000340

08004da8 <_lseek_r>:
 8004da8:	b538      	push	{r3, r4, r5, lr}
 8004daa:	4d07      	ldr	r5, [pc, #28]	; (8004dc8 <_lseek_r+0x20>)
 8004dac:	4604      	mov	r4, r0
 8004dae:	4608      	mov	r0, r1
 8004db0:	4611      	mov	r1, r2
 8004db2:	2200      	movs	r2, #0
 8004db4:	602a      	str	r2, [r5, #0]
 8004db6:	461a      	mov	r2, r3
 8004db8:	f7fc f85e 	bl	8000e78 <_lseek>
 8004dbc:	1c43      	adds	r3, r0, #1
 8004dbe:	d102      	bne.n	8004dc6 <_lseek_r+0x1e>
 8004dc0:	682b      	ldr	r3, [r5, #0]
 8004dc2:	b103      	cbz	r3, 8004dc6 <_lseek_r+0x1e>
 8004dc4:	6023      	str	r3, [r4, #0]
 8004dc6:	bd38      	pop	{r3, r4, r5, pc}
 8004dc8:	20000340 	.word	0x20000340

08004dcc <_read_r>:
 8004dcc:	b538      	push	{r3, r4, r5, lr}
 8004dce:	4d07      	ldr	r5, [pc, #28]	; (8004dec <_read_r+0x20>)
 8004dd0:	4604      	mov	r4, r0
 8004dd2:	4608      	mov	r0, r1
 8004dd4:	4611      	mov	r1, r2
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	602a      	str	r2, [r5, #0]
 8004dda:	461a      	mov	r2, r3
 8004ddc:	f7fc f808 	bl	8000df0 <_read>
 8004de0:	1c43      	adds	r3, r0, #1
 8004de2:	d102      	bne.n	8004dea <_read_r+0x1e>
 8004de4:	682b      	ldr	r3, [r5, #0]
 8004de6:	b103      	cbz	r3, 8004dea <_read_r+0x1e>
 8004de8:	6023      	str	r3, [r4, #0]
 8004dea:	bd38      	pop	{r3, r4, r5, pc}
 8004dec:	20000340 	.word	0x20000340

08004df0 <_write_r>:
 8004df0:	b538      	push	{r3, r4, r5, lr}
 8004df2:	4d07      	ldr	r5, [pc, #28]	; (8004e10 <_write_r+0x20>)
 8004df4:	4604      	mov	r4, r0
 8004df6:	4608      	mov	r0, r1
 8004df8:	4611      	mov	r1, r2
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	602a      	str	r2, [r5, #0]
 8004dfe:	461a      	mov	r2, r3
 8004e00:	f7fb fb98 	bl	8000534 <_write>
 8004e04:	1c43      	adds	r3, r0, #1
 8004e06:	d102      	bne.n	8004e0e <_write_r+0x1e>
 8004e08:	682b      	ldr	r3, [r5, #0]
 8004e0a:	b103      	cbz	r3, 8004e0e <_write_r+0x1e>
 8004e0c:	6023      	str	r3, [r4, #0]
 8004e0e:	bd38      	pop	{r3, r4, r5, pc}
 8004e10:	20000340 	.word	0x20000340

08004e14 <__errno>:
 8004e14:	4b01      	ldr	r3, [pc, #4]	; (8004e1c <__errno+0x8>)
 8004e16:	6818      	ldr	r0, [r3, #0]
 8004e18:	4770      	bx	lr
 8004e1a:	bf00      	nop
 8004e1c:	20000084 	.word	0x20000084

08004e20 <__libc_init_array>:
 8004e20:	b570      	push	{r4, r5, r6, lr}
 8004e22:	4d0d      	ldr	r5, [pc, #52]	; (8004e58 <__libc_init_array+0x38>)
 8004e24:	4c0d      	ldr	r4, [pc, #52]	; (8004e5c <__libc_init_array+0x3c>)
 8004e26:	1b64      	subs	r4, r4, r5
 8004e28:	10a4      	asrs	r4, r4, #2
 8004e2a:	2600      	movs	r6, #0
 8004e2c:	42a6      	cmp	r6, r4
 8004e2e:	d109      	bne.n	8004e44 <__libc_init_array+0x24>
 8004e30:	4d0b      	ldr	r5, [pc, #44]	; (8004e60 <__libc_init_array+0x40>)
 8004e32:	4c0c      	ldr	r4, [pc, #48]	; (8004e64 <__libc_init_array+0x44>)
 8004e34:	f000 fa56 	bl	80052e4 <_init>
 8004e38:	1b64      	subs	r4, r4, r5
 8004e3a:	10a4      	asrs	r4, r4, #2
 8004e3c:	2600      	movs	r6, #0
 8004e3e:	42a6      	cmp	r6, r4
 8004e40:	d105      	bne.n	8004e4e <__libc_init_array+0x2e>
 8004e42:	bd70      	pop	{r4, r5, r6, pc}
 8004e44:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e48:	4798      	blx	r3
 8004e4a:	3601      	adds	r6, #1
 8004e4c:	e7ee      	b.n	8004e2c <__libc_init_array+0xc>
 8004e4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e52:	4798      	blx	r3
 8004e54:	3601      	adds	r6, #1
 8004e56:	e7f2      	b.n	8004e3e <__libc_init_array+0x1e>
 8004e58:	08005394 	.word	0x08005394
 8004e5c:	08005394 	.word	0x08005394
 8004e60:	08005394 	.word	0x08005394
 8004e64:	08005398 	.word	0x08005398

08004e68 <__retarget_lock_init_recursive>:
 8004e68:	4770      	bx	lr

08004e6a <__retarget_lock_acquire_recursive>:
 8004e6a:	4770      	bx	lr

08004e6c <__retarget_lock_release_recursive>:
 8004e6c:	4770      	bx	lr
	...

08004e70 <_free_r>:
 8004e70:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004e72:	2900      	cmp	r1, #0
 8004e74:	d044      	beq.n	8004f00 <_free_r+0x90>
 8004e76:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e7a:	9001      	str	r0, [sp, #4]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	f1a1 0404 	sub.w	r4, r1, #4
 8004e82:	bfb8      	it	lt
 8004e84:	18e4      	addlt	r4, r4, r3
 8004e86:	f000 f8df 	bl	8005048 <__malloc_lock>
 8004e8a:	4a1e      	ldr	r2, [pc, #120]	; (8004f04 <_free_r+0x94>)
 8004e8c:	9801      	ldr	r0, [sp, #4]
 8004e8e:	6813      	ldr	r3, [r2, #0]
 8004e90:	b933      	cbnz	r3, 8004ea0 <_free_r+0x30>
 8004e92:	6063      	str	r3, [r4, #4]
 8004e94:	6014      	str	r4, [r2, #0]
 8004e96:	b003      	add	sp, #12
 8004e98:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004e9c:	f000 b8da 	b.w	8005054 <__malloc_unlock>
 8004ea0:	42a3      	cmp	r3, r4
 8004ea2:	d908      	bls.n	8004eb6 <_free_r+0x46>
 8004ea4:	6825      	ldr	r5, [r4, #0]
 8004ea6:	1961      	adds	r1, r4, r5
 8004ea8:	428b      	cmp	r3, r1
 8004eaa:	bf01      	itttt	eq
 8004eac:	6819      	ldreq	r1, [r3, #0]
 8004eae:	685b      	ldreq	r3, [r3, #4]
 8004eb0:	1949      	addeq	r1, r1, r5
 8004eb2:	6021      	streq	r1, [r4, #0]
 8004eb4:	e7ed      	b.n	8004e92 <_free_r+0x22>
 8004eb6:	461a      	mov	r2, r3
 8004eb8:	685b      	ldr	r3, [r3, #4]
 8004eba:	b10b      	cbz	r3, 8004ec0 <_free_r+0x50>
 8004ebc:	42a3      	cmp	r3, r4
 8004ebe:	d9fa      	bls.n	8004eb6 <_free_r+0x46>
 8004ec0:	6811      	ldr	r1, [r2, #0]
 8004ec2:	1855      	adds	r5, r2, r1
 8004ec4:	42a5      	cmp	r5, r4
 8004ec6:	d10b      	bne.n	8004ee0 <_free_r+0x70>
 8004ec8:	6824      	ldr	r4, [r4, #0]
 8004eca:	4421      	add	r1, r4
 8004ecc:	1854      	adds	r4, r2, r1
 8004ece:	42a3      	cmp	r3, r4
 8004ed0:	6011      	str	r1, [r2, #0]
 8004ed2:	d1e0      	bne.n	8004e96 <_free_r+0x26>
 8004ed4:	681c      	ldr	r4, [r3, #0]
 8004ed6:	685b      	ldr	r3, [r3, #4]
 8004ed8:	6053      	str	r3, [r2, #4]
 8004eda:	440c      	add	r4, r1
 8004edc:	6014      	str	r4, [r2, #0]
 8004ede:	e7da      	b.n	8004e96 <_free_r+0x26>
 8004ee0:	d902      	bls.n	8004ee8 <_free_r+0x78>
 8004ee2:	230c      	movs	r3, #12
 8004ee4:	6003      	str	r3, [r0, #0]
 8004ee6:	e7d6      	b.n	8004e96 <_free_r+0x26>
 8004ee8:	6825      	ldr	r5, [r4, #0]
 8004eea:	1961      	adds	r1, r4, r5
 8004eec:	428b      	cmp	r3, r1
 8004eee:	bf04      	itt	eq
 8004ef0:	6819      	ldreq	r1, [r3, #0]
 8004ef2:	685b      	ldreq	r3, [r3, #4]
 8004ef4:	6063      	str	r3, [r4, #4]
 8004ef6:	bf04      	itt	eq
 8004ef8:	1949      	addeq	r1, r1, r5
 8004efa:	6021      	streq	r1, [r4, #0]
 8004efc:	6054      	str	r4, [r2, #4]
 8004efe:	e7ca      	b.n	8004e96 <_free_r+0x26>
 8004f00:	b003      	add	sp, #12
 8004f02:	bd30      	pop	{r4, r5, pc}
 8004f04:	20000348 	.word	0x20000348

08004f08 <sbrk_aligned>:
 8004f08:	b570      	push	{r4, r5, r6, lr}
 8004f0a:	4e0e      	ldr	r6, [pc, #56]	; (8004f44 <sbrk_aligned+0x3c>)
 8004f0c:	460c      	mov	r4, r1
 8004f0e:	6831      	ldr	r1, [r6, #0]
 8004f10:	4605      	mov	r5, r0
 8004f12:	b911      	cbnz	r1, 8004f1a <sbrk_aligned+0x12>
 8004f14:	f000 f9d6 	bl	80052c4 <_sbrk_r>
 8004f18:	6030      	str	r0, [r6, #0]
 8004f1a:	4621      	mov	r1, r4
 8004f1c:	4628      	mov	r0, r5
 8004f1e:	f000 f9d1 	bl	80052c4 <_sbrk_r>
 8004f22:	1c43      	adds	r3, r0, #1
 8004f24:	d00a      	beq.n	8004f3c <sbrk_aligned+0x34>
 8004f26:	1cc4      	adds	r4, r0, #3
 8004f28:	f024 0403 	bic.w	r4, r4, #3
 8004f2c:	42a0      	cmp	r0, r4
 8004f2e:	d007      	beq.n	8004f40 <sbrk_aligned+0x38>
 8004f30:	1a21      	subs	r1, r4, r0
 8004f32:	4628      	mov	r0, r5
 8004f34:	f000 f9c6 	bl	80052c4 <_sbrk_r>
 8004f38:	3001      	adds	r0, #1
 8004f3a:	d101      	bne.n	8004f40 <sbrk_aligned+0x38>
 8004f3c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8004f40:	4620      	mov	r0, r4
 8004f42:	bd70      	pop	{r4, r5, r6, pc}
 8004f44:	2000034c 	.word	0x2000034c

08004f48 <_malloc_r>:
 8004f48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004f4c:	1ccd      	adds	r5, r1, #3
 8004f4e:	f025 0503 	bic.w	r5, r5, #3
 8004f52:	3508      	adds	r5, #8
 8004f54:	2d0c      	cmp	r5, #12
 8004f56:	bf38      	it	cc
 8004f58:	250c      	movcc	r5, #12
 8004f5a:	2d00      	cmp	r5, #0
 8004f5c:	4607      	mov	r7, r0
 8004f5e:	db01      	blt.n	8004f64 <_malloc_r+0x1c>
 8004f60:	42a9      	cmp	r1, r5
 8004f62:	d905      	bls.n	8004f70 <_malloc_r+0x28>
 8004f64:	230c      	movs	r3, #12
 8004f66:	603b      	str	r3, [r7, #0]
 8004f68:	2600      	movs	r6, #0
 8004f6a:	4630      	mov	r0, r6
 8004f6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004f70:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005044 <_malloc_r+0xfc>
 8004f74:	f000 f868 	bl	8005048 <__malloc_lock>
 8004f78:	f8d8 3000 	ldr.w	r3, [r8]
 8004f7c:	461c      	mov	r4, r3
 8004f7e:	bb5c      	cbnz	r4, 8004fd8 <_malloc_r+0x90>
 8004f80:	4629      	mov	r1, r5
 8004f82:	4638      	mov	r0, r7
 8004f84:	f7ff ffc0 	bl	8004f08 <sbrk_aligned>
 8004f88:	1c43      	adds	r3, r0, #1
 8004f8a:	4604      	mov	r4, r0
 8004f8c:	d155      	bne.n	800503a <_malloc_r+0xf2>
 8004f8e:	f8d8 4000 	ldr.w	r4, [r8]
 8004f92:	4626      	mov	r6, r4
 8004f94:	2e00      	cmp	r6, #0
 8004f96:	d145      	bne.n	8005024 <_malloc_r+0xdc>
 8004f98:	2c00      	cmp	r4, #0
 8004f9a:	d048      	beq.n	800502e <_malloc_r+0xe6>
 8004f9c:	6823      	ldr	r3, [r4, #0]
 8004f9e:	4631      	mov	r1, r6
 8004fa0:	4638      	mov	r0, r7
 8004fa2:	eb04 0903 	add.w	r9, r4, r3
 8004fa6:	f000 f98d 	bl	80052c4 <_sbrk_r>
 8004faa:	4581      	cmp	r9, r0
 8004fac:	d13f      	bne.n	800502e <_malloc_r+0xe6>
 8004fae:	6821      	ldr	r1, [r4, #0]
 8004fb0:	1a6d      	subs	r5, r5, r1
 8004fb2:	4629      	mov	r1, r5
 8004fb4:	4638      	mov	r0, r7
 8004fb6:	f7ff ffa7 	bl	8004f08 <sbrk_aligned>
 8004fba:	3001      	adds	r0, #1
 8004fbc:	d037      	beq.n	800502e <_malloc_r+0xe6>
 8004fbe:	6823      	ldr	r3, [r4, #0]
 8004fc0:	442b      	add	r3, r5
 8004fc2:	6023      	str	r3, [r4, #0]
 8004fc4:	f8d8 3000 	ldr.w	r3, [r8]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d038      	beq.n	800503e <_malloc_r+0xf6>
 8004fcc:	685a      	ldr	r2, [r3, #4]
 8004fce:	42a2      	cmp	r2, r4
 8004fd0:	d12b      	bne.n	800502a <_malloc_r+0xe2>
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	605a      	str	r2, [r3, #4]
 8004fd6:	e00f      	b.n	8004ff8 <_malloc_r+0xb0>
 8004fd8:	6822      	ldr	r2, [r4, #0]
 8004fda:	1b52      	subs	r2, r2, r5
 8004fdc:	d41f      	bmi.n	800501e <_malloc_r+0xd6>
 8004fde:	2a0b      	cmp	r2, #11
 8004fe0:	d917      	bls.n	8005012 <_malloc_r+0xca>
 8004fe2:	1961      	adds	r1, r4, r5
 8004fe4:	42a3      	cmp	r3, r4
 8004fe6:	6025      	str	r5, [r4, #0]
 8004fe8:	bf18      	it	ne
 8004fea:	6059      	strne	r1, [r3, #4]
 8004fec:	6863      	ldr	r3, [r4, #4]
 8004fee:	bf08      	it	eq
 8004ff0:	f8c8 1000 	streq.w	r1, [r8]
 8004ff4:	5162      	str	r2, [r4, r5]
 8004ff6:	604b      	str	r3, [r1, #4]
 8004ff8:	4638      	mov	r0, r7
 8004ffa:	f104 060b 	add.w	r6, r4, #11
 8004ffe:	f000 f829 	bl	8005054 <__malloc_unlock>
 8005002:	f026 0607 	bic.w	r6, r6, #7
 8005006:	1d23      	adds	r3, r4, #4
 8005008:	1af2      	subs	r2, r6, r3
 800500a:	d0ae      	beq.n	8004f6a <_malloc_r+0x22>
 800500c:	1b9b      	subs	r3, r3, r6
 800500e:	50a3      	str	r3, [r4, r2]
 8005010:	e7ab      	b.n	8004f6a <_malloc_r+0x22>
 8005012:	42a3      	cmp	r3, r4
 8005014:	6862      	ldr	r2, [r4, #4]
 8005016:	d1dd      	bne.n	8004fd4 <_malloc_r+0x8c>
 8005018:	f8c8 2000 	str.w	r2, [r8]
 800501c:	e7ec      	b.n	8004ff8 <_malloc_r+0xb0>
 800501e:	4623      	mov	r3, r4
 8005020:	6864      	ldr	r4, [r4, #4]
 8005022:	e7ac      	b.n	8004f7e <_malloc_r+0x36>
 8005024:	4634      	mov	r4, r6
 8005026:	6876      	ldr	r6, [r6, #4]
 8005028:	e7b4      	b.n	8004f94 <_malloc_r+0x4c>
 800502a:	4613      	mov	r3, r2
 800502c:	e7cc      	b.n	8004fc8 <_malloc_r+0x80>
 800502e:	230c      	movs	r3, #12
 8005030:	603b      	str	r3, [r7, #0]
 8005032:	4638      	mov	r0, r7
 8005034:	f000 f80e 	bl	8005054 <__malloc_unlock>
 8005038:	e797      	b.n	8004f6a <_malloc_r+0x22>
 800503a:	6025      	str	r5, [r4, #0]
 800503c:	e7dc      	b.n	8004ff8 <_malloc_r+0xb0>
 800503e:	605b      	str	r3, [r3, #4]
 8005040:	deff      	udf	#255	; 0xff
 8005042:	bf00      	nop
 8005044:	20000348 	.word	0x20000348

08005048 <__malloc_lock>:
 8005048:	4801      	ldr	r0, [pc, #4]	; (8005050 <__malloc_lock+0x8>)
 800504a:	f7ff bf0e 	b.w	8004e6a <__retarget_lock_acquire_recursive>
 800504e:	bf00      	nop
 8005050:	20000344 	.word	0x20000344

08005054 <__malloc_unlock>:
 8005054:	4801      	ldr	r0, [pc, #4]	; (800505c <__malloc_unlock+0x8>)
 8005056:	f7ff bf09 	b.w	8004e6c <__retarget_lock_release_recursive>
 800505a:	bf00      	nop
 800505c:	20000344 	.word	0x20000344

08005060 <__sflush_r>:
 8005060:	898a      	ldrh	r2, [r1, #12]
 8005062:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005066:	4605      	mov	r5, r0
 8005068:	0710      	lsls	r0, r2, #28
 800506a:	460c      	mov	r4, r1
 800506c:	d458      	bmi.n	8005120 <__sflush_r+0xc0>
 800506e:	684b      	ldr	r3, [r1, #4]
 8005070:	2b00      	cmp	r3, #0
 8005072:	dc05      	bgt.n	8005080 <__sflush_r+0x20>
 8005074:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005076:	2b00      	cmp	r3, #0
 8005078:	dc02      	bgt.n	8005080 <__sflush_r+0x20>
 800507a:	2000      	movs	r0, #0
 800507c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005080:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005082:	2e00      	cmp	r6, #0
 8005084:	d0f9      	beq.n	800507a <__sflush_r+0x1a>
 8005086:	2300      	movs	r3, #0
 8005088:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800508c:	682f      	ldr	r7, [r5, #0]
 800508e:	6a21      	ldr	r1, [r4, #32]
 8005090:	602b      	str	r3, [r5, #0]
 8005092:	d032      	beq.n	80050fa <__sflush_r+0x9a>
 8005094:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005096:	89a3      	ldrh	r3, [r4, #12]
 8005098:	075a      	lsls	r2, r3, #29
 800509a:	d505      	bpl.n	80050a8 <__sflush_r+0x48>
 800509c:	6863      	ldr	r3, [r4, #4]
 800509e:	1ac0      	subs	r0, r0, r3
 80050a0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80050a2:	b10b      	cbz	r3, 80050a8 <__sflush_r+0x48>
 80050a4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80050a6:	1ac0      	subs	r0, r0, r3
 80050a8:	2300      	movs	r3, #0
 80050aa:	4602      	mov	r2, r0
 80050ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80050ae:	6a21      	ldr	r1, [r4, #32]
 80050b0:	4628      	mov	r0, r5
 80050b2:	47b0      	blx	r6
 80050b4:	1c43      	adds	r3, r0, #1
 80050b6:	89a3      	ldrh	r3, [r4, #12]
 80050b8:	d106      	bne.n	80050c8 <__sflush_r+0x68>
 80050ba:	6829      	ldr	r1, [r5, #0]
 80050bc:	291d      	cmp	r1, #29
 80050be:	d82b      	bhi.n	8005118 <__sflush_r+0xb8>
 80050c0:	4a29      	ldr	r2, [pc, #164]	; (8005168 <__sflush_r+0x108>)
 80050c2:	410a      	asrs	r2, r1
 80050c4:	07d6      	lsls	r6, r2, #31
 80050c6:	d427      	bmi.n	8005118 <__sflush_r+0xb8>
 80050c8:	2200      	movs	r2, #0
 80050ca:	6062      	str	r2, [r4, #4]
 80050cc:	04d9      	lsls	r1, r3, #19
 80050ce:	6922      	ldr	r2, [r4, #16]
 80050d0:	6022      	str	r2, [r4, #0]
 80050d2:	d504      	bpl.n	80050de <__sflush_r+0x7e>
 80050d4:	1c42      	adds	r2, r0, #1
 80050d6:	d101      	bne.n	80050dc <__sflush_r+0x7c>
 80050d8:	682b      	ldr	r3, [r5, #0]
 80050da:	b903      	cbnz	r3, 80050de <__sflush_r+0x7e>
 80050dc:	6560      	str	r0, [r4, #84]	; 0x54
 80050de:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80050e0:	602f      	str	r7, [r5, #0]
 80050e2:	2900      	cmp	r1, #0
 80050e4:	d0c9      	beq.n	800507a <__sflush_r+0x1a>
 80050e6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80050ea:	4299      	cmp	r1, r3
 80050ec:	d002      	beq.n	80050f4 <__sflush_r+0x94>
 80050ee:	4628      	mov	r0, r5
 80050f0:	f7ff febe 	bl	8004e70 <_free_r>
 80050f4:	2000      	movs	r0, #0
 80050f6:	6360      	str	r0, [r4, #52]	; 0x34
 80050f8:	e7c0      	b.n	800507c <__sflush_r+0x1c>
 80050fa:	2301      	movs	r3, #1
 80050fc:	4628      	mov	r0, r5
 80050fe:	47b0      	blx	r6
 8005100:	1c41      	adds	r1, r0, #1
 8005102:	d1c8      	bne.n	8005096 <__sflush_r+0x36>
 8005104:	682b      	ldr	r3, [r5, #0]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d0c5      	beq.n	8005096 <__sflush_r+0x36>
 800510a:	2b1d      	cmp	r3, #29
 800510c:	d001      	beq.n	8005112 <__sflush_r+0xb2>
 800510e:	2b16      	cmp	r3, #22
 8005110:	d101      	bne.n	8005116 <__sflush_r+0xb6>
 8005112:	602f      	str	r7, [r5, #0]
 8005114:	e7b1      	b.n	800507a <__sflush_r+0x1a>
 8005116:	89a3      	ldrh	r3, [r4, #12]
 8005118:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800511c:	81a3      	strh	r3, [r4, #12]
 800511e:	e7ad      	b.n	800507c <__sflush_r+0x1c>
 8005120:	690f      	ldr	r7, [r1, #16]
 8005122:	2f00      	cmp	r7, #0
 8005124:	d0a9      	beq.n	800507a <__sflush_r+0x1a>
 8005126:	0793      	lsls	r3, r2, #30
 8005128:	680e      	ldr	r6, [r1, #0]
 800512a:	bf08      	it	eq
 800512c:	694b      	ldreq	r3, [r1, #20]
 800512e:	600f      	str	r7, [r1, #0]
 8005130:	bf18      	it	ne
 8005132:	2300      	movne	r3, #0
 8005134:	eba6 0807 	sub.w	r8, r6, r7
 8005138:	608b      	str	r3, [r1, #8]
 800513a:	f1b8 0f00 	cmp.w	r8, #0
 800513e:	dd9c      	ble.n	800507a <__sflush_r+0x1a>
 8005140:	6a21      	ldr	r1, [r4, #32]
 8005142:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005144:	4643      	mov	r3, r8
 8005146:	463a      	mov	r2, r7
 8005148:	4628      	mov	r0, r5
 800514a:	47b0      	blx	r6
 800514c:	2800      	cmp	r0, #0
 800514e:	dc06      	bgt.n	800515e <__sflush_r+0xfe>
 8005150:	89a3      	ldrh	r3, [r4, #12]
 8005152:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005156:	81a3      	strh	r3, [r4, #12]
 8005158:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800515c:	e78e      	b.n	800507c <__sflush_r+0x1c>
 800515e:	4407      	add	r7, r0
 8005160:	eba8 0800 	sub.w	r8, r8, r0
 8005164:	e7e9      	b.n	800513a <__sflush_r+0xda>
 8005166:	bf00      	nop
 8005168:	dfbffffe 	.word	0xdfbffffe

0800516c <_fflush_r>:
 800516c:	b538      	push	{r3, r4, r5, lr}
 800516e:	690b      	ldr	r3, [r1, #16]
 8005170:	4605      	mov	r5, r0
 8005172:	460c      	mov	r4, r1
 8005174:	b913      	cbnz	r3, 800517c <_fflush_r+0x10>
 8005176:	2500      	movs	r5, #0
 8005178:	4628      	mov	r0, r5
 800517a:	bd38      	pop	{r3, r4, r5, pc}
 800517c:	b118      	cbz	r0, 8005186 <_fflush_r+0x1a>
 800517e:	6a03      	ldr	r3, [r0, #32]
 8005180:	b90b      	cbnz	r3, 8005186 <_fflush_r+0x1a>
 8005182:	f7ff fc8f 	bl	8004aa4 <__sinit>
 8005186:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d0f3      	beq.n	8005176 <_fflush_r+0xa>
 800518e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005190:	07d0      	lsls	r0, r2, #31
 8005192:	d404      	bmi.n	800519e <_fflush_r+0x32>
 8005194:	0599      	lsls	r1, r3, #22
 8005196:	d402      	bmi.n	800519e <_fflush_r+0x32>
 8005198:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800519a:	f7ff fe66 	bl	8004e6a <__retarget_lock_acquire_recursive>
 800519e:	4628      	mov	r0, r5
 80051a0:	4621      	mov	r1, r4
 80051a2:	f7ff ff5d 	bl	8005060 <__sflush_r>
 80051a6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80051a8:	07da      	lsls	r2, r3, #31
 80051aa:	4605      	mov	r5, r0
 80051ac:	d4e4      	bmi.n	8005178 <_fflush_r+0xc>
 80051ae:	89a3      	ldrh	r3, [r4, #12]
 80051b0:	059b      	lsls	r3, r3, #22
 80051b2:	d4e1      	bmi.n	8005178 <_fflush_r+0xc>
 80051b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80051b6:	f7ff fe59 	bl	8004e6c <__retarget_lock_release_recursive>
 80051ba:	e7dd      	b.n	8005178 <_fflush_r+0xc>

080051bc <__swhatbuf_r>:
 80051bc:	b570      	push	{r4, r5, r6, lr}
 80051be:	460c      	mov	r4, r1
 80051c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80051c4:	2900      	cmp	r1, #0
 80051c6:	b096      	sub	sp, #88	; 0x58
 80051c8:	4615      	mov	r5, r2
 80051ca:	461e      	mov	r6, r3
 80051cc:	da0d      	bge.n	80051ea <__swhatbuf_r+0x2e>
 80051ce:	89a3      	ldrh	r3, [r4, #12]
 80051d0:	f013 0f80 	tst.w	r3, #128	; 0x80
 80051d4:	f04f 0100 	mov.w	r1, #0
 80051d8:	bf0c      	ite	eq
 80051da:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80051de:	2340      	movne	r3, #64	; 0x40
 80051e0:	2000      	movs	r0, #0
 80051e2:	6031      	str	r1, [r6, #0]
 80051e4:	602b      	str	r3, [r5, #0]
 80051e6:	b016      	add	sp, #88	; 0x58
 80051e8:	bd70      	pop	{r4, r5, r6, pc}
 80051ea:	466a      	mov	r2, sp
 80051ec:	f000 f848 	bl	8005280 <_fstat_r>
 80051f0:	2800      	cmp	r0, #0
 80051f2:	dbec      	blt.n	80051ce <__swhatbuf_r+0x12>
 80051f4:	9901      	ldr	r1, [sp, #4]
 80051f6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80051fa:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80051fe:	4259      	negs	r1, r3
 8005200:	4159      	adcs	r1, r3
 8005202:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005206:	e7eb      	b.n	80051e0 <__swhatbuf_r+0x24>

08005208 <__smakebuf_r>:
 8005208:	898b      	ldrh	r3, [r1, #12]
 800520a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800520c:	079d      	lsls	r5, r3, #30
 800520e:	4606      	mov	r6, r0
 8005210:	460c      	mov	r4, r1
 8005212:	d507      	bpl.n	8005224 <__smakebuf_r+0x1c>
 8005214:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005218:	6023      	str	r3, [r4, #0]
 800521a:	6123      	str	r3, [r4, #16]
 800521c:	2301      	movs	r3, #1
 800521e:	6163      	str	r3, [r4, #20]
 8005220:	b002      	add	sp, #8
 8005222:	bd70      	pop	{r4, r5, r6, pc}
 8005224:	ab01      	add	r3, sp, #4
 8005226:	466a      	mov	r2, sp
 8005228:	f7ff ffc8 	bl	80051bc <__swhatbuf_r>
 800522c:	9900      	ldr	r1, [sp, #0]
 800522e:	4605      	mov	r5, r0
 8005230:	4630      	mov	r0, r6
 8005232:	f7ff fe89 	bl	8004f48 <_malloc_r>
 8005236:	b948      	cbnz	r0, 800524c <__smakebuf_r+0x44>
 8005238:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800523c:	059a      	lsls	r2, r3, #22
 800523e:	d4ef      	bmi.n	8005220 <__smakebuf_r+0x18>
 8005240:	f023 0303 	bic.w	r3, r3, #3
 8005244:	f043 0302 	orr.w	r3, r3, #2
 8005248:	81a3      	strh	r3, [r4, #12]
 800524a:	e7e3      	b.n	8005214 <__smakebuf_r+0xc>
 800524c:	89a3      	ldrh	r3, [r4, #12]
 800524e:	6020      	str	r0, [r4, #0]
 8005250:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005254:	81a3      	strh	r3, [r4, #12]
 8005256:	9b00      	ldr	r3, [sp, #0]
 8005258:	6163      	str	r3, [r4, #20]
 800525a:	9b01      	ldr	r3, [sp, #4]
 800525c:	6120      	str	r0, [r4, #16]
 800525e:	b15b      	cbz	r3, 8005278 <__smakebuf_r+0x70>
 8005260:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005264:	4630      	mov	r0, r6
 8005266:	f000 f81d 	bl	80052a4 <_isatty_r>
 800526a:	b128      	cbz	r0, 8005278 <__smakebuf_r+0x70>
 800526c:	89a3      	ldrh	r3, [r4, #12]
 800526e:	f023 0303 	bic.w	r3, r3, #3
 8005272:	f043 0301 	orr.w	r3, r3, #1
 8005276:	81a3      	strh	r3, [r4, #12]
 8005278:	89a3      	ldrh	r3, [r4, #12]
 800527a:	431d      	orrs	r5, r3
 800527c:	81a5      	strh	r5, [r4, #12]
 800527e:	e7cf      	b.n	8005220 <__smakebuf_r+0x18>

08005280 <_fstat_r>:
 8005280:	b538      	push	{r3, r4, r5, lr}
 8005282:	4d07      	ldr	r5, [pc, #28]	; (80052a0 <_fstat_r+0x20>)
 8005284:	2300      	movs	r3, #0
 8005286:	4604      	mov	r4, r0
 8005288:	4608      	mov	r0, r1
 800528a:	4611      	mov	r1, r2
 800528c:	602b      	str	r3, [r5, #0]
 800528e:	f7fb fdd8 	bl	8000e42 <_fstat>
 8005292:	1c43      	adds	r3, r0, #1
 8005294:	d102      	bne.n	800529c <_fstat_r+0x1c>
 8005296:	682b      	ldr	r3, [r5, #0]
 8005298:	b103      	cbz	r3, 800529c <_fstat_r+0x1c>
 800529a:	6023      	str	r3, [r4, #0]
 800529c:	bd38      	pop	{r3, r4, r5, pc}
 800529e:	bf00      	nop
 80052a0:	20000340 	.word	0x20000340

080052a4 <_isatty_r>:
 80052a4:	b538      	push	{r3, r4, r5, lr}
 80052a6:	4d06      	ldr	r5, [pc, #24]	; (80052c0 <_isatty_r+0x1c>)
 80052a8:	2300      	movs	r3, #0
 80052aa:	4604      	mov	r4, r0
 80052ac:	4608      	mov	r0, r1
 80052ae:	602b      	str	r3, [r5, #0]
 80052b0:	f7fb fdd7 	bl	8000e62 <_isatty>
 80052b4:	1c43      	adds	r3, r0, #1
 80052b6:	d102      	bne.n	80052be <_isatty_r+0x1a>
 80052b8:	682b      	ldr	r3, [r5, #0]
 80052ba:	b103      	cbz	r3, 80052be <_isatty_r+0x1a>
 80052bc:	6023      	str	r3, [r4, #0]
 80052be:	bd38      	pop	{r3, r4, r5, pc}
 80052c0:	20000340 	.word	0x20000340

080052c4 <_sbrk_r>:
 80052c4:	b538      	push	{r3, r4, r5, lr}
 80052c6:	4d06      	ldr	r5, [pc, #24]	; (80052e0 <_sbrk_r+0x1c>)
 80052c8:	2300      	movs	r3, #0
 80052ca:	4604      	mov	r4, r0
 80052cc:	4608      	mov	r0, r1
 80052ce:	602b      	str	r3, [r5, #0]
 80052d0:	f7fb fde0 	bl	8000e94 <_sbrk>
 80052d4:	1c43      	adds	r3, r0, #1
 80052d6:	d102      	bne.n	80052de <_sbrk_r+0x1a>
 80052d8:	682b      	ldr	r3, [r5, #0]
 80052da:	b103      	cbz	r3, 80052de <_sbrk_r+0x1a>
 80052dc:	6023      	str	r3, [r4, #0]
 80052de:	bd38      	pop	{r3, r4, r5, pc}
 80052e0:	20000340 	.word	0x20000340

080052e4 <_init>:
 80052e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052e6:	bf00      	nop
 80052e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052ea:	bc08      	pop	{r3}
 80052ec:	469e      	mov	lr, r3
 80052ee:	4770      	bx	lr

080052f0 <_fini>:
 80052f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052f2:	bf00      	nop
 80052f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052f6:	bc08      	pop	{r3}
 80052f8:	469e      	mov	lr, r3
 80052fa:	4770      	bx	lr
